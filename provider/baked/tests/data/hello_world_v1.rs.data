// @generated
/// Implement `DataProvider<HelloWorldV1>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 176B for the lookup data structure (27 data identifiers)
/// * 1100B[^1] for the actual data (27 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
///
/// This macro requires the following crates:
/// * `alloc`
/// * `icu`
/// * `icu_provider`
/// * `icu_provider/baked`
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_hello_world_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.82"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.82"]
        impl $provider {
            pub const HELLO_WORLD_V1_BN: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("‡¶ì‡¶π‡ßá ‡¶¨‡¶ø‡¶∂\u{9cd}‡¶¨") };
            pub const HELLO_WORLD_V1_CS: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Ahoj svƒõte") };
            pub const HELLO_WORLD_V1_DE: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Hallo Welt") };
            pub const HELLO_WORLD_V1_DE_AT: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Servus Welt") };
            pub const HELLO_WORLD_V1_EL: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("ŒöŒ±ŒªŒ∑ŒºŒ≠œÅŒ± Œ∫œåœÉŒºŒµ") };
            pub const HELLO_WORLD_V1_EN: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Hello World") };
            pub const HELLO_WORLD_V1_EN_001: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Hello from üó∫\u{fe0f}") };
            pub const HELLO_WORLD_V1_EN_002: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Hello from üåç") };
            pub const HELLO_WORLD_V1_EN_019: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Hello from üåé") };
            pub const HELLO_WORLD_V1_EN_142: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Hello from üåè") };
            pub const HELLO_WORLD_V1_EN_GB: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Hello from üá¨üáß") };
            pub const HELLO_WORLD_V1_EN_GB_U_SD_GBENG: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Hello from üè¥\u{e0067}\u{e0062}\u{e0065}\u{e006e}\u{e0067}\u{e007f}") };
            pub const HELLO_WORLD_V1_EO: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Saluton, Mondo") };
            pub const HELLO_WORLD_V1_FA: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("ÿ≥ŸÑÿßŸÖ ÿØŸÜ€åÿß\u{200e}") };
            pub const HELLO_WORLD_V1_FI: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("hei maailma") };
            pub const HELLO_WORLD_V1_IS: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Hall√≥, heimur") };
            pub const HELLO_WORLD_V1_JA: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("„Åì„Çì„Å´„Å°„ÅØ‰∏ñÁïå") };
            pub const HELLO_WORLD_V1_LA: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Ave, munde") };
            pub const HELLO_WORLD_V1_PT: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Ol√°, mundo") };
            pub const HELLO_WORLD_V1_RO: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Salut, lume") };
            pub const HELLO_WORLD_V1_RU: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä") };
            pub const HELLO_WORLD_V1_SR: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("–ü–æ–∑–¥—Ä–∞–≤ —Å–≤–µ—Ç–µ") };
            pub const HELLO_WORLD_V1_SR_LATN: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Pozdrav svete") };
            pub const HELLO_WORLD_V1_VI: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Xin ch√†o th·∫ø gi·ªõi") };
            pub const HELLO_WORLD_V1_ZH: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("‰Ω†Â•Ω‰∏ñÁïå") };
            pub const HELLO_WORLD_V1_EN_REVERSE: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Olleh Dlrow") };
            pub const HELLO_WORLD_V1_JA_REVERSE: <icu_provider::hello_world::HelloWorldV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct = icu_provider::hello_world::HelloWorld { message: alloc::borrow::Cow::Borrowed("Áïå‰∏ñ„ÅØ„Å°„Å´„Çì„Åì") };
            const DATA_HELLO_WORLD_V1: icu_provider::baked::zerotrie::Data<icu_provider::hello_world::HelloWorldV1> = unsafe { icu_provider::baked::zerotrie::Data::from_trie_and_values_unchecked(icu_provider::baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xCDbcdefijlprsvz\x02\x04\nCIKX[^fpsn\x80s\x81e\x82-AT\x83\xC3lno\x012\x84\x85\xC2\x1E-\treverse\x90\t\xC301G\x0C\x0F\xC201\x06\xC212\x01\x86\x879\x8842\x89B\x8A-u-sd-gbeng\x8B\x8C\xC2ai\x01\x8D\x8Es\x8Fa\x90\0\x1Ereverse\x90\na\x90\x01t\x90\x02\xC2ou\x02\x90\x03\x90\x04r\x90\x05-Latn\x90\x06i\x90\x07h\x90\x08" }, &[Self::HELLO_WORLD_V1_BN, Self::HELLO_WORLD_V1_CS, Self::HELLO_WORLD_V1_DE, Self::HELLO_WORLD_V1_DE_AT, Self::HELLO_WORLD_V1_EL, Self::HELLO_WORLD_V1_EN, Self::HELLO_WORLD_V1_EN_001, Self::HELLO_WORLD_V1_EN_002, Self::HELLO_WORLD_V1_EN_019, Self::HELLO_WORLD_V1_EN_142, Self::HELLO_WORLD_V1_EN_GB, Self::HELLO_WORLD_V1_EN_GB_U_SD_GBENG, Self::HELLO_WORLD_V1_EO, Self::HELLO_WORLD_V1_FA, Self::HELLO_WORLD_V1_FI, Self::HELLO_WORLD_V1_IS, Self::HELLO_WORLD_V1_JA, Self::HELLO_WORLD_V1_LA, Self::HELLO_WORLD_V1_PT, Self::HELLO_WORLD_V1_RO, Self::HELLO_WORLD_V1_RU, Self::HELLO_WORLD_V1_SR, Self::HELLO_WORLD_V1_SR_LATN, Self::HELLO_WORLD_V1_VI, Self::HELLO_WORLD_V1_ZH, Self::HELLO_WORLD_V1_EN_REVERSE, Self::HELLO_WORLD_V1_JA_REVERSE]) };
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::DataProvider<icu_provider::hello_world::HelloWorldV1> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu_provider::hello_world::HelloWorldV1>, icu_provider::DataError> {
                let metadata = icu_provider::DataResponseMetadata::default().with_checksum(1234u64);
                let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_HELLO_WORLD_V1, req.id, req.metadata.attributes_prefix_match) else { return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu_provider::hello_world::HelloWorldV1 as icu_provider::DataMarker>::INFO, req)) };
                Ok(icu_provider::DataResponse { payload, metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_hello_world_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu_provider::hello_world::HelloWorldV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider::baked::DataStore::iter(&Self::DATA_HELLO_WORLD_V1).collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_hello_world_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::DryDataProvider<icu_provider::hello_world::HelloWorldV1> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                icu_provider::DataProvider::<icu_provider::hello_world::HelloWorldV1>::load(self, req).map(|r| r.metadata)
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_hello_world_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::DryDataProvider<icu_provider::hello_world::HelloWorldV1> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                icu_provider::DataProvider::<icu_provider::hello_world::HelloWorldV1>::load(self, req).map(|r| r.metadata)
            }
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu_provider::hello_world::HelloWorldV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider::baked::DataStore::iter(&Self::DATA_HELLO_WORLD_V1).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_hello_world_v1 as impl_hello_world_v1;
