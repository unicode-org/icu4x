// @generated
/// Implement `DataProvider<HelloWorldV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 869B[^1] for the lookup data structure (27 data identifiers)
/// * 1100B[^1] for the actual data (27 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_hello_world_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_HELLO_WORLD_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::AttributesAndLocale<7usize, 16usize>, icu_provider::hello_world::HelloWorldV1Marker> = icu_provider_baked::binary_search::Data(
                {
                    use icu_provider_baked::binary_search::tinystr::tinystr;
                    &[(tinystr!(7usize, ""), tinystr!(16usize, "bn")), (tinystr!(7usize, ""), tinystr!(16usize, "cs")), (tinystr!(7usize, ""), tinystr!(16usize, "de")), (tinystr!(7usize, ""), tinystr!(16usize, "de-AT")), (tinystr!(7usize, ""), tinystr!(16usize, "el")), (tinystr!(7usize, ""), tinystr!(16usize, "en")), (tinystr!(7usize, ""), tinystr!(16usize, "en-001")), (tinystr!(7usize, ""), tinystr!(16usize, "en-002")), (tinystr!(7usize, ""), tinystr!(16usize, "en-019")), (tinystr!(7usize, ""), tinystr!(16usize, "en-142")), (tinystr!(7usize, ""), tinystr!(16usize, "en-GB")), (tinystr!(7usize, ""), tinystr!(16usize, "en-GB-u-sd-gbeng")), (tinystr!(7usize, ""), tinystr!(16usize, "eo")), (tinystr!(7usize, ""), tinystr!(16usize, "fa")), (tinystr!(7usize, ""), tinystr!(16usize, "fi")), (tinystr!(7usize, ""), tinystr!(16usize, "is")), (tinystr!(7usize, ""), tinystr!(16usize, "ja")), (tinystr!(7usize, ""), tinystr!(16usize, "la")), (tinystr!(7usize, ""), tinystr!(16usize, "pt")), (tinystr!(7usize, ""), tinystr!(16usize, "ro")), (tinystr!(7usize, ""), tinystr!(16usize, "ru")), (tinystr!(7usize, ""), tinystr!(16usize, "sr")), (tinystr!(7usize, ""), tinystr!(16usize, "sr-Latn")), (tinystr!(7usize, ""), tinystr!(16usize, "vi")), (tinystr!(7usize, ""), tinystr!(16usize, "zh")), (tinystr!(7usize, "reverse"), tinystr!(16usize, "en")), (tinystr!(7usize, "reverse"), tinystr!(16usize, "ja"))]
                },
                {
                    type S = <icu_provider::hello_world::HelloWorldV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                    const _REVERSE_EN: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Olleh Dlrow") };
                    const _REVERSE_JA: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Áïå‰∏ñ„ÅØ„Å°„Å´„Çì„Åì") };
                    const __BN: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("‡¶ì‡¶π‡ßá ‡¶¨‡¶ø‡¶∂\u{9cd}‡¶¨") };
                    const __CS: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Ahoj svƒõte") };
                    const __DE: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hallo Welt") };
                    const __DE_AT: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Servus Welt") };
                    const __EL: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("ŒöŒ±ŒªŒ∑ŒºŒ≠œÅŒ± Œ∫œåœÉŒºŒµ") };
                    const __EN: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello World") };
                    const __EN_001: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello from üó∫\u{fe0f}") };
                    const __EN_002: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello from üåç") };
                    const __EN_019: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello from üåé") };
                    const __EN_142: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello from üåè") };
                    const __EN_GB: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello from üá¨üáß") };
                    const __EN_GB_U_SD_GBENG: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello from üè¥\u{e0067}\u{e0062}\u{e0065}\u{e006e}\u{e0067}\u{e007f}") };
                    const __EO: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Saluton, Mondo") };
                    const __FA: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("ÿ≥ŸÑÿßŸÖ ÿØŸÜ€åÿß\u{200e}") };
                    const __FI: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("hei maailma") };
                    const __IS: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hall√≥, heimur") };
                    const __JA: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("„Åì„Çì„Å´„Å°„ÅØ‰∏ñÁïå") };
                    const __LA: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Ave, munde") };
                    const __PT: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Ol√°, mundo") };
                    const __RO: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Salut, lume") };
                    const __RU: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä") };
                    const __SR: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("–ü–æ–∑–¥—Ä–∞–≤ —Å–≤–µ—Ç–µ") };
                    const __SR_LATN: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Pozdrav svete") };
                    const __VI: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Xin ch√†o th·∫ø gi·ªõi") };
                    const __ZH: &S = &icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("‰Ω†Â•Ω‰∏ñÁïå") };
                    &[__BN, __CS, __DE, __DE_AT, __EL, __EN, __EN_001, __EN_002, __EN_019, __EN_142, __EN_GB, __EN_GB_U_SD_GBENG, __EO, __FA, __FI, __IS, __JA, __LA, __PT, __RO, __RU, __SR, __SR_LATN, __VI, __ZH, _REVERSE_EN, _REVERSE_JA]
                },
            );
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu_provider::hello_world::HelloWorldV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu_provider::hello_world::HelloWorldV1Marker>, icu_provider::DataError> {
                let metadata = Default::default();
                let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_HELLO_WORLD_V1_MARKER, req.id) else { return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu_provider::hello_world::HelloWorldV1Marker as icu_provider::DataMarker>::INFO, req)) };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_hello_world_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu_provider::hello_world::HelloWorldV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_HELLO_WORLD_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_hello_world_v1_marker as impl_hello_world_v1_marker;
