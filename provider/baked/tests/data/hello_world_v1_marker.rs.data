// @generated
/// Implement `DataProvider<HelloWorldV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 176B for the lookup data structure (27 data identifiers)
/// * 1100B[^1] for the actual data (27 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_hello_world_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_HELLO_WORLD_V1_MARKER: icu_provider_baked::zerotrie::Data<icu_provider::hello_world::HelloWorldV1Marker> = icu_provider_baked::zerotrie::Data { trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xCDbcdefijlprsvz\x02\x04\nBILX[^fpsn\x82s\x83e\x84-AT\x85\xC3lno\x011\x86\x87\xC2\x1E-\x08reverse\x80\xC301G\x0C\x0F\xC201\x06\xC212\x01\x88\x899\x8A42\x8BB\x8C-u-sd-gbeng\x8D\x8E\xC2ai\x01\x8F\x90\0s\x90\x01a\x90\x02\x1Ereverse\x81a\x90\x03t\x90\x04\xC2ou\x02\x90\x05\x90\x06r\x90\x07-Latn\x90\x08i\x90\th\x90\n" }, values: &[icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Olleh Dlrow") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Áïå‰∏ñ„ÅØ„Å°„Å´„Çì„Åì") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("‡¶ì‡¶π‡ßá ‡¶¨‡¶ø‡¶∂\u{9cd}‡¶¨") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Ahoj svƒõte") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hallo Welt") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Servus Welt") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("ŒöŒ±ŒªŒ∑ŒºŒ≠œÅŒ± Œ∫œåœÉŒºŒµ") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello World") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello from üó∫\u{fe0f}") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello from üåç") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello from üåé") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello from üåè") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello from üá¨üáß") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hello from üè¥\u{e0067}\u{e0062}\u{e0065}\u{e006e}\u{e0067}\u{e007f}") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Saluton, Mondo") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("ÿ≥ŸÑÿßŸÖ ÿØŸÜ€åÿß\u{200e}") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("hei maailma") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Hall√≥, heimur") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("„Åì„Çì„Å´„Å°„ÅØ‰∏ñÁïå") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Ave, munde") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Ol√°, mundo") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Salut, lume") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("–ü–æ–∑–¥—Ä–∞–≤ —Å–≤–µ—Ç–µ") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Pozdrav svete") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("Xin ch√†o th·∫ø gi·ªõi") }, icu_provider::hello_world::HelloWorldV1 { message: alloc::borrow::Cow::Borrowed("‰Ω†Â•Ω‰∏ñÁïå") }] };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu_provider::hello_world::HelloWorldV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu_provider::hello_world::HelloWorldV1Marker>, icu_provider::DataError> {
                let metadata = Default::default();
                let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_HELLO_WORLD_V1_MARKER, req.id) else { return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu_provider::hello_world::HelloWorldV1Marker as icu_provider::DataMarker>::INFO, req)) };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_hello_world_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu_provider::hello_world::HelloWorldV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_HELLO_WORLD_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_hello_world_v1_marker as impl_hello_world_v1_marker;
