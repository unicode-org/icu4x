// @generated
/// Implement `DataProvider<CollationFallbackSupplementV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_fallback_supplement_co_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.67"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_FALLBACK_SUPPLEMENT_CO_V1: &'static <icu::locid_transform::provider::CollationFallbackSupplementV1Marker as icu_provider::DataMarker>::Yokeable = &icu::locid_transform::provider::LocaleFallbackSupplementV1 {
                parents: unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x1E\0\0\0\0\0\x07\0\x0E\0\x15\0\x1C\0#\0*\x001\08\0?\0F\0N\0U\0\\\0c\0j\0q\0x\0\x82\0\x89\0\x90\0\x97\0\x9E\0\xA5\0\xAC\0\xAF\0\xB5\0\xBD\0\xC8\0\xD0\0az-Arabaz-Cyrlbs-Cyrlen-Dsrten-Shawff-Adlmff-Arabha-Arabhi-Latnkk-Arabkok-Latnku-Arabky-Arabky-Latnml-Arabmn-Mongpa-Arabsr-Cyrl-MEsr-Latnug-Cyrluz-Arabuz-Cyrlwo-Arabyo-Arabyueyue-CNyue-Hansyue-Hans-CNyue-Hantzh-Hant") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"az\0\0\0\0\0\0\0\0\0\0az\0\0\0\0\0\0\0\0\0\0bs\0\0\0\0\0\0\0\0\0\0en\0\0\0\0\0\0\0\0\0\0en\0\0\0\0\0\0\0\0\0\0ff\0\0\0\0\0\0\0\0\0\0ff\0\0\0\0\0\0\0\0\0\0ha\0\0\0\0\0\0\0\0\0\0hi\0\0\0\0\0\0\0\0\0\0kk\0\0\0\0\0\0\0\0\0\0kok\0\0\0\0\0\0\0\0\0ku\0\0\0\0\0\0\0\0\0\0ky\0\0\0\0\0\0\0\0\0\0ky\0\0\0\0\0\0\0\0\0\0ml\0\0\0\0\0\0\0\0\0\0mn\0\0\0\0\0\0\0\0\0\0pa\0\0\0\0\0\0\0\0\0\0sr\0\0\0\0\0\0\x01ME\0sr\0\0\0\0\0\0\0\0\0\0ug\0\0\0\0\0\0\0\0\0\0uz\0\0\0\0\0\0\0\0\0\0uz\0\0\0\0\0\0\0\0\0\0wo\0\0\0\0\0\0\0\0\0\0yo\0\0\0\0\0\0\0\0\0\0zh\0\x01Hant\0\0\0\0zh\0\x01Hans\0\0\0\0zh\0\x01Hans\0\0\0\0zh\0\x01Hans\0\0\0\0zh\0\x01Hant\0\0\0\0zh\0\0\0\0\0\0\0\0\0\0") })
                },
                unicode_extension_defaults: unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap2d::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"co") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x02\0\0\0") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x02\0zhzh-Hant") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x06\0pinyinstroke") })
                },
            };
        }
        #[clippy::msrv = "1.67"]
        impl icu_provider::DataProvider<icu::locid_transform::provider::CollationFallbackSupplementV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::locid_transform::provider::CollationFallbackSupplementV1Marker>, icu_provider::DataError> {
                if req.locale.is_empty() {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(Self::SINGLETON_FALLBACK_SUPPLEMENT_CO_V1)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::ExtraneousLocale.with_req(<icu::locid_transform::provider::CollationFallbackSupplementV1Marker as icu_provider::KeyedDataMarker>::KEY, req))
                }
            }
        }
    };
}
/// Implement `IterableDataProvider<CollationFallbackSupplementV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this key.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_fallback_supplement_co_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        impl icu_provider::datagen::IterableDataProvider<icu::locid_transform::provider::CollationFallbackSupplementV1Marker> for $provider {
            fn supported_locales(&self) -> Result<alloc::vec::Vec<icu_provider::DataLocale>, icu_provider::DataError> {
                Ok([icu_provider::DataLocale::default()].into())
            }
        }
    };
}
