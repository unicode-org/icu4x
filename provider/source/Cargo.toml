# This file is part of ICU4X. For terms of use, please see the file
# called LICENSE at the top level of the ICU4X source tree
# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

[package]
name = "icu_provider_source"
description = "A data provider based on CLDR and ICU data."
license = "Unicode-3.0"
include = [
    "data/**/*",
    "!data/debug/**/*",
    "src/**/*",
    "examples/**/*",
    "benches/**/*",
    "tests/**/*",
    "Cargo.toml",
    "LICENSE",
    "README.md",
]

authors.workspace = true
categories.workspace = true
edition.workspace = true
homepage.workspace = true
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[package.metadata.docs.rs]
all-features = true

[dependencies]

# ICU components
icu = { workspace = true, features = ["datagen"] }

# ICU infrastructure
calendrical_calculations = { workspace = true }
icu_codepointtrie_builder = { workspace = true }
icu_collections = { workspace = true, features = ["serde"] }
icu_pattern = { workspace = true, features = ["alloc"] }
icu_provider = { workspace = true, features = ["std", "logging", "export"]}
icu_provider_adapters = { workspace = true }
icu_provider_registry = { workspace = true }
litemap = { workspace = true, features = ["serde"] }
tinystr = { workspace = true, features = ["alloc", "serde", "zerovec"] }
writeable = { workspace = true }
zerotrie = { workspace = true, features = ["alloc"] }
zerovec = { workspace = true, features = ["serde", "yoke"] }

# External dependencies
displaydoc = { workspace = true }
either = { workspace = true }
elsa = { workspace = true }
itertools = { workspace = true }
log = { workspace = true }
ndarray = { workspace = true }
serde = { workspace = true, features = ["derive", "alloc"] }
serde_json = { workspace = true }
serde-aux = { workspace = true }
toml = { workspace = true }
twox-hash = { workspace = true }
zip = { workspace = true, features = ["deflate"] }

# `networking` feature
ureq = { workspace = true, optional = true}

# `experimental` feature 
icu_experimental = { workspace = true, features = ["datagen"], optional = true }
num-bigint = { workspace = true, optional = true }
num-rational = { workspace = true, optional = true }
num-traits = { workspace = true, optional = true }

[dev-dependencies]
postcard = { workspace = true, features = ["alloc"] }
icu_provider_export = { workspace = true, features = ["fs_exporter", "baked_exporter", "rayon"] }
icu_provider = { workspace = true, features = ["deserialize_postcard_1"] }
icu_segmenter = { path = "../../components/segmenter", features = ["lstm"] }
simple_logger = { workspace = true }
icu = { path = "../../components/icu", default-features = false, features = ["experimental"] }

[features]
default = ["use_wasm", "networking"]
# Use wasm for building codepointtries
use_wasm = ["icu_codepointtrie_builder/wasm"]
# Use local ICU4C libraries for building codepointtries
# (will do nothing if used with `use_wasm`)
# If neither `use_wasm` nor `use_icu4c` are enabled,
# rule based segmenter data will not be generated.
use_icu4c = ["icu_codepointtrie_builder/icu4c"]
networking = ["dep:ureq"]
experimental = [
    "icu/experimental",
    "dep:num-bigint",
    "dep:num-rational",
    "dep:num-traits",
]

[package.metadata.cargo-all-features]
# We don't need working CPT builders for check
skip_feature_sets = [["use_icu4c"], ["use_wasm"]]
