// @generated
/// Implement `DataProvider<GregorianDateNeoSkeletonPatternsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 43042B[^1] for the lookup data structure (1955 data identifiers)
/// * 85677B[^1] for the actual data (868 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_gregorian_date_neo_skeleton_patterns_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_GREGORIAN_DATE_NEO_SKELETON_PATTERNS_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::AttributesAndLocale<6usize, 8usize>, icu::datetime::provider::neo::GregorianDateNeoSkeletonPatternsV1Marker> = icu_provider_baked::binary_search::Data(
                {
                    use icu_provider_baked::binary_search::tinystr::tinystr;
                    &[(tinystr!(6usize, "a1"), tinystr!(8usize, "af")), (tinystr!(6usize, "a1"), tinystr!(8usize, "am")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ar")), (tinystr!(6usize, "a1"), tinystr!(8usize, "as")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ast")), (tinystr!(6usize, "a1"), tinystr!(8usize, "az")), (tinystr!(6usize, "a1"), tinystr!(8usize, "be")), (tinystr!(6usize, "a1"), tinystr!(8usize, "bg")), (tinystr!(6usize, "a1"), tinystr!(8usize, "blo")), (tinystr!(6usize, "a1"), tinystr!(8usize, "bn")), (tinystr!(6usize, "a1"), tinystr!(8usize, "br")), (tinystr!(6usize, "a1"), tinystr!(8usize, "brx")), (tinystr!(6usize, "a1"), tinystr!(8usize, "bs")), (tinystr!(6usize, "a1"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ca")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "a1"), tinystr!(8usize, "chr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "cs")), (tinystr!(6usize, "a1"), tinystr!(8usize, "cv")), (tinystr!(6usize, "a1"), tinystr!(8usize, "cy")), (tinystr!(6usize, "a1"), tinystr!(8usize, "da")), (tinystr!(6usize, "a1"), tinystr!(8usize, "de")), (tinystr!(6usize, "a1"), tinystr!(8usize, "doi")), (tinystr!(6usize, "a1"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "a1"), tinystr!(8usize, "el")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-AU")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-BE")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-BW")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-BZ")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-CA")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-HK")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-MT")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-MV")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-PK")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-SE")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-SG")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-ZA")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-ZW")), (tinystr!(6usize, "a1"), tinystr!(8usize, "eo")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-BO")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-CL")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-CO")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-GT")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-HN")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-MX")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-PE")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-PR")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-US")), (tinystr!(6usize, "a1"), tinystr!(8usize, "et")), (tinystr!(6usize, "a1"), tinystr!(8usize, "eu")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fa")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fi")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fil")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fo")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fr-BE")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fy")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ga")), (tinystr!(6usize, "a1"), tinystr!(8usize, "gd")), (tinystr!(6usize, "a1"), tinystr!(8usize, "gl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "gu")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ha")), (tinystr!(6usize, "a1"), tinystr!(8usize, "he")), (tinystr!(6usize, "a1"), tinystr!(8usize, "hi")), (tinystr!(6usize, "a1"), tinystr!(8usize, "hi-Latn")), (tinystr!(6usize, "a1"), tinystr!(8usize, "hr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "hr-BA")), (tinystr!(6usize, "a1"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "a1"), tinystr!(8usize, "hu")), (tinystr!(6usize, "a1"), tinystr!(8usize, "hy")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ia")), (tinystr!(6usize, "a1"), tinystr!(8usize, "id")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ig")), (tinystr!(6usize, "a1"), tinystr!(8usize, "is")), (tinystr!(6usize, "a1"), tinystr!(8usize, "it")), (tinystr!(6usize, "a1"), tinystr!(8usize, "it-CH")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ja")), (tinystr!(6usize, "a1"), tinystr!(8usize, "jv")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ka")), (tinystr!(6usize, "a1"), tinystr!(8usize, "kea")), (tinystr!(6usize, "a1"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "a1"), tinystr!(8usize, "kk")), (tinystr!(6usize, "a1"), tinystr!(8usize, "km")), (tinystr!(6usize, "a1"), tinystr!(8usize, "kn")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ko")), (tinystr!(6usize, "a1"), tinystr!(8usize, "kok")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ks")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ks-Deva")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ku")), (tinystr!(6usize, "a1"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ky")), (tinystr!(6usize, "a1"), tinystr!(8usize, "lb")), (tinystr!(6usize, "a1"), tinystr!(8usize, "lo")), (tinystr!(6usize, "a1"), tinystr!(8usize, "lt")), (tinystr!(6usize, "a1"), tinystr!(8usize, "lv")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mai")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mi")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mk")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ml")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mn")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mni")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ms")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ms-ID")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mt")), (tinystr!(6usize, "a1"), tinystr!(8usize, "my")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ne")), (tinystr!(6usize, "a1"), tinystr!(8usize, "nl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "nl-BE")), (tinystr!(6usize, "a1"), tinystr!(8usize, "no")), (tinystr!(6usize, "a1"), tinystr!(8usize, "or")), (tinystr!(6usize, "a1"), tinystr!(8usize, "pa")), (tinystr!(6usize, "a1"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "a1"), tinystr!(8usize, "pl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ps")), (tinystr!(6usize, "a1"), tinystr!(8usize, "pt")), (tinystr!(6usize, "a1"), tinystr!(8usize, "pt-PT")), (tinystr!(6usize, "a1"), tinystr!(8usize, "qu")), (tinystr!(6usize, "a1"), tinystr!(8usize, "rm")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ro")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ru")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sa")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sah")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sat")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sc")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sk")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "so")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sq")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "a1"), tinystr!(8usize, "su")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sv")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sw")), (tinystr!(6usize, "a1"), tinystr!(8usize, "syr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ta")), (tinystr!(6usize, "a1"), tinystr!(8usize, "te")), (tinystr!(6usize, "a1"), tinystr!(8usize, "tg")), (tinystr!(6usize, "a1"), tinystr!(8usize, "th")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ti")), (tinystr!(6usize, "a1"), tinystr!(8usize, "tk")), (tinystr!(6usize, "a1"), tinystr!(8usize, "to")), (tinystr!(6usize, "a1"), tinystr!(8usize, "tr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "tt")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ug")), (tinystr!(6usize, "a1"), tinystr!(8usize, "uk")), (tinystr!(6usize, "a1"), tinystr!(8usize, "und")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ur")), (tinystr!(6usize, "a1"), tinystr!(8usize, "uz")), (tinystr!(6usize, "a1"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "vec")), (tinystr!(6usize, "a1"), tinystr!(8usize, "vi")), (tinystr!(6usize, "a1"), tinystr!(8usize, "wo")), (tinystr!(6usize, "a1"), tinystr!(8usize, "xh")), (tinystr!(6usize, "a1"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "yo")), (tinystr!(6usize, "a1"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "yue")), (tinystr!(6usize, "a1"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "a1"), tinystr!(8usize, "zh")), (tinystr!(6usize, "a1"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "a1"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "a1"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "a1"), tinystr!(8usize, "zh-SG")), (tinystr!(6usize, "a1"), tinystr!(8usize, "zu")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "af")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "am")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ar")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "as")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ast")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "az")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "be")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "bg")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "blo")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "bn")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "br")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "brx")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "bs")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ca")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "chr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "cs")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "cv")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "cy")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "da")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "de")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "doi")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "el")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-AU")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-BE")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-BW")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-BZ")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-CA")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-GB")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-IE")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-MT")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-MV")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-SE")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-ZA")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-ZW")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "eo")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es-419")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es-AR")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es-CL")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es-CO")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es-HN")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es-MX")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es-PR")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es-US")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "et")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "eu")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fa")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fa-AF")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fi")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fil")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fo")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fy")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ga")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "gd")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "gl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "gu")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ha")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "he")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "hi")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "hr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "hu")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "hy")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ia")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "id")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ig")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "is")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "it")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "it-CH")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ja")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "jv")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ka")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "kea")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "kk")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "km")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "kn")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ko")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "kok")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ks")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ks-Deva")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ku")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ky")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "lb")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "lo")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "lt")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "lv")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mai")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mi")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mk")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ml")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mn")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mni")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ms")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ms-BN")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ms-ID")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mt")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "my")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "nl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "nl-BE")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "no")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "or")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "pa")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "pl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ps")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "pt")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "pt-PT")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "qu")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "rm")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ro")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ru")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ru-UA")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sa")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sah")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sat")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sc")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sd")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "si")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sk")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "so")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sq")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "su")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sv")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sw")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "syr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ta")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "te")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "tg")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "th")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ti")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "tk")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "to")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "tr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "tt")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ug")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "uk")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "und")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ur")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "uz")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "vec")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "vi")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "wo")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "xh")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "yo")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "yue")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "zh")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "zh-SG")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "zu")), (tinystr!(6usize, "d"), tinystr!(8usize, "bs")), (tinystr!(6usize, "d"), tinystr!(8usize, "cs")), (tinystr!(6usize, "d"), tinystr!(8usize, "da")), (tinystr!(6usize, "d"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "d"), tinystr!(8usize, "fo")), (tinystr!(6usize, "d"), tinystr!(8usize, "hr")), (tinystr!(6usize, "d"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "d"), tinystr!(8usize, "ja")), (tinystr!(6usize, "d"), tinystr!(8usize, "ko")), (tinystr!(6usize, "d"), tinystr!(8usize, "lt")), (tinystr!(6usize, "d"), tinystr!(8usize, "no")), (tinystr!(6usize, "d"), tinystr!(8usize, "sk")), (tinystr!(6usize, "d"), tinystr!(8usize, "sl")), (tinystr!(6usize, "d"), tinystr!(8usize, "und")), (tinystr!(6usize, "d"), tinystr!(8usize, "yue")), (tinystr!(6usize, "d"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "d"), tinystr!(8usize, "zh")), (tinystr!(6usize, "d"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "de"), tinystr!(8usize, "af")), (tinystr!(6usize, "de"), tinystr!(8usize, "am")), (tinystr!(6usize, "de"), tinystr!(8usize, "ar")), (tinystr!(6usize, "de"), tinystr!(8usize, "as")), (tinystr!(6usize, "de"), tinystr!(8usize, "ast")), (tinystr!(6usize, "de"), tinystr!(8usize, "az")), (tinystr!(6usize, "de"), tinystr!(8usize, "bg")), (tinystr!(6usize, "de"), tinystr!(8usize, "blo")), (tinystr!(6usize, "de"), tinystr!(8usize, "bn")), (tinystr!(6usize, "de"), tinystr!(8usize, "br")), (tinystr!(6usize, "de"), tinystr!(8usize, "bs")), (tinystr!(6usize, "de"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "de"), tinystr!(8usize, "ca")), (tinystr!(6usize, "de"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "de"), tinystr!(8usize, "chr")), (tinystr!(6usize, "de"), tinystr!(8usize, "cs")), (tinystr!(6usize, "de"), tinystr!(8usize, "cv")), (tinystr!(6usize, "de"), tinystr!(8usize, "da")), (tinystr!(6usize, "de"), tinystr!(8usize, "de")), (tinystr!(6usize, "de"), tinystr!(8usize, "doi")), (tinystr!(6usize, "de"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "de"), tinystr!(8usize, "el")), (tinystr!(6usize, "de"), tinystr!(8usize, "en")), (tinystr!(6usize, "de"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "de"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "de"), tinystr!(8usize, "en-CA")), (tinystr!(6usize, "de"), tinystr!(8usize, "es")), (tinystr!(6usize, "de"), tinystr!(8usize, "et")), (tinystr!(6usize, "de"), tinystr!(8usize, "fa")), (tinystr!(6usize, "de"), tinystr!(8usize, "fa-AF")), (tinystr!(6usize, "de"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "de"), tinystr!(8usize, "fi")), (tinystr!(6usize, "de"), tinystr!(8usize, "fil")), (tinystr!(6usize, "de"), tinystr!(8usize, "fo")), (tinystr!(6usize, "de"), tinystr!(8usize, "fr")), (tinystr!(6usize, "de"), tinystr!(8usize, "ga")), (tinystr!(6usize, "de"), tinystr!(8usize, "gd")), (tinystr!(6usize, "de"), tinystr!(8usize, "gl")), (tinystr!(6usize, "de"), tinystr!(8usize, "gu")), (tinystr!(6usize, "de"), tinystr!(8usize, "ha")), (tinystr!(6usize, "de"), tinystr!(8usize, "he")), (tinystr!(6usize, "de"), tinystr!(8usize, "hi")), (tinystr!(6usize, "de"), tinystr!(8usize, "hr")), (tinystr!(6usize, "de"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "de"), tinystr!(8usize, "hu")), (tinystr!(6usize, "de"), tinystr!(8usize, "hy")), (tinystr!(6usize, "de"), tinystr!(8usize, "ia")), (tinystr!(6usize, "de"), tinystr!(8usize, "id")), (tinystr!(6usize, "de"), tinystr!(8usize, "is")), (tinystr!(6usize, "de"), tinystr!(8usize, "it")), (tinystr!(6usize, "de"), tinystr!(8usize, "ja")), (tinystr!(6usize, "de"), tinystr!(8usize, "jv")), (tinystr!(6usize, "de"), tinystr!(8usize, "ka")), (tinystr!(6usize, "de"), tinystr!(8usize, "kea")), (tinystr!(6usize, "de"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "de"), tinystr!(8usize, "km")), (tinystr!(6usize, "de"), tinystr!(8usize, "kn")), (tinystr!(6usize, "de"), tinystr!(8usize, "ko")), (tinystr!(6usize, "de"), tinystr!(8usize, "ks")), (tinystr!(6usize, "de"), tinystr!(8usize, "ku")), (tinystr!(6usize, "de"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "de"), tinystr!(8usize, "lb")), (tinystr!(6usize, "de"), tinystr!(8usize, "lo")), (tinystr!(6usize, "de"), tinystr!(8usize, "lv")), (tinystr!(6usize, "de"), tinystr!(8usize, "mai")), (tinystr!(6usize, "de"), tinystr!(8usize, "mi")), (tinystr!(6usize, "de"), tinystr!(8usize, "mk")), (tinystr!(6usize, "de"), tinystr!(8usize, "mn")), (tinystr!(6usize, "de"), tinystr!(8usize, "mr")), (tinystr!(6usize, "de"), tinystr!(8usize, "ms")), (tinystr!(6usize, "de"), tinystr!(8usize, "my")), (tinystr!(6usize, "de"), tinystr!(8usize, "ne")), (tinystr!(6usize, "de"), tinystr!(8usize, "nl")), (tinystr!(6usize, "de"), tinystr!(8usize, "no")), (tinystr!(6usize, "de"), tinystr!(8usize, "or")), (tinystr!(6usize, "de"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "de"), tinystr!(8usize, "pl")), (tinystr!(6usize, "de"), tinystr!(8usize, "pt")), (tinystr!(6usize, "de"), tinystr!(8usize, "rm")), (tinystr!(6usize, "de"), tinystr!(8usize, "ro")), (tinystr!(6usize, "de"), tinystr!(8usize, "ru")), (tinystr!(6usize, "de"), tinystr!(8usize, "sa")), (tinystr!(6usize, "de"), tinystr!(8usize, "sc")), (tinystr!(6usize, "de"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "de"), tinystr!(8usize, "si")), (tinystr!(6usize, "de"), tinystr!(8usize, "sk")), (tinystr!(6usize, "de"), tinystr!(8usize, "sl")), (tinystr!(6usize, "de"), tinystr!(8usize, "sq")), (tinystr!(6usize, "de"), tinystr!(8usize, "sr")), (tinystr!(6usize, "de"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "de"), tinystr!(8usize, "su")), (tinystr!(6usize, "de"), tinystr!(8usize, "sv")), (tinystr!(6usize, "de"), tinystr!(8usize, "sw")), (tinystr!(6usize, "de"), tinystr!(8usize, "syr")), (tinystr!(6usize, "de"), tinystr!(8usize, "ta")), (tinystr!(6usize, "de"), tinystr!(8usize, "th")), (tinystr!(6usize, "de"), tinystr!(8usize, "ti")), (tinystr!(6usize, "de"), tinystr!(8usize, "tk")), (tinystr!(6usize, "de"), tinystr!(8usize, "to")), (tinystr!(6usize, "de"), tinystr!(8usize, "tr")), (tinystr!(6usize, "de"), tinystr!(8usize, "ug")), (tinystr!(6usize, "de"), tinystr!(8usize, "uk")), (tinystr!(6usize, "de"), tinystr!(8usize, "und")), (tinystr!(6usize, "de"), tinystr!(8usize, "ur")), (tinystr!(6usize, "de"), tinystr!(8usize, "vec")), (tinystr!(6usize, "de"), tinystr!(8usize, "vi")), (tinystr!(6usize, "de"), tinystr!(8usize, "wo")), (tinystr!(6usize, "de"), tinystr!(8usize, "xh")), (tinystr!(6usize, "de"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "de"), tinystr!(8usize, "yo")), (tinystr!(6usize, "de"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "de"), tinystr!(8usize, "yue")), (tinystr!(6usize, "de"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "de"), tinystr!(8usize, "zh")), (tinystr!(6usize, "de"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "de"), tinystr!(8usize, "zu")), (tinystr!(6usize, "e"), tinystr!(8usize, "fr")), (tinystr!(6usize, "e"), tinystr!(8usize, "sr")), (tinystr!(6usize, "e"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "e"), tinystr!(8usize, "und")), (tinystr!(6usize, "gy"), tinystr!(8usize, "af")), (tinystr!(6usize, "gy"), tinystr!(8usize, "am")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ar")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ast")), (tinystr!(6usize, "gy"), tinystr!(8usize, "be")), (tinystr!(6usize, "gy"), tinystr!(8usize, "bg")), (tinystr!(6usize, "gy"), tinystr!(8usize, "blo")), (tinystr!(6usize, "gy"), tinystr!(8usize, "bn")), (tinystr!(6usize, "gy"), tinystr!(8usize, "br")), (tinystr!(6usize, "gy"), tinystr!(8usize, "brx")), (tinystr!(6usize, "gy"), tinystr!(8usize, "bs")), (tinystr!(6usize, "gy"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ca")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "gy"), tinystr!(8usize, "chr")), (tinystr!(6usize, "gy"), tinystr!(8usize, "cs")), (tinystr!(6usize, "gy"), tinystr!(8usize, "cv")), (tinystr!(6usize, "gy"), tinystr!(8usize, "cy")), (tinystr!(6usize, "gy"), tinystr!(8usize, "da")), (tinystr!(6usize, "gy"), tinystr!(8usize, "de")), (tinystr!(6usize, "gy"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "gy"), tinystr!(8usize, "el")), (tinystr!(6usize, "gy"), tinystr!(8usize, "en")), (tinystr!(6usize, "gy"), tinystr!(8usize, "es")), (tinystr!(6usize, "gy"), tinystr!(8usize, "et")), (tinystr!(6usize, "gy"), tinystr!(8usize, "fa")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "gy"), tinystr!(8usize, "fi")), (tinystr!(6usize, "gy"), tinystr!(8usize, "fil")), (tinystr!(6usize, "gy"), tinystr!(8usize, "fo")), (tinystr!(6usize, "gy"), tinystr!(8usize, "fr")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ga")), (tinystr!(6usize, "gy"), tinystr!(8usize, "gd")), (tinystr!(6usize, "gy"), tinystr!(8usize, "gl")), (tinystr!(6usize, "gy"), tinystr!(8usize, "he")), (tinystr!(6usize, "gy"), tinystr!(8usize, "hi")), (tinystr!(6usize, "gy"), tinystr!(8usize, "hi-Latn")), (tinystr!(6usize, "gy"), tinystr!(8usize, "hr")), (tinystr!(6usize, "gy"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "gy"), tinystr!(8usize, "hu")), (tinystr!(6usize, "gy"), tinystr!(8usize, "hy")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ia")), (tinystr!(6usize, "gy"), tinystr!(8usize, "id")), (tinystr!(6usize, "gy"), tinystr!(8usize, "is")), (tinystr!(6usize, "gy"), tinystr!(8usize, "it")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ja")), (tinystr!(6usize, "gy"), tinystr!(8usize, "jv")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ka")), (tinystr!(6usize, "gy"), tinystr!(8usize, "kea")), (tinystr!(6usize, "gy"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "gy"), tinystr!(8usize, "kk")), (tinystr!(6usize, "gy"), tinystr!(8usize, "km")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ko")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ks")), (tinystr!(6usize, "gy"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ky")), (tinystr!(6usize, "gy"), tinystr!(8usize, "lb")), (tinystr!(6usize, "gy"), tinystr!(8usize, "lt")), (tinystr!(6usize, "gy"), tinystr!(8usize, "lv")), (tinystr!(6usize, "gy"), tinystr!(8usize, "mai")), (tinystr!(6usize, "gy"), tinystr!(8usize, "mi")), (tinystr!(6usize, "gy"), tinystr!(8usize, "mk")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ms")), (tinystr!(6usize, "gy"), tinystr!(8usize, "nl")), (tinystr!(6usize, "gy"), tinystr!(8usize, "no")), (tinystr!(6usize, "gy"), tinystr!(8usize, "or")), (tinystr!(6usize, "gy"), tinystr!(8usize, "pl")), (tinystr!(6usize, "gy"), tinystr!(8usize, "pt")), (tinystr!(6usize, "gy"), tinystr!(8usize, "rm")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ro")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ru")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sa")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sah")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sc")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sk")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sl")), (tinystr!(6usize, "gy"), tinystr!(8usize, "so")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sq")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sr")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "gy"), tinystr!(8usize, "su")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sv")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sw")), (tinystr!(6usize, "gy"), tinystr!(8usize, "syr")), (tinystr!(6usize, "gy"), tinystr!(8usize, "tg")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ti")), (tinystr!(6usize, "gy"), tinystr!(8usize, "to")), (tinystr!(6usize, "gy"), tinystr!(8usize, "tt")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ug")), (tinystr!(6usize, "gy"), tinystr!(8usize, "uk")), (tinystr!(6usize, "gy"), tinystr!(8usize, "und")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ur")), (tinystr!(6usize, "gy"), tinystr!(8usize, "vec")), (tinystr!(6usize, "gy"), tinystr!(8usize, "vi")), (tinystr!(6usize, "gy"), tinystr!(8usize, "wo")), (tinystr!(6usize, "gy"), tinystr!(8usize, "xh")), (tinystr!(6usize, "gy"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "gy"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "gy"), tinystr!(8usize, "yue")), (tinystr!(6usize, "gy"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "gy"), tinystr!(8usize, "zh")), (tinystr!(6usize, "gy"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "af")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "am")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ar")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ast")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "az")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "be")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "bg")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "blo")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "bn")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "br")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "bs")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ca")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "chr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "cs")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "cv")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "cy")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "da")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "de")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "el")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "en")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "es")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "es-CO")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "et")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "eu")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "fa")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "fi")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "fil")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "fo")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "fr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "fy")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ga")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "gd")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "gl")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "gu")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "he")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "hi")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "hi-Latn")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "hr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "hu")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "hy")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ia")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "id")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ig")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "is")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "it")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ja")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "jv")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ka")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "kea")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "kk")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "km")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ko")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ks")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ku")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ky")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "lb")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "lo")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "lt")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "lv")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "mai")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "mi")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "mk")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "mn")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "mr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ms")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "mt")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "nl")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "no")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "or")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "pa")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "pl")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "pt")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "qu")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "rm")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ro")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ru")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sa")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sc")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sk")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sl")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "so")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sq")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "su")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sv")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sw")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "syr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "te")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "tg")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "th")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ti")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "tk")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "to")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "tr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "tt")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ug")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "uk")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "und")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ur")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "uz")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "vec")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "vi")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "wo")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "xh")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "yue")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "zh")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "af")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "am")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ar")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "as")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ast")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "az")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "be")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "bg")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "blo")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "bn")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "br")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "brx")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "bs")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ca")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "chr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "cs")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "cv")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "cy")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "da")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "de")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "doi")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "el")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "en")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "es")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "es-419")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "es-AR")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "es-CL")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "es-MX")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "es-US")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "et")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "eu")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fa")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fa-AF")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fi")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fil")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fo")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fy")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ga")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "gd")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "gl")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "gu")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "he")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "hi")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "hi-Latn")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "hr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "hu")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "hy")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ia")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "id")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ig")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "is")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "it")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ja")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "jv")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ka")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "kea")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "kk")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "km")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ko")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ks")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ku")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ky")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "lb")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "lo")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "lt")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "lv")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "mai")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "mi")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "mk")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ml")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "mn")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "mni")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "mr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ms")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "mt")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "my")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ne")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "nl")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "no")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "or")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "pa")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "pl")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ps")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "pt")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "qu")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "rm")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ro")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ru")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sa")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sc")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sd")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sk")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sl")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "so")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sq")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "su")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sv")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sw")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "syr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ta")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "te")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "tg")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "th")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ti")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "tk")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "to")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "tr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "tt")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ug")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "uk")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "und")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ur")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "uz")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "vec")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "vi")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "wo")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "xh")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "yo")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "yue")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "zh")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "zu")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "af")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ar")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ast")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "az")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "be")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "bg")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "blo")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "bn")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "br")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "brx")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "bs")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ca")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "chr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "cs")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "cv")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "cy")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "da")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "de")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "doi")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "el")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "en")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "en-AU")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "en-GB")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "es")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "es-AR")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "es-CO")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "et")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "eu")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "fa")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "fa-AF")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "fi")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "fil")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "fo")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "fr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "fy")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ga")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "gd")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "gl")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "gu")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "he")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "hi")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "hi-Latn")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "hr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "hu")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "hy")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ia")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "id")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ig")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "is")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "it")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ja")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "jv")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ka")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "kea")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "kk")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "km")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ko")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ks")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ku")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ky")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "lb")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "lo")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "lt")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "lv")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "mai")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "mi")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "mk")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "mn")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "mr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ms")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "mt")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "my")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "nl")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "no")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "or")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "pa")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "pl")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "pt")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "qu")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "rm")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ro")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ru")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sa")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sc")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sk")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sl")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "so")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sq")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "su")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sv")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sw")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "syr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "te")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "tg")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "th")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ti")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "tk")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "to")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "tr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "tt")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ug")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "uk")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "und")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ur")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "uz")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "vec")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "vi")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "wo")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "xh")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "yue")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "zh")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "m0"), tinystr!(8usize, "bg")), (tinystr!(6usize, "m0"), tinystr!(8usize, "br")), (tinystr!(6usize, "m0"), tinystr!(8usize, "da")), (tinystr!(6usize, "m0"), tinystr!(8usize, "el")), (tinystr!(6usize, "m0"), tinystr!(8usize, "et")), (tinystr!(6usize, "m0"), tinystr!(8usize, "fo")), (tinystr!(6usize, "m0"), tinystr!(8usize, "ga")), (tinystr!(6usize, "m0"), tinystr!(8usize, "hr")), (tinystr!(6usize, "m0"), tinystr!(8usize, "ja")), (tinystr!(6usize, "m0"), tinystr!(8usize, "ko")), (tinystr!(6usize, "m0"), tinystr!(8usize, "lt")), (tinystr!(6usize, "m0"), tinystr!(8usize, "mn")), (tinystr!(6usize, "m0"), tinystr!(8usize, "no")), (tinystr!(6usize, "m0"), tinystr!(8usize, "sk")), (tinystr!(6usize, "m0"), tinystr!(8usize, "uk")), (tinystr!(6usize, "m0"), tinystr!(8usize, "und")), (tinystr!(6usize, "m0"), tinystr!(8usize, "uz")), (tinystr!(6usize, "m0"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "m0"), tinystr!(8usize, "yue")), (tinystr!(6usize, "m0"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "m0"), tinystr!(8usize, "zh")), (tinystr!(6usize, "m0"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "m0"), tinystr!(8usize, "zh-SG")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "af")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "am")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ar")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "as")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ast")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "az")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "be")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "bg")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "blo")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "bn")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "br")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "brx")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "bs")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ca")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "chr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "cs")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "cv")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "cy")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "da")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "de")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "doi")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "el")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-AU")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-BE")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-BW")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-BZ")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-CA")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-IE")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-MT")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-NZ")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-ZA")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-ZW")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "es")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "es-CL")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "es-CO")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "es-PR")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "et")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "eu")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fa")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fa-AF")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fi")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fil")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fo")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fy")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ga")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "gd")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "gl")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "gu")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ha")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "he")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "hi")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "hr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "hu")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "hy")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ia")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "id")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ig")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "is")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "it")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ja")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "jv")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ka")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "kea")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "kk")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "km")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "kn")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ko")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "kok")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ks")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ku")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ky")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "lb")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "lo")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "lt")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "lv")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "mai")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "mi")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "mk")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ml")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "mn")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "mni")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "mr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ms")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "mt")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "my")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "nl")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "nl-BE")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "no")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "or")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "pa")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "pl")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "pt")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "pt-PT")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "qu")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "rm")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ro")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ru")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sa")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sc")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "si")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sk")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sl")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "so")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sq")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "su")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sv")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sv-FI")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sw")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "syr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ta")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "te")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "tg")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "th")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ti")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "tk")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "to")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "tr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "tt")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ug")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "uk")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "und")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ur")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "uz")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "vec")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "vi")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "wo")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "xh")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "yo")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "yue")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "zh")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "zh-SG")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "af")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "am")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ar")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "as")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ast")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "az")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "be")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "bg")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "blo")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "bn")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "br")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "brx")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "bs")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ca")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "chr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "cs")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "cv")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "cy")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "da")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "de")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "doi")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "el")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-AU")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-BE")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-BW")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-BZ")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-CA")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-GB")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-IE")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-ZA")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-ZW")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es-AR")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es-CL")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es-CO")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es-MX")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es-PR")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es-US")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "et")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "eu")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fa")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fa-AF")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fi")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fil")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fo")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fy")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ga")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "gd")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "gl")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "gu")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ha")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "he")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "hi")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "hr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "hu")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "hy")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ia")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "id")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ig")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "is")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "it")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ja")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "jv")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ka")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "kea")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "kk")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "km")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "kn")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ko")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "kok")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ks")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ku")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ky")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "lb")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "lo")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "lt")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "lv")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "mai")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "mi")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "mk")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ml")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "mn")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "mni")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "mr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ms")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "mt")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "my")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "nl")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "nl-BE")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "no")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "or")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "pa")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "pl")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ps")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "pt")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "pt-PT")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "qu")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "rm")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ro")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ru")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sa")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sc")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "si")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sk")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sl")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "so")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sq")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "su")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sv")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sv-FI")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sw")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "syr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ta")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "te")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "tg")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "th")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ti")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "tk")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "to")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "tr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "tt")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ug")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "uk")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "und")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ur")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "uz")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "vec")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "vi")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "wo")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "xh")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "yo")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "yue")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "zh")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "zh-SG")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "zu")), (tinystr!(6usize, "y"), tinystr!(8usize, "bg")), (tinystr!(6usize, "y"), tinystr!(8usize, "bs")), (tinystr!(6usize, "y"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "y"), tinystr!(8usize, "hr")), (tinystr!(6usize, "y"), tinystr!(8usize, "hu")), (tinystr!(6usize, "y"), tinystr!(8usize, "ja")), (tinystr!(6usize, "y"), tinystr!(8usize, "ko")), (tinystr!(6usize, "y"), tinystr!(8usize, "lv")), (tinystr!(6usize, "y"), tinystr!(8usize, "sr")), (tinystr!(6usize, "y"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "y"), tinystr!(8usize, "und")), (tinystr!(6usize, "y"), tinystr!(8usize, "yue")), (tinystr!(6usize, "y"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "y"), tinystr!(8usize, "zh")), (tinystr!(6usize, "y"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "af")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ar")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "as")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ast")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "az")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "be")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "bg")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "blo")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "bn")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "br")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "bs")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ca")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "chr")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "cs")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "cv")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "cy")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "da")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "de")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "doi")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "el")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "es")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "et")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "eu")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "fa")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "fi")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "fil")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "fo")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "fr")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "fy")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ga")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "gd")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "gl")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "gu")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ha")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "he")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "hi")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "hi-Latn")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "hr")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "hu")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "hy")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ia")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "id")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ig")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "is")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "it")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ja")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "jv")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ka")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "kea")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "kk")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "km")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ko")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ks")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ku")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ky")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "lo")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "lt")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "lv")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "mi")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "mk")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ml")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "mn")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "mr")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "mt")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "my")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ne")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "nl")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "nn")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "no")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "or")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "pa")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "pl")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ps")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "pt")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "pt-PT")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "qu")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "rm")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ro")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ru")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "sah")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "sc")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "sd")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "si")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "sk")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "sl")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "so")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "sq")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "sr")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "sr-ME")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "sv")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "sw")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "syr")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ta")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "te")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "tg")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "th")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ti")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "tk")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "to")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "tr")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "tt")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ug")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "uk")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "und")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "ur")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "uz")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "vec")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "vi")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "yue")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "zh")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "af")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "am")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ar")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "as")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ast")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "az")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "be")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "bg")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "blo")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "bn")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "br")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "brx")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "bs")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ca")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "chr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "cs")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "cv")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "cy")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "da")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "de")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "doi")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "el")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "en")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "en-CA")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "en-SE")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "es")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "es-AR")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "es-CL")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "es-CO")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "es-PR")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "et")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "eu")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fa")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fa-AF")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fi")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fil")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fo")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fy")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ga")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "gd")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "gl")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "gu")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ha")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "he")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "hi")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "hr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "hu")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "hy")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ia")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "id")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ig")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "is")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "it")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ja")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "jv")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ka")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "kea")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "kk")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "km")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "kn")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ko")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "kok")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ks")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ku")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ky")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "lb")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "lo")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "lt")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "lv")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "mai")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "mi")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "mk")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "mn")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "mni")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "mr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ms")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "mt")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "my")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "nl")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "nl-BE")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "no")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "or")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "pa")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "pl")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "pt")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "pt-PT")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "qu")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "rm")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ro")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ru")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sa")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sc")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "si")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sk")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sl")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "so")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sq")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "su")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sv")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sw")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "syr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ta")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "te")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "tg")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "th")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ti")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "tk")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "to")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "tr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "tt")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ug")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "uk")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "und")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ur")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "uz")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "vec")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "vi")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "wo")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "xh")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "yo")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "yue")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "zh")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "zu")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "af")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "am")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ar")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "as")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ast")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "az")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "be")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "bg")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "blo")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "bn")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "br")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "brx")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "bs")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ca")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "chr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "cs")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "cv")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "cy")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "da")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "de")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "doi")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "el")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-BE")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-BW")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-BZ")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-CA")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-HK")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-IE")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-MT")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-NZ")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-SE")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-ZA")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-ZW")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "eo")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "es")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "es-AR")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "es-CL")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "es-CO")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "es-DO")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "es-PR")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "et")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "eu")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fa")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fa-AF")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fi")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fil")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fo")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fy")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ga")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "gd")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "gl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "gu")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ha")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "he")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "hi")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "hi-Latn")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "hr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "hu")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "hy")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ia")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "id")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ie")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ig")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "is")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "it")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ja")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "jv")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ka")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kea")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kk")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "km")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kn")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ko")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kok")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ks")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ks-Deva")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ku")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kxv-Deva")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kxv-Orya")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kxv-Telu")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ky")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "lb")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "lij")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "lmo")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "lo")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "lt")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "lv")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "mai")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "mi")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "mk")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ml")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "mn")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "mni")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "mr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ms")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "mt")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "my")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "nds")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "nl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "nl-BE")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "no")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "nqo")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "oc")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "or")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "pa")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "pl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "prg")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "pt")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "pt-PT")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "qu")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "rm")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ro")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ru")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sa")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sc")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "si")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sk")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "so")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sq")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "su")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sv")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sw")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "syr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "szl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ta")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "te")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "tg")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "th")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ti")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "tk")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "to")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "tr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "tt")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ug")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "uk")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "und")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ur")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "uz")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "vec")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "vi")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "vmw")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "wo")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "xh")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "yo")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "yue")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "za")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "zh")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "zh-SG")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "zu")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "af")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "am")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ar")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "as")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ast")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "az")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "be")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "bg")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "blo")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "bn")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "br")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "brx")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "bs")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ca")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "chr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "cs")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "cv")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "cy")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "da")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "de")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "doi")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "el")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-AU")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-BE")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-BW")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-BZ")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-CA")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-GB")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-IE")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-MT")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-SE")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-ZA")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-ZW")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "es")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "es-419")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "es-AR")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "es-CL")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "es-CO")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "es-MX")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "es-PR")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "es-US")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "et")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "eu")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fa")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fa-AF")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fi")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fil")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fo")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fy")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ga")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "gd")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "gl")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "gu")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ha")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "he")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "hi")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "hr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "hu")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "hy")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ia")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "id")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ig")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "is")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "it")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ja")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "jv")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ka")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "kea")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "kk")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "km")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "kn")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ko")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "kok")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ks")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ku")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ky")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "lb")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "lo")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "lt")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "lv")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "mai")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "mi")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "mk")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ml")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "mn")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "mni")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "mr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ms")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "mt")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "my")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "nl")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "nl-BE")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "no")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "or")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "pa")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "pl")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "pt")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "pt-PT")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "qu")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "rm")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ro")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ru")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ru-UA")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sa")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sc")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "si")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sk")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sl")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "so")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sq")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "su")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sv")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sw")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "syr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ta")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "te")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "tg")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "th")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ti")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "tk")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "to")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "tr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "tt")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ug")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "uk")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "und")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ur")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "uz")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "vec")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "vi")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "wo")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "xh")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "yo")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "yue")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "zh")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "zh-SG")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "zu"))]
                },
                {
                    type S = <icu::datetime::provider::neo::GregorianDateNeoSkeletonPatternsV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                    const _A1E_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1E_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80P\x01\0\x13c\0\0 \x80 \x03\0\0 \x80@\x01\0\0 \x80\x10\x01\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0 \x0F\0\0/\x80 \x01\0 \x0F\0\0/\x80\x10\x01") } };
                    const _A1E_AS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\x005\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _A1E_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0;\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0;\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1E_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.") } };
                    const _A1E_BLO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _A1E_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_BR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x005\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x04\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _A1E_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.") } };
                    const _A1E_BS_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0.") } };
                    const _A1E_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_CEB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _A1E_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01") } };
                    const _A1E_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\x80R\x03\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0 /\0\x04\xAB\0\0.") } };
                    const _A1E_CY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0>\0\0\x80P\x04\0\0 \0\0d\0\0e\0\0n\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1E_DE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1E_DOI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_EL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_EN_001: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_EN_AU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0/\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_EN_BW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_EN_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1E_EN_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1E_EN_IE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_EN_IN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x005\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_EN_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_EN_SE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1E_EN_ZA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80\x10\x01\0\0/\x80 \x02\0\0/\x80@\x02") } };
                    const _A1E_EN_ZW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x005\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_EO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0J\0\0\x80P\x04\0\0,\0\0 \0\0l\0\0a\0\0 \x80@\x01\0\0-\0\0a\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _A1E_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x03\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x03\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_ES_419: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_ES_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_ES_CL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _A1E_ES_CO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x03\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_ES_HN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0A\0\0\x80P\x04\0\0 \x80@\x02\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_ES_MX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0V\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x03\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_ES_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80 \x02\0\0/\x80@\x02\0\0/\x80\x10\x01") } };
                    const _A1E_ET: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1E_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0:\0\\\0\0\x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x04\0\0r\0\0e\0\0n\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_FA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1E_FA_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\x002\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _A1E_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x005\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0.A\0\0 \x80\x10\x01\0\x80P\x01\0.A\0\0 \x80@\x01\0\0 \x80 \x03\0.A\0\0 \x80\x10\x01\0\x80P\x01\0.A\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _A1E_FI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80R\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1E_FO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\x005\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1E_FR_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1E_FR_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0/\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1E_FY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _A1E_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0m\0\0h\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0m\0\0h\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_GL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0V\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_HA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _A1E_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\x05\xD1\x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\x05\xD1\x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1E_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\0\0 \x80 \x02\0\0.\0\0 \x80\x10\x01\0\0.") } };
                    const _A1E_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\x10\x01\0\0.\0\0 \x80 \x04\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0.\0\0 \x80 \x03\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0.\0\0 \x80 \x02\0\0.\0\0 \x80@\x02\0\0.\0\0,\0\0 \x80P\x01") } };
                    const _A1E_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80\x10\x01\0\0 \0\x05i\0\0.\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0 \0\x05i\0\0.\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \0\x05i\0\0.\0\0,\0\0 \x80P\x01") } };
                    const _A1E_IA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0>\0\0\x80P\x04\0\0 \0\0l\0\0e\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _A1E_ID: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_IT_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0/\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\x002\0\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0(\x80P\x01\0\0)\0\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01\0\0(\x80P\x01\0\0)") } };
                    const _A1E_JV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _A1E_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0.\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1E_KEA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0i\0\0 \x80 \x04\0\0 \0\0d\0\0i\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0>\0\0\x80\x10\x01\0\xB1D\0\0 \x80 \x04\0\0 \x80@\x01\0\xC7|\0\0 \x80P\x04\0\x80\x10\x01\0\xB1D\0\0 \x80 \x03\0\0 \x80@\x01\0\xC7|\0\0 \0\0(\x80P\x01\0\0)\0\x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80@\x01\0\0.\0\0 \0\0(\x80P\x01\0\0)") } };
                    const _A1E_KOK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0/\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_KS_DEVA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _A1E_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x04\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x03\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1E_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0G\0\0\x80\x10\x01\0\0-\0\x046\0\0.\0\0,\0\0 \x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0-\x80@\x02\0\0-\x80 \x02\0\0,\0\0 \x80P\x01") } };
                    const _A1E_LO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0>\0\0\x80P\x04\0\0 \0\x0E\x97\0\x0E\xB5\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0+\0\0\x80\x10\x01\0\0 \0\0m\0\0.\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \0\0d\0\0.\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _A1E_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0.\0V\0\0\x80P\x04\0\0,\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0a\0\0d\0\0a\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0.") } };
                    const _A1E_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0;\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1E_ML: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\x005\0\0\x80\x10\x01\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0=\0h\0\0\x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\0 \0\x043\0\x040\0\x04@\0\x040\0\x043\0\x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x01\0\x80\x10\x01\0\0.\x80 \x02\0\0.\x80@\x02\0\0.\0\0 \x80P\x01") } };
                    const _A1E_MNI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_MR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_MS_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0)\0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0M\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80\x10\x01\0\x10J\0\0 \x80 \x04\0\0 \x80@\x01\0\x10J\0\0 \x80P\x04\0\x80\x10\x01\0\x10J\0\0 \x80 \x03\0\0 \x80@\x01\0\x10J\0\0 \x80P\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\x10J\0\0 \x80P\x01") } };
                    const _A1E_NO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1E_PL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1E_PS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0;\0\0\x80P\x04\0\0 \0\x06/\0\0 \x80\x10\x01\0\0 \0\x06/\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _A1E_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0V\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_PT_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_QU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _A1E_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0%\0\0\x80P\x04\0\0,\0\0 \0\0i\0\0l\0\0s\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _A1E_RU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80R\x03\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.") } };
                    const _A1E_RU_UA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80R\x03\0\0,\0\0 \x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1E_SAH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x004\0M\0\0\x80\x10\x01\0 /\0\x04A\0\x04K\0\x04;\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \0\x04:\0\x04\xAF\0\x04=\0\x04M\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _A1E_SC: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0P\0\0\x80P\x04\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \0\0s\0\0u\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_SD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\x005\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _A1E_SI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01") } };
                    const _A1E_SQ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1E_SR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0.") } };
                    const _A1E_SV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1E_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \0\x07\x12\x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \0\x07\x12\x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_TE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_TG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x005\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0;\0\0\x80P\x04\0\x0E\x17\0\x0E5\0\x0EH\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_TI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\x13c\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_TK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80P\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80P\x01") } };
                    const _A1E_TR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80P\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80P\x01") } };
                    const _A1E_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\x10\x01\0\0 \x80@\x01\0\0-\x80 \x04\0\x06\x0C\0\0 \x80P\x04\0\x80\x10\x01\0\0 \x80@\x01\0\0-\x80 \x03\0\x06\x0C\0\0 \x80P\x01\0\x80\x10\x01\0\0-\x80@\x01\0\0-\x80 \x01\0\x06\x0C\0\0 \x80P\x01") } };
                    const _A1E_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80R\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1E_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _A1E_UR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x04\0\x06\x0C\0\0 \x80\x10\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x03\0\x06\x0C\0\0 \x80\x10\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_UZ_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_WO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\x005\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _A1E_YO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0 \x80P\x04\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0 \x80P\x01\0\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01\0\xFF\x08\x80P\x01\0\xFF\t") } };
                    const _A1E_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01\x80P\x01") } };
                    const _A1E_ZH_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\xFF\x08\x80P\x01\0\xFF\t") } };
                    const _A1E_ZH_SG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\xFF\x0C\x80P\x01") } };
                    const _A1E_ZU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _A1_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0 \x0F\0\0/\x80 \x02\0 \x0F\0\0/\x80\x10\x01\0\x80@\x01\0 \x0F\0\0/\x80 \x01\0 \x0F\0\0/\x80\x10\x01") } };
                    const _A1_AS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0#\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _A1_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0)\0\0\x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x02") } };
                    const _A1_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x02") } };
                    const _A1_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x02\0 /\0\x043\0\0.") } };
                    const _A1_BLO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80@\x01\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80@\x01\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _A1_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _A1_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0.") } };
                    const _A1_BS_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0)\0\0\x80@\x02\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0.\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x02\0\0.") } };
                    const _A1_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_CEB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x02") } };
                    const _A1_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0)\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x02") } };
                    const _A1_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1_CY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _A1_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1_DE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0#\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x02") } };
                    const _A1_DOI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_DSB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0#\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x02") } };
                    const _A1_EL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_EN_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _A1_EN_BW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _A1_EN_BZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x03\0\0-\x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _A1_EN_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1_EN_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1_EN_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1_EN_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1_EN_MV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x02") } };
                    const _A1_EN_PK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x03\0\0-\x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1_EN_SE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1_EN_ZA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\x10\x01\0\0/\x80 \x02\0\0/\x80@\x02") } };
                    const _A1_EN_ZW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0 \x80 \x03\0\0,\x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1_EO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\x10\x01\0\0-\x80 \x04\0\0-\x80@\x02\0\x80\x10\x01\0\0-\x80 \x03\0\0-\x80@\x02\0\x80\x10\x02\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_ES_BO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0;\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_ES_CL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x02") } };
                    const _A1_ES_CO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _A1_ES_HN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80@\x02\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_ES_MX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _A1_ES_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80 \x02\0\0/\x80@\x02\0\0/\x80\x10\x01\0\x80 \x02\0\0/\x80@\x02\0\0/\x80\x10\x02") } };
                    const _A1_ES_PE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _A1_ES_US: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1_ET: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x02") } };
                    const _A1_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0Y\0\0\x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x04\0\0r\0\0e\0\0n\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x03\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\x80\x10\x02\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1_FA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0.A\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0.A\0\0 \x80\x10\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _A1_FI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1_FR_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _A1_FY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x02") } };
                    const _A1_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0&\0\0\x80@\x01\0\0m\0\0h\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1_GL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _A1_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \0\x05\xD1\x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \0\x05\xD1\x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1_HI_LATN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x02\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\x80@\x02\0\0.\0\0 \x80 \x02\0\0.\0\0 \x80\x10\x01\0\0.") } };
                    const _A1_HR_BA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x02\0\0.") } };
                    const _A1_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\x10\x01\0\0.\0\0 \x80 \x04\0\0 \x80@\x01\0\0.\0\x80\x10\x01\0\0.\0\0 \x80 \x03\0\0 \x80@\x01\0\0.\0\x80\x10\x01\0\0.\0\0 \x80 \x02\0\0.\0\0 \x80@\x02\0\0.") } };
                    const _A1_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x02\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\x80@\x02\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x02") } };
                    const _A1_IA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0)\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _A1_IS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\x10\x01\0\0/\x80 \x02\0\0/\x80@\x02") } };
                    const _A1_JV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _A1_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0.\0\0 \x80\x10\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x02") } };
                    const _A1_KEA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80@\x01\0\0 \0\0d\0\0i\0\0 \x80 \x04\0\0 \0\0d\0\0i\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x04\0\x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x02\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x02") } };
                    const _A1_KN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0/\0\0\x80\x10\x01\0\xB1D\0\0 \x80 \x04\0\0 \x80@\x01\0\xC7|\0\x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80@\x01\0\0.\0\x80\x10\x02\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80@\x01\0\0.") } };
                    const _A1_KOK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0-\x80 \x03\0\0-\x80\x10\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x02") } };
                    const _A1_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0\xEA\0\0 \x80 \x04\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80@\x01\0\0\xEA\0\0 \x80 \x03\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80\x10\x01\0\0-\0\x046\0\0.\0\0,\0\0 \x80@\x01\0\0-\x80 \x04\0\x80\x10\x01\0\0-\0\x046\0\0.\0\0,\0\0 \x80@\x01\0\0-\x80 \x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80\x10\x01\0\0 \0\0m\0\0.\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \0\0d\0\0.\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0a\0\0d\0\0a\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0a\0\0d\0\0a\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x02") } };
                    const _A1_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x02") } };
                    const _A1_ML: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80\x10\x01\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\x10\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\x80\x10\x01\0\0.\x80 \x02\0\0.\x80@\x02") } };
                    const _A1_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0,\0\0\x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80\x10\x01\0\x10J\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\x10\x01\0\x10J\0\0 \x80 \x03\0\0 \x80@\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_NE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\x10\x02\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1_NL_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1_PL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1_PS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1_PT_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _A1_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x02") } };
                    const _A1_RU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1_SAH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80\x10\x01\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\x10\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\x10\x02\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1_SC: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0D\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \0\0s\0\0u\0\0 \x80\x10\x01\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1_SK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01") } };
                    const _A1_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x02") } };
                    const _A1_SO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0#\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x03\0\0-\x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _A1_SQ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x02") } };
                    const _A1_SR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0/\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0.\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x02\0\0.") } };
                    const _A1_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \0\x07\x12\x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \0\x07\x12\x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _A1_TE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x02") } };
                    const _A1_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0-\x80 \x04\0\x06\x0C\0\0 \x80\x10\x01\0\x80@\x01\0\0-\x80 \x03\0\x06\x0C\0\0 \x80\x10\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x02") } };
                    const _A1_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1_UR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\x06\x0C\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\x06\x0C\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02") } };
                    const _A1_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _A1_UZ_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _A1_YO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x02\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1_ZH_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1_ZH_SG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x02") } };
                    const _DE_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80P\x04\0\0 \x80@\x01\0\x80P\x01\0\0 \x80@\x01") } };
                    const _DE_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01") } };
                    const _DE_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80@\x01\0\0 \x80P\x04\0\x80@\x01\0\0 \x80P\x01") } };
                    const _DE_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\x80P\x01\0\0,\0\0 \x80@\x01") } };
                    const _DE_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.") } };
                    const _DE_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\x80P\x01\0\0 \x80@\x01\0\0.") } };
                    const _DE_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80R\x04\0\0,\0\0 \x80@\x01\0\x80R\x03\0\0,\0\0 \x80@\x01") } };
                    const _DE_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80P\x04\0\0 \0\0d\0\0e\0\0n\0\0 \x80@\x01\0\0.\0\x80P\x01\0\0 \0\0d\0\0e\0\0n\0\0 \x80@\x01\0\0.") } };
                    const _DE_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80P\x04\0\0 \0\x05\xD4\0\0-\x80@\x01\0\x80P\x01\0\0 \0\x05\xD4\0\0-\x80@\x01") } };
                    const _DE_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80@\x01\0\0.\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0.\0\0,\0\0 \x80P\x01") } };
                    const _DE_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80@\x01\0\0,\0\0 \x80R\x04\0\x80@\x01\0\0,\0\0 \x80R\x03") } };
                    const _DE_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80@\x01\0e\xE5\x80P\x04\0\x80@\x01\0e\xE5\0\0(\x80P\x01\0\0)") } };
                    const _DE_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80@\x01\0\xC7|\0\0 \x80P\x04\0\x80@\x01\0\xC7|\0\0 \0\0(\x80P\x01\0\0)") } };
                    const _DE_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80@\x01\0\0.\0\0 \x80P\x04\0\x80@\x02\0\0.\0\0 \x80P\x01") } };
                    const _DE_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80@\x01\0\0 \0\x10\x1B\0\x10\0\0\x10:\0\0 \x80P\x04\0\x80@\x01\0\0 \0\x10\x1B\0\x10\0\0\x10:\0\0 \x80P\x01") } };
                    const _DE_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80@\x01\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _DE_VI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80P\x04\0\0,\0\0 \0\0n\0\0g\0\0\xE0\0\0y\0\0 \x80@\x01\0\x80P\x01\0\0,\0\0 \0\0n\0\0g\0\0\xE0\0\0y\0\0 \x80@\x01") } };
                    const _DE_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80@\x01\0e\xE5\x80P\x04\0\x80@\x01\0e\xE5\x80P\x01") } };
                    const _D_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80@\x01\0\0.") } };
                    const _D_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80@\x01\0e\xE5") } };
                    const _D_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80@\x01\0\xC7|") } };
                    const _D_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80@\x02") } };
                    const _D_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80@\x01") } };
                    const _E_FR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x04\0\0\x80P\x04\0\x80P\x01") } };
                    const _E_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x04\0\0\x80R\x04\0\x80R\x03") } };
                    const _GYM0DE_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80\0\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0DE_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0DE_BLO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80P\x04\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80P\x01\0\0 \x80@\x01") } };
                    const _GYM0DE_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0%\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0DE_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0+\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_CEB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0DE_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_DE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_DOI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0DE_EN_AU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_EN_IN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\x001\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_ES_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\x001\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_ES_CO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\x001\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_ET: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0@\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\0 \0\0u\0\0r\0\0t\0\0e\0\0k\0\0o\0\0 \x80 \x04\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \0\0u\0\0r\0\0t\0\0e\0\0k\0\0o\0\0 \x80 \x03\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0.A\0\0 \x80@\x01\0\0 \x80 \x04\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0.A\0\0 \x80@\x01\0\0 \x80 \x03\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0%\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0m\0\0h\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0m\0\0h\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_GU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0DE_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\x05\xD1\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\x05\xD1\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_HI_LATN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0%\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x04\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x03\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0(\x80P\x01\0\0)") } };
                    const _GYM0DE_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0+\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80\0\x04\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x04\0\0 \x80@\x01\0\xC7|\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x03\0\0 \x80@\x01\0\xC7|\0\0 \0\0(\x80P\x01\0\0)") } };
                    const _GYM0DE_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0+\0\0\x80\0\x04\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x04\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x03\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_LO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0DE_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0P\0\0\x80\x10\x01\0\0 \0\0m\0\0.\0\0 \x80\0\x04\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \0\0d\0\0.\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x01\0\0 \x80\0\x03\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0 \x80\0\x03\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0.\0\0\x80P\x04\0\0,\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x03") } };
                    const _GYM0DE_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\x001\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x01") } };
                    const _GYM0DE_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0.\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80\0\x04\0\0 \x80\x10\x01\0\x10J\0\0 \x80 \x04\0\0 \x80@\x01\0\x10J\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\x10J\0\0 \x80 \x03\0\0 \x80@\x01\0\x10J\0\0 \x80P\x01") } };
                    const _GYM0DE_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0DE_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_SC: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\x007\0\0\x80P\x04\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \0\0s\0\0u\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \0\0s\0\0u\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_SK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \0\x07\x12\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x03\0\x06\x0C\0\0 \x80@\x01\0\0 \0\x07\x12\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_TE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0%\0\0\x80\0\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0%\0\0\x80P\x04\0\x0E\x17\0\x0E5\0\x0EH\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0DE_TI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\x13c\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_TK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80\0\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80P\x01") } };
                    const _GYM0DE_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0+\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80\x10\x01\0\0 \x80@\x01\0\0-\x80 \x04\0\x06\x0C\0\0 \x80P\x04\0\0 \x80\0\x04\0\x80\x10\x01\0\0 \x80@\x01\0\0-\x80 \x03\0\x06\x0C\0\0 \x80P\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0DE_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_UR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x04\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x03\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0DE_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0 \x80P\x04\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0 \x80P\x01") } };
                    const _GYM0DE_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x01") } };
                    const _GYM0D_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_AS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80\0\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01") } };
                    const _GYM0D_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0D_BLO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80 \x04\0\0 \x80@\x01\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80@\x01\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _GYM0D_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0D_BS_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_CEB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_CY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_DOI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\0\x03\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_EL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_EN_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0>\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_ES_419: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x007\0n\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\0 \0\0u\0\0r\0\0t\0\0e\0\0k\0\0o\0\0 \x80 \x04\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \0\0u\0\0r\0\0t\0\0e\0\0k\0\0o\0\0 \x80 \x03\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_FA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_FA_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_FI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80 \x01\0\0.\x80@\x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_FR_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0m\0\0h\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0m\0\0h\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_GU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \0\x05\xD1\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \0\x05\xD1\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_HI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _GYM0D_HI_LATN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0D_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x04\0\0 \x80@\x01\0\0.\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x03\0\0 \x80@\x01\0\0.\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80@\x01\0\0.") } };
                    const _GYM0D_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \0\x05i\0 $\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \0\x05i\0 $\0\0 \x80 \x03\0\0 \x80@\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_IS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _GYM0D_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0D_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80\0\x04\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x04\0\0 \x80@\x01\0\xC7|\0\x80\0\x03\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x03\0\0 \x80@\x01\0\xC7|\0\x80\0\x03\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _GYM0D_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80\0\x04\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x04\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80\0\x03\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x03\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80\0\x03\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _GYM0D_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_LB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_LO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0D_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0>\0\0\x80\x10\x01\0\0 \0\0m\0\0.\0\0 \x80\0\x04\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \0\0d\0\0.\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x01\0\0 \x80\0\x03\0\x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80\0\x03\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _GYM0D_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_MR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _GYM0D_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x04\0\0 \x80\x10\x01\0\x10J\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\x10J\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _GYM0D_OR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_QU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _GYM0D_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_SC: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0b\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \0\0s\0\0u\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \0\0s\0\0u\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_SK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_SR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0D_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \0\x07\x12\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \0\x07\x12\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_TE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x04\0\0 \x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\0\x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0D_TK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _GYM0D_TO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0 \x80 \x01\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_TR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\x10\x01\0\0 \x80@\x01\0\0-\x80 \x04\0\0 \x80\0\x04\0\x80\x10\x01\0\0 \x80@\x01\0\0-\x80 \x03\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x03\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_UR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_VI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_ZH_HANT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _GYM0_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80\0\x04\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80 \x03\0\0 \x80\x10\x01") } };
                    const _GYM0_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80!\x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03\0\x80 \x01\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80!\x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80!\x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80!\x04\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80!\x04\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0_EL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80!\x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_ES_CO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\0 \0\0u\0\0r\0\0t\0\0e\0\0k\0\0o\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \0\0u\0\0r\0\0t\0\0e\0\0k\0\0o\0\0 \x80 \x03") } };
                    const _GYM0_GU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80 \x04\0\0,\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80 \x03\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0_HI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80 \x04\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0_HI_LATN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03") } };
                    const _GYM0_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80!\x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x03") } };
                    const _GYM0_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\0 \x80 \x03") } };
                    const _GYM0_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x01\0g\x08\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08") } };
                    const _GYM0_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80 \x04\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80 \x03") } };
                    const _GYM0_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\0\x04\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x03") } };
                    const _GYM0_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80\0\x04\0\0 \x80 \x04\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80\0\x03\0\0 \x80 \x03\0\0a\0\0 \x80\x10\x01\0\0a\0\0n") } };
                    const _GYM0_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80 \x03") } };
                    const _GYM0_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0,\0\0\x80\x10\x01\0\0 \0\0m\0\0.\0\0 \x80\0\x04\0\0,\0\0 \x80!\x04\0\x80\x10\x01\0\0-\x80 \x02\0\0 \x80\0\x03\0\x80\x10\x01\0\0-\x80 \x01\0\0 \x80\0\x03") } };
                    const _GYM0_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80 \x03") } };
                    const _GYM0_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03") } };
                    const _GYM0_PL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80!\x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80 \x03") } };
                    const _GYM0_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80\0\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80\0\x03") } };
                    const _GYM0_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80!\x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x03") } };
                    const _GY_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80\x10\x01\0\0 \x80\0\x04\0\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GY_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03") } };
                    const _GY_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x07\0\0\x80\0\x04\x80\x10\x01\0\x80\0\x03\x80\x10\x01") } };
                    const _GY_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80\x10\x01\0\0.\0\0 \x80\0\x03") } };
                    const _GY_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x04\0\x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x03") } };
                    const _GY_HI_LATN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80\0\x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GY_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\x80\0\x03\0\0 \x80\x10\x01\0\0.") } };
                    const _GY_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.") } };
                    const _GY_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80\0\x04\x80\x10\x01\0^t\0\x80\0\x03\x80\x10\x01\0^t") } };
                    const _GY_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x046\0\0.") } };
                    const _GY_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80\0\x04\0\0 \x80\x10\x01\0\xB1D\0\x80\0\x03\0\0 \x80\x10\x01\0\xB1D") } };
                    const _GY_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\0\x046\0\0.") } };
                    const _GY_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\x10\x01\0\0 \0\0m\0\0.\0\0 \x80\0\x04\0\x80\x10\x01\0\0 \0\0m\0\0.\0\0 \x80\0\x03") } };
                    const _GY_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.") } };
                    const _GY_SAH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\x10\x01\0 /\0\x04A\0\0.\0\0 \x80\0\x04\0\x80\x10\x01\0 /\0\x04A\0\0.\0\0 \x80\0\x03") } };
                    const _GY_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x045\0\x04;") } };
                    const _M0DE_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\x13c\0\0 \x80 \x04\0\0 \x80@\x01\0\x80P\x01\0\x13c\0\0 \x80 \x03\0\0 \x80@\x01\0\x80P\x01\0\x13c\0\0 \x80 \x01\0\0/\x80@\x01") } };
                    const _M0DE_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0 \x0F\0\0/\x80 \x01") } };
                    const _M0DE_AS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02") } };
                    const _M0DE_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01\0\x80@\x02\0\0.\x80 \x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01") } };
                    const _M0DE_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x02") } };
                    const _M0DE_BLO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01") } };
                    const _M0DE_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x01") } };
                    const _M0DE_BR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.") } };
                    const _M0DE_BS_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.") } };
                    const _M0DE_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.") } };
                    const _M0DE_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80R\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80R\x03\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02") } };
                    const _M0DE_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0.\x80 \x01") } };
                    const _M0DE_EN_001: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_EN_AU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0#\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_EN_BW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_EN_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\x80P\x01\0\0,\0\0 \x80 \x02\0\0-\x80@\x02") } };
                    const _M0DE_EN_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02") } };
                    const _M0DE_EN_GB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0#\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_EN_ZA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80 \x02\0\0/\x80@\x02") } };
                    const _M0DE_EN_ZW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0/\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_ES_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0/\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0-\x80 \x01") } };
                    const _M0DE_ES_CL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0/\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02") } };
                    const _M0DE_ES_CO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_ES_MX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\x005\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_ES_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0/\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80 \x02\0\0/\x80@\x02") } };
                    const _M0DE_ET: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01") } };
                    const _M0DE_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80 \x04\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\0,\0\0 \x80P\x01\0\x80 \x01\0\0/\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_FA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80!\x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80!\x03\0\x80P\x01\0\0 \x80 \x01\0\0/\x80@\x01") } };
                    const _M0DE_FA_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0#\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80!\x04\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01") } };
                    const _M0DE_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0-\x80 \x01") } };
                    const _M0DE_FI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80R\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80R\x03\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0.\x80 \x01\0\0.") } };
                    const _M0DE_FO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x02\0\0.\x80 \x02") } };
                    const _M0DE_FR_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80 \x02\0\0-\x80@\x02") } };
                    const _M0DE_FR_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.") } };
                    const _M0DE_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\x05\xD1\x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\x05\xD1\x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01") } };
                    const _M0DE_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\0\0 \x80 \x02\0\0.") } };
                    const _M0DE_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80 \x04\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x01\0\x80 \x01\0\0.\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_IA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x02\0\0-\x80 \x02") } };
                    const _M0DE_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0&\0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0(\x80P\x01\0\0)\0\x80 \x01\0\0/\x80@\x01\0\0(\x80P\x01\0\0)") } };
                    const _M0DE_JV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_KEA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0/\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0i\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_KN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0,\0\0\x80 \x04\0\0 \x80@\x01\0\xC7|\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\xC7|\0\0 \0\0(\x80P\x01\0\0)\0\x80 \x01\0\0.\0\0 \x80@\x01\0\0.\0\0 \0\0(\x80P\x01\0\0)") } };
                    const _M0DE_KOK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0-\x80 \x01\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x04\0\0\xEA\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x03\0\0\xEA\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02") } };
                    const _M0DE_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80P\x01\0\x80@\x02\0\0-\x80 \x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_LO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80 \x04\0\0 \x80@\x01\0\0 \0\0d\0\0.\0\0,\0\0 \x80P\x04\0\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.") } };
                    const _M0DE_ML: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0/\x80 \x01\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x04\0\x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x01\0\x80 \x05\0\0/\x80@\x02\0\0.\0\0 \x80P\x01") } };
                    const _M0DE_MS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x01") } };
                    const _M0DE_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0-\x80@\x01") } };
                    const _M0DE_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0/\0\0\x80 \x04\0\0 \x80@\x01\0\0 \0\x10\x1B\0\x10\0\0\x10:\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\x10J\0\0 \x80P\x01\0\x80@\x01\0\0/\x80 \x01\0\x10J\0\0 \x80P\x01") } };
                    const _M0DE_NO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0.\x80 \x01\0\0.") } };
                    const _M0DE_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02\0\0.") } };
                    const _M0DE_PL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x02") } };
                    const _M0DE_PS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_PT_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0/\0\0\x80R\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x02\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_QU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02") } };
                    const _M0DE_SC: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_SI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80@\x01\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0 \x80P\x01\0\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.") } };
                    const _M0DE_SR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0)\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.") } };
                    const _M0DE_SV_FI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0.\x80 \x01") } };
                    const _M0DE_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \0\x07\x12\x80 \x04\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \0\x07\x12\x80 \x03\0\x80P\x04\0\x06\x0C\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_TA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80@\x02\0\0-\x80 \x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_TE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0/\x80 \x01\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0)\0\0\x80P\x04\0\x0E\x17\0\x0E5\0\x0EH\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_TI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\x13c\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_TK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80P\x01\0\x80@\x02\0\0.\x80 \x02\0\0 \x80P\x01") } };
                    const _M0DE_TR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80P\x01\0\x80@\x01\0\0/\x80 \x02\0\0 \x80P\x01") } };
                    const _M0DE_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0-\x80 \x04\0\x06\x0C\0\0 \x80P\x04\0\x80@\x01\0\0-\x80 \x03\0\x06\x0C\0\0 \x80P\x01\0\x80@\x01\0\0-\x80 \x01\0\x06\x0C\0\0 \x80P\x01") } };
                    const _M0DE_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_UR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0-\x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_YO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0 \x80P\x04\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0 \x80P\x01\0\x80 \x01\0\0/\x80@\x01\0\xFF\x08\x80P\x01\0\xFF\t") } };
                    const _M0DE_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80 \x01\0\0/\x80@\x01\x80P\x01") } };
                    const _M0DE_ZH_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80@\x01\0\0/\x80 \x01\0\xFF\x08\x80P\x01\0\xFF\t") } };
                    const _M0DE_ZH_SG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80 \x01\0\0-\x80@\x01\x80P\x01") } };
                    const _M0D_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0-\x80 \x02") } };
                    const _M0D_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80 \x03\0\0 \x80@\x01\0\x80 \x01\0\0/\x80@\x01") } };
                    const _M0D_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0 \x0F\0\0/\x80 \x01") } };
                    const _M0D_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02") } };
                    const _M0D_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0.\x80 \x01") } };
                    const _M0D_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0.\x80 \x02") } };
                    const _M0D_BR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80@\x01\0\0-\x80 \x03\0\x80 \x01\0\0/\x80@\x01") } };
                    const _M0D_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x01\0\0.\x80 \x01\0\0.") } };
                    const _M0D_BS_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x02\0\0.\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02\0\0.") } };
                    const _M0D_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.") } };
                    const _M0D_CY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x01\0\0.\x80 \x01") } };
                    const _M0D_EN_BW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x02\0\0 \x80 \x03\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_EN_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80 \x03\0\0 \x80@\x01\0\x80 \x02\0\0-\x80@\x02") } };
                    const _M0D_EN_ZA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x02\0\0 \x80 \x03\0\x80 \x02\0\0/\x80@\x02") } };
                    const _M0D_EN_ZW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x02\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_ES_CL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0-\x80 \x02") } };
                    const _M0D_ES_CO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_ES_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80 \x02\0\0/\x80@\x02") } };
                    const _M0D_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0/\0\0\x80 \x04\0\0r\0\0e\0\0n\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\x80 \x03\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\x80 \x01\0\0/\x80@\x01") } };
                    const _M0D_FA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80!\x04\0\x80@\x01\0\0 \x80!\x03\0\x80 \x01\0\0/\x80@\x01") } };
                    const _M0D_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0-\x80 \x01") } };
                    const _M0D_FO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02") } };
                    const _M0D_FR_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80 \x02\0\0-\x80@\x02") } };
                    const _M0D_FR_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02\0\0.") } };
                    const _M0D_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0\x1A\0\0\x80@\x01\0\0m\0\0h\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0 \0\x05\xD1\x80 \x04\0\x80@\x01\0\0 \0\x05\xD1\x80 \x03\0\x80@\x01\0\0.\x80 \x01") } };
                    const _M0D_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x02\0\0.\0\0 \x80 \x02\0\0.") } };
                    const _M0D_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80 \x04\0\0 \x80@\x01\0\0.\0\x80 \x03\0\0 \x80@\x01\0\0.\0\x80 \x01\0\0.\0\0 \x80@\x01\0\0.") } };
                    const _M0D_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02") } };
                    const _M0D_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80 \x01\0\0/\x80@\x01") } };
                    const _M0D_KEA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80@\x01\0\0 \0\0d\0\0i\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_KN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80 \x03\0\0 \x80@\x01\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80 \x04\0\0 \x80@\x01\0\xC7|\0\x80 \x03\0\0 \x80@\x01\0\xC7|\0\x80 \x01\0\0.\0\0 \x80@\x01\0\0.") } };
                    const _M0D_KOK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80 \x03\0\0 \x80@\x01\0\x80@\x01\0\0-\x80 \x01") } };
                    const _M0D_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0\xEA\0\0 \x80 \x04\0\0\xEA\0\x80@\x01\0\0\xEA\0\0 \x80 \x03\0\0\xEA\0\x80@\x02\0\0.\x80 \x02") } };
                    const _M0D_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0-\x80 \x04\0\x80@\x01\0\0-\x80 \x03\0\x80@\x02\0\0-\x80 \x02") } };
                    const _M0D_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80 \x04\0\0 \x80@\x01\0\0 \0\0d\0\0.\0\x80 \x02\0\0-\x80@\x02\0\x80 \x02\0\0-\x80@\x01") } };
                    const _M0D_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02\0\0.") } };
                    const _M0D_ML: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80 \x03\0\0 \x80@\x01\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\x80 \x05\0\0/\x80@\x02") } };
                    const _M0D_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0 \0\0\x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x04\0\x80 \x03\0\0 \x80@\x01\0\x80 \x02\0\0-\x80@\x02") } };
                    const _M0D_PCM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0 \0\0/\x80 \x01") } };
                    const _M0D_PL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0.\x80 \x02") } };
                    const _M0D_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_PT_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0/\x80 \x02\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x02\0\0-\x80 \x02") } };
                    const _M0D_SI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80 \x03\0\0 \x80@\x01\0\x80 \x01\0\0-\x80@\x01") } };
                    const _M0D_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.") } };
                    const _M0D_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0 \0\x07\x12\x80 \x04\0\x80@\x01\0\0 \0\x07\x12\x80 \x03\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0-\x80 \x04\0\x80@\x01\0\0-\x80 \x03\0\x80@\x01\0\0-\x80 \x01") } };
                    const _M0D_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0-\x80 \x04\0\x80@\x01\0\0-\x80 \x03\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_ZH_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_ZH_SG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80 \x01\0\0-\x80@\x01") } };
                    const _M0_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80 \x02\0\x80!\x01") } };
                    const _M0_BR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80 \x02") } };
                    const _M0_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80 \x04\0\x80 \x03\0\x80 \x01") } };
                    const _M0_EL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80 \x04\0\x80 \x03\0\x80!\x01") } };
                    const _M0_ET: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x04\0\0\x80 \x04\0\x80 \x01") } };
                    const _M0_FO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80!\x02") } };
                    const _M0_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80!\x01\0\0.") } };
                    const _M0_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80 \x01\0g\x08") } };
                    const _M0_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80 \x01\0\xC6\xD4") } };
                    const _M0_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x04\0\0\x80!\x04\0\x80 \x02") } };
                    const _M0_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80!\x05") } };
                    const _M0_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80!\x01") } };
                    const _M0_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80 \x01\0g\x08") } };
                    const _Y0W_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0w\0\0e\0\0e\0\0k\0\0 \x800\x01\0\0 \0\0v\0\0a\0\0n\0\0 \x80\x11\x01") } };
                    const _Y0W_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x06'\0\x06D\0\x06#\0\x063\0\x06(\0\x06H\0\x069\0\0 \x800\x01\0\0 \0\x06E\0\x06F\0\0 \0\x063\0\x06F\0\x06)\0\0 \x80\x11\x01") } };
                    const _Y0W_AS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\t\xF0\0\0 \0\t\xB8\0\t\xAA\0\t\xCD\0\t\xA4\0\t\xBE\0\t\xB9\0\0 \x800\x01") } };
                    const _Y0W_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0s\0\0e\0\0l\0\0m\0\0a\0\0n\0\0a\0\0 \x800\x01\0\0 \0\0d\0\0e\0\0 \x80\x11\x01") } };
                    const _Y0W_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0,\0\0 \x800\x01\0\0 \0\0h\0\x02Y\0\0f\0\0t\0\x02Y") } };
                    const _Y0W_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0 \0\x04B\0\x04K\0\x044\0\x047\0\x045\0\x04=\0\x04L\0\0 \x80\x11\x01") } };
                    const _Y0W_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x04A\0\x045\0\x044\0\x04<\0\x048\0\x04F\0\x040\0\0 \x800\x01\0\0 \0\x04>\0\x04B\0\0 \x80\x11\x01\0\0 \0\x043\0\0.") } };
                    const _Y0W_BLO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\0k\0\0a\0\0b\0\x02T\0\0k\0\x02T\0\x02i\0\0 \x800\x01\0\0j\0\0a") } };
                    const _Y0W_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\t\x8F\0\t\xB0\0\0 \x800\x01\0\t\xA4\0\t\xAE\0\0 \0\t\xB8\0\t\xAA\0\t\xCD\0\t\xA4\0\t\xBE\0\t\xB9") } };
                    const _Y0W_BR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0s\0\0i\0\0z\0\0h\0\0u\0\0n\0\0 \x800\x01\0\0 \x80\x11\x01") } };
                    const _Y0W_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0.\0\0 \0\0s\0\0e\0\0d\0\0m\0\0i\0\0c\0\0a\0\0 \0\0u\0\0 \x80\x11\x01\0\0.") } };
                    const _Y0W_BS_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x04A\0\x045\0\x044\0\x04<\0\x048\0\x04F\0\x040\0\0 \x800\x01\0\0 \0\x043\0\x04>\0\x044\0\x048\0\x04=\0\x040\0\0 \x80\x11\x01") } };
                    const _Y0W_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0s\0\0e\0\0t\0\0m\0\0a\0\0n\0\0a\0\0 \x800\x01\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x11\x01") } };
                    const _Y0W_CEB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0s\0\0e\0\0m\0\0a\0\0n\0\0a\0\0 \x800\x01\0\0 \0\0s\0\0a\0\0 \x80\x11\x01") } };
                    const _Y0W_CHR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0 \x19\0\x13\xD2\0\x13\xBE\0\x13\xD9\0\x13\xD3\0\x13\xC6\0\x13\xCD\0\x13\xD7\0 \x19\0\0 \x800\x01\0\0 \0 \x19\0\x13\xBE\0\x13\xBF\0 \x19\0\0 \x80\x11\x01") } };
                    const _Y0W_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0.\0\0 \0\0t\0\0\xFD\0\0d\0\0e\0\0n\0\0 \0\0r\0\0o\0\0k\0\0u\0\0 \x80\x11\x01") } };
                    const _Y0W_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0-\0\x04<\0\x04\xD7\0\x04H\0\0 \0\x04M\0\x04@\0\x04=\0\x048\0\0 \x80\x11\x01\0\0 \0\x04\xAB\0\0.") } };
                    const _Y0W_CY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0w\0\0y\0\0t\0\0h\0\0n\0\0o\0\0s\0\0 \x800\x01\0\0 \0\0o\0\0 \x80\x11\x01") } };
                    const _Y0W_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0u\0\0g\0\0e\0\0 \x800\x01\0\0 \0\0i\0\0 \x80\x11\x01") } };
                    const _Y0W_DE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0W\0\0o\0\0c\0\0h\0\0e\0\0 \x800\x01\0\0 \0\0d\0\0e\0\0s\0\0 \0\0J\0\0a\0\0h\0\0r\0\0e\0\0s\0\0 \x80\x11\x01") } };
                    const _Y0W_DOI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\t&\0\t>\0\0 \0\t9\0\t+\0\tM\0\t$\0\t>\0\0 \x800\x01") } };
                    const _Y0W_DSB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0.\0\0 \0\0t\0\0y\0\x01z\0\0e\0\x01D\0\0 \0\0l\0\x01\x1B\0\0t\0\0a\0\0 \x80\x11\x01") } };
                    const _Y0W_EL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x03\xB5\0\x03\xB2\0\x03\xB4\0\x03\xBF\0\x03\xBC\0\x03\xAC\0\x03\xB4\0\x03\xB1\0\0 \x800\x01\0\0 \0\x03\xC4\0\x03\xBF\0\x03\xC5\0\0 \x80\x11\x01") } };
                    const _Y0W_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0s\0\0e\0\0m\0\0a\0\0n\0\0a\0\0 \x800\x01\0\0 \0\0d\0\0e\0\0 \x80\x11\x01") } };
                    const _Y0W_ET: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0.\0\0 \0\0n\0\0\xE4\0\0d\0\0a\0\0l\0\0 \0\0(\x80\x11\x01\0\0)") } };
                    const _Y0W_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0.\0\0 \0\0u\0\0r\0\0t\0\0e\0\0k\0\0o\0\0 \x800\x01\0\0.\0\0 \0\0a\0\0s\0\0t\0\0e\0\0a") } };
                    const _Y0W_FA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x06G\0\x06A\0\x06*\0\x06G\0\x06T\0\0 \x800\x01\0\x06E\0\0 \x80\x11\x01") } };
                    const _Y0W_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x01\xE94\x01\xE9.\x01\xE92\x01\xE9<\x01\xE9+\x01\xE9*\x01\xE9+\0\0 \x800\x01\0\0 \x01\xE92\x01\xE9#\x01\xE9+\x01\xE9*\0\0 \x80\x11\x01") } };
                    const _Y0W_FI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0v\0\0u\0\0o\0\0d\0\0e\0\0n\0\0 \x80\x11\x01\0\0 \0\0v\0\0i\0\0i\0\0k\0\0k\0\0o\0\0 \x800\x01") } };
                    const _Y0W_FIL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: true }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x06\0\0\0\0\0(\0\\\0\x84\0\xAC\0\xD4\0\0\0\0l\0\0i\0\0n\0\0g\0\0g\0\0o\0\0 \x800\x01\0\0 \0\0n\0\0g\0\0 \x80\x11\x01\0\0\0i\0\0k\0\0a\0\0-\x800\x01\0\0 \0\0l\0\0i\0\0n\0\0g\0\0g\0\0o\0\0 \0\0n\0\0g\0\0 \x80\x11\x01\0\0\0l\0\0i\0\0n\0\0g\0\0g\0\0o\0\0 \x800\x01\0\0 \0\0n\0\0g\0\0 \x80\x11\x01\0\0\0l\0\0i\0\0n\0\0g\0\0g\0\0o\0\0 \x800\x01\0\0 \0\0n\0\0g\0\0 \x80\x11\x01\0\0\0l\0\0i\0\0n\0\0g\0\0g\0\0o\0\0 \x800\x01\0\0 \0\0n\0\0g\0\0 \x80\x11\x01\0\0\0l\0\0i\0\0n\0\0g\0\0g\0\0o\0\0 \x800\x01\0\0 \0\0n\0\0g\0\0 \x80\x11\x01") } };
                    const _Y0W_FO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0.\0\0 \0\0v\0\0i\0\0k\0\0a\0\0 \0\0\xED\0\0 \x80\x11\x01") } };
                    const _Y0W_FR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0s\0\0e\0\0m\0\0a\0\0i\0\0n\0\0e\0\0 \x800\x01\0\0 \0\0d\0\0e\0\0 \x80\x11\x01") } };
                    const _Y0W_FY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0w\0\0i\0\0k\0\0e\0\0 \x800\x01\0\0 \0\0f\0\0a\0\0n\0\0 \x80\x11\x01") } };
                    const _Y0W_GA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0s\0\0e\0\0a\0\0c\0\0h\0\0t\0\0a\0\0i\0\0n\0\0 \0\0a\0\0 \x800\x01\0\0 \0\0i\0\0n\0\0 \x80\x11\x01") } };
                    const _Y0W_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0s\0\0e\0\0a\0\0c\0\0h\0\0d\0\0a\0\0i\0\0n\0\0 \x800\x01\0\0 \0\0d\0\0h\0\0e\0\0 \x80\x11\x01") } };
                    const _Y0W_GL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0.\0\0\xAA\0\0 \0\0s\0\0e\0\0m\0\0a\0\0n\0\0a\0\0 \0\0d\0\0e\0\0 \x80\x11\x01") } };
                    const _Y0W_GU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\n\xA8\0\n\xBE\0\0 \x800\x01\0\0 \0\n\x85\0\n\xA0\0\n\xB5\0\n\xBE\0\n\xA1\0\n\xBF\0\n\xAF\0\n\xBE") } };
                    const _Y0W_HA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0s\0\0a\0\0t\0\0i\0\0 \x800\x01\0\0 \0\0c\0\0i\0\0k\0\0i\0\0n\0\0 \x80\x11\x01") } };
                    const _Y0W_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x05\xE9\0\x05\xD1\0\x05\xD5\0\x05\xE2\0\0 \x800\x01\0\0 \0\x05\xD1\0\x05\xE9\0\x05\xE0\0\x05\xEA\0\0 \x80\x11\x01") } };
                    const _Y0W_HI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\t\x15\0\t>\0\0 \0\t8\0\t*\0\tM\0\t$\0\t>\0\t9\0\0 \x800\x01") } };
                    const _Y0W_HI_LATN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\0k\0\0a\0\0a\0\0 \0\0w\0\0e\0\0e\0\0k\0\0 \x800\x01") } };
                    const _Y0W_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0.\0\0 \0\0t\0\0j\0\0e\0\0d\0\0a\0\0n\0\0 \0\0u\0\0 \x80\x11\x01\0\0.") } };
                    const _Y0W_HSB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0.\0\0 \0\0t\0\0y\0\0d\0\x01z\0\0e\0\x01D\0\0 \0\0l\0\x01\x1B\0\0t\0\0a\0\0 \x80\x11\x01") } };
                    const _Y0W_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \x800\x01\0\0.\0\0 \0\0h\0\0e\0\0t\0\0e") } };
                    const _Y0W_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: true }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x06\0\0\0\0\0.\0\\\0\x8A\0\xB8\0\xE6\0\0\x80\x11\x01\0\0 \0\x05i\0 $\0\0 \x800\x01\0\0-\0\x05\x80\0\x05d\0\0 \0\x05w\0\x05a\0\x05b\0\x05a\0\x05i\0\x80\x11\x01\0\0 \0\x05i\0 $\0\0 \x800\x01\0\0-\0\x05k\0\x05v\0\0 \0\x05w\0\x05a\0\x05b\0\x05a\0\x05i\0\x80\x11\x01\0\0 \0\x05i\0 $\0\0 \x800\x01\0\0-\0\x05\x80\0\x05d\0\0 \0\x05w\0\x05a\0\x05b\0\x05a\0\x05i\0\x80\x11\x01\0\0 \0\x05i\0 $\0\0 \x800\x01\0\0-\0\x05\x80\0\x05d\0\0 \0\x05w\0\x05a\0\x05b\0\x05a\0\x05i\0\x80\x11\x01\0\0 \0\x05i\0 $\0\0 \x800\x01\0\0-\0\x05\x80\0\x05d\0\0 \0\x05w\0\x05a\0\x05b\0\x05a\0\x05i\0\x80\x11\x01\0\0 \0\x05i\0 $\0\0 \x800\x01\0\0-\0\x05\x80\0\x05d\0\0 \0\x05w\0\x05a\0\x05b\0\x05a\0\x05i") } };
                    const _Y0W_IA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0s\0\0e\0\0p\0\0t\0\0i\0\0m\0\0a\0\0n\0\0a\0\0 \x800\x01\0\0 \0\0d\0\0e\0\0 \x80\x11\x01") } };
                    const _Y0W_ID: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0m\0\0i\0\0n\0\0g\0\0g\0\0u\0\0 \0\0k\0\0e\0\0-\x800\x01\0\0 \x80\x11\x01") } };
                    const _Y0W_IG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0I\0\0z\0\0u\0\0 \x800\x01\0\0 \0\0n\0\0 \0\0i\0\0m\0\0e\0\0 \x80\x11\x01") } };
                    const _Y0W_IS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0v\0\0i\0\0k\0\0u\0\0 \x800\x01\0\0 \0\0a\0\0f\0\0 \x80\x11\x01") } };
                    const _Y0W_IT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0s\0\0e\0\0t\0\0t\0\0i\0\0m\0\0a\0\0n\0\0a\0\0 \x800\x01\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x11\x01") } };
                    const _Y0W_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0^t\0{,\x800\x01\0\x901") } };
                    const _Y0W_JV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0p\0\0e\0\0k\0\0a\0\0n\0\0 \x800\x01\0\0 \0\0i\0\0n\0\0g\0\0 \x80\x11\x01") } };
                    const _Y0W_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x10\xD9\0\x10\xD5\0\x10\xD8\0\x10\xE0\0\x10\xD0\0\0 \x800\x01\0\0,\0\0 \x80\x11\x01") } };
                    const _Y0W_KEA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0\xBA\0\0 \0\0s\0\0i\0\0m\0\0a\0\0n\0\0a\0\0 \0\0d\0\0i\0\0 \x80\x11\x01") } };
                    const _Y0W_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0s\0\0i\0\0m\0\x1E\xF9\0\0n\0\x1E\xF9\0\0 \x800\x01\0\0,\0\0 \x80\x11\x01") } };
                    const _Y0W_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\x046\0\x04K\0\x04;\0\x044\0\x04K\0\x04\xA3\0\0 \x800\x01\0\0-\0\x040\0\x04?\0\x04B\0\x040\0\x04A\0\x04K") } };
                    const _Y0W_KM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x17\x9F\0\x17\x94\0\x17\xD2\0\x17\x8F\0\x17\xB6\0\x17\xA0\0\x17\xCD\0\x17\x91\0\x17\xB8\0\0 \x800\x01\0\0 \0\x17\x93\0\x17\xC3\0\x17\x86\0\x17\xD2\0\x17\x93\0\x17\xB6\0\x17\xC6\0\0 \x80\x11\x01") } };
                    const _Y0W_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\xB1D\0\0 \x800\x01\0\xBC\x88\0\xC9\xF8\0\0 \0\xC8\xFC") } };
                    const _Y0W_KS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x06\xC1\0\x06A\0\x06*\0\x06\xC1\0\0 \x800\x01\0\0 \0\x06'\0\x062\0\0 \x80\x11\x01") } };
                    const _Y0W_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0h\0\0e\0\0f\0\0t\0\0e\0\0y\0\0a\0\0 \x800\x01\0\0e\0\0m\0\0 \0\0y\0\0a\0\0 \x80\x11\x01\0\0a\0\0n") } };
                    const _Y0W_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0-\0\x046\0\x04K\0\x04;\0\x044\0\x04K\0\x04=\0\0 \x800\x01\0\0-\0\x040\0\x04?\0\x04B\0\x040\0\x04A\0\x04K") } };
                    const _Y0W_LO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x0E\xAD\0\x0E\xB2\0\x0E\x97\0\x0E\xB4\0\x0E\x94\0\x0E\x97\0\x0E\xB5\0\x0E\xC8\0\0 \x800\x01\0\0 \0\x0E\x82\0\x0E\xAD\0\x0E\x87\0\x0E\x9B\0\x0E\xB5\0\0 \x80\x11\x01") } };
                    const _Y0W_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \x800\x01\0\0 \0\0s\0\0a\0\0v\0\0.") } };
                    const _Y0W_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x800\x01\0\0.\0\0 \0\0n\0\0e\0\0d\0\x01\x13\0\x01<\0\0a") } };
                    const _Y0W_MI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0w\0\0i\0\0k\0\0i\0\0 \x800\x01\0\0 \0\0o\0\0 \x80\x11\x01") } };
                    const _Y0W_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0.\0\0 \0\x04A\0\x045\0\x044\0\x04<\0\x048\0\x04F\0\x040\0\0 \0\x04>\0\x044\0\0 \x80\x11\x01") } };
                    const _Y0W_ML: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0-\0\r2\0\rF\0\0 \0\r\x06\0\r4\0\rM\0\r\x1A\0\0 \x800\x01") } };
                    const _Y0W_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\x04>\0\x04=\0\x04K\0\0 \x800\x01\0\0-\0\x04@\0\0 \0\x044\0\x04>\0\x04;\0\x04>\0\x04>\0\0 \0\x04E\0\x04>\0\x04=\0\x04>\0\x043") } };
                    const _Y0W_MR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\t\x1A\0\t>\0\0 \x800\x01\0\0 \0\t5\0\t>\0\0 \0\t\x06\0\t \0\t5\0\t!\0\t>") } };
                    const _Y0W_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: true }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x06\0\0\0\0\0+\0V\0\x8D\0\xBB\0\xEF\0\0\x800\x01\0\0 \0\x01!\0\0i\0\0m\0\0g\0\x01'\0\0a\0\0 \0\0t\0\0a\0\0'\0\0 \x80\x11\x01\0\x800\x01\0\0 \0\x01!\0\0i\0\0m\0\0g\0\x01'\0\0a\0\0 \0\0t\0\0a\0\0'\0\0 \x80\x11\x01\0\x800\x01\0\0 \0\x01!\0\0i\0\0m\0\0g\0\x01'\0\0a\0\0t\0\0e\0\0j\0\0n\0\0 \0\0t\0\0a\0\0'\0\0 \x80\x11\x01\0\x800\x01\0\0 \0\x01!\0\0i\0\0m\0\0g\0\x01'\0\0a\0\0t\0\0 \0\0t\0\0a\0\0'\0\0 \x80\x11\x01\0\x800\x01\0\0-\0\0i\0\0l\0\0 \0\x01!\0\0i\0\0m\0\0g\0\x01'\0\0a\0\0 \0\0t\0\0a\0\0'\0\0 \x80\x11\x01\0\x800\x01\0\0 \0\x01!\0\0i\0\0m\0\0g\0\x01'\0\0a\0\0 \0\0t\0\0a\0\0'\0\0 \x80\x11\x01") } };
                    const _Y0W_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\x10\x01\0\x10/\0\0 \x800\x01\0\0 \0\x10\x15\0\x10\x10\0\x10:\0\x10\x19\0\x10<\0\x101\0\x10,\0\x10\0\0\x10:") } };
                    const _Y0W_NE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\t\x15\0\tK\0\0 \x800\x01\0\0 \0\t9\0\t*\0\tM\0\t$\0\t>") } };
                    const _Y0W_NL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0w\0\0e\0\0e\0\0k\0\0 \x800\x01\0\0 \0\0i\0\0n\0\0 \x80\x11\x01") } };
                    const _Y0W_NN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0v\0\0e\0\0k\0\0e\0\0 \x800\x01\0\0 \0\0i\0\0 \x80\x11\x01") } };
                    const _Y0W_NO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0u\0\0k\0\0e\0\0 \x800\x01\0\0 \0\0i\0\0 \x80\x11\x01") } };
                    const _Y0W_OR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\x0B0\0\0 \0\x0B8\0\x0B*\0\x0BM\0\x0B$\0\x0B>\0\x0B9\0\0 \x800\x01") } };
                    const _Y0W_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\n&\0\n>\0\0 \x800\x01\0\0 \0\n9\0\n+\0\n<\0\n$\0\n>") } };
                    const _Y0W_PCM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: true }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x06\0\0\0\0\0\"\0A\0c\0\x85\0\xA7\0\0\0\0W\0\0i\0\0i\0\0k\0\0 \x800\x01\0\0 \0\0f\0\x1E\xCD\0\0 \x80\x11\x01\0\0\0W\0\0i\0\0k\0\0 \x800\x01\0\0 \0\0f\0\x1E\xCD\0\0 \x80\x11\x01\0\0\0W\0\0i\0\0i\0\0k\0\0 \x800\x01\0\0 \0\0f\0\x1E\xCD\0\0 \x80\x11\x01\0\0\0W\0\0i\0\0i\0\0k\0\0 \x800\x01\0\0 \0\0f\0\x1E\xCD\0\0 \x80\x11\x01\0\0\0W\0\0i\0\0i\0\0k\0\0 \x800\x01\0\0 \0\0f\0\x1E\xCD\0\0 \x80\x11\x01\0\0\0W\0\0i\0\0i\0\0k\0\0 \x800\x01\0\0 \0\0f\0\x1E\xCD\0\0 \x80\x11\x01") } };
                    const _Y0W_PL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0,\0\0 \0\0t\0\0y\0\0d\0\0z\0\0.\0\0 \x800\x01") } };
                    const _Y0W_PS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x06'\0\x06H\0\x06F\0\x06\xCD\0\0 \x800\x01\0\0 \0\x06/\0\0 \x80\x11\x01") } };
                    const _Y0W_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0\xAA\0\0 \0\0s\0\0e\0\0m\0\0a\0\0n\0\0a\0\0 \0\0d\0\0e\0\0 \x80\x11\x01") } };
                    const _Y0W_QU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0 \0\0s\0\0e\0\0m\0\0a\0\0n\0\0a\0\0 \x80\x11\x01\0\0 \0\0w\0\0a\0\0t\0\0a\0\0p\0\0a") } };
                    const _Y0W_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: true }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x06\0\0\0\0\0(\0A\0i\0\x91\0\xB9\0\0\x800\x01\0\0.\0\0 \0\0e\0\0m\0\0n\0\0a\0\0 \0\0d\0\0a\0\0l\0\0 \x80\x11\x01\0\x800\x01\0\0.\0\0 \0\0d\0\0a\0\0l\0\0 \x80\x11\x01\0\x800\x01\0\0.\0\0 \0\0e\0\0m\0\0n\0\0a\0\0 \0\0d\0\0a\0\0l\0\0 \x80\x11\x01\0\x800\x01\0\0.\0\0 \0\0e\0\0m\0\0n\0\0a\0\0 \0\0d\0\0a\0\0l\0\0 \x80\x11\x01\0\x800\x01\0\0.\0\0 \0\0e\0\0m\0\0n\0\0a\0\0 \0\0d\0\0a\0\0l\0\0 \x80\x11\x01\0\x800\x01\0\0.\0\0 \0\0e\0\0m\0\0n\0\0a\0\0 \0\0d\0\0a\0\0l\0\0 \x80\x11\x01") } };
                    const _Y0W_RO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0s\0\x01\x03\0\0p\0\0t\0\x01\x03\0\0m\0\0\xE2\0\0n\0\0a\0\0 \x800\x01\0\0 \0\0d\0\0i\0\0n\0\0 \x80\x11\x01") } };
                    const _Y0W_RU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0-\0\x04O\0\0 \0\x04=\0\x045\0\x044\0\x045\0\x04;\0\x04O\0\0 \x80\x11\x01\0\0 \0\x043\0\0.") } };
                    const _Y0W_SAH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\x04A\0\x04K\0\x04;\0\0 \x800\x01\0\0 \0\x04=\0\x04M\0\x044\0\x048\0\x04M\0\x04;\0\x04M\0\x04B\0\x04M") } };
                    const _Y0W_SC: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0c\0\0h\0\0i\0\0d\0\0a\0\0 \x800\x01\0\0 \0\0d\0\0e\0\0 \0\0s\0\0u\0\0 \x80\x11\x01") } };
                    const _Y0W_SD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x06\xBE\0\x06A\0\x06*\0\x06H\0\0 \x800\x01\0\0 \0\x06,\0\x06H\0\0 \x80\x11\x01") } };
                    const _Y0W_SI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\r\xC3\0\r\xAD\0\r\xD2\0\r\xBA\0\0 \x800\x01") } };
                    const _Y0W_SK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0.\0\0 \0\0t\0\0\xFD\0\x01~\0\0d\0\0e\0\x01H\0\0 \0\0r\0\0o\0\0k\0\0a\0\0 \x80\x11\x01") } };
                    const _Y0W_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0.\0\0 \0\0t\0\0e\0\0d\0\0e\0\0n\0\0 \0\0l\0\0e\0\0t\0\0a\0\0 \x80\x11\x01") } };
                    const _Y0W_SO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0t\0\0o\0\0d\0\0d\0\0o\0\0b\0\0a\0\0a\0\0d\0\0k\0\0a\0\0 \x800\x01\0\0 \0\0e\0\0e\0\0 \x80\x11\x01") } };
                    const _Y0W_SQ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0j\0\0a\0\0v\0\0a\0\0 \x800\x01\0\0 \0\0e\0\0 \x80\x11\x01") } };
                    const _Y0W_SR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0.\0\0 \0\x04A\0\x045\0\x044\0\x04<\0\x048\0\x04F\0\x040\0\0 \0\x04C\0\0 \x80\x11\x01\0\0.") } };
                    const _Y0W_SR_ME: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0.\0\0 \0\0s\0\0j\0\0e\0\0d\0\0m\0\0i\0\0c\0\0a\0\0 \0\0u\0\0 \x80\x11\x01\0\0.") } };
                    const _Y0W_SV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0v\0\0e\0\0c\0\0k\0\0a\0\0 \x800\x01\0\0,\0\0 \x80\x11\x01") } };
                    const _Y0W_SW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0w\0\0i\0\0k\0\0i\0\0 \x800\x01\0\0 \0\0y\0\0a\0\0 \x80\x11\x01") } };
                    const _Y0W_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x07+\0\x07\x12\0\x07\x18\0\x07%\0\x07\x10\0\0 \x800\x01\0\0 \0\x07\x15\0\x07+\0\x07\"\0\x07,\0\x07\x10\0\0 \x80\x11\x01") } };
                    const _Y0W_TA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\x0B\x86\0\x0B\xAE\0\x0B\xCD\0\0 \0\x0B\x86\0\x0B\xA3\0\x0B\xCD\0\x0B\x9F\0\x0B\xBF\0\x0B\xA9\0\x0B\xCD\0\0 \x800\x01\0\0 \0\0-\0\x0B\x86\0\x0B\xAE\0\x0B\xCD\0\0 \0\x0B\xB5\0\x0B\xBE\0\x0B\xB0\0\x0B\xAE\0\x0B\xCD") } };
                    const _Y0W_TE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\x0C2\0\x0CK\0\0 \x800\x01\0\x0C5\0\0 \0\x0C5\0\x0C>\0\x0C0\0\x0C\x02") } };
                    const _Y0W_TG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x04\xB3\0\x040\0\x04D\0\x04B\0\x040\0\x048\0\0 \x800\x01\0\0,\0\0 \x80\x11\x01") } };
                    const _Y0W_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x0E*\0\x0E1\0\x0E\x1B\0\x0E\x14\0\x0E2\0\x0E+\0\x0EL\0\x0E\x17\0\x0E5\0\x0EH\0\0 \x800\x01\0\0 \0\x0E\x02\0\x0E-\0\x0E\x07\0\x0E\x1B\0\x0E5\0\0 \x80\x11\x01") } };
                    const _Y0W_TI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\x120\0\x12\x19\0\x12\x95\0\0 \x800\x01\0\0 \0\x12\x93\0\x12\xED\0\0 \x80\x11\x01") } };
                    const _Y0W_TK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0h\0\0e\0\0p\0\0d\0\0e\0\0 \x800\x01\0\0,\0\0 \x80\x11\x01") } };
                    const _Y0W_TO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0u\0\0i\0\0k\0\0e\0\0 \0\0h\0\0o\0\0n\0\0o\0\0 \x800\x01\0\0 \0\x02\xBB\0\0o\0\0 \x80\x11\x01") } };
                    const _Y0W_TR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\0y\0\x011\0\0l\0\x011\0\0n\0\x011\0\0n\0\0 \x800\x01\0\0.\0\0 \0\0h\0\0a\0\0f\0\0t\0\0a\0\0s\0\x011") } };
                    const _Y0W_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\x045\0\x04;\0\x04=\0\x04K\0\x04\xA3\0\0 \x800\x01\0\0 \0\x040\0\x04B\0\x04=\0\x040\0\x04A\0\x04K") } };
                    const _Y0W_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\x06\x0C\0\0 \x800\x01\0\0-\0\x06\xBE\0\x06\xD5\0\x06~\0\x06*\0\x06\xD5") } };
                    const _Y0W_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0-\0\x049\0\0 \0\x04B\0\x048\0\x046\0\0.\0\0 \x80\x11\x01\0\0 \0\x04@\0\0.") } };
                    const _Y0W_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0w\0\0e\0\0e\0\0k\0\0 \x800\x01\0\0 \0\0o\0\0f\0\0 \x80\x11\x01") } };
                    const _Y0W_UR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\x06\xA9\0\x06'\0\0 \x800\x01\0\0 \0\x06\xC1\0\x06A\0\x06*\0\x06\xC1") } };
                    const _Y0W_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0,\0\0 \x800\x01\0\0-\0\0h\0\0a\0\0f\0\0t\0\0a") } };
                    const _Y0W_UZ_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0,\0\0 \x800\x01\0\0-\0\x04\xB3\0\x040\0\x04D\0\x04B\0\x040") } };
                    const _Y0W_VEC: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0\xAA\0\0 \0\0s\0\0e\0\0t\0\0e\0\0m\0\0a\0\0n\0\0a\0\0 \0\0d\0\0e\0\0'\0\0l\0\0 \x80\x11\x01") } };
                    const _Y0W_VI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\0\0t\0\0u\0\x1E\xA7\0\0n\0\0 \x800\x01\0\0 \0\0c\0\x1E\xE7\0\0a\0\0 \0\0n\0\x01\x03\0\0m\0\0 \x80\x11\x01") } };
                    const _Y0W_XNR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \0\t&\0\t>\0\0 \0\t8\0\t*\0\tM\0\t$\0\t>\0\t9\0\0 \x800\x01") } };
                    const _Y0W_YRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x800\x01\0\0\xAA\0\0 \0\0s\0\x1E\xBD\0\0m\0\0\xE3\0\0n\0\0a\0\0 \x80\x11\x01") } };
                    const _Y0W_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0^t\0{,\x800\x01\0P\x0B\0f\x1F\0g\x1F") } };
                    const _Y0W_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0^t\0{,\x800\x01\0N*\0f\x1F\0g\x1F") } };
                    const _Y0W_ZH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0^t\0{,\x800\x01\0Th") } };
                    const _Y0W_ZH_HANT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0^t\0v\x84\0{,\x800\x01\0\x901") } };
                    const _YM0DE_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\x13c\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \x80\x10\x01\0\x80P\x01\0\x13c\0\0 \x80 \x03\0\0 \x80@\x01\0\0 \x80\x10\x01\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_BS_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0.") } };
                    const _YM0DE_EN_ZA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80\x10\x01\0\0/\x80 \x02\0\0/\x80@\x02") } };
                    const _YM0DE_EN_ZW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0.A\0\0 \x80@\x01\0\0 \x80 \x04\0.A\0\0 \x80\x10\x01\0\x80P\x01\0.A\0\0 \x80@\x01\0\0 \x80 \x03\0.A\0\0 \x80\x10\x01\0\x80P\x01\0.A\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _YM0DE_FO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0DE_FR_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0DE_HA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_IA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _YM0DE_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0.\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0.\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0DE_KOK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _YM0DE_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0-\x80@\x02\0\0-\x80 \x02\0\0,\0\0 \x80P\x01") } };
                    const _YM0DE_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80P\x04\0\0,\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0.") } };
                    const _YM0DE_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0DE_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0V\0\0\x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x04\0\x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x01\0\x80\x10\x01\0\0.\x80 \x02\0\0.\x80@\x02\0\0.\0\0 \x80P\x01") } };
                    const _YM0DE_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_PT_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0DE_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _YM0DE_SC: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0DE_SK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01") } };
                    const _YM0DE_TE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _YM0DE_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\x005\0\0\x80P\x04\0\x0E\x17\0\x0E5\0\x0EH\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_TI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _YM0DE_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0DE_YO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _YM0D_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0 \x0F\0\0/\x80 \x01\0 \x0F\0\0/\x80\x10\x01") } };
                    const _YM0D_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0D_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.") } };
                    const _YM0D_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.") } };
                    const _YM0D_BS_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80@\x02\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0.") } };
                    const _YM0D_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_CEB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _YM0D_DOI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_EN_BW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0D_EN_ZA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\x10\x01\0\0/\x80 \x02\0\0/\x80@\x02") } };
                    const _YM0D_EN_ZW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x02\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_ES_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_ES_CL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _YM0D_ES_DO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0;\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_ES_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80 \x02\0\0/\x80@\x02\0\0/\x80\x10\x01") } };
                    const _YM0D_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0J\0\0\x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x04\0\0r\0\0e\0\0n\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0(\0\0a\0\0)\0\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _YM0D_FY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _YM0D_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0m\0\0h\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0m\0\0h\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_HA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _YM0D_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0D_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0.\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0.\0\0 \x80\x10\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0D_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x04\0\x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0D_KN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80@\x01\0\0,\x80\x10\x01\0\x80 \x03\0\0 \x80@\x01\0\0,\x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\x10\x01\0\xB1D\0\0 \x80 \x04\0\0 \x80@\x01\0\xC7|\0\x80\x10\x01\0\xB1D\0\0 \x80 \x03\0\0 \x80@\x01\0\xC7|\0\x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80@\x01\0\0.") } };
                    const _YM0D_KOK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _YM0D_KS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _YM0D_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x04\0\x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x03\0\x80\x10\x01\0\0-\x80@\x02\0\0-\x80 \x02") } };
                    const _YM0D_LIJ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0o\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \0\0d\0\0o\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0.") } };
                    const _YM0D_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0D_ML: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_MNI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _YM0D_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80\x10\x01\0\x10J\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\x10\x01\0\x10J\0\0 \x80 \x03\0\0 \x80@\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_NQO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\x10\x01\0\0 \0\0/\0\0 \x80@\x01\0\0 \x80 \x04\0\x80\x10\x01\0\0 \0\0/\0\0 \x80@\x02\0\0 \x80 \x03\0\x80\x10\x01\0\0 \0\0/\0\0 \x80@\x02\0\0 \0\0/\0\0 \x80 \x02") } };
                    const _YM0D_PRG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0.\x80 \x02\0\0 \0\0s\0\0t\0\0.\0\0 \x80\x10\x01\0\x80@\x02\0\0.\x80 \x02\0\0 \0\0s\0\0t\0\0.\0\0 \x80\x10\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0D_PT_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0D_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01") } };
                    const _YM0D_SC: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0D_SI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _YM0D_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01") } };
                    const _YM0D_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \0\x07\x12\x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \0\x07\x12\x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0D_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\x10\x01\0\0 \x80@\x01\0\0-\x80 \x04\0\x80\x10\x01\0\0 \x80@\x01\0\0-\x80 \x03\0\x80\x10\x01\0\0-\x80@\x01\0\0-\x80 \x01") } };
                    const _YM0D_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0D_UR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\x06\x0C\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\x06\x0C\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0D_UZ_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0D_ZA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0@\0\0\0\0b\0\0i\0\0 \x80\x10\x01\0\0 \0\0n\0\0d\0\0w\0\0e\0\0n\0\0 \x80 \x01\0\0 \0\0n\0\0g\0\0o\0\0e\0\0n\0\0z\0\0 \x80@\x01\0\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _YM0D_ZH_SG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5") } };
                    const _YM0_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x02\0\0-\x80\x10\x01") } };
                    const _YM0_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0 \x0F\0\0/\x80\x10\x01") } };
                    const _YM0_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80!\x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80!\x04\0\0 \x80\x10\x01\0\x80!\x03\0\0 \x80\x10\x01\0\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.") } };
                    const _YM0_BR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80!\x04\0\0 \x80\x10\x01\0\0.\0\x80 \x03\0\0 \x80\x10\x01\0\0.\0\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0_BS_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80 \x03\0\0 \x80\x10\x01\0\0.\0\x80 \x02\0\0.\x80\x10\x01\0\0.") } };
                    const _YM0_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80!\x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\x80!\x03\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80!\x04\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80!\x04\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\x80!\x03\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0_DSB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80!\x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0_EL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80!\x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_EN_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80\x10\x01\0\0-\x80 \x02") } };
                    const _YM0_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_ES_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0\0-\x80\x10\x01") } };
                    const _YM0_ES_CL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x02\0\0-\x80\x10\x01") } };
                    const _YM0_ES_CO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_ES_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0#\0\0\x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x04\0\x80\x10\x01\0\0 \x80 \x03\0\x80\x10\x01\0\0/\x80 \x01") } };
                    const _YM0_FA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80\x10\x01\0\0/\x80 \x01") } };
                    const _YM0_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0\0-\x80\x10\x01") } };
                    const _YM0_FI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80!\x04\0\0 \x80\x10\x01\0\x80!\x03\0\0 \x80\x10\x01\0\x80!\x01\0\0.\x80\x10\x01") } };
                    const _YM0_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80!\x04\0\0 \x80\x10\x01\0\x80!\x03\0\0 \x80\x11\x01\0\x80!\x01\0\0/\x80\x10\x01") } };
                    const _YM0_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80!\x04\0\0 \x80\x10\x01\0\0.\0\x80!\x03\0\0 \x80\x10\x01\0\0.\0\x80 \x02\0\0.\0\0 \x80\x10\x01\0\0.") } };
                    const _YM0_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80\x10\x01\0\0.\0\0 \x80 \x04\0\x80\x10\x01\0\0.\0\0 \x80 \x03\0\x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.") } };
                    const _YM0_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80\x10\x01\0\0 \0\x05i\0 $\0\0 \x80!\x04\0\x80\x10\x01\0\0 \0\x05i\0\0.\0\0 \x80!\x03\0\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0_IS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0\0.\0\0 \x80\x10\x01") } };
                    const _YM0_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80\x10\x01\0^t\x80 \x01\0g\x08\0\x80\x10\x01\0\0/\x80 \x01") } };
                    const _YM0_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80 \x03\0\0.\0\0 \x80\x10\x01\0\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0_KEA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80!\x04\0\0 \0\0d\0\0i\0\0 \x80\x10\x01\0\x80!\x03\0\0 \x80\x10\x01\0\x80!\x02\0\0/\x80\x10\x01") } };
                    const _YM0_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80 \x04\0\x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80 \x03\0\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80\x10\x01\0\xB1D\0\0 \x80 \x04\0\x80\x10\x01\0\xB1D\0\0 \x80 \x03\0\x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.") } };
                    const _YM0_KOK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x17\0\0\x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80\x10\x01\0\0 \x80 \x03\0\x80 \x01\0\0-\x80\x10\x01") } };
                    const _YM0_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80 \x03\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0)\0\0\x80\x10\x01\0\0-\0\x046\0\0.\0\0,\0\0 \x80 \x04\0\x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80 \x03\0\x80\x10\x01\0\0-\x80 \x02") } };
                    const _YM0_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\x10\x01\0\0 \0\0m\0\0.\0\0 \x80!\x04\0\x80\x10\x01\0\0-\x80 \x02") } };
                    const _YM0_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80 \x04\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80 \x03\0\x80 \x02\0\0.\x80\x10\x01\0\0.") } };
                    const _YM0_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03\0\x80\x10\x01\0\0 \x80 \x05") } };
                    const _YM0_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80\x10\x01\0\0 \x80 \x04\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_PL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80!\x04\0\0 \x80\x10\x01\0\x80!\x03\0\0 \x80\x10\x01\0\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0_PT_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80!\x04\0\0 \x80\x10\x01\0\x80!\x03\0\0 \x80\x10\x01\0\x80!\x02\0\0-\x80\x10\x01") } };
                    const _YM0_RU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80!\x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80!\x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0_SC: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0&\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \0\0s\0\0u\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x02\0\0/\x80\x11\x01") } };
                    const _YM0_SI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80\x10\x01\0\0 \x80 \x04\0\x80\x10\x01\0\0 \x80 \x03\0\x80\x10\x01\0\0-\x80 \x01") } };
                    const _YM0_SK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80!\x04\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_SR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80 \x04\0\0 \x80\x10\x01\0\0.\0\x80 \x03\0\0 \x80\x10\x01\0\0.\0\x80 \x01\0\0.\0\0 \x80\x10\x01\0\0.") } };
                    const _YM0_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80 \x04\0\x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80 \x03\0\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80\x10\x01\0\0 \x80 \x04\0\x80\x10\x01\0\0 \x80 \x03\0\x80 \x01\0\0-\x80\x10\x01") } };
                    const _YM0_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80!\x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\x80!\x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80\x10\x01\0\0 \x80 \x04\0\x80\x10\x01\0\0 \x80 \x03\0\x80\x10\x01\0\0-\x80 \x02") } };
                    const _YM0_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80 \x03\0\0,\0\0 \x80\x10\x01\0\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0_VI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0 \0\0\x80 \x04\0\0 \0\0n\0\x01\x03\0\0m\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0^t\x80 \x01\0g\x08") } };
                    const _YM0_ZH_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80\x10\x01\0^t\x80 \x01\0g\x08\0\x80 \x01\0\0/\x80\x10\x01") } };
                    const _Y_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0 /\0\x043\0\0.") } };
                    const _Y_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0\0.") } };
                    const _Y_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0^t") } };
                    const _Y_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0\xB1D") } };
                    const _Y_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.") } };
                    const _Y_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01") } };
                    &[_A1_AF, _A1_AM, _A1_AR, _A1_AS, _A1_AST, _A1_AZ, _A1_BE, _A1_BG, _A1_BLO, _A1_BN, _A1_AM, _A1_BRX, _A1_BS, _A1_BS_CYRL, _A1_CA, _A1_CEB, _A1_CEB, _A1_CS, _A1_CV, _A1_CY, _A1_DA, _A1_DE, _A1_DOI, _A1_DSB, _A1_EL, _A1_CEB, _A1_AM, _A1_AM, _A1_EL, _A1_EN_BE, _A1_EN_BW, _A1_EN_BZ, _A1_EN_CA, _A1_EN_CH, _A1_EN_HK, _A1_CY, _A1_EN_MT, _A1_EN_MV, _A1_EN_PK, _A1_EN_SE, _A1_EL, _A1_EN_ZA, _A1_EN_ZW, _A1_EO, _A1_ES, _A1_ES_BO, _A1_ES_CL, _A1_ES_CO, _A1_ES_CO, _A1_ES_HN, _A1_ES_MX, _A1_ES_PA, _A1_ES_PE, _A1_ES_PA, _A1_ES_US, _A1_ET, _A1_EU, _A1_FA, _A1_FF_ADLM, _A1_FI, _A1_CEB, _A1_DE, _A1_AM, _A1_FR_BE, _A1_EN_SE, _A1_AZ, _A1_FY, _A1_AM, _A1_GD, _A1_GL, _A1_BN, _A1_BN, _A1_HE, _A1_EL, _A1_HI_LATN, _A1_HR, _A1_HR_BA, _A1_DSB, _A1_HU, _A1_HY, _A1_IA, _A1_CY, _A1_EL, _A1_IS, _A1_CY, _A1_AZ, _A1_JA, _A1_JV, _A1_KA, _A1_KEA, _A1_KGP, _A1_KK, _A1_EL, _A1_KN, _A1_KO, _A1_KOK, _A1_CEB, _A1_EL, _A1_KU, _A1_EL, _A1_KY, _A1_ET, _A1_EN_HK, _A1_LT, _A1_LV, _A1_EL, _A1_JV, _A1_MK, _A1_ML, _A1_MN, _A1_KN, _A1_BN, _A1_FR_BE, _A1_CY, _A1_MT, _A1_MY, _A1_NE, _A1_JV, _A1_NL_BE, _A1_DA, _A1_CEB, _A1_EL, _A1_AM, _A1_PL, _A1_PS, _A1_PT, _A1_PT_PT, _A1_EL, _A1_RM, _A1_EN_CH, _A1_RU, _A1_EL, _A1_SAH, _A1_EL, _A1_SC, _A1_CEB, _A1_SK, _A1_SL, _A1_SO, _A1_SQ, _A1_SR, _A1_SR, _A1_EL, _A1_EN_SE, _A1_AM, _A1_SYR, _A1_BN, _A1_TE, _A1_EN_BW, _A1_TH, _A1_CY, _A1_EN_CH, _A1_EL, _A1_PL, _A1_TT, _A1_UG, _A1_UK, _A1_UND, _A1_UR, _A1_UZ, _A1_UZ_CYRL, _A1_CY, _A1_BN, _A1_BRX, _A1_CEB, _A1_EL, _A1_YO, _A1_AM, _A1_YUE, _A1_YUE, _A1_YUE, _A1_ZH_HK, _A1_YUE, _A1_ZH_HK, _A1_ZH_SG, _A1_CEB, _A1E_AF, _A1E_AM, _A1E_AR, _A1E_AS, _A1E_AST, _A1E_AZ, _A1E_BE, _A1E_BG, _A1E_BLO, _A1E_BN, _A1E_BR, _A1E_BRX, _A1E_BS, _A1E_BS_CYRL, _A1E_CA, _A1E_CEB, _A1E_CEB, _A1E_CS, _A1E_CV, _A1E_CY, _A1E_DA, _A1E_DE, _A1E_DOI, _A1E_DE, _A1E_EL, _A1E_CEB, _A1E_EN_001, _A1E_EN_001, _A1E_EN_AU, _A1E_CY, _A1E_EN_BW, _A1E_EN_BW, _A1E_EN_CA, _A1E_EN_CH, _A1E_EN_AU, _A1E_EN_IE, _A1E_EN_IN, _A1E_EN_MT, _A1E_EN_AU, _A1E_EN_SE, _A1E_EN_ZA, _A1E_EN_ZW, _A1E_EO, _A1E_ES, _A1E_ES_419, _A1E_ES_AR, _A1E_ES_CL, _A1E_ES_CO, _A1E_ES_HN, _A1E_ES_MX, _A1E_ES_PA, _A1E_ES_PA, _A1E_ES_MX, _A1E_ET, _A1E_EU, _A1E_FA, _A1E_FA_AF, _A1E_FF_ADLM, _A1E_FI, _A1E_CEB, _A1E_FO, _A1E_BR, _A1E_FR_CA, _A1E_FR_CH, _A1E_FY, _A1E_BR, _A1E_GD, _A1E_GL, _A1E_BN, _A1E_HA, _A1E_HE, _A1E_CY, _A1E_HR, _A1E_DE, _A1E_HU, _A1E_HY, _A1E_IA, _A1E_ID, _A1E_CY, _A1E_DE, _A1E_BR, _A1E_IT_CH, _A1E_JA, _A1E_JV, _A1E_KA, _A1E_KEA, _A1E_KGP, _A1E_KK, _A1E_EL, _A1E_CEB, _A1E_KO, _A1E_KOK, _A1E_CEB, _A1E_KS_DEVA, _A1E_KU, _A1E_CY, _A1E_KY, _A1E_DE, _A1E_LO, _A1E_LT, _A1E_LV, _A1E_CY, _A1E_JV, _A1E_MK, _A1E_ML, _A1E_MN, _A1E_MNI, _A1E_MR, _A1E_CY, _A1E_MS_BN, _A1E_ID, _A1E_MT, _A1E_MY, _A1E_FY, _A1E_EL, _A1E_NO, _A1E_CEB, _A1E_CY, _A1E_CY, _A1E_PL, _A1E_PS, _A1E_PT, _A1E_PT_PT, _A1E_QU, _A1E_RM, _A1E_EN_CH, _A1E_RU, _A1E_RU_UA, _A1E_CY, _A1E_SAH, _A1E_KS_DEVA, _A1E_SC, _A1E_SD, _A1E_CEB, _A1E_SI, _A1E_CS, _A1E_SL, _A1E_CEB, _A1E_SQ, _A1E_SR, _A1E_SR, _A1E_CY, _A1E_SV, _A1E_CY, _A1E_SYR, _A1E_BN, _A1E_TE, _A1E_TG, _A1E_TH, _A1E_TI, _A1E_TK, _A1E_EL, _A1E_TR, _A1E_TT, _A1E_UG, _A1E_UK, _A1E_UND, _A1E_UR, _A1E_UZ, _A1E_UZ_CYRL, _A1E_BR, _A1E_BN, _A1E_WO, _A1E_CEB, _A1E_CY, _A1E_YO, _A1E_EN_001, _A1E_YUE, _A1E_YUE_HANS, _A1E_YUE_HANS, _A1E_ZH_HK, _A1E_YUE, _A1E_ZH_HK, _A1E_ZH_SG, _A1E_ZU, _D_BS, _D_BS, _D_BS, _D_BS, _D_BS, _D_BS, _D_BS, _D_JA, _D_KO, _D_LT, _D_BS, _D_BS, _D_BS, _D_UND, _D_JA, _D_JA, _D_JA, _D_JA, _DE_AF, _DE_AF, _DE_AR, _DE_AF, _DE_AF, _DE_AZ, _DE_BG, _DE_AF, _DE_AZ, _DE_AF, _DE_BS, _DE_BS, _DE_AF, _DE_AZ, _DE_AZ, _DE_CS, _DE_CV, _DE_DA, _DE_BS, _DE_AF, _DE_BS, _DE_AF, _DE_AZ, _DE_AF, _DE_AF, _DE_AF, _DE_AF, _DE_BG, _DE_AF, _DE_AZ, _DE_AF, _DE_CS, _DE_AZ, _DE_CS, _DE_AF, _DE_AF, _DE_BG, _DE_AF, _DE_AF, _DE_BG, _DE_HE, _DE_AF, _DE_BS, _DE_BS, _DE_HU, _DE_HY, _DE_AF, _DE_BG, _DE_CS, _DE_AF, _DE_JA, _DE_BG, _DE_AZ, _DE_BG, _DE_BG, _DE_AZ, _DE_AZ, _DE_KO, _DE_AZ, _DE_AZ, _DE_AF, _DE_BS, _DE_BG, _DE_BS, _DE_AF, _DE_BG, _DE_BG, _DE_MN, _DE_AZ, _DE_AZ, _DE_MY, _DE_AZ, _DE_AF, _DE_CS, _DE_AZ, _DE_AZ, _DE_BG, _DE_BG, _DE_CS, _DE_AF, _DE_CV, _DE_AF, _DE_AF, _DE_AZ, _DE_AZ, _DE_CS, _DE_BS, _DE_BG, _DE_CS, _DE_CS, _DE_AF, _DE_AF, _DE_AF, _DE_AR, _DE_AZ, _DE_AF, _DE_AF, _DE_AZ, _DE_AF, _DE_AZ, _DE_AZ, _DE_BG, _DE_UND, _DE_AZ, _DE_AF, _DE_VI, _DE_BG, _DE_AZ, _DE_AF, _DE_BG, _DE_BG, _DE_AZ, _DE_YUE_HANS, _DE_YUE_HANS, _DE_AZ, _DE_AZ, _E_FR, _E_FR, _E_FR, _E_UND, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_BE, _GY_BE, _GY_AF, _GY_AF, _GY_AF, _GY_BRX, _GY_BS, _GY_BS, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_CV, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_HI_LATN, _GY_BS, _GY_AF, _GY_HU, _GY_HY, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_JA, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_KK, _GY_AF, _GY_KO, _GY_AF, _GY_AF, _GY_KY, _GY_AF, _GY_LT, _GY_LV, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_BE, _GY_AF, _GY_SAH, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_BS, _GY_BS, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_TT, _GY_AF, _GY_AF, _GY_HI_LATN, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_JA, _GY_JA, _GY_JA, _GY_JA, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AZ, _GYM0_BE, _GYM0_BG, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_BS, _GYM0_BS, _GYM0_CA, _GYM0_AF, _GYM0_AF, _GYM0_CS, _GYM0_CV, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_EL, _GYM0_AF, _GYM0_ES, _GYM0_ES_CO, _GYM0_AF, _GYM0_EU, _GYM0_AF, _GYM0_AF, _GYM0_EL, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_EL, _GYM0_ES_CO, _GYM0_GU, _GYM0_AF, _GYM0_HI, _GYM0_HI_LATN, _GYM0_HR, _GYM0_AF, _GYM0_HU, _GYM0_HY, _GYM0_AF, _GYM0_AF, _GYM0_HI, _GYM0_AF, _GYM0_AF, _GYM0_JA, _GYM0_AF, _GYM0_KA, _GYM0_EL, _GYM0_KGP, _GYM0_KK, _GYM0_AF, _GYM0_KO, _GYM0_AF, _GYM0_KU, _GYM0_HI, _GYM0_KY, _GYM0_AF, _GYM0_GU, _GYM0_LT, _GYM0_LV, _GYM0_HI, _GYM0_AF, _GYM0_AF, _GYM0_MN, _GYM0_HI, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_GU, _GYM0_PL, _GYM0_ES_CO, _GYM0_AZ, _GYM0_EL, _GYM0_AF, _GYM0_BE, _GYM0_HI, _GYM0_AF, _GYM0_AF, _GYM0_CS, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_BS, _GYM0_BS, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AZ, _GYM0_AF, _GYM0_HI, _GYM0_AF, _GYM0_AZ, _GYM0_AF, _GYM0_AZ, _GYM0_TT, _GYM0_UG, _GYM0_UK, _GYM0_HI_LATN, _GYM0_AF, _GYM0_GU, _GYM0_GU, _GYM0_AF, _GYM0_AF, _GYM0_KGP, _GYM0_AF, _GYM0_HI, _GYM0_AF, _GYM0_JA, _GYM0_JA, _GYM0_JA, _GYM0_JA, _GYM0D_AF, _GYM0D_AM, _GYM0D_AR, _GYM0D_AS, _GYM0D_AF, _GYM0D_AZ, _GYM0D_BE, _GYM0D_BG, _GYM0D_BLO, _GYM0D_BN, _GYM0D_AF, _GYM0D_BRX, _GYM0D_BS, _GYM0D_BS_CYRL, _GYM0D_CA, _GYM0D_CEB, _GYM0D_CEB, _GYM0D_CS, _GYM0D_CV, _GYM0D_CY, _GYM0D_DA, _GYM0D_DA, _GYM0D_DOI, _GYM0D_DA, _GYM0D_EL, _GYM0D_CEB, _GYM0D_EL, _GYM0D_CY, _GYM0D_EN_CH, _GYM0D_ES, _GYM0D_ES_419, _GYM0D_ES, _GYM0D_ES, _GYM0D_ES, _GYM0D_ES, _GYM0D_DA, _GYM0D_EU, _GYM0D_FA, _GYM0D_FA_AF, _GYM0D_FF_ADLM, _GYM0D_FI, _GYM0D_CEB, _GYM0D_DA, _GYM0D_EL, _GYM0D_FR_CA, _GYM0D_AF, _GYM0D_EL, _GYM0D_GD, _GYM0D_ES_419, _GYM0D_GU, _GYM0D_HE, _GYM0D_HI, _GYM0D_HI_LATN, _GYM0D_HR, _GYM0D_DA, _GYM0D_HU, _GYM0D_HY, _GYM0D_AR, _GYM0D_EL, _GYM0D_GU, _GYM0D_IS, _GYM0D_EL, _GYM0D_JA, _GYM0D_EL, _GYM0D_KA, _GYM0D_EL, _GYM0D_KGP, _GYM0D_KK, _GYM0D_AF, _GYM0D_KO, _GYM0D_CEB, _GYM0D_KU, _GYM0D_HI, _GYM0D_KY, _GYM0D_LB, _GYM0D_LO, _GYM0D_LT, _GYM0D_LV, _GYM0D_AR, _GYM0D_AF, _GYM0D_EN_CH, _GYM0D_AM, _GYM0D_MN, _GYM0D_BRX, _GYM0D_MR, _GYM0D_AF, _GYM0D_MT, _GYM0D_MY, _GYM0D_AM, _GYM0D_EL, _GYM0D_DA, _GYM0D_OR, _GYM0D_LO, _GYM0D_EN_CH, _GYM0D_AM, _GYM0D_ES_419, _GYM0D_QU, _GYM0D_RM, _GYM0D_EN_CH, _GYM0D_BE, _GYM0D_AF, _GYM0D_SC, _GYM0D_AM, _GYM0D_CEB, _GYM0D_SK, _GYM0D_SL, _GYM0D_CEB, _GYM0D_EN_CH, _GYM0D_SR, _GYM0D_SR, _GYM0D_EL, _GYM0D_FR_CA, _GYM0D_EL, _GYM0D_SYR, _GYM0D_AS, _GYM0D_TE, _GYM0D_MT, _GYM0D_TH, _GYM0D_EL, _GYM0D_TK, _GYM0D_TO, _GYM0D_TR, _GYM0D_TT, _GYM0D_UG, _GYM0D_UK, _GYM0D_UND, _GYM0D_UR, _GYM0D_UZ, _GYM0D_GU, _GYM0D_EL, _GYM0D_VI, _GYM0D_BN, _GYM0D_CEB, _GYM0D_EL, _GYM0D_AS, _GYM0D_AF, _GYM0D_YUE, _GYM0D_YUE, _GYM0D_YUE, _GYM0D_ZH_HANT, _GYM0D_AM, _GYM0DE_AF, _GYM0DE_AR, _GYM0DE_AST, _GYM0DE_AZ, _GYM0DE_BE, _GYM0DE_BG, _GYM0DE_BLO, _GYM0DE_BN, _GYM0DE_AF, _GYM0DE_BRX, _GYM0DE_BS, _GYM0DE_BS, _GYM0DE_CA, _GYM0DE_CEB, _GYM0DE_CEB, _GYM0DE_CS, _GYM0DE_CV, _GYM0DE_AST, _GYM0DE_DA, _GYM0DE_DE, _GYM0DE_DOI, _GYM0DE_DE, _GYM0DE_AF, _GYM0DE_CEB, _GYM0DE_AST, _GYM0DE_AST, _GYM0DE_EN_AU, _GYM0DE_EN_AU, _GYM0DE_EN_IN, _GYM0DE_ES, _GYM0DE_ES_AR, _GYM0DE_ES_CO, _GYM0DE_ET, _GYM0DE_EU, _GYM0DE_AF, _GYM0DE_CEB, _GYM0DE_FF_ADLM, _GYM0DE_DA, _GYM0DE_CEB, _GYM0DE_DA, _GYM0DE_AF, _GYM0DE_AF, _GYM0DE_AF, _GYM0DE_GD, _GYM0DE_ES_AR, _GYM0DE_GU, _GYM0DE_HE, _GYM0DE_AST, _GYM0DE_HI_LATN, _GYM0DE_BS, _GYM0DE_DE, _GYM0DE_HU, _GYM0DE_HY, _GYM0DE_AF, _GYM0DE_AST, _GYM0DE_GU, _GYM0DE_DE, _GYM0DE_AF, _GYM0DE_JA, _GYM0DE_AST, _GYM0DE_KA, _GYM0DE_AST, _GYM0DE_KGP, _GYM0DE_KK, _GYM0DE_AF, _GYM0DE_KO, _GYM0DE_CEB, _GYM0DE_KU, _GYM0DE_AST, _GYM0DE_KY, _GYM0DE_DE, _GYM0DE_LO, _GYM0DE_LT, _GYM0DE_LV, _GYM0DE_CEB, _GYM0DE_AST, _GYM0DE_AST, _GYM0DE_MN, _GYM0DE_GU, _GYM0DE_AST, _GYM0DE_MT, _GYM0DE_MY, _GYM0DE_AF, _GYM0DE_DA, _GYM0DE_CEB, _GYM0DE_PA, _GYM0DE_AST, _GYM0DE_ES_AR, _GYM0DE_BN, _GYM0DE_RM, _GYM0DE_AST, _GYM0DE_BE, _GYM0DE_AST, _GYM0DE_SC, _GYM0DE_CEB, _GYM0DE_SK, _GYM0DE_DE, _GYM0DE_CEB, _GYM0DE_AST, _GYM0DE_BS, _GYM0DE_BS, _GYM0DE_AST, _GYM0DE_AF, _GYM0DE_AST, _GYM0DE_SYR, _GYM0DE_TE, _GYM0DE_BN, _GYM0DE_TH, _GYM0DE_TI, _GYM0DE_TK, _GYM0DE_AF, _GYM0DE_TK, _GYM0DE_TT, _GYM0DE_UG, _GYM0DE_UK, _GYM0DE_UND, _GYM0DE_UR, _GYM0DE_UZ, _GYM0DE_UZ, _GYM0DE_AF, _GYM0DE_BN, _GYM0DE_BN, _GYM0DE_CEB, _GYM0DE_AST, _GYM0DE_AST, _GYM0DE_YUE, _GYM0DE_YUE_HANS, _GYM0DE_YUE_HANS, _GYM0DE_YUE_HANS, _GYM0DE_YUE, _GYM0DE_YUE_HANS, _M0_BG, _M0_BR, _M0_DA, _M0_EL, _M0_ET, _M0_FO, _M0_FO, _M0_HR, _M0_JA, _M0_KO, _M0_LT, _M0_MN, _M0_HR, _M0_HR, _M0_FO, _M0_UND, _M0_FO, _M0_FO, _M0_YUE, _M0_YUE, _M0_YUE, _M0_YUE, _M0_JA, _M0D_AF, _M0D_AM, _M0D_AR, _M0D_AF, _M0D_AST, _M0D_AZ, _M0D_BE, _M0D_BG, _M0D_AM, _M0D_AST, _M0D_BR, _M0D_BRX, _M0D_BS, _M0D_BS_CYRL, _M0D_AST, _M0D_AM, _M0D_AM, _M0D_CS, _M0D_AZ, _M0D_CY, _M0D_DA, _M0D_BS, _M0D_AST, _M0D_BS, _M0D_AST, _M0D_AM, _M0D_BR, _M0D_BR, _M0D_AST, _M0D_AST, _M0D_EN_BW, _M0D_EN_BW, _M0D_EN_CA, _M0D_AZ, _M0D_AST, _M0D_EN_BW, _M0D_AST, _M0D_EN_ZA, _M0D_EN_ZW, _M0D_ES, _M0D_ES_CL, _M0D_ES_CO, _M0D_ES_PA, _M0D_ES_PA, _M0D_DA, _M0D_EU, _M0D_FA, _M0D_AM, _M0D_FF_ADLM, _M0D_BS, _M0D_AM, _M0D_FO, _M0D_BR, _M0D_FR_CA, _M0D_FR_CH, _M0D_FF_ADLM, _M0D_BR, _M0D_GD, _M0D_ES_CO, _M0D_AST, _M0D_AM, _M0D_HE, _M0D_AST, _M0D_HR, _M0D_BS, _M0D_HU, _M0D_HY, _M0D_ES_CL, _M0D_AST, _M0D_AST, _M0D_BS, _M0D_BR, _M0D_JA, _M0D_BR, _M0D_BE, _M0D_KEA, _M0D_KGP, _M0D_AZ, _M0D_CY, _M0D_KN, _M0D_KO, _M0D_KOK, _M0D_AM, _M0D_KU, _M0D_AST, _M0D_KY, _M0D_BS, _M0D_AST, _M0D_LT, _M0D_LV, _M0D_AST, _M0D_AF, _M0D_BE, _M0D_ML, _M0D_MN, _M0D_ML, _M0D_AST, _M0D_FF_ADLM, _M0D_MT, _M0D_CY, _M0D_FF_ADLM, _M0D_AST, _M0D_BS, _M0D_AM, _M0D_CY, _M0D_PCM, _M0D_PL, _M0D_PT, _M0D_PT_PT, _M0D_FR_CA, _M0D_RM, _M0D_AZ, _M0D_AZ, _M0D_AST, _M0D_PT, _M0D_AM, _M0D_SI, _M0D_CS, _M0D_SL, _M0D_AM, _M0D_BE, _M0D_SL, _M0D_SL, _M0D_AST, _M0D_AST, _M0D_BE, _M0D_AST, _M0D_SYR, _M0D_KN, _M0D_AST, _M0D_AF, _M0D_AST, _M0D_AST, _M0D_AZ, _M0D_AST, _M0D_AST, _M0D_AZ, _M0D_UG, _M0D_AZ, _M0D_EN_CA, _M0D_AST, _M0D_UZ, _M0D_BR, _M0D_BR, _M0D_AST, _M0D_AF, _M0D_AM, _M0D_AST, _M0D_AST, _M0D_AST, _M0D_JA, _M0D_JA, _M0D_JA, _M0D_ZH_HK, _M0D_JA, _M0D_ZH_HK, _M0D_ZH_SG, _M0DE_AF, _M0DE_AM, _M0DE_AR, _M0DE_AS, _M0DE_AST, _M0DE_AZ, _M0DE_BE, _M0DE_BG, _M0DE_BLO, _M0DE_BN, _M0DE_BR, _M0DE_BLO, _M0DE_BS, _M0DE_BS_CYRL, _M0DE_CA, _M0DE_BLO, _M0DE_BLO, _M0DE_CS, _M0DE_CV, _M0DE_AST, _M0DE_DA, _M0DE_BS, _M0DE_AST, _M0DE_BS, _M0DE_AF, _M0DE_BLO, _M0DE_EN_001, _M0DE_EN_001, _M0DE_EN_AU, _M0DE_AST, _M0DE_EN_BW, _M0DE_EN_BW, _M0DE_EN_CA, _M0DE_EN_CH, _M0DE_EN_GB, _M0DE_AST, _M0DE_EN_GB, _M0DE_EN_ZA, _M0DE_EN_ZW, _M0DE_ES, _M0DE_ES_AR, _M0DE_ES_CL, _M0DE_ES_CO, _M0DE_ES_MX, _M0DE_ES_PA, _M0DE_ES_PA, _M0DE_ES_CO, _M0DE_ET, _M0DE_EU, _M0DE_FA, _M0DE_FA_AF, _M0DE_FF_ADLM, _M0DE_FI, _M0DE_BLO, _M0DE_FO, _M0DE_BR, _M0DE_FR_CA, _M0DE_FR_CH, _M0DE_FF_ADLM, _M0DE_BR, _M0DE_AST, _M0DE_ES_CO, _M0DE_AST, _M0DE_BLO, _M0DE_HE, _M0DE_AST, _M0DE_HR, _M0DE_BS, _M0DE_HU, _M0DE_AZ, _M0DE_IA, _M0DE_AST, _M0DE_AST, _M0DE_BS, _M0DE_BR, _M0DE_JA, _M0DE_JV, _M0DE_BE, _M0DE_KEA, _M0DE_KGP, _M0DE_AZ, _M0DE_AF, _M0DE_KN, _M0DE_KO, _M0DE_KOK, _M0DE_BLO, _M0DE_KU, _M0DE_AST, _M0DE_KY, _M0DE_BS, _M0DE_LO, _M0DE_LT, _M0DE_LV, _M0DE_AST, _M0DE_AS, _M0DE_BE, _M0DE_ML, _M0DE_MN, _M0DE_ML, _M0DE_AST, _M0DE_MS, _M0DE_MT, _M0DE_MY, _M0DE_FF_ADLM, _M0DE_AF, _M0DE_NO, _M0DE_BLO, _M0DE_PA, _M0DE_AST, _M0DE_PL, _M0DE_PS, _M0DE_PT, _M0DE_PT_PT, _M0DE_QU, _M0DE_RM, _M0DE_EN_CH, _M0DE_CV, _M0DE_AST, _M0DE_SC, _M0DE_BLO, _M0DE_SI, _M0DE_CS, _M0DE_SL, _M0DE_BLO, _M0DE_BE, _M0DE_SR, _M0DE_SR, _M0DE_AST, _M0DE_AF, _M0DE_SV_FI, _M0DE_AST, _M0DE_SYR, _M0DE_TA, _M0DE_TE, _M0DE_AS, _M0DE_TH, _M0DE_TI, _M0DE_TK, _M0DE_AF, _M0DE_TR, _M0DE_AZ, _M0DE_UG, _M0DE_EN_CH, _M0DE_UND, _M0DE_UR, _M0DE_UZ, _M0DE_EN_001, _M0DE_BR, _M0DE_AST, _M0DE_AS, _M0DE_BLO, _M0DE_AST, _M0DE_YO, _M0DE_EN_001, _M0DE_YUE, _M0DE_YUE_HANS, _M0DE_YUE_HANS, _M0DE_ZH_HK, _M0DE_YUE, _M0DE_ZH_HK, _M0DE_ZH_SG, _M0DE_PS, _Y_BG, _Y_BS, _Y_BS, _Y_BS, _Y_BS, _Y_JA, _Y_KO, _Y_LV, _Y_BS, _Y_BS, _Y_UND, _Y_JA, _Y_JA, _Y_JA, _Y_JA, _Y0W_AF, _Y0W_AR, _Y0W_AS, _Y0W_AST, _Y0W_AZ, _Y0W_BE, _Y0W_BG, _Y0W_BLO, _Y0W_BN, _Y0W_BR, _Y0W_BS, _Y0W_BS_CYRL, _Y0W_CA, _Y0W_CEB, _Y0W_CHR, _Y0W_CS, _Y0W_CV, _Y0W_CY, _Y0W_DA, _Y0W_DE, _Y0W_DOI, _Y0W_DSB, _Y0W_EL, _Y0W_ES, _Y0W_ET, _Y0W_EU, _Y0W_FA, _Y0W_FF_ADLM, _Y0W_FI, _Y0W_FIL, _Y0W_FO, _Y0W_FR, _Y0W_FY, _Y0W_GA, _Y0W_GD, _Y0W_GL, _Y0W_GU, _Y0W_HA, _Y0W_HE, _Y0W_HI, _Y0W_HI_LATN, _Y0W_HR, _Y0W_HSB, _Y0W_HU, _Y0W_HY, _Y0W_IA, _Y0W_ID, _Y0W_IG, _Y0W_IS, _Y0W_IT, _Y0W_JA, _Y0W_JV, _Y0W_KA, _Y0W_KEA, _Y0W_KGP, _Y0W_KK, _Y0W_KM, _Y0W_KO, _Y0W_KS, _Y0W_KU, _Y0W_KY, _Y0W_LO, _Y0W_LT, _Y0W_LV, _Y0W_MI, _Y0W_MK, _Y0W_ML, _Y0W_MN, _Y0W_MR, _Y0W_MT, _Y0W_MY, _Y0W_NE, _Y0W_NL, _Y0W_NN, _Y0W_NO, _Y0W_OR, _Y0W_PA, _Y0W_PCM, _Y0W_PL, _Y0W_PS, _Y0W_PT, _Y0W_GL, _Y0W_QU, _Y0W_RM, _Y0W_RO, _Y0W_RU, _Y0W_SAH, _Y0W_SC, _Y0W_SD, _Y0W_SI, _Y0W_SK, _Y0W_SL, _Y0W_SO, _Y0W_SQ, _Y0W_SR, _Y0W_BS, _Y0W_SR_ME, _Y0W_SV, _Y0W_SW, _Y0W_SYR, _Y0W_TA, _Y0W_TE, _Y0W_TG, _Y0W_TH, _Y0W_TI, _Y0W_TK, _Y0W_TO, _Y0W_TR, _Y0W_TT, _Y0W_UG, _Y0W_UK, _Y0W_UND, _Y0W_UR, _Y0W_UZ, _Y0W_UZ_CYRL, _Y0W_VEC, _Y0W_VI, _Y0W_XNR, _Y0W_YRL, _Y0W_YUE, _Y0W_YUE_HANS, _Y0W_ZH, _Y0W_JA, _Y0W_ZH_HANT, _Y0W_JA, _YM0_AF, _YM0_AM, _YM0_AR, _YM0_AF, _YM0_AST, _YM0_AZ, _YM0_BE, _YM0_BG, _YM0_AM, _YM0_AM, _YM0_BR, _YM0_AM, _YM0_BS, _YM0_BS_CYRL, _YM0_CA, _YM0_AM, _YM0_AM, _YM0_CS, _YM0_CV, _YM0_AM, _YM0_DA, _YM0_AM, _YM0_AM, _YM0_DSB, _YM0_EL, _YM0_AM, _YM0_BR, _YM0_BR, _YM0_EN_CA, _YM0_AZ, _YM0_EN_CA, _YM0_ES, _YM0_ES_AR, _YM0_ES_CL, _YM0_ES_CO, _YM0_ES_PA, _YM0_ES_PA, _YM0_DA, _YM0_EU, _YM0_FA, _YM0_AM, _YM0_FF_ADLM, _YM0_FI, _YM0_AM, _YM0_AZ, _YM0_BR, _YM0_EN_CA, _YM0_AZ, _YM0_FF_ADLM, _YM0_BR, _YM0_GD, _YM0_ES_CO, _YM0_AM, _YM0_AM, _YM0_DA, _YM0_AM, _YM0_HR, _YM0_DSB, _YM0_HU, _YM0_HY, _YM0_AF, _YM0_AM, _YM0_AM, _YM0_IS, _YM0_BR, _YM0_JA, _YM0_AF, _YM0_KA, _YM0_KEA, _YM0_KGP, _YM0_KK, _YM0_AM, _YM0_AM, _YM0_KO, _YM0_KOK, _YM0_AM, _YM0_KU, _YM0_AM, _YM0_KY, _YM0_DA, _YM0_AM, _YM0_LT, _YM0_LV, _YM0_AM, _YM0_AF, _YM0_MK, _YM0_MN, _YM0_AM, _YM0_AM, _YM0_FF_ADLM, _YM0_EN_CA, _YM0_MY, _YM0_FF_ADLM, _YM0_AM, _YM0_DA, _YM0_AM, _YM0_AM, _YM0_AM, _YM0_PL, _YM0_PT, _YM0_PT_PT, _YM0_EN_CA, _YM0_RM, _YM0_AZ, _YM0_RU, _YM0_AM, _YM0_SC, _YM0_AM, _YM0_SI, _YM0_SK, _YM0_AM, _YM0_AM, _YM0_DA, _YM0_SR, _YM0_SR, _YM0_AM, _YM0_EN_CA, _YM0_AM, _YM0_BR, _YM0_AM, _YM0_AM, _YM0_AF, _YM0_AM, _YM0_AM, _YM0_AZ, _YM0_AM, _YM0_BR, _YM0_TT, _YM0_UG, _YM0_UK, _YM0_UND, _YM0_AM, _YM0_UZ, _YM0_KGP, _YM0_BR, _YM0_VI, _YM0_AF, _YM0_AM, _YM0_AM, _YM0_AM, _YM0_BR, _YM0_JA, _YM0_YUE_HANS, _YM0_JA, _YM0_ZH_HK, _YM0_JA, _YM0_ZH_HK, _YM0_EN_CA, _A1_EN_SE, _A1_EN_HK, _YM0D_AR, _A1_JV, _A1_EN_HK, _A1_EN_CH, _YM0D_BE, _YM0D_BG, _A1_BLO, _YM0D_BN, _A1_AM, _A1_JV, _YM0D_BS, _YM0D_BS_CYRL, _YM0D_CA, _YM0D_CEB, _YM0D_CEB, _A1_SK, _A1_CV, _A1_EN_HK, _A1_IS, _A1_IS, _YM0D_DOI, _A1_IS, _A1_EN_HK, _YM0D_CEB, _A1_AM, _A1_AM, _A1_EN_HK, _YM0D_EN_BW, _YM0D_EN_BW, _A1_EN_CA, _A1_EN_CH, _A1_EN_HK, _A1_EN_HK, _A1_EN_HK, _YM0D_EN_BW, _A1_NL_BE, _A1_EN_SE, _YM0D_EN_ZA, _YM0D_EN_ZW, _A1_EN_SE, _A1_ES_US, _YM0D_ES_AR, _YM0D_ES_CL, _YM0D_ES_AR, _YM0D_ES_DO, _YM0D_ES_PA, _YM0D_ES_PA, _A1_IS, _YM0D_EU, _A1_FA, _YM0D_CEB, _A1_FF_ADLM, _A1_IS, _YM0D_CEB, _A1_DA, _A1_AM, _A1_EN_SE, _A1_EN_CH, _YM0D_FY, _A1_AM, _YM0D_GD, _YM0D_ES_AR, _YM0D_BN, _YM0D_HA, _A1_HE, _A1_EN_HK, _YM0D_BN, _A1_HR, _A1_IS, _A1_HU, _YM0D_HY, _A1_JV, _A1_EN_HK, _YM0D_BE, _A1_EN_HK, _A1_IS, _A1_AM, _A1_YUE, _A1_JV, _YM0D_KA, _A1_AM, _A1_KGP, _YM0D_KK, _A1_EN_HK, _YM0D_KN, _YM0D_KO, _YM0D_KOK, _YM0D_KS, _YM0D_CEB, _A1_KU, _A1_EN_HK, _A1_EN_HK, _A1_EN_HK, _A1_EN_HK, _YM0D_KY, _A1_IS, _YM0D_LIJ, _A1_EN_SE, _A1_EN_HK, _A1_LT, _YM0D_LV, _A1_EN_HK, _A1_JV, _YM0D_MK, _YM0D_ML, _A1_MN, _YM0D_MNI, _YM0D_BN, _A1_EN_HK, _YM0D_MT, _YM0D_MY, _A1_IS, _YM0D_FY, _A1_EN_HK, _A1_IS, _YM0D_NQO, _A1_AM, _YM0D_CEB, _A1_EN_HK, _A1_EN_HK, _A1_PL, _YM0D_PRG, _A1_PT, _YM0D_PT_PT, _A1_JV, _YM0D_RM, _A1_EN_CH, _A1_RU, _A1_EN_HK, _YM0D_SC, _YM0D_CEB, _YM0D_SI, _A1_SK, _YM0D_SL, _YM0D_CEB, _YM0D_BE, _A1_BS, _A1_BS, _YM0D_BN, _A1_EN_SE, _A1_EN_HK, _YM0D_SYR, _A1_EN_CH, _YM0D_BN, _YM0D_DOI, _YM0D_BN, _A1_EN_HK, _A1_EN_HK, _A1_EN_CH, _A1_EN_HK, _A1_EN_CH, _YM0D_TT, _YM0D_UG, _YM0D_UK, _A1_UND, _YM0D_UR, _YM0D_UZ, _YM0D_UZ_CYRL, _A1_AM, _YM0D_BN, _A1_EN_HK, _A1_JV, _YM0D_CEB, _A1_EN_HK, _A1_EN_HK, _A1_AM, _A1_YUE, _A1_YUE, _YM0D_ZA, _A1_YUE, _A1_ZH_HK, _A1_YUE, _A1_ZH_HK, _YM0D_ZH_SG, _A1_EN_CA, _A1E_FR_CA, _YM0DE_AM, _A1E_AR, _A1E_JV, _A1E_CY, _A1E_AZ, _A1E_SQ, _A1E_BG, _A1E_BLO, _A1E_BN, _A1E_BR, _A1E_CEB, _A1E_BS, _YM0DE_BS_CYRL, _A1E_CA, _A1E_CEB, _A1E_CEB, _A1E_CS, _A1E_CV, _A1E_CY, _A1E_NO, _A1E_DE, _A1E_DOI, _A1E_DE, _A1E_EL, _A1E_CEB, _A1E_EN_001, _A1E_EN_001, _A1E_EN_AU, _A1E_CY, _A1E_EN_MT, _A1E_EN_MT, _A1E_EN_CA, _A1E_EN_CH, _A1E_EN_AU, _A1E_EN_IE, _A1E_EN_IN, _A1E_EN_MT, _A1E_EN_SE, _YM0DE_EN_ZA, _YM0DE_EN_ZW, _A1E_ES, _A1E_ES_419, _A1E_ES_AR, _A1E_ES_CL, _A1E_ES_CO, _A1E_ES_MX, _A1E_ES_PA, _A1E_ES_PA, _A1E_ES_MX, _A1E_ET, _A1E_EU, _A1E_FA, _A1E_FA_AF, _YM0DE_FF_ADLM, _A1E_NO, _A1E_CEB, _YM0DE_FO, _A1E_BR, _A1E_FR_CA, _YM0DE_FR_CH, _A1E_FY, _A1E_BR, _A1E_GD, _A1E_GL, _A1E_BN, _YM0DE_HA, _A1E_HE, _A1E_CY, _A1E_HR, _A1E_DE, _A1E_HU, _A1E_HY, _YM0DE_IA, _A1E_CY, _A1E_CY, _A1E_DE, _A1E_BR, _A1E_JA, _A1E_JV, _YM0DE_KA, _A1E_EN_001, _A1E_KGP, _A1E_KK, _A1E_EL, _A1E_CEB, _A1E_KO, _YM0DE_KOK, _A1E_CEB, _A1E_KU, _A1E_CY, _YM0DE_KY, _A1E_DE, _A1E_CY, _A1E_LT, _YM0DE_LV, _A1E_CY, _A1E_JV, _YM0DE_MK, _YM0DE_KOK, _YM0DE_MN, _A1E_MNI, _A1E_DOI, _A1E_CY, _YM0DE_MT, _A1E_MY, _A1E_FY, _A1E_EL, _A1E_NO, _A1E_CEB, _A1E_CY, _A1E_CY, _A1E_PL, _A1E_PT, _YM0DE_PT_PT, _A1E_QU, _YM0DE_RM, _A1E_EN_CH, _A1E_RU, _A1E_RU_UA, _A1E_CY, _YM0DE_SC, _A1E_CEB, _A1E_SI, _YM0DE_SK, _A1E_SL, _A1E_CEB, _A1E_SQ, _A1E_SR, _A1E_SR, _A1E_CY, _A1E_SV, _A1E_CY, _A1E_SYR, _A1E_BN, _YM0DE_TE, _A1E_BN, _YM0DE_TH, _YM0DE_TI, _A1E_TK, _A1E_EL, _A1E_TR, _YM0DE_TT, _A1E_UG, _YM0DE_UK, _A1E_UND, _A1E_UR, _A1E_UZ, _A1E_UZ, _A1E_BR, _A1E_BN, _A1E_JV, _A1E_CEB, _A1E_CY, _YM0DE_YO, _A1E_EN_001, _A1E_YUE, _A1E_YUE_HANS, _A1E_YUE_HANS, _A1E_ZH_HK, _A1E_YUE, _A1E_ZH_HK, _A1E_ZH_SG, _A1E_ZU]
                },
            );
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::GregorianDateNeoSkeletonPatternsV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::GregorianDateNeoSkeletonPatternsV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_GREGORIAN_DATE_NEO_SKELETON_PATTERNS_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::GregorianDateNeoSkeletonPatternsV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_GREGORIAN_DATE_NEO_SKELETON_PATTERNS_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::datetime::provider::neo::GregorianDateNeoSkeletonPatternsV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_gregorian_date_neo_skeleton_patterns_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::neo::GregorianDateNeoSkeletonPatternsV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_GREGORIAN_DATE_NEO_SKELETON_PATTERNS_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_gregorian_date_neo_skeleton_patterns_v1_marker as impl_gregorian_date_neo_skeleton_patterns_v1_marker;
