// @generated
/// Implement `DataProvider<DatetimePatternsGlueV1>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 2348B for the lookup data structure (528 data identifiers)
/// * 1242B[^1] for the actual data (30 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
///
/// This macro requires the following crates:
/// * `icu`
/// * `icu_provider`
/// * `icu_provider/baked`
/// * `zerovec`
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_datetime_patterns_glue_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.83"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.83"]
        impl $provider {
            const DATA_DATETIME_PATTERNS_GLUE_V1: icu_provider::baked::zerotrie::Data<icu::datetime::provider::neo::DatetimePatternsGlueV1> = {
                const TRIE: icu_provider::baked::zerotrie::ZeroTrieSimpleAscii<&'static [u8]> = icu_provider::baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xE1yabcdefghijklmnopqrstuvwxz\0\0\x01\x01\x02\x02\x02\x03\x03\x03\x04\x04\x05\x05\x05\x06\x06\x06\x07\x07\x08\x08\x08\x08B\xD6:k\x0Ey\x90\x08aq\xB9\xD0[\xC0\xF0FN\x96N\xC1?p\x8A\xA2\xC3krs\x16,\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x81z\x8Edt\x81z\x8Edt\x81z\x8Et\x1E\xC2lm\x05dt\x80z\x8Ddt\x80z\x8D\xC6aeglrs\x16,BY\x81\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8Do\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC2\x1Ex\x0E\xC2lm\x05dt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1Eldt\x80z\x8D\xC5aehvy\x0F&=S\x1E\xC2lm\x05dt\x80z\x8Ddt\x80z\x8Db\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8Dr\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1Eldt\x80z\x8D\xC2eo\x16\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8Di\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC6elnosu\x16-ah~\x1E\xC3lms\x05\ndt\x82z\x8Fdt\x82z\x8Fdt\x82z\x8F\x1E\xC3lms\x06\x0Bdt\x83z\x90\0dt\x80z\x8Ddt\x80z\x8D\xC2\x1E-\x15\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8DMV\x1E\xC3lms\x06\x0Cdt\x84z\x90\x01dt\x84z\x90\x01dt\x84z\x90\x01\x1Emdt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x06\x0Cdt\x85z\x90\x02dt\x85z\x90\x02dt\x85z\x90\x02\xC4aior\x1B2H\x1E\xC3lms\x06\rdt\x86z\x90\x03dt\x90\x0Cz\x90\rdt\x90\x0Cz\x90\rl\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC2\x1E-\x0E\xC2lm\x05dt\x80z\x8Ddt\x80z\x8DML\x1Esdt\x80z\x8Dl\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC4aeiy\x16,Z\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC2\x1E-\x15\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8DLatn\x1E\xC2ms\x06dt\x84z\x90\x01dt\x84z\x90\x01\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC4agst\x16,B\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC2ms\x05dt\x80z\x8Ddt\x80z\x8Dv\x1E\xC2ms\x05dt\x80z\x8Ddt\x80z\x8D\xE1gaekmosx\0\0\0\0\0\0\x16-`v\x92\xC5\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8Da\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC2\x1E-\x15\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8DArab\x1E\xC3lms\x05\ndt\x81z\x8Edt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8Dk-Latn\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC2\x1E-\x15\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8DDeva\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8Dv\xC2\x1E-\x15\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC3DOT\x1A4eva\x1E\xC3lms\x06\x0Bdt\x87z\x90\x04dt\x80z\x8Ddt\x80z\x8Drya\x1E\xC3lms\x06\x0Bdt\x88z\x90\x05dt\x80z\x8Ddt\x80z\x8Delu\x1E\xC3lms\x06\x0Bdt\x89z\x90\x06dt\x80z\x8Ddt\x80z\x8Do\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC6aklnrs\x17-CZpi\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8Di\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC2ms\x05dt\x80z\x8Ddt\x80z\x8D\xC5elnos\x0F%-C\x1E\xC2ms\x05dt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1Eldt\x8Az\x90\x07\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8Do\x1E\xC3lms\x06\x0Bdt\x8Bz\x90\x08dt\x80z\x8Ddt\x80z\x8D\xC2mr\x16\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC4aclt\x0F&5\x1E\xC2ms\x05dt\x80z\x8Ddt\x80z\x8Dm\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC2ms\x05dt\x80z\x8Ddt\x80z\x8D-PT\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8Du\x1Eldt\x82z\x8F\xC3mou\x16,\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC8acdklquy\x16,GVe{\x91\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D-Deva\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC2lm\x05dt\x80z\x8Ddt\x80z\x8D\x1E\xC2ms\x05dt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8Dr\x1E\xC3lms\x05\ndt\x81z\x8Edt\x81z\x8Edt\x81z\x8E\xC5anoty\x16-<R\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x06\x0Bdt\x8Bz\x90\x08dt\x80z\x8Ddt\x80z\x8D\x1E\xC2lm\x05dt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8Dv\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC4gknz\x0F%`\x1E\xC2ms\x05dt\x81z\x8Edt\x81z\x8E\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8Dd\x1E\xC3lms\x11\"\xC2dt\n\xC2tz\x04\x84z\x90\x01\x90\nz\x90\x0B\xC2dt\n\xC2tz\x04\x84z\x90\x01\x90\nz\x90\x0B\xC2dt\n\xC2tz\x04\x84z\x90\x01\x90\nz\x90\x0B\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\xC2ei\x17c\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8D\x1E\xC3lms\x05\ndt\x82z\x8Fdt\x82z\x8Fdt\x82z\x8Fo\x1E\xC3lms\x06\x0Cdt\x83z\x90\0dt\x83z\x90\0dt\x83z\x90\0nr\x1E\xC3lms\x05\ndt\x80z\x8Ddt\x80z\x8Ddt\x80z\x8Dh-Hant\x1E\xC3lms\x06\x0Cdt\x8Cz\x90\tdt\x8Cz\x90\tdt\x8Cz\x90\t" };
                const VALUES: &'static [<icu::datetime::provider::neo::DatetimePatternsGlueV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct] = &[icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0,\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\0\0\0 \x80\0\x01") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0-\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0(\x80\0\0\0\0)") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \0\x063\0\x06'\0\x069\0\x06*\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\t\x06\0\t\x01\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\x0B\x06\0\x0B\x01\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\x0C$\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0k\0\0l\0\0.\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0k\0\0a\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\x80\0\0") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0,\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\0\0\0 \x80\0\x01\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0-\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0(\x80\0\0\0\0)\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \0\x063\0\x06'\0\x069\0\x06*\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\t\x06\0\t\x01\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\x0B\x06\0\x0B\x01\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\x0C$\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0k\0\0l\0\0.\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0k\0\0a\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0 \x0F\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePattern { pattern: icu::datetime::provider::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0 \x0F\0\0 \x80\0\0\0\0 \x80\0\x02") } } }];
                unsafe { icu_provider::baked::zerotrie::Data::from_trie_and_values_unchecked(TRIE, VALUES) }
            };
        }
        #[clippy::msrv = "1.83"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::DatetimePatternsGlueV1> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::DatetimePatternsGlueV1>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_DATETIME_PATTERNS_GLUE_V1, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::DatetimePatternsGlueV1 as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_DATETIME_PATTERNS_GLUE_V1, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_unknown() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::datetime::provider::neo::DatetimePatternsGlueV1 as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload, metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_datetime_patterns_glue_v1!($provider);
        #[clippy::msrv = "1.83"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::neo::DatetimePatternsGlueV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider::baked::DataStore::iter(&Self::DATA_DATETIME_PATTERNS_GLUE_V1).collect())
            }
        }
    };
    ($ provider : ty , DRY) => {};
    ($ provider : ty , DRY , ITER) => {
        __impl_datetime_patterns_glue_v1!($provider, ITER);
    };
}
#[doc(inline)]
pub use __impl_datetime_patterns_glue_v1 as impl_datetime_patterns_glue_v1;
