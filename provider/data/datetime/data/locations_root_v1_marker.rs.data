// @generated
/// Implement `DataProvider<LocationsRootV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 36B for the lookup data structure (1 data identifiers)
/// * 8124B[^1] for the actual data (1 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_locations_root_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.81"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.81"]
        impl $provider {
            const DATA_LOCATIONS_ROOT_V1_MARKER: icu_provider_baked::zerotrie::Data<icu::datetime::provider::time_zones::LocationsRootV1Marker> = icu_provider_baked::zerotrie::Data {
                trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"und\x80" },
                values: &[icu::datetime::provider::time_zones::LocationsV1 {
                    locations: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"adalv\0\0\0aedxb\0\0\0afkbl\0\0\0aganu\0\0\0aiaxa\0\0\0altia\0\0\0amevn\0\0\0ancur\0\0\0aolad\0\0\0aqcas\0\0\0aqdav\0\0\0aqddu\0\0\0aqmaw\0\0\0aqmcm\0\0\0aqplm\0\0\0aqrot\0\0\0aqsyw\0\0\0aqtrl\0\0\0aqvos\0\0\0arbue\0\0\0arcor\0\0\0arctc\0\0\0arirj\0\0\0arjuj\0\0\0arluq\0\0\0armdz\0\0\0arrgl\0\0\0arsla\0\0\0artuc\0\0\0aruaq\0\0\0arush\0\0\0asppg\0\0\0atvie\0\0\0auadl\0\0\0aubhq\0\0\0aubne\0\0\0audrw\0\0\0aueuc\0\0\0auhba\0\0\0auldc\0\0\0auldh\0\0\0aumel\0\0\0aumqi\0\0\0auper\0\0\0ausyd\0\0\0awaua\0\0\0azbak\0\0\0basjj\0\0\0bbbgi\0\0\0bddac\0\0\0bebru\0\0\0bfoua\0\0\0bgsof\0\0\0bhbah\0\0\0bibjm\0\0\0bjptn\0\0\0bmbda\0\0\0bnbwn\0\0\0bolpb\0\0\0bqkra\0\0\0braux\0\0\0brbel\0\0\0brbvb\0\0\0brcgb\0\0\0brcgr\0\0\0brern\0\0\0brfen\0\0\0brfor\0\0\0brmao\0\0\0brmcz\0\0\0brpvh\0\0\0brrbr\0\0\0brrec\0\0\0brsao\0\0\0brssa\0\0\0brstm\0\0\0bsnas\0\0\0btthi\0\0\0bwgbe\0\0\0bymsq\0\0\0bzbze\0\0\0cacfq\0\0\0caedm\0\0\0cafne\0\0\0caglb\0\0\0cagoo\0\0\0cahal\0\0\0caiql\0\0\0camon\0\0\0careb\0\0\0careg\0\0\0casjf\0\0\0cator\0\0\0cavan\0\0\0cawnp\0\0\0caybx\0\0\0caycb\0\0\0cayda\0\0\0caydq\0\0\0cayek\0\0\0cayev\0\0\0cayxy\0\0\0cayyn\0\0\0cayzs\0\0\0cccck\0\0\0cdfbm\0\0\0cdfih\0\0\0cfbgf\0\0\0cgbzv\0\0\0chzrh\0\0\0ciabj\0\0\0ckrar\0\0\0clipc\0\0\0clpuq\0\0\0clscl\0\0\0cmdla\0\0\0cnsha\0\0\0cnurc\0\0\0cobog\0\0\0crsjo\0\0\0cuhav\0\0\0cvrai\0\0\0cxxch\0\0\0cyfmg\0\0\0cynic\0\0\0czprg\0\0\0deber\0\0\0debsngn\0djjib\0\0\0dkcph\0\0\0dmdom\0\0\0dosdq\0\0\0dzalg\0\0\0ecgps\0\0\0ecgye\0\0\0eetll\0\0\0egcai\0\0\0eheai\0\0\0erasm\0\0\0esceu\0\0\0eslpa\0\0\0esmad\0\0\0etadd\0\0\0fihel\0\0\0fimhq\0\0\0fjsuv\0\0\0fkpsy\0\0\0fmksa\0\0\0fmpni\0\0\0fmtkk\0\0\0fotho\0\0\0frpar\0\0\0galbv\0\0\0gazastrpgblon\0\0\0gdgnd\0\0\0getbs\0\0\0gfcay\0\0\0gggci\0\0\0ghacc\0\0\0gigib\0\0\0gldkshvnglgoh\0\0\0globy\0\0\0glthu\0\0\0gmbjl\0\0\0gncky\0\0\0gpbbr\0\0\0gpmsb\0\0\0gpsbh\0\0\0gqssg\0\0\0grath\0\0\0gsgrv\0\0\0gtgua\0\0\0gugum\0\0\0gwoxb\0\0\0gygeo\0\0\0hebron\0\0hkhkg\0\0\0hntgu\0\0\0hrzag\0\0\0htpap\0\0\0hubud\0\0\0iddjj\0\0\0idjkt\0\0\0idmak\0\0\0idpnk\0\0\0iedub\0\0\0imdgs\0\0\0inccu\0\0\0iodga\0\0\0iqbgw\0\0\0irthr\0\0\0isrey\0\0\0itrom\0\0\0jeruslm\0jesth\0\0\0jmkin\0\0\0joamm\0\0\0jptyo\0\0\0kenbo\0\0\0kgfru\0\0\0khpnh\0\0\0kicxi\0\0\0kipho\0\0\0kitrw\0\0\0kmyva\0\0\0knbas\0\0\0kpfnj\0\0\0krsel\0\0\0kwkwi\0\0\0kygec\0\0\0kzaau\0\0\0kzakx\0\0\0kzala\0\0\0kzguw\0\0\0kzksn\0\0\0kzkzo\0\0\0kzura\0\0\0lavte\0\0\0lbbey\0\0\0lccas\0\0\0livdz\0\0\0lkcmb\0\0\0lrmlw\0\0\0lsmsu\0\0\0ltvno\0\0\0lulux\0\0\0lvrix\0\0\0lytip\0\0\0macas\0\0\0mcmon\0\0\0mdkiv\0\0\0metgd\0\0\0mgtnr\0\0\0mhkwa\0\0\0mhmaj\0\0\0mkskp\0\0\0mlbko\0\0\0mmrgn\0\0\0mnhvd\0\0\0mnuln\0\0\0momfm\0\0\0mpspn\0\0\0mqfdf\0\0\0mrnkc\0\0\0msmni\0\0\0mtmla\0\0\0muplu\0\0\0mvmle\0\0\0mwblz\0\0\0mxchi\0\0\0mxcjs\0\0\0mxcun\0\0\0mxhmo\0\0\0mxmam\0\0\0mxmex\0\0\0mxmid\0\0\0mxmty\0\0\0mxmzt\0\0\0mxoji\0\0\0mxpvr\0\0\0mxtij\0\0\0mykch\0\0\0mykul\0\0\0mzmpm\0\0\0nawdh\0\0\0ncnou\0\0\0nenim\0\0\0nfnlk\0\0\0nglos\0\0\0nimga\0\0\0nlams\0\0\0noosl\0\0\0npktm\0\0\0nrinu\0\0\0nuiue\0\0\0nzakl\0\0\0nzcht\0\0\0ommct\0\0\0papty\0\0\0pelim\0\0\0pfgmr\0\0\0pfnhv\0\0\0pfppt\0\0\0pgpom\0\0\0pgraw\0\0\0phmnl\0\0\0pkkhi\0\0\0plwaw\0\0\0pmmqc\0\0\0pnpcn\0\0\0prsju\0\0\0ptfnc\0\0\0ptlis\0\0\0ptpdl\0\0\0pwror\0\0\0pyasu\0\0\0qadoh\0\0\0rereu\0\0\0robuh\0\0\0rsbeg\0\0\0ruasf\0\0\0rubax\0\0\0ruchita\0rudyr\0\0\0rugdx\0\0\0ruikt\0\0\0rukgd\0\0\0rukhndg\0rukra\0\0\0rukuf\0\0\0rukvx\0\0\0rumow\0\0\0runoz\0\0\0ruoms\0\0\0ruovb\0\0\0rupkc\0\0\0rurtw\0\0\0rusred\0\0rutof\0\0\0ruuly\0\0\0ruunera\0ruuus\0\0\0ruvog\0\0\0ruvvo\0\0\0ruyek\0\0\0ruyks\0\0\0rwkgl\0\0\0saruh\0\0\0sbhir\0\0\0scmaw\0\0\0sdkrt\0\0\0sesto\0\0\0sgsin\0\0\0shshn\0\0\0silju\0\0\0sjlyr\0\0\0skbts\0\0\0slfna\0\0\0smsai\0\0\0sndkr\0\0\0somgq\0\0\0srpbm\0\0\0ssjub\0\0\0sttms\0\0\0svsal\0\0\0sxphi\0\0\0sydam\0\0\0szqmn\0\0\0tcgdt\0\0\0tdndj\0\0\0tfpfr\0\0\0tglfw\0\0\0thbkk\0\0\0tjdyu\0\0\0tkfko\0\0\0tldil\0\0\0tmasb\0\0\0tntun\0\0\0totbu\0\0\0trist\0\0\0ttpos\0\0\0tvfun\0\0\0twtpe\0\0\0tzdar\0\0\0uaiev\0\0\0uasip\0\0\0ugkla\0\0\0umawk\0\0\0ummdy\0\0\0usadk\0\0\0usaeg\0\0\0usanc\0\0\0usboi\0\0\0uschi\0\0\0usden\0\0\0usdet\0\0\0ushnl\0\0\0usind\0\0\0usinvev\0usjnu\0\0\0usknx\0\0\0uslax\0\0\0uslui\0\0\0usmnm\0\0\0usmoc\0\0\0usmtm\0\0\0usndcnt\0usndnsl\0usnyc\0\0\0usoea\0\0\0usome\0\0\0usphx\0\0\0ussit\0\0\0ustel\0\0\0uswlz\0\0\0uswsq\0\0\0usxul\0\0\0usyak\0\0\0uymvd\0\0\0uzskd\0\0\0uztas\0\0\0vavat\0\0\0vcsvd\0\0\0veccs\0\0\0vgtov\0\0\0vistt\0\0\0vnsgn\0\0\0vuvli\0\0\0wfmau\0\0\0wsapw\0\0\0yeade\0\0\0ytmam\0\0\0zajnb\0\0\0zmlun\0\0\0zwhre\0\0\0") }, unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\xA1\x01\x07\0\x1B\0%\x006\0>\0G\0Q\0X\0^\0c\0h\0z\0\x80\0\x87\0\x8D\0\x94\0\x99\0\x9E\0\xA4\0\xB0\0\xB7\0\xC0\0\xC8\0\xCD\0\xD5\0\xDC\0\xE8\0\xED\0\xF4\0\xFC\0\x03\x01\x11\x01\x1C\x01$\x01/\x017\x01=\x01B\x01H\x01P\x01Y\x01b\x01k\x01p\x01v\x01{\x01\x86\x01\x99\x01\xA1\x01\xAB\x01\xB2\x01\xBE\x01\xC6\x01\xCD\x01\xD5\x01\xDB\x01\xE2\x01\xE8\x01\xEF\x01\xF1\x01\xFA\x01\xFF\x01\x08\x02\x0E\x02\x1A\x02\"\x02)\x022\x028\x02>\x02I\x02S\x02Y\x02b\x02g\x02o\x02v\x02|\x02\x84\x02\x8B\x02\x91\x02\x98\x02\xA0\x02\xAB\x02\xB4\x02\xBD\x02\xC4\x02\xCB\x02\xD2\x02\xDA\x02\xE0\x02\xEC\x02\xF3\x02\xFC\x02\x04\x03\x10\x03\x1D\x03#\x03/\x03;\x03A\x03K\x03X\x03`\x03w\x03\x81\x03\x89\x03\xA3\x03\xB4\x03\xBB\x03\xCB\x03\xD7\x03\xDD\x03\xE9\x03\xEE\x03\xF6\x03\xFE\x03\x04\x04\x0C\x04\x16\x04\x1A\x04$\x044\x04=\x04D\x04J\x04U\x04]\x04e\x04l\x04t\x04\x89\x04\x91\x04\x9A\x04\xA1\x04\xA6\x04\xAB\x04\xB9\x04\xC0\x04\xC5\x04\xCB\x04\xD2\x04\xDA\x04\xDF\x04\xE5\x04\xE9\x04\xF9\x04\xFF\x04\x06\x05\x0B\x05\x13\x05\x19\x05\x1E\x05\"\x05$\x05+\x054\x05E\x05M\x05R\x05[\x05g\x05k\x05{\x05\x80\x05\x86\x05\x8D\x05\x97\x05\xA3\x05\xB4\x05\xC5\x05\xCB\x05\xF1\x05\xFA\x05\xFE\x05\x0B\x06\x11\x06\x17\x06 \x06(\x060\x065\x06B\x06J\x06Q\x06Y\x06b\x06i\x06t\x06y\x06\x97\x06\x9B\x06\xA1\x06\xA8\x06\xAE\x06\xB4\x06\xBA\x06\xC1\x06\xC7\x06\xCC\x06\xD1\x06\xDB\x06\xE3\x06\xED\x06\xF6\x06\xFC\x06\x03\x07\x14\x07\x1F\x07*\x070\x07>\x07C\x07I\x07O\x07U\x07]\x07f\x07j\x07n\x07u\x07~\x07\x8B\x07\x94\x07\x9B\x07\xA2\x07\xA9\x07\xB3\x07\xBA\x07\xBF\x07\xC4\x07\xCA\x07\xDB\x07\xE4\x07\xF0\x07\xF9\x07\t\x08\x1B\x08\x1F\x08&\x08*\x085\x08:\x08R\x08\\\x08f\x08p\x08u\x08z\x08\x82\x08\x88\x08\x91\x08\x9F\x08\xA6\x08\xB0\x08\xB9\x08\xC4\x08\xCB\x08\xD4\x08\xDC\x08\xE3\x08\xF5\x08\xFC\x08\x03\t\x0B\t\x16\t\x1E\t1\t6\tD\tK\tT\t]\tb\tg\tl\tp\t{\t\x82\t\x86\t\x8D\t\x92\t\x99\t\xA2\t\xA8\t\xB4\t\xC0\t\xC9\t\xD1\t\xD7\t\xEF\t\xFF\t\n\n\x11\n\x19\n\x1F\n$\n,\n1\n<\nD\nJ\nS\nZ\n_\ne\nl\ns\n~\n\x86\n\x91\n\x97\n\x9C\n\xA2\n\xAE\n\xB2\n\xBD\n\xC6\n\xCD\n\xDA\n\xDF\n\xE8\n\xF0\n\xF8\n\x01\x0B\x0C\x0B\x19\x0B \x0B(\x0B4\x0BC\x0BM\x0BR\x0BY\x0Bb\x0Bl\x0Bu\x0B\x8A\x0B\x93\x0B\x9F\x0B\xA9\x0B\xB2\x0B\xBC\x0B\xC4\x0B\xCF\x0B\xE5\x0B\xF0\x0B\xFC\x0B\x01\x0C\t\x0C\x1F\x0C$\x0C@\x0CD\x0CL\x0CV\x0C]\x0Ch\x0Cu\x0C|\x0C\x81\x0C\x89\x0C\x9A\x0C\xA0\x0C\xA6\x0C\xAE\x0C\xB2\x0C\xBC\x0C\xC2\x0C\xC6\x0C\xCC\x0C\xD0\x0C\xE0\x0C\xE9\x0C\xEE\x0C\xF5\x0C\xFB\x0C\x02\r\n\r\x16\r$\r*\r7\rB\rL\rU\ri\rs\r\x87\r\x9E\r\xA6\r\xB8\r\xBC\r\xC3\r\xC8\r\xDA\r\xEA\r\xFD\r\x11\x0E\x18\x0E\x1F\x0E(\x0E4\x0EG\x0E_\x0Eh\x0E~\x0E\x91\x0E\x9B\x0E\xA2\x0E\xB2\x0E\xB7\x0E\xBC\x0E\xC3\x0E\xCF\x0E\xD5\x0EAndorraUnited Arab EmiratesOwganystanAntigua & BarbudaAnguillaShqip\xC3\xABriErmenistanK\xC3\xB2rsouAngolaCaseyDavisDumont d\xE2\x80\x99UrvilleMawsonMcMurdoPalmerRotheraSyowaTrollVostokBuenos AiresCordobaCatamarcaLa RiojaJujuySan LuisMendozaRio GallegosSaltaTucumanSan JuanUshuaiaAmerican Samoa\xC3\x96sterreichAdelaideBroken HillBrisbaneDarwinEuclaHobartLindemanLord HoweMelbourneMacquariePerthSydneyArubaAz\xC9\x99rbaycanBosna i HercegovinaBarbadosBangladeshBelgi\xC3\xABBurkina FasoBulgariaBahrainUburundiB\xC3\xA9ninBermudaBruneiBoliviaBQAraguainaBelemBoa VistaCuiabaCampo GrandeEirunepeNoronhaFortalezaManausMaceioPorto VelhoRio BrancoRecifeSao PauloBahiaSantaremBahamasBhutanBotswanaBelarusBelizeCrestonEdmontonFort NelsonGlace BayGoose BayHalifaxIqaluitMonctonResoluteReginaSt. John\xE2\x80\x99sTorontoVancouverWinnipegBlanc-SablonCambridge BayDawsonDawson CreekRankin InletInuvikWhitehorseSwift CurrentAtikokanCocos (Keeling) IslandsLubumbashiKinshasaR\xC3\xA9publique centrafricaineCongo-BrazzavilleSchweizC\xC3\xB4te d\xE2\x80\x99IvoireCook IslandsEasterPunta ArenasChileCamerounCunghgozUrumqiColombiaCosta RicaCubaCabo VerdeChristmas IslandFamagustaNicosia\xC4\x8CeskoDeutschlandBusingenDjiboutiDanmarkDominicaRep\xC3\xBAblica DominicanaAlg\xC3\xA9rieGalapagosEcuadorEestiEgyptWestern SaharaEritreaCeutaCanaryEspa\xC3\xB1aEthiopiaSuomi\xC3\x85landFijiFalkland IslandsKosraePohnpeiChuukF\xC3\xB8royarFranceGabonGazaUKGrenadaGurcistanGuyane fran\xC3\xA7aiseGuernseyGaanaGibraltarDanmarkshavnNuukIttoqqortoormiitThuleGambiaGuin\xC3\xA9eGuadeloupeSaint-MartinSaint-Barth\xC3\xA9lemyGuinea EcuatorialGreeceSouth Georgia & South Sandwich IslandsGuatemalaGuamGuin\xC3\xA9-BissauGuyanaHebronHong KongHondurasHrvatskaHaitiMagyarorsz\xC3\xA1gJayapuraJakartaMakassarPontianakIrelandIsle of ManIndiaBritish Indian Ocean TerritoryIraqE\xC3\xBDran\xC3\x8DslandItaliaIsraelJerseyJamaicaJordanJapanKenyaKyrgyzstanCambodiaKiritimatiEnderburyTarawaComoresSt. Kitts & NevisNorth KoreaSouth KoreaKuwaitCayman IslandsAqtauAqtobeAlmatyAtyrauQostanayQyzylordaOralLaosLebanonSt. LuciaLiechtensteinSri LankaLiberiaLesothoLietuvaLuxembourgLatvijaLibyaMarocMonacoRepublica MoldovaCrna GoraMadagasikaraKwajaleinMarshall IslandsMaqedonia e VeriutMaliMyanmarHovdUlaanbaatarMacauNorthern Mariana IslandsMartiniqueMauritanieMontserratMaltaMorisMaldivesMalawiChihuahuaCiudad Ju\xC3\xA1rezCanc\xC3\xBAnHermosilloMatamorosMexico CityM\xC3\xA9ridaMonterreyMazatlanOjinagaBah\xC3\xADa de BanderasTijuanaKuchingMalaysiaMo\xC3\xA7ambiqueNamibi\xC3\xABNouvelle-Cal\xC3\xA9donieNijarNorfolk IslandNigeriaNicaraguaNederlandNorgeNepalNauruNiueNew ZealandChathamOmanPanam\xC3\xA1Per\xC3\xBAGambierMarquesasTahitiPort MoresbyBougainvillePilipinasPakistanPolskaSaint-Pierre-et-MiquelonPitcairn IslandsPuerto RicoMadeiraPortugalAzoresPalauParaguayQatarLa R\xC3\xA9unionRom\xC3\xA2niaSrbijaAstrakhanBarnaulChitaAnadyrMagadanIrkutskKaliningradKhandygaKrasnoyarskSamaraKirovMoscowNovokuznetskOmskNovosibirskKamchatkaSaratovSrednekolymskTomskUlyanovskUst-NeraSakhalinVolgogradVladivostokYekaterinburgYakutskU RwandaSaudi ArabiaSolomon IslandsSeychellesSudanSverigeSingaporeSt. HelenaSlovenijaSvalbard og Jan MayenSlovenskoSierra LeoneSan MarinoS\xC3\xA9n\xC3\xA9galSoomaaliyaSurinameSouth SudanS\xC3\xA3o Tom\xC3\xA9 e Pr\xC3\xADncipeEl SalvadorSint MaartenSyrieEswatiniTurks & Caicos IslandsTchadTerres australes fran\xC3\xA7aisesTogoThailandTajikistanTokelauTimor-LesteT\xC3\xBCrkmenistanTunisieTongaT\xC3\xBCrkiyeTrinidad & TobagoTuvaluTaiwanTanzaniaKyivSimferopolUgandaWakeMidwayAdakMarengo, IndianaAnchorageBoiseChicagoDenverDetroitHonoluluIndianapolisVevay, IndianaJuneauKnox, IndianaLos AngelesLouisvilleMenomineeMonticello, KentuckyMetlakatlaCenter, North DakotaNew Salem, North DakotaNew YorkVincennes, IndianaNomePhoenixSitkaTell City, IndianaWinamac, IndianaPetersburg, IndianaBeulah, North DakotaYakutatUruguaySamarkandO\xCA\xBBzbekistonCitt\xC3\xA0 del VaticanoSt. Vincent & GrenadinesVenezuelaBritish Virgin IslandsU.S. Virgin IslandsVi\xE1\xBB\x87t NamVanuatuWallis-et-FutunaSamoaYemenMayotteSouth AfricaZambiaZimbabwe") })
                    },
                    pattern_generic: alloc::borrow::Cow::Borrowed(icu_pattern::Pattern::<icu_pattern::SinglePlaceholder>::from_ref_store_unchecked("\0")),
                    pattern_standard: alloc::borrow::Cow::Borrowed(icu_pattern::Pattern::<icu_pattern::SinglePlaceholder>::from_ref_store_unchecked("\0")),
                    pattern_daylight: alloc::borrow::Cow::Borrowed(icu_pattern::Pattern::<icu_pattern::SinglePlaceholder>::from_ref_store_unchecked("\0")),
                    pattern_partial_location: alloc::borrow::Cow::Borrowed(icu_pattern::Pattern::<icu_pattern::DoublePlaceholder>::from_ref_store_unchecked("\0\u{1}")),
                }],
            };
        }
        #[clippy::msrv = "1.81"]
        impl icu_provider::DataProvider<icu::datetime::provider::time_zones::LocationsRootV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::time_zones::LocationsRootV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_LOCATIONS_ROOT_V1_MARKER, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::time_zones::LocationsRootV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_LOCATIONS_ROOT_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_default() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::datetime::provider::time_zones::LocationsRootV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_locations_root_v1_marker!($provider);
        #[clippy::msrv = "1.81"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::time_zones::LocationsRootV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_LOCATIONS_ROOT_V1_MARKER).collect())
            }
        }
    };
    ($ provider : ty , DRY) => {};
    ($ provider : ty , DRY , ITER) => {
        __impl_locations_root_v1_marker!($provider, ITER);
    };
}
#[doc(inline)]
pub use __impl_locations_root_v1_marker as impl_locations_root_v1_marker;
