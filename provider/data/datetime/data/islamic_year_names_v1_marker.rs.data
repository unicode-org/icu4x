// @generated
/// Implement `DataProvider<IslamicYearNamesV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 1783B[^1] for the lookup data structure (103 data identifiers)
/// * 3248B[^1] for the actual data (42 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_islamic_year_names_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_ISLAMIC_YEAR_NAMES_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::AttributesAndLocale<1usize, 8usize>, icu::datetime::provider::neo::IslamicYearNamesV1Marker> = icu_provider_baked::binary_search::Data(
                {
                    use icu_provider_baked::binary_search::tinystr::tinystr;
                    &[(tinystr!(1usize, "3"), tinystr!(8usize, "ar")), (tinystr!(1usize, "3"), tinystr!(8usize, "bn")), (tinystr!(1usize, "3"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(1usize, "3"), tinystr!(8usize, "el")), (tinystr!(1usize, "3"), tinystr!(8usize, "fa")), (tinystr!(1usize, "3"), tinystr!(8usize, "ff-Adlm")), (tinystr!(1usize, "3"), tinystr!(8usize, "fy")), (tinystr!(1usize, "3"), tinystr!(8usize, "he")), (tinystr!(1usize, "3"), tinystr!(8usize, "hi-Latn")), (tinystr!(1usize, "3"), tinystr!(8usize, "hu")), (tinystr!(1usize, "3"), tinystr!(8usize, "id")), (tinystr!(1usize, "3"), tinystr!(8usize, "is")), (tinystr!(1usize, "3"), tinystr!(8usize, "ku")), (tinystr!(1usize, "3"), tinystr!(8usize, "ml")), (tinystr!(1usize, "3"), tinystr!(8usize, "mr")), (tinystr!(1usize, "3"), tinystr!(8usize, "ms")), (tinystr!(1usize, "3"), tinystr!(8usize, "sc")), (tinystr!(1usize, "3"), tinystr!(8usize, "sq")), (tinystr!(1usize, "3"), tinystr!(8usize, "sr")), (tinystr!(1usize, "3"), tinystr!(8usize, "tg")), (tinystr!(1usize, "3"), tinystr!(8usize, "th")), (tinystr!(1usize, "3"), tinystr!(8usize, "tk")), (tinystr!(1usize, "3"), tinystr!(8usize, "tr")), (tinystr!(1usize, "3"), tinystr!(8usize, "ug")), (tinystr!(1usize, "3"), tinystr!(8usize, "und")), (tinystr!(1usize, "3"), tinystr!(8usize, "ur")), (tinystr!(1usize, "3"), tinystr!(8usize, "uz")), (tinystr!(1usize, "3"), tinystr!(8usize, "yue")), (tinystr!(1usize, "3"), tinystr!(8usize, "yue-Hans")), (tinystr!(1usize, "3"), tinystr!(8usize, "zh")), (tinystr!(1usize, "3"), tinystr!(8usize, "zh-Hant")), (tinystr!(1usize, "4"), tinystr!(8usize, "ar")), (tinystr!(1usize, "4"), tinystr!(8usize, "bn")), (tinystr!(1usize, "4"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(1usize, "4"), tinystr!(8usize, "el")), (tinystr!(1usize, "4"), tinystr!(8usize, "fa")), (tinystr!(1usize, "4"), tinystr!(8usize, "ff-Adlm")), (tinystr!(1usize, "4"), tinystr!(8usize, "fr")), (tinystr!(1usize, "4"), tinystr!(8usize, "fr-CA")), (tinystr!(1usize, "4"), tinystr!(8usize, "fy")), (tinystr!(1usize, "4"), tinystr!(8usize, "he")), (tinystr!(1usize, "4"), tinystr!(8usize, "hi-Latn")), (tinystr!(1usize, "4"), tinystr!(8usize, "hu")), (tinystr!(1usize, "4"), tinystr!(8usize, "id")), (tinystr!(1usize, "4"), tinystr!(8usize, "is")), (tinystr!(1usize, "4"), tinystr!(8usize, "ku")), (tinystr!(1usize, "4"), tinystr!(8usize, "ml")), (tinystr!(1usize, "4"), tinystr!(8usize, "mr")), (tinystr!(1usize, "4"), tinystr!(8usize, "ms")), (tinystr!(1usize, "4"), tinystr!(8usize, "sc")), (tinystr!(1usize, "4"), tinystr!(8usize, "sq")), (tinystr!(1usize, "4"), tinystr!(8usize, "sr")), (tinystr!(1usize, "4"), tinystr!(8usize, "tg")), (tinystr!(1usize, "4"), tinystr!(8usize, "th")), (tinystr!(1usize, "4"), tinystr!(8usize, "tk")), (tinystr!(1usize, "4"), tinystr!(8usize, "tr")), (tinystr!(1usize, "4"), tinystr!(8usize, "ug")), (tinystr!(1usize, "4"), tinystr!(8usize, "und")), (tinystr!(1usize, "4"), tinystr!(8usize, "ur")), (tinystr!(1usize, "4"), tinystr!(8usize, "uz")), (tinystr!(1usize, "4"), tinystr!(8usize, "yue")), (tinystr!(1usize, "4"), tinystr!(8usize, "yue-Hans")), (tinystr!(1usize, "4"), tinystr!(8usize, "zh")), (tinystr!(1usize, "4"), tinystr!(8usize, "zh-Hant")), (tinystr!(1usize, "5"), tinystr!(8usize, "ar")), (tinystr!(1usize, "5"), tinystr!(8usize, "bn")), (tinystr!(1usize, "5"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(1usize, "5"), tinystr!(8usize, "el")), (tinystr!(1usize, "5"), tinystr!(8usize, "fa")), (tinystr!(1usize, "5"), tinystr!(8usize, "ff-Adlm")), (tinystr!(1usize, "5"), tinystr!(8usize, "fi")), (tinystr!(1usize, "5"), tinystr!(8usize, "fr")), (tinystr!(1usize, "5"), tinystr!(8usize, "fr-CA")), (tinystr!(1usize, "5"), tinystr!(8usize, "fy")), (tinystr!(1usize, "5"), tinystr!(8usize, "he")), (tinystr!(1usize, "5"), tinystr!(8usize, "hi-Latn")), (tinystr!(1usize, "5"), tinystr!(8usize, "hu")), (tinystr!(1usize, "5"), tinystr!(8usize, "id")), (tinystr!(1usize, "5"), tinystr!(8usize, "is")), (tinystr!(1usize, "5"), tinystr!(8usize, "ko")), (tinystr!(1usize, "5"), tinystr!(8usize, "ku")), (tinystr!(1usize, "5"), tinystr!(8usize, "lv")), (tinystr!(1usize, "5"), tinystr!(8usize, "ml")), (tinystr!(1usize, "5"), tinystr!(8usize, "mr")), (tinystr!(1usize, "5"), tinystr!(8usize, "nl")), (tinystr!(1usize, "5"), tinystr!(8usize, "ro")), (tinystr!(1usize, "5"), tinystr!(8usize, "ru")), (tinystr!(1usize, "5"), tinystr!(8usize, "sc")), (tinystr!(1usize, "5"), tinystr!(8usize, "sq")), (tinystr!(1usize, "5"), tinystr!(8usize, "sr")), (tinystr!(1usize, "5"), tinystr!(8usize, "sv")), (tinystr!(1usize, "5"), tinystr!(8usize, "tg")), (tinystr!(1usize, "5"), tinystr!(8usize, "th")), (tinystr!(1usize, "5"), tinystr!(8usize, "tk")), (tinystr!(1usize, "5"), tinystr!(8usize, "tr")), (tinystr!(1usize, "5"), tinystr!(8usize, "ug")), (tinystr!(1usize, "5"), tinystr!(8usize, "und")), (tinystr!(1usize, "5"), tinystr!(8usize, "ur")), (tinystr!(1usize, "5"), tinystr!(8usize, "uz")), (tinystr!(1usize, "5"), tinystr!(8usize, "yue")), (tinystr!(1usize, "5"), tinystr!(8usize, "yue-Hans")), (tinystr!(1usize, "5"), tinystr!(8usize, "zh")), (tinystr!(1usize, "5"), tinystr!(8usize, "zh-Hant"))]
                },
                {
                    type S = <icu::datetime::provider::neo::IslamicYearNamesV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                    const _3_AR: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD9\x87\xD9\x80") })
                    });
                    const _3_BN: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xA6\xAF\xE0\xA7\x81\xE0\xA6\x97") })
                    });
                    const _3_BS_CYRL: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD0\x90\xD0\xA5") })
                    });
                    const _3_EL: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xCE\x95.\xCE\x95.") })
                    });
                    const _3_FA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD9\x87\xE2\x80\x8D.\xD9\x82.") })
                    });
                    const _3_FF_ADLM: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xF0\x9E\xA4\x87\xF0\x9E\xA4\x8A") })
                    });
                    const _3_FY: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0Sa\xCA\xBBna Hizjria") })
                    });
                    const _3_HE: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD7\x94\xD7\x92\xD7\xB3\xD7\xA8\xD7\x94") })
                    });
                    const _3_HI_LATN: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0Hijri") })
                    });
                    const _3_HU: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0MF") })
                    });
                    const _3_ID: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0H") })
                    });
                    const _3_IS: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0EH") })
                    });
                    const _3_KU: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0Hicr\xC3\xAE") })
                    });
                    const _3_ML: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xB4\xB9\xE0\xB4\xBF\xE0\xB4\x9C\xE0\xB4\xB1") })
                    });
                    const _3_MR: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xA4\xB9\xE0\xA4\xBF.\xE0\xA4\xB5.") })
                    });
                    const _3_SC: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0e.E.") })
                    });
                    const _3_SQ: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0H.") })
                    });
                    const _3_TG: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD0\xA1\xD0\x90\xD0\x9D\xD0\x90") })
                    });
                    const _3_TH: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xB8\xAE.\xE0\xB8\xA8.") })
                    });
                    const _3_TK: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0HS") })
                    });
                    const _3_TR: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0Hicri") })
                    });
                    const _3_UG: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xDA\xBE\xD9\x89\xD8\xAC\xD8\xB1\xD9\x89\xD9\x8A\xDB\x95") })
                    });
                    const _3_UND: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0AH") })
                    });
                    const _3_UR: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xDB\x81\xD8\xAC\xD8\xB1\xDB\x8C") })
                    });
                    const _3_UZ: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0hijriy") })
                    });
                    const _3_YUE: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE4\xBC\x8A\xE6\x96\xAF\xE8\x98\xAD\xE6\x9B\x86") })
                    });
                    const _3_YUE_HANS: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE4\xBC\x8A\xE6\x96\xAF\xE5\x85\xB0\xE5\x8E\x86") })
                    });
                    const _4_SC: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0E") })
                    });
                    const _5_FA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD9\x87\xD8\xAC\xD8\xB1\xDB\x8C \xD9\x82\xD9\x85\xD8\xB1\xDB\x8C") })
                    });
                    const _5_FI: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0hid\xC5\xBEran j\xC3\xA4lkeen") })
                    });
                    const _5_FR: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC3\xA8re de l\xE2\x80\x99H\xC3\xA9gire") })
                    });
                    const _5_FR_CA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0Anno Hegirae") })
                    });
                    const _5_HE: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD7\xA9\xD7\xA0\xD7\xAA \xD7\x94\xD7\x99\xD7\x92\xD7\xB3\xD7\xA8\xD7\x94") })
                    });
                    const _5_IS: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0eftir Hijra") })
                    });
                    const _5_KO: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xED\x9E\x88\xEC\xA6\x88\xEB\x9D\xBC\xEB\xA0\xA5") })
                    });
                    const _5_LV: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0p\xC4\x93c hid\xC5\xBEras") })
                    });
                    const _5_MR: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xA4\xB9\xE0\xA4\xBF\xE0\xA4\x9C\xE0\xA4\xB0\xE0\xA5\x80 \xE0\xA4\xB5\xE0\xA4\xB0\xE0\xA5\x8D\xE0\xA4\xB7") })
                    });
                    const _5_RO: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0A.H.") })
                    });
                    const _5_RU: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD0\xBF\xD0\xBE\xD1\x81\xD0\xBB\xD0\xB5 \xD1\x85\xD0\xB8\xD0\xB4\xD0\xB6\xD1\x80\xD1\x8B") })
                    });
                    const _5_SC: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0era de s\xE2\x80\x99Egira") })
                    });
                    const _5_SV: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0efter Hirja") })
                    });
                    const _5_TH: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0islamic") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xB8\xAE\xE0\xB8\xB4\xE0\xB8\x88\xE0\xB9\x80\xE0\xB8\xA3\xE0\xB8\xB2\xE0\xB8\xB0\xE0\xB8\xAB\xE0\xB9\x8C\xE0\xB8\xA8\xE0\xB8\xB1\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\xB2\xE0\xB8\x8A") })
                    });
                    &[_3_AR, _3_BN, _3_BS_CYRL, _3_EL, _3_FA, _3_FF_ADLM, _3_FY, _3_HE, _3_HI_LATN, _3_HU, _3_ID, _3_IS, _3_KU, _3_ML, _3_MR, _3_ID, _3_SC, _3_SQ, _3_BS_CYRL, _3_TG, _3_TH, _3_TK, _3_TR, _3_UG, _3_UND, _3_UR, _3_UZ, _3_YUE, _3_YUE_HANS, _3_YUE_HANS, _3_YUE, _3_AR, _3_BN, _3_BS_CYRL, _3_EL, _3_FA, _3_FF_ADLM, _3_ID, _3_UND, _3_FY, _3_HE, _3_HI_LATN, _3_HU, _3_ID, _3_IS, _3_KU, _3_ML, _3_MR, _3_ID, _4_SC, _3_SQ, _3_BS_CYRL, _3_TG, _3_TH, _3_TK, _3_TR, _3_UG, _3_UND, _3_UR, _3_UZ, _3_YUE, _3_YUE_HANS, _3_YUE_HANS, _3_YUE, _3_AR, _3_BN, _3_BS_CYRL, _3_EL, _5_FA, _3_FF_ADLM, _5_FI, _5_FR, _5_FR_CA, _3_FY, _5_HE, _3_HI_LATN, _3_HU, _3_ID, _5_IS, _5_KO, _3_KU, _5_LV, _3_ML, _5_MR, _3_FY, _5_RO, _5_RU, _5_SC, _3_SQ, _3_BS_CYRL, _5_SV, _3_TG, _5_TH, _3_TK, _3_TR, _3_UG, _3_UND, _3_UR, _3_UZ, _3_YUE, _3_YUE_HANS, _3_YUE_HANS, _3_YUE]
                },
            );
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::IslamicYearNamesV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::IslamicYearNamesV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_ISLAMIC_YEAR_NAMES_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::IslamicYearNamesV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_ISLAMIC_YEAR_NAMES_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::datetime::provider::neo::IslamicYearNamesV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_islamic_year_names_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::neo::IslamicYearNamesV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_ISLAMIC_YEAR_NAMES_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_islamic_year_names_v1_marker as impl_islamic_year_names_v1_marker;
