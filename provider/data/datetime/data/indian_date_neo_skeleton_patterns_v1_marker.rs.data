// @generated
/// Implement `DataProvider<IndianDateNeoSkeletonPatternsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 39082B[^1] for the lookup data structure (1775 data identifiers)
/// * 84105B[^1] for the actual data (780 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_indian_date_neo_skeleton_patterns_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_INDIAN_DATE_NEO_SKELETON_PATTERNS_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::AttributesAndLocale<6usize, 8usize>, icu::datetime::provider::neo::IndianDateNeoSkeletonPatternsV1Marker> = icu_provider_baked::binary_search::Data(
                {
                    use icu_provider_baked::binary_search::tinystr::tinystr;
                    &[(tinystr!(6usize, "a1"), tinystr!(8usize, "af")), (tinystr!(6usize, "a1"), tinystr!(8usize, "am")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ar")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ast")), (tinystr!(6usize, "a1"), tinystr!(8usize, "az")), (tinystr!(6usize, "a1"), tinystr!(8usize, "be")), (tinystr!(6usize, "a1"), tinystr!(8usize, "bg")), (tinystr!(6usize, "a1"), tinystr!(8usize, "blo")), (tinystr!(6usize, "a1"), tinystr!(8usize, "bn")), (tinystr!(6usize, "a1"), tinystr!(8usize, "br")), (tinystr!(6usize, "a1"), tinystr!(8usize, "brx")), (tinystr!(6usize, "a1"), tinystr!(8usize, "bs")), (tinystr!(6usize, "a1"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ca")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "a1"), tinystr!(8usize, "chr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "cs")), (tinystr!(6usize, "a1"), tinystr!(8usize, "cv")), (tinystr!(6usize, "a1"), tinystr!(8usize, "cy")), (tinystr!(6usize, "a1"), tinystr!(8usize, "da")), (tinystr!(6usize, "a1"), tinystr!(8usize, "de")), (tinystr!(6usize, "a1"), tinystr!(8usize, "doi")), (tinystr!(6usize, "a1"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "a1"), tinystr!(8usize, "el")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-BE")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-BW")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-BZ")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-HK")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-MT")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-NZ")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-PK")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-SE")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-SG")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-ZA")), (tinystr!(6usize, "a1"), tinystr!(8usize, "en-ZW")), (tinystr!(6usize, "a1"), tinystr!(8usize, "eo")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-CL")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-CO")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-DO")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-GT")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-HN")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-PE")), (tinystr!(6usize, "a1"), tinystr!(8usize, "es-PR")), (tinystr!(6usize, "a1"), tinystr!(8usize, "et")), (tinystr!(6usize, "a1"), tinystr!(8usize, "eu")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fa")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fi")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fil")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fo")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fr-BE")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "a1"), tinystr!(8usize, "fy")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ga")), (tinystr!(6usize, "a1"), tinystr!(8usize, "gd")), (tinystr!(6usize, "a1"), tinystr!(8usize, "gl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "gu")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ha")), (tinystr!(6usize, "a1"), tinystr!(8usize, "he")), (tinystr!(6usize, "a1"), tinystr!(8usize, "hi")), (tinystr!(6usize, "a1"), tinystr!(8usize, "hi-Latn")), (tinystr!(6usize, "a1"), tinystr!(8usize, "hr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "a1"), tinystr!(8usize, "hu")), (tinystr!(6usize, "a1"), tinystr!(8usize, "hy")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ia")), (tinystr!(6usize, "a1"), tinystr!(8usize, "id")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ig")), (tinystr!(6usize, "a1"), tinystr!(8usize, "is")), (tinystr!(6usize, "a1"), tinystr!(8usize, "it")), (tinystr!(6usize, "a1"), tinystr!(8usize, "it-CH")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ja")), (tinystr!(6usize, "a1"), tinystr!(8usize, "jv")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ka")), (tinystr!(6usize, "a1"), tinystr!(8usize, "kea")), (tinystr!(6usize, "a1"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "a1"), tinystr!(8usize, "kk")), (tinystr!(6usize, "a1"), tinystr!(8usize, "km")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ko")), (tinystr!(6usize, "a1"), tinystr!(8usize, "kok")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ks")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ku")), (tinystr!(6usize, "a1"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ky")), (tinystr!(6usize, "a1"), tinystr!(8usize, "lb")), (tinystr!(6usize, "a1"), tinystr!(8usize, "lo")), (tinystr!(6usize, "a1"), tinystr!(8usize, "lt")), (tinystr!(6usize, "a1"), tinystr!(8usize, "lv")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mai")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mi")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mk")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ml")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mn")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mni")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ms")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ms-ID")), (tinystr!(6usize, "a1"), tinystr!(8usize, "mt")), (tinystr!(6usize, "a1"), tinystr!(8usize, "my")), (tinystr!(6usize, "a1"), tinystr!(8usize, "nl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "no")), (tinystr!(6usize, "a1"), tinystr!(8usize, "or")), (tinystr!(6usize, "a1"), tinystr!(8usize, "pa")), (tinystr!(6usize, "a1"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "a1"), tinystr!(8usize, "pl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ps")), (tinystr!(6usize, "a1"), tinystr!(8usize, "pt")), (tinystr!(6usize, "a1"), tinystr!(8usize, "pt-PT")), (tinystr!(6usize, "a1"), tinystr!(8usize, "qu")), (tinystr!(6usize, "a1"), tinystr!(8usize, "rm")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ro")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ru")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sa")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sah")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sc")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sk")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "so")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sq")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "a1"), tinystr!(8usize, "su")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sv")), (tinystr!(6usize, "a1"), tinystr!(8usize, "sw")), (tinystr!(6usize, "a1"), tinystr!(8usize, "syr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ta")), (tinystr!(6usize, "a1"), tinystr!(8usize, "te")), (tinystr!(6usize, "a1"), tinystr!(8usize, "tg")), (tinystr!(6usize, "a1"), tinystr!(8usize, "th")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ti")), (tinystr!(6usize, "a1"), tinystr!(8usize, "tk")), (tinystr!(6usize, "a1"), tinystr!(8usize, "to")), (tinystr!(6usize, "a1"), tinystr!(8usize, "tr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "tt")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ug")), (tinystr!(6usize, "a1"), tinystr!(8usize, "uk")), (tinystr!(6usize, "a1"), tinystr!(8usize, "und")), (tinystr!(6usize, "a1"), tinystr!(8usize, "ur")), (tinystr!(6usize, "a1"), tinystr!(8usize, "uz")), (tinystr!(6usize, "a1"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "vec")), (tinystr!(6usize, "a1"), tinystr!(8usize, "vi")), (tinystr!(6usize, "a1"), tinystr!(8usize, "wo")), (tinystr!(6usize, "a1"), tinystr!(8usize, "xh")), (tinystr!(6usize, "a1"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "a1"), tinystr!(8usize, "yo")), (tinystr!(6usize, "a1"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "a1"), tinystr!(8usize, "yue")), (tinystr!(6usize, "a1"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "a1"), tinystr!(8usize, "zh")), (tinystr!(6usize, "a1"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "a1"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "a1"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "a1"), tinystr!(8usize, "zu")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "af")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "am")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ar")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "as")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ast")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "az")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "be")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "bg")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "blo")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "bn")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "br")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "brx")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "bs")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ca")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "chr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "cs")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "cv")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "cy")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "da")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "de")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "doi")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "el")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-AU")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-BE")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-BW")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-BZ")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-GB")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-HK")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-IE")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-SE")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-ZA")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "en-ZW")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "eo")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es-419")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es-HN")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es-MX")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "et")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "eu")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fa")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fi")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fil")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fo")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "fy")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ga")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "gd")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "gl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "gu")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ha")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "he")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "hi")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "hr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "hu")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "hy")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ia")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "id")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ig")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "is")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "it")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "it-CH")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ja")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "jv")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ka")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "kea")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "kk")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "km")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ko")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "kok")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ks")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ku")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ky")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "lb")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "lo")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "lt")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "lv")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mai")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mi")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mk")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ml")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mn")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mni")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ms")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ms-BN")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ms-ID")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "mt")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "my")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "nl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "nl-BE")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "no")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "or")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "pa")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "pl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ps")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "pt")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "pt-PT")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "qu")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "rm")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ro")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ru")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sa")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sah")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sc")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sd-Deva")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "si")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sk")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "so")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sq")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "su")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sv")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "sw")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "syr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ta")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "te")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "tg")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "th")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ti")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ti-ER")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "tk")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "to")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "tr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "tt")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ug")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "uk")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "und")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "ur")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "uz")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "uz-Cyrl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "vec")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "vi")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "wo")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "xh")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "yo")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "yue")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "zh")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "zh-SG")), (tinystr!(6usize, "a1e"), tinystr!(8usize, "zu")), (tinystr!(6usize, "d"), tinystr!(8usize, "cs")), (tinystr!(6usize, "d"), tinystr!(8usize, "da")), (tinystr!(6usize, "d"), tinystr!(8usize, "fo")), (tinystr!(6usize, "d"), tinystr!(8usize, "hr")), (tinystr!(6usize, "d"), tinystr!(8usize, "ja")), (tinystr!(6usize, "d"), tinystr!(8usize, "ko")), (tinystr!(6usize, "d"), tinystr!(8usize, "no")), (tinystr!(6usize, "d"), tinystr!(8usize, "sk")), (tinystr!(6usize, "d"), tinystr!(8usize, "und")), (tinystr!(6usize, "d"), tinystr!(8usize, "yue")), (tinystr!(6usize, "d"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "d"), tinystr!(8usize, "zh")), (tinystr!(6usize, "d"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "de"), tinystr!(8usize, "af")), (tinystr!(6usize, "de"), tinystr!(8usize, "am")), (tinystr!(6usize, "de"), tinystr!(8usize, "ar")), (tinystr!(6usize, "de"), tinystr!(8usize, "ast")), (tinystr!(6usize, "de"), tinystr!(8usize, "be")), (tinystr!(6usize, "de"), tinystr!(8usize, "bg")), (tinystr!(6usize, "de"), tinystr!(8usize, "blo")), (tinystr!(6usize, "de"), tinystr!(8usize, "bn")), (tinystr!(6usize, "de"), tinystr!(8usize, "br")), (tinystr!(6usize, "de"), tinystr!(8usize, "bs")), (tinystr!(6usize, "de"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "de"), tinystr!(8usize, "ca")), (tinystr!(6usize, "de"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "de"), tinystr!(8usize, "chr")), (tinystr!(6usize, "de"), tinystr!(8usize, "cs")), (tinystr!(6usize, "de"), tinystr!(8usize, "cv")), (tinystr!(6usize, "de"), tinystr!(8usize, "cy")), (tinystr!(6usize, "de"), tinystr!(8usize, "da")), (tinystr!(6usize, "de"), tinystr!(8usize, "de")), (tinystr!(6usize, "de"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "de"), tinystr!(8usize, "el")), (tinystr!(6usize, "de"), tinystr!(8usize, "en")), (tinystr!(6usize, "de"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "de"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "de"), tinystr!(8usize, "en-CA")), (tinystr!(6usize, "de"), tinystr!(8usize, "es")), (tinystr!(6usize, "de"), tinystr!(8usize, "et")), (tinystr!(6usize, "de"), tinystr!(8usize, "eu")), (tinystr!(6usize, "de"), tinystr!(8usize, "fa")), (tinystr!(6usize, "de"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "de"), tinystr!(8usize, "fi")), (tinystr!(6usize, "de"), tinystr!(8usize, "fil")), (tinystr!(6usize, "de"), tinystr!(8usize, "fo")), (tinystr!(6usize, "de"), tinystr!(8usize, "fr")), (tinystr!(6usize, "de"), tinystr!(8usize, "fy")), (tinystr!(6usize, "de"), tinystr!(8usize, "ga")), (tinystr!(6usize, "de"), tinystr!(8usize, "gd")), (tinystr!(6usize, "de"), tinystr!(8usize, "gl")), (tinystr!(6usize, "de"), tinystr!(8usize, "gu")), (tinystr!(6usize, "de"), tinystr!(8usize, "he")), (tinystr!(6usize, "de"), tinystr!(8usize, "hi")), (tinystr!(6usize, "de"), tinystr!(8usize, "hr")), (tinystr!(6usize, "de"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "de"), tinystr!(8usize, "hu")), (tinystr!(6usize, "de"), tinystr!(8usize, "hy")), (tinystr!(6usize, "de"), tinystr!(8usize, "ia")), (tinystr!(6usize, "de"), tinystr!(8usize, "id")), (tinystr!(6usize, "de"), tinystr!(8usize, "is")), (tinystr!(6usize, "de"), tinystr!(8usize, "it")), (tinystr!(6usize, "de"), tinystr!(8usize, "ja")), (tinystr!(6usize, "de"), tinystr!(8usize, "jv")), (tinystr!(6usize, "de"), tinystr!(8usize, "ka")), (tinystr!(6usize, "de"), tinystr!(8usize, "kea")), (tinystr!(6usize, "de"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "de"), tinystr!(8usize, "km")), (tinystr!(6usize, "de"), tinystr!(8usize, "kn")), (tinystr!(6usize, "de"), tinystr!(8usize, "ko")), (tinystr!(6usize, "de"), tinystr!(8usize, "kok")), (tinystr!(6usize, "de"), tinystr!(8usize, "lb")), (tinystr!(6usize, "de"), tinystr!(8usize, "lo")), (tinystr!(6usize, "de"), tinystr!(8usize, "lv")), (tinystr!(6usize, "de"), tinystr!(8usize, "mk")), (tinystr!(6usize, "de"), tinystr!(8usize, "mn")), (tinystr!(6usize, "de"), tinystr!(8usize, "mr")), (tinystr!(6usize, "de"), tinystr!(8usize, "ms")), (tinystr!(6usize, "de"), tinystr!(8usize, "my")), (tinystr!(6usize, "de"), tinystr!(8usize, "nl")), (tinystr!(6usize, "de"), tinystr!(8usize, "no")), (tinystr!(6usize, "de"), tinystr!(8usize, "or")), (tinystr!(6usize, "de"), tinystr!(8usize, "pa")), (tinystr!(6usize, "de"), tinystr!(8usize, "pl")), (tinystr!(6usize, "de"), tinystr!(8usize, "pt")), (tinystr!(6usize, "de"), tinystr!(8usize, "qu")), (tinystr!(6usize, "de"), tinystr!(8usize, "rm")), (tinystr!(6usize, "de"), tinystr!(8usize, "ro")), (tinystr!(6usize, "de"), tinystr!(8usize, "ru")), (tinystr!(6usize, "de"), tinystr!(8usize, "sc")), (tinystr!(6usize, "de"), tinystr!(8usize, "si")), (tinystr!(6usize, "de"), tinystr!(8usize, "sk")), (tinystr!(6usize, "de"), tinystr!(8usize, "sl")), (tinystr!(6usize, "de"), tinystr!(8usize, "sq")), (tinystr!(6usize, "de"), tinystr!(8usize, "sr")), (tinystr!(6usize, "de"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "de"), tinystr!(8usize, "sv")), (tinystr!(6usize, "de"), tinystr!(8usize, "sw")), (tinystr!(6usize, "de"), tinystr!(8usize, "syr")), (tinystr!(6usize, "de"), tinystr!(8usize, "ta")), (tinystr!(6usize, "de"), tinystr!(8usize, "te")), (tinystr!(6usize, "de"), tinystr!(8usize, "th")), (tinystr!(6usize, "de"), tinystr!(8usize, "ti")), (tinystr!(6usize, "de"), tinystr!(8usize, "tk")), (tinystr!(6usize, "de"), tinystr!(8usize, "to")), (tinystr!(6usize, "de"), tinystr!(8usize, "tr")), (tinystr!(6usize, "de"), tinystr!(8usize, "ug")), (tinystr!(6usize, "de"), tinystr!(8usize, "uk")), (tinystr!(6usize, "de"), tinystr!(8usize, "und")), (tinystr!(6usize, "de"), tinystr!(8usize, "ur")), (tinystr!(6usize, "de"), tinystr!(8usize, "uz")), (tinystr!(6usize, "de"), tinystr!(8usize, "vec")), (tinystr!(6usize, "de"), tinystr!(8usize, "vi")), (tinystr!(6usize, "de"), tinystr!(8usize, "wo")), (tinystr!(6usize, "de"), tinystr!(8usize, "xh")), (tinystr!(6usize, "de"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "de"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "de"), tinystr!(8usize, "yue")), (tinystr!(6usize, "de"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "de"), tinystr!(8usize, "zh")), (tinystr!(6usize, "de"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "de"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "de"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "de"), tinystr!(8usize, "zu")), (tinystr!(6usize, "e"), tinystr!(8usize, "mk")), (tinystr!(6usize, "e"), tinystr!(8usize, "und")), (tinystr!(6usize, "gy"), tinystr!(8usize, "af")), (tinystr!(6usize, "gy"), tinystr!(8usize, "am")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ar")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ast")), (tinystr!(6usize, "gy"), tinystr!(8usize, "be")), (tinystr!(6usize, "gy"), tinystr!(8usize, "bg")), (tinystr!(6usize, "gy"), tinystr!(8usize, "blo")), (tinystr!(6usize, "gy"), tinystr!(8usize, "bn")), (tinystr!(6usize, "gy"), tinystr!(8usize, "br")), (tinystr!(6usize, "gy"), tinystr!(8usize, "bs")), (tinystr!(6usize, "gy"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ca")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "gy"), tinystr!(8usize, "chr")), (tinystr!(6usize, "gy"), tinystr!(8usize, "cs")), (tinystr!(6usize, "gy"), tinystr!(8usize, "cv")), (tinystr!(6usize, "gy"), tinystr!(8usize, "cy")), (tinystr!(6usize, "gy"), tinystr!(8usize, "da")), (tinystr!(6usize, "gy"), tinystr!(8usize, "de")), (tinystr!(6usize, "gy"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "gy"), tinystr!(8usize, "el")), (tinystr!(6usize, "gy"), tinystr!(8usize, "en")), (tinystr!(6usize, "gy"), tinystr!(8usize, "es")), (tinystr!(6usize, "gy"), tinystr!(8usize, "et")), (tinystr!(6usize, "gy"), tinystr!(8usize, "eu")), (tinystr!(6usize, "gy"), tinystr!(8usize, "fa")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "gy"), tinystr!(8usize, "fi")), (tinystr!(6usize, "gy"), tinystr!(8usize, "fil")), (tinystr!(6usize, "gy"), tinystr!(8usize, "fo")), (tinystr!(6usize, "gy"), tinystr!(8usize, "fr")), (tinystr!(6usize, "gy"), tinystr!(8usize, "fy")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ga")), (tinystr!(6usize, "gy"), tinystr!(8usize, "gd")), (tinystr!(6usize, "gy"), tinystr!(8usize, "gl")), (tinystr!(6usize, "gy"), tinystr!(8usize, "he")), (tinystr!(6usize, "gy"), tinystr!(8usize, "hi")), (tinystr!(6usize, "gy"), tinystr!(8usize, "hr")), (tinystr!(6usize, "gy"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "gy"), tinystr!(8usize, "hu")), (tinystr!(6usize, "gy"), tinystr!(8usize, "hy")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ia")), (tinystr!(6usize, "gy"), tinystr!(8usize, "id")), (tinystr!(6usize, "gy"), tinystr!(8usize, "is")), (tinystr!(6usize, "gy"), tinystr!(8usize, "it")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ja")), (tinystr!(6usize, "gy"), tinystr!(8usize, "jv")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ka")), (tinystr!(6usize, "gy"), tinystr!(8usize, "kea")), (tinystr!(6usize, "gy"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "gy"), tinystr!(8usize, "kk")), (tinystr!(6usize, "gy"), tinystr!(8usize, "km")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ko")), (tinystr!(6usize, "gy"), tinystr!(8usize, "kok")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ks")), (tinystr!(6usize, "gy"), tinystr!(8usize, "lb")), (tinystr!(6usize, "gy"), tinystr!(8usize, "lt")), (tinystr!(6usize, "gy"), tinystr!(8usize, "lv")), (tinystr!(6usize, "gy"), tinystr!(8usize, "mk")), (tinystr!(6usize, "gy"), tinystr!(8usize, "mr")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ms")), (tinystr!(6usize, "gy"), tinystr!(8usize, "nl")), (tinystr!(6usize, "gy"), tinystr!(8usize, "no")), (tinystr!(6usize, "gy"), tinystr!(8usize, "or")), (tinystr!(6usize, "gy"), tinystr!(8usize, "pl")), (tinystr!(6usize, "gy"), tinystr!(8usize, "pt")), (tinystr!(6usize, "gy"), tinystr!(8usize, "qu")), (tinystr!(6usize, "gy"), tinystr!(8usize, "rm")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ro")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ru")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sc")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sk")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sl")), (tinystr!(6usize, "gy"), tinystr!(8usize, "so")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sq")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sr")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sv")), (tinystr!(6usize, "gy"), tinystr!(8usize, "sw")), (tinystr!(6usize, "gy"), tinystr!(8usize, "syr")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ta")), (tinystr!(6usize, "gy"), tinystr!(8usize, "te")), (tinystr!(6usize, "gy"), tinystr!(8usize, "tg")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ti")), (tinystr!(6usize, "gy"), tinystr!(8usize, "to")), (tinystr!(6usize, "gy"), tinystr!(8usize, "tt")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ug")), (tinystr!(6usize, "gy"), tinystr!(8usize, "uk")), (tinystr!(6usize, "gy"), tinystr!(8usize, "und")), (tinystr!(6usize, "gy"), tinystr!(8usize, "ur")), (tinystr!(6usize, "gy"), tinystr!(8usize, "uz")), (tinystr!(6usize, "gy"), tinystr!(8usize, "vec")), (tinystr!(6usize, "gy"), tinystr!(8usize, "vi")), (tinystr!(6usize, "gy"), tinystr!(8usize, "wo")), (tinystr!(6usize, "gy"), tinystr!(8usize, "xh")), (tinystr!(6usize, "gy"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "gy"), tinystr!(8usize, "yue")), (tinystr!(6usize, "gy"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "gy"), tinystr!(8usize, "zh")), (tinystr!(6usize, "gy"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "gy"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "gy"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "gy"), tinystr!(8usize, "zu")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "af")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ar")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ast")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "az")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "be")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "bg")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "blo")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "bn")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "br")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "brx")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "bs")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ca")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "chr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "cs")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "cv")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "cy")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "da")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "de")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "el")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "en")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "es")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "es-419")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "et")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "eu")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "fa")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "fi")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "fil")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "fo")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "fr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "fy")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ga")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "gd")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "gl")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "gu")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "he")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "hi")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "hr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "hu")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "hy")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ia")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "id")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "is")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "it")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ja")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "jv")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ka")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "kea")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "kk")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "km")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ko")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "kok")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ks")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ku")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "lb")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "lo")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "lt")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "lv")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "mk")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "mn")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "mr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ms")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "nl")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "no")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "or")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "pa")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "pl")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "pt")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "qu")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "rm")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ro")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ru")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sc")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sk")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sl")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "so")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sq")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sv")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "sw")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "syr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ta")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "te")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "tg")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "th")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ti")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "to")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "tr")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "tt")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ug")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "uk")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "und")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "ur")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "uz")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "vec")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "vi")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "wo")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "xh")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "yue")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "zh")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "gym0"), tinystr!(8usize, "zu")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "af")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "am")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ar")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "as")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ast")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "az")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "be")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "bg")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "blo")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "bn")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "br")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "brx")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "bs")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ca")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "chr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "cs")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "cv")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "cy")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "da")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "de")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "el")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "en")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "es")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "es-419")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "et")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "eu")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fa")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fi")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fil")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fo")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "fy")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ga")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "gd")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "gl")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "gu")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "he")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "hi")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "hr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "hu")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "hy")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ia")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "id")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "is")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "it")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ja")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "jv")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ka")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "kea")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "kk")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "km")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ko")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "kok")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ks")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ku")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ky")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "lb")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "lo")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "lt")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "lv")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "mk")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "mn")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "mr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ms")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "my")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ne")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "nl")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "no")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "or")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "pa")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "pl")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "pt")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "qu")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "rm")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ro")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ru")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sc")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sd")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sk")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sl")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "so")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sq")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sv")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "sw")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "syr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ta")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "te")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "tg")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "th")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ti")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "to")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "tr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "tt")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ug")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "uk")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "und")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "ur")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "uz")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "vec")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "vi")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "wo")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "xh")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "yo")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "yue")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "zh")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "gym0d"), tinystr!(8usize, "zu")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "af")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "am")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ar")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ast")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "az")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "be")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "bg")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "blo")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "bn")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "br")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "brx")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "bs")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ca")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "chr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "cs")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "cv")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "cy")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "da")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "de")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "el")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "en")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "en-AU")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "en-GB")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "es")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "es-419")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "es-CO")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "et")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "eu")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "fa")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "fi")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "fil")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "fo")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "fr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "fy")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ga")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "gd")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "gl")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "gu")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "he")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "hi")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "hr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "hu")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "hy")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ia")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "id")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "is")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "it")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ja")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "jv")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ka")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "kea")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "kk")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "km")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ko")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "kok")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ks")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ku")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ky")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "lb")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "lo")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "lt")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "lv")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "mk")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "mn")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "mr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ms")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "nl")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "no")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "or")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "pa")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "pl")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "pt")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "qu")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "rm")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ro")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ru")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sc")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sk")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sl")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "so")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sq")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sv")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "sw")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "syr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ta")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "te")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "tg")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "th")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ti")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "to")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "tr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "tt")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ug")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "uk")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "und")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "ur")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "uz")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "vec")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "vi")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "wo")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "xh")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "yue")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "zh")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "gym0de"), tinystr!(8usize, "zu")), (tinystr!(6usize, "m0"), tinystr!(8usize, "bg")), (tinystr!(6usize, "m0"), tinystr!(8usize, "da")), (tinystr!(6usize, "m0"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "m0"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "m0"), tinystr!(8usize, "et")), (tinystr!(6usize, "m0"), tinystr!(8usize, "ga")), (tinystr!(6usize, "m0"), tinystr!(8usize, "hi")), (tinystr!(6usize, "m0"), tinystr!(8usize, "hr")), (tinystr!(6usize, "m0"), tinystr!(8usize, "ja")), (tinystr!(6usize, "m0"), tinystr!(8usize, "ko")), (tinystr!(6usize, "m0"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "m0"), tinystr!(8usize, "lt")), (tinystr!(6usize, "m0"), tinystr!(8usize, "mn")), (tinystr!(6usize, "m0"), tinystr!(8usize, "no")), (tinystr!(6usize, "m0"), tinystr!(8usize, "sk")), (tinystr!(6usize, "m0"), tinystr!(8usize, "und")), (tinystr!(6usize, "m0"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "m0"), tinystr!(8usize, "yue")), (tinystr!(6usize, "m0"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "m0"), tinystr!(8usize, "zh")), (tinystr!(6usize, "m0"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "af")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "am")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ar")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "as")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ast")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "az")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "be")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "bg")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "blo")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "bn")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "br")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "brx")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "bs")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ca")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "chr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "cs")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "cv")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "cy")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "da")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "de")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "el")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-BE")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-BW")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-BZ")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-IE")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-MT")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-NZ")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-ZA")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "en-ZW")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "es")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "es-419")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "es-CL")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "es-PR")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "et")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "eu")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fa")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fi")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fil")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fo")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "fy")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ga")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "gd")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "gl")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "gu")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ha")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "he")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "hi")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "hr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "hu")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "hy")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ia")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "id")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ig")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "is")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "it")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ja")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "jv")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ka")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "kea")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "kk")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "km")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "kn")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ko")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "kok")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ks")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ku")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ky")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "lb")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "lo")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "lt")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "lv")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "mk")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "mn")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "mr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ms")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "mt")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "my")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "nl")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "nl-BE")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "no")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "or")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "pa")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "pl")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ps")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "pt")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "qu")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "rm")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ro")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ru")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sc")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "si")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sk")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sl")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "so")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sq")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sv")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "sw")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "syr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ta")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "te")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "tg")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "th")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ti")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "tk")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "to")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "tr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "tt")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ug")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "uk")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "und")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "ur")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "uz")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "vec")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "vi")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "wo")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "xh")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "yo")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "yue")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "zh")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "zh-SG")), (tinystr!(6usize, "m0d"), tinystr!(8usize, "zu")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "af")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "am")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ar")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "as")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ast")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "az")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "be")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "bg")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "blo")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "bn")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "br")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "brx")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "bs")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ca")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "chr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "cs")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "cv")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "cy")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "da")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "de")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "el")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-AU")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-BW")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-BZ")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-GB")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-ZA")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "en-ZW")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es-419")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es-AR")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es-CL")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es-MX")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "es-PR")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "et")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "eu")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fa")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fi")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fil")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fo")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "fy")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ga")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "gd")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "gl")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "gu")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ha")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "he")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "hi")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "hr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "hu")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "hy")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ia")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "id")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ig")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "is")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "it")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ja")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "jv")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ka")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "kea")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "kk")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "km")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "kn")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ko")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "kok")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ks")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ku")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ky")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "lb")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "lo")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "lt")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "lv")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "mk")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ml")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "mn")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "mr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ms")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "mt")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "my")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ne")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "nl")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "nl-BE")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "no")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "or")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "pa")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "pl")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "pt")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "qu")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "rm")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ro")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ru")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sc")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "si")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sk")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sl")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "so")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sq")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sv")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sw")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "sw-CD")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "syr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ta")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "te")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "tg")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "th")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ti")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "tk")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "to")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "tr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "tt")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ug")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "uk")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "und")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "ur")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "uz")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "vec")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "vi")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "wo")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "xh")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "yo")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "yue")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "zh")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "zh-SG")), (tinystr!(6usize, "m0de"), tinystr!(8usize, "zu")), (tinystr!(6usize, "y"), tinystr!(8usize, "af")), (tinystr!(6usize, "y"), tinystr!(8usize, "am")), (tinystr!(6usize, "y"), tinystr!(8usize, "ar")), (tinystr!(6usize, "y"), tinystr!(8usize, "as")), (tinystr!(6usize, "y"), tinystr!(8usize, "ast")), (tinystr!(6usize, "y"), tinystr!(8usize, "be")), (tinystr!(6usize, "y"), tinystr!(8usize, "bg")), (tinystr!(6usize, "y"), tinystr!(8usize, "blo")), (tinystr!(6usize, "y"), tinystr!(8usize, "bn")), (tinystr!(6usize, "y"), tinystr!(8usize, "br")), (tinystr!(6usize, "y"), tinystr!(8usize, "bs")), (tinystr!(6usize, "y"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "y"), tinystr!(8usize, "ca")), (tinystr!(6usize, "y"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "y"), tinystr!(8usize, "chr")), (tinystr!(6usize, "y"), tinystr!(8usize, "cs")), (tinystr!(6usize, "y"), tinystr!(8usize, "cv")), (tinystr!(6usize, "y"), tinystr!(8usize, "cy")), (tinystr!(6usize, "y"), tinystr!(8usize, "da")), (tinystr!(6usize, "y"), tinystr!(8usize, "de")), (tinystr!(6usize, "y"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "y"), tinystr!(8usize, "el")), (tinystr!(6usize, "y"), tinystr!(8usize, "en")), (tinystr!(6usize, "y"), tinystr!(8usize, "es")), (tinystr!(6usize, "y"), tinystr!(8usize, "et")), (tinystr!(6usize, "y"), tinystr!(8usize, "eu")), (tinystr!(6usize, "y"), tinystr!(8usize, "fa")), (tinystr!(6usize, "y"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "y"), tinystr!(8usize, "fi")), (tinystr!(6usize, "y"), tinystr!(8usize, "fil")), (tinystr!(6usize, "y"), tinystr!(8usize, "fo")), (tinystr!(6usize, "y"), tinystr!(8usize, "fr")), (tinystr!(6usize, "y"), tinystr!(8usize, "fy")), (tinystr!(6usize, "y"), tinystr!(8usize, "ga")), (tinystr!(6usize, "y"), tinystr!(8usize, "gd")), (tinystr!(6usize, "y"), tinystr!(8usize, "gl")), (tinystr!(6usize, "y"), tinystr!(8usize, "ha")), (tinystr!(6usize, "y"), tinystr!(8usize, "he")), (tinystr!(6usize, "y"), tinystr!(8usize, "hi")), (tinystr!(6usize, "y"), tinystr!(8usize, "hr")), (tinystr!(6usize, "y"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "y"), tinystr!(8usize, "hu")), (tinystr!(6usize, "y"), tinystr!(8usize, "hy")), (tinystr!(6usize, "y"), tinystr!(8usize, "ia")), (tinystr!(6usize, "y"), tinystr!(8usize, "id")), (tinystr!(6usize, "y"), tinystr!(8usize, "ig")), (tinystr!(6usize, "y"), tinystr!(8usize, "is")), (tinystr!(6usize, "y"), tinystr!(8usize, "it")), (tinystr!(6usize, "y"), tinystr!(8usize, "ja")), (tinystr!(6usize, "y"), tinystr!(8usize, "jv")), (tinystr!(6usize, "y"), tinystr!(8usize, "ka")), (tinystr!(6usize, "y"), tinystr!(8usize, "kea")), (tinystr!(6usize, "y"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "y"), tinystr!(8usize, "kk")), (tinystr!(6usize, "y"), tinystr!(8usize, "km")), (tinystr!(6usize, "y"), tinystr!(8usize, "ko")), (tinystr!(6usize, "y"), tinystr!(8usize, "kok")), (tinystr!(6usize, "y"), tinystr!(8usize, "ks")), (tinystr!(6usize, "y"), tinystr!(8usize, "ky")), (tinystr!(6usize, "y"), tinystr!(8usize, "lb")), (tinystr!(6usize, "y"), tinystr!(8usize, "lt")), (tinystr!(6usize, "y"), tinystr!(8usize, "lv")), (tinystr!(6usize, "y"), tinystr!(8usize, "mk")), (tinystr!(6usize, "y"), tinystr!(8usize, "mr")), (tinystr!(6usize, "y"), tinystr!(8usize, "ms")), (tinystr!(6usize, "y"), tinystr!(8usize, "nl")), (tinystr!(6usize, "y"), tinystr!(8usize, "no")), (tinystr!(6usize, "y"), tinystr!(8usize, "or")), (tinystr!(6usize, "y"), tinystr!(8usize, "pa")), (tinystr!(6usize, "y"), tinystr!(8usize, "pcm")), (tinystr!(6usize, "y"), tinystr!(8usize, "pl")), (tinystr!(6usize, "y"), tinystr!(8usize, "pt")), (tinystr!(6usize, "y"), tinystr!(8usize, "qu")), (tinystr!(6usize, "y"), tinystr!(8usize, "rm")), (tinystr!(6usize, "y"), tinystr!(8usize, "ro")), (tinystr!(6usize, "y"), tinystr!(8usize, "ru")), (tinystr!(6usize, "y"), tinystr!(8usize, "sc")), (tinystr!(6usize, "y"), tinystr!(8usize, "sk")), (tinystr!(6usize, "y"), tinystr!(8usize, "sl")), (tinystr!(6usize, "y"), tinystr!(8usize, "so")), (tinystr!(6usize, "y"), tinystr!(8usize, "sq")), (tinystr!(6usize, "y"), tinystr!(8usize, "sr")), (tinystr!(6usize, "y"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "y"), tinystr!(8usize, "sv")), (tinystr!(6usize, "y"), tinystr!(8usize, "sw")), (tinystr!(6usize, "y"), tinystr!(8usize, "syr")), (tinystr!(6usize, "y"), tinystr!(8usize, "ta")), (tinystr!(6usize, "y"), tinystr!(8usize, "te")), (tinystr!(6usize, "y"), tinystr!(8usize, "tg")), (tinystr!(6usize, "y"), tinystr!(8usize, "ti")), (tinystr!(6usize, "y"), tinystr!(8usize, "tk")), (tinystr!(6usize, "y"), tinystr!(8usize, "to")), (tinystr!(6usize, "y"), tinystr!(8usize, "tt")), (tinystr!(6usize, "y"), tinystr!(8usize, "ug")), (tinystr!(6usize, "y"), tinystr!(8usize, "uk")), (tinystr!(6usize, "y"), tinystr!(8usize, "und")), (tinystr!(6usize, "y"), tinystr!(8usize, "ur")), (tinystr!(6usize, "y"), tinystr!(8usize, "uz")), (tinystr!(6usize, "y"), tinystr!(8usize, "vec")), (tinystr!(6usize, "y"), tinystr!(8usize, "vi")), (tinystr!(6usize, "y"), tinystr!(8usize, "wo")), (tinystr!(6usize, "y"), tinystr!(8usize, "xh")), (tinystr!(6usize, "y"), tinystr!(8usize, "yo")), (tinystr!(6usize, "y"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "y"), tinystr!(8usize, "yue")), (tinystr!(6usize, "y"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "y"), tinystr!(8usize, "zh")), (tinystr!(6usize, "y"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "y"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "y"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "y"), tinystr!(8usize, "zu")), (tinystr!(6usize, "y0w"), tinystr!(8usize, "und")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "af")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "am")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ar")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "as")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ast")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "az")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "be")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "bg")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "blo")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "bn")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "br")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "brx")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "bs")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ca")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "chr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "cs")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "cv")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "cy")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "da")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "de")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "el")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "en")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "en-BW")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "en-BZ")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "en-SE")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "es")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "es-419")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "es-AR")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "es-CL")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "es-MX")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "es-PR")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "et")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "eu")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fa")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fi")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fil")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fo")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "fy")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ga")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "gd")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "gl")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "gu")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ha")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "he")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "hi")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "hr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "hu")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "hy")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ia")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "id")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ig")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "is")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "it")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ja")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "jv")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ka")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "kea")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "kk")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "km")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "kn")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ko")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "kok")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ks")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ku")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ky")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "lb")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "lo")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "lt")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "lv")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "mk")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "mn")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "mr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ms")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "mt")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "my")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "nl")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "nl-BE")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "no")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "or")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "pa")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "pl")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ps")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "pt")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "pt-PT")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "qu")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "rm")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ro")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ru")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sc")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "si")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sk")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sl")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "so")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sq")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sv")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "sw")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "syr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ta")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "te")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "tg")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "th")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ti")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "tk")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "to")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "tr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "tt")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ug")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "uk")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "und")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "ur")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "uz")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "vec")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "vi")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "wo")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "xh")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "yo")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "yue")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "zh")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "ym0"), tinystr!(8usize, "zu")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "af")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "am")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ar")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "as")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ast")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "az")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "be")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "bg")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "blo")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "bn")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "br")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "brx")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "bs")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ca")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "chr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "cs")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "cv")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "cy")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "da")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "de")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "el")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-AU")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-BE")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-BW")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-BZ")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-HK")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-IE")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-NZ")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-SE")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-ZA")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "en-ZW")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "es")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "es-419")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "es-CL")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "es-MX")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "es-PR")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "et")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "eu")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fa")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fi")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fil")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fo")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "fy")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ga")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "gd")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "gl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "gu")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "he")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "hi")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "hi-Latn")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "hr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "hu")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "hy")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ia")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "id")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "is")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "it")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ja")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "jv")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ka")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kea")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kk")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "km")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ko")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kok")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ks")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ku")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ky")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "lb")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "lo")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "lt")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "lv")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "mk")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ml")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "mn")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "mr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ms")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "mt")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "my")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "nl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "nl-BE")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "no")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "or")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "pa")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "pl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "pt")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "pt-PT")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "qu")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "rm")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ro")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ru")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sc")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "si")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sk")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "so")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sq")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sv")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "sw")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "syr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ta")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "te")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "tg")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "th")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ti")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "tk")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "to")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "tr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "tt")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ug")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "uk")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "und")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "ur")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "uz")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "vec")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "vi")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "wo")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "xh")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "yue")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "zh")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "zh-SG")), (tinystr!(6usize, "ym0d"), tinystr!(8usize, "zu")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "af")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "am")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ar")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "as")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ast")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "az")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "be")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "bg")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "blo")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "bn")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "br")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "brx")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "bs")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ca")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ceb")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "chr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "cs")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "cv")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "cy")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "da")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "de")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "dsb")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "el")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-001")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-AE")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-AU")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-BE")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-BW")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-BZ")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-CH")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-GB")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-HK")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-IE")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-IN")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-SE")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-ZA")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "en-ZW")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "es")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "es-419")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "es-MX")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "es-PA")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "et")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "eu")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fa")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ff-Adlm")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fi")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fil")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fo")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fr-CA")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fr-CH")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "fy")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ga")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "gd")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "gl")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "gu")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ha")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "he")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "hi")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "hr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "hsb")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "hu")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "hy")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ia")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "id")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ig")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "is")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "it")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ja")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "jv")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ka")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "kea")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "kgp")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "kk")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "km")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ko")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "kok")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ks")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ku")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "kxv")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ky")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "lb")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "lo")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "lt")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "lv")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "mk")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ml")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "mn")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "mr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ms")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "mt")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "nl")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "nl-BE")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "no")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "or")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "pa")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "pl")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "pt")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "pt-PT")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "qu")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "rm")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ro")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ru")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sc")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "si")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sk")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sl")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "so")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sq")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sr-Latn")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sv")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "sw")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "syr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ta")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "te")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "tg")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "th")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ti")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "tk")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "to")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "tr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "tt")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ug")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "uk")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "und")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "ur")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "uz")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "vec")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "vi")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "wo")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "xh")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "xnr")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "yo")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "yrl")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "yue")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "yue-Hans")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "zh")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "zh-HK")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "zh-Hant")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "zh-MO")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "zh-SG")), (tinystr!(6usize, "ym0de"), tinystr!(8usize, "zu"))]
                },
                {
                    type S = <icu::datetime::provider::neo::IndianDateNeoSkeletonPatternsV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                    const _A1E_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\08\0\0\x80P\x04\0\x13c\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\x13c\0\0 \x80 \x03\0\0 \x80@\x01\0\0 \x80\x10\x01\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0 \x0F\0\0/\x80 \x01\0 \x0F\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_AS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0A\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0A\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01") } };
                    const _A1E_BLO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_BR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x04\0\0,\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x01") } };
                    const _A1E_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0J\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_CEB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0A\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_CY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_DE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_DOI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0A\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_EL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_EN_AU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0;\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_EN_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_EN_BW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_EN_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_EN_GB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0;\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_EN_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_EN_IE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_EN_IN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0A\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_EN_SE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0 \x80\0\x01") } };
                    const _A1E_EN_ZA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1E_EN_ZW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0A\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_EO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x007\0V\0\0\x80P\x04\0\0,\0\0 \0\0l\0\0a\0\0 \x80@\x01\0\0-\0\0a\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0P\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_ES_419: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0b\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x03\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_ES_HN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0.\0_\0\0\x80P\x04\0\0 \x80@\x02\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x03\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_ES_MX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0P\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x03\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_ES_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0b\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x03\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80 \x02\0\0/\x80@\x02\0\0/\x80\x10\x01") } };
                    const _A1E_ET: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0 \x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0L\0w\0\0\x80\0\x01\0\0.\0\0 \0\0a\0\0r\0\0o\0\0k\0\0o\0\0 \x80\x10\x01\0\0.\0\0 \0\0u\0\0r\0\0t\0\0e\0\0k\0\0o\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x04\0\0k\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0/\x80 \x02\0\0/\x80@\x02\0\0,\0\0 \x80P\x04") } };
                    const _A1E_FA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01\0\0 \x80\0\x05") } };
                    const _A1E_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0A\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0.A\0\0 \x80@\x01\0\0 \x80 \x03\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0.A\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_FI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80R\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_FO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0;\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1E_FR_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0 \x80\0\x01") } };
                    const _A1E_FR_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0;\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_FY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0m\0\0h\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_GL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0\\\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x11\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_GU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\0\x01\0\0 \x80\x10\x01") } };
                    const _A1E_HA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _A1E_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\x05\xD1\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\x05\xD1\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_HI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\0\x01\0\0 \x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x05") } };
                    const _A1E_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x04\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x03\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x01") } };
                    const _A1E_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0V\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\0 \x80\0\x01\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\0 \x80\0\x01\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \0\x05i\0\0.\0\0,\0\0 \x80\0\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_IA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0.\0J\0\0\x80P\x04\0\0 \0\0l\0\0e\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_IG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0;\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _A1E_IS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_IT_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0;\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x01\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0(\x80P\x04\0\0)\0\x80\0\x01\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0(\x80P\x01\0\0)\0\x80\0\x05\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01\0\0(\x80P\x01\0\0)") } };
                    const _A1E_JV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0-\0\0 \x80 \x01\0\0 \0\0-\0\0 \x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_KEA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0J\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0i\0\0 \x80 \x04\0\0 \0\0d\0\0i\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _A1E_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0V\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_KM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0;\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0P\0\0\x80\0\x01\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x01\0\xC6\xD4\0\0 \x80@\x01\0\xC7|\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x01\0\xC6\xD4\0\0 \x80@\x01\0\xC7|\0\0 \0\0(\x80P\x01\0\0)\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80@\x01\0\0.\0\0 \0\0(\x80P\x01\0\0)") } };
                    const _A1E_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80\0\x01\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x04\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x03\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_KXV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0A\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\0\x01\0\0 \x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80P\x04\0\0,\0\0 \x80\0\x01\0\0 \x80@\x01\0\0-\x80 \x04\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\x80\0\x01\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80@\x01\0\0-\x80 \x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_LO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0A\0\0\x80P\x04\0\x0E\x97\0\x0E\xB5\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80\0\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \x80\0\x01\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0 \x80\0\x01\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0 \x80\0\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x004\0b\0\0\x80P\x04\0\0,\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0a\0\0d\0\0a\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x01") } };
                    const _A1E_MAI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x01\0\0 \x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_MI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_ML: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0A\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0C\0t\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80R\x04\0\0 \0\x043\0\x040\0\x04@\0\x040\0\x043\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0.\x80 \x01\0\0.\x80@\x01\0\0.\0\0 \x80P\x01") } };
                    const _A1E_MNI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0A\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\0,\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_MS_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\x005\0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0J\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\0\x05\0\0 \x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _A1E_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0;\0\0\x80P\x04\0\0 \x80\0\x01\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_PS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0G\0\0\x80P\x04\0\0 \0\x06/\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\0 \0\x06/\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0b\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_PT_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0P\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_QU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0A\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0,\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0+\0\0\x80P\x04\0\0,\0\0 \0\0i\0\0l\0\0s\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_SAH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0:\0Y\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x04A\0\x04K\0\x04;\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \0\x04:\0\x04\xAF\0\x04=\0\x04M\0\0,\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_SC: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x007\0S\0\0\x80P\x04\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \0\0s\0\0u\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_SI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_SK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0G\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_SO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0>\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _A1E_SQ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_SR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x05") } };
                    const _A1E_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \0\x07\x12\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \0\x07\x12\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_TE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0>\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_TG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0A\0\0\x80P\x04\0\x0E\x17\0\x0E5\0\x0EH\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_TI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\x13c\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_TI_ER: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0.\0M\0\0\x80P\x04\0\x13a\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \0\x12\x18\0\x12\xD3\0\x12\r\0\x12r\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_TK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80P\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80P\x01") } };
                    const _A1E_TO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\x002\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1E_TR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80P\x01") } };
                    const _A1E_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0\\\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0 \0\0(\x80\0\x01\0\0)\0\0,\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\x06\x0C\0\0 \x80 \x04\0\0 \x80@\x01\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\x06\x0C\0\0 \x80 \x03\0\0 \x80@\x01\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\x06\x0C\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80R\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_UR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x04\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x03\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1E_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \0\0(\x80\0\x01\0\0)\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \0\0(\x80\0\x01\0\0)\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \0\0(\x80\0\x05\0\0)") } };
                    const _A1E_UZ_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x02\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _A1E_VI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0L\0n\0\0\x80P\x04\0\0,\0\0 \0\0n\0\0g\0\0\xE0\0\0y\0\0 \x80@\x01\0\0 \0\0t\0\0h\0\0\xE1\0\0n\0\0g\0\0 \x80 \x01\0\0 \0\0n\0\x01\x03\0\0m\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_WO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0A\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1E_YO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0;\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x02\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _A1E_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x01\0\0 \x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0 \x80P\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01\0\xFF\x08\x80P\x01\0\xFF\t") } };
                    const _A1E_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x01\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80\0\x01\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01\x80P\x01") } };
                    const _A1E_ZH_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x01\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80\0\x01\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80\0\x01\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01\x80P\x01") } };
                    const _A1E_ZH_SG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x01\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80\0\x01\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80\0\x01\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\xFF\x0C\x80P\x01") } };
                    const _A1E_ZU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _A1_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02\0\0 \x80\0\x05") } };
                    const _A1_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0 \x0F\0\0/\x80 \x02\0 \x0F\0\0/\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0 \x0F\0\0/\x80 \x01\0 \x0F\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\x005\0\0\x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0/\0\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x02\0\0 \x80\0\x01") } };
                    const _A1_BLO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80 \x04\0\0 \x80@\x01\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80@\x01\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_BR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x04") } };
                    const _A1_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0,\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0,\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\x005\0\0\x80@\x02\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x05") } };
                    const _A1_BS_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\x005\0\0\x80@\x02\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x05") } };
                    const _A1_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\08\0\0\x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_CEB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x005\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _A1_DE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0/\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_DSB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0/\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_EL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_EN_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_EN_BW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_EN_BZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0-\x80 \x03\0\0-\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_EN_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_EN_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_EN_IN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_EN_NZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_EN_PK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0-\x80 \x03\0\0-\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_EN_SE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1_EN_SG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_EN_ZA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0/\x80 \x02\0\0/\x80@\x02") } };
                    const _A1_EN_ZW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0 \x80 \x03\0\0,\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_EO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0-\x80 \x04\0\0-\x80@\x02\0\x80\0\x01\0\0 \x80\x10\x01\0\0-\x80 \x03\0\0-\x80@\x02\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_ES_CL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0>\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_ES_CO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0>\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_ES_DO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0>\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_ES_HN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80@\x02\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_ES_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0>\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x02\0\0/\x80@\x02\0\0/\x80\x10\x01\0\0 \x80\0\x01\0\x80 \x02\0\0/\x80@\x02\0\0/\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_ES_PE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_ET: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0/\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0C\0}\0\0\x80\0\x01\0\0.\0\0 \0\0a\0\0r\0\0o\0\0k\0\0o\0\0 \x80\x10\x01\0\0.\0\0 \0\0u\0\0r\0\0t\0\0e\0\0k\0\0o\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x01\0\0.\0\0 \0\0a\0\0r\0\0o\0\0k\0\0o\0\0 \x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1_FA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01\0\0 \x80\0\x05") } };
                    const _A1_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_FI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0/\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_FO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_FR_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_FR_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\x10\x02\0\0-\x80 \x02\0\0-\x80@\x02\0\0 \x80\0\x05") } };
                    const _A1_FY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\x002\0\0\x80@\x01\0\0m\0\0h\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_GU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80@\x01\0\0-\x80 \x02\0\0-\0\0 \x80\0\x05\0\0 \x80\x10\x01") } };
                    const _A1_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \0\x05\xD1\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \0\x05\xD1\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x02\0\0.\0\0 \x80 \x02\0\0.\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x05") } };
                    const _A1_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x04\0\0 \x80@\x01\0\0.\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x03\0\0 \x80@\x01\0\0.\0\x80\0\x05\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80@\x01\0\0.") } };
                    const _A1_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80@\x02\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\0 \x80\0\x01\0\x80@\x02\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_IA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\x005\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_ID: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_IT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_IT_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0)\0\0\x80\0\x01\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x05\x80\x10\x01\0\0/\x80 \x02\0\0/\x80@\x02\0\x80\0\x05\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1_JV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_KEA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0>\0\0\x80@\x01\0\0 \0\0d\0\0i\0\0 \x80 \x04\0\0 \0\0d\0\0i\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0;\0\0\x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\x005\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\x80\0\x05\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80\0\x01\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x01\0\xC6\xD4\0\0 \x80@\x01\0\xC7|\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80@\x01\0\0.") } };
                    const _A1_KOK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80\0\x01\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x04\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80\0\x01\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x03\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80\0\x05\0\0 \x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1_KXV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\x005\0\0\x80@\x01\0\0-\x80 \x04\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \x80\0\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0 \x80\0\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02\0\0 \x80\0\x01") } };
                    const _A1_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0V\0\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0a\0\0d\0\0a\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\0\x01\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0a\0\0d\0\0a\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x05") } };
                    const _A1_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\x005\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_ML: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x004\0\\\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x02\0\0 \0\x04A\0\x040\0\x04@\0\x04K\0\x04=\0\0 \x80@\x02\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0.\x80 \x02\0\0.\x80@\x02") } };
                    const _A1_MS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\08\0\0\x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x01\0\0 \x80@\x02\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _A1_NO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1_PL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1_PS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\08\0\0\0\x06/\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\0 \0\x06/\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_PT_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1_QU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0,\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0,\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_RO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_RU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1_SAH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x05\0\0 \x80\x10\x02\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1_SC: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0G\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \0\0s\0\0u\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_SK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x02\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x02\0\0.\0\0 \x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_SQ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_SR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\x005\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x05") } };
                    const _A1_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \0\x07\x12\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \0\x07\x12\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1_TR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _A1_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0D\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0 \0\0(\x80\0\x01\0\0)\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \0\0(\x80\0\x01\0\0)\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \0\0(\x80\0\x05\0\0)") } };
                    const _A1_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \x80@\x01\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80@\x01\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x02\0\0 \x80\0\x05") } };
                    const _A1_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _A1_UR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \0\0(\x80\0\x01\0\0)\0\x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \0\0(\x80\0\x01\0\0)\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \0\0(\x80\0\x05\0\0)") } };
                    const _A1_UZ_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0/\x80 \x02\0\0/\x80@\x02") } };
                    const _A1_VI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0C\0\\\0\0\0\0n\0\0g\0\0\xE0\0\0y\0\0 \x80@\x01\0\0 \0\0t\0\0h\0\0\xE1\0\0n\0\0g\0\0 \x80 \x01\0\0 \0\0n\0\x01\x03\0\0m\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_WO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _A1_YO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80@\x01\0\0 \x80 \x02\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _A1_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80\0\x01\0\0 \x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x01\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80\0\x01\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\0\x80\0\x01\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1_ZH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80\0\x01\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\0\x80\0\x01\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1_ZH_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80\0\x01\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x01\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _A1_ZU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") } };
                    const _DE_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80P\x04\0\0 \x80@\x01\0\x80P\x01\0\0 \x80@\x01") } };
                    const _DE_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01") } };
                    const _DE_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\x80P\x01\0\0,\0\0 \x80@\x01") } };
                    const _DE_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80@\x01\0\0 \x80P\x04\0\x80@\x01\0\0 \x80P\x01") } };
                    const _DE_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.") } };
                    const _DE_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\x80P\x01\0\0 \x80@\x01\0\0.") } };
                    const _DE_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80P\x04\0\0 \0\0d\0\0.\0\0 \x80@\x01\0\0.\0\x80P\x01\0\0 \0\0d\0\0.\0\0 \x80@\x01\0\0.") } };
                    const _DE_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80@\x01\0\0,\0\0 \x80P\x04") } };
                    const _DE_FA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80P\x04\0\0 \x80@\x01\0\x06E\0\x80P\x01\0\0 \x80@\x01\0\x06E") } };
                    const _DE_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80P\x04\0\0 \0\x05\xD4\0\0-\x80@\x01\0\x80P\x01\0\0 \0\x05\xD4\0\0-\x80@\x01") } };
                    const _DE_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80@\x01\0\0.\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0.\0\0,\0\0 \x80P\x01") } };
                    const _DE_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80@\x01\0\0,\0\0 \x80R\x04\0\x80@\x01\0\0,\0\0 \x80R\x03") } };
                    const _DE_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80@\x01\0e\xE5\0\0(\x80P\x04\0\0)\0\x80@\x01\0e\xE5\0\0(\x80P\x01\0\0)") } };
                    const _DE_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80@\x01\0\xC7|\0\0 \x80P\x04\0\x80@\x01\0\xC7|\0\0 \0\0(\x80P\x01\0\0)") } };
                    const _DE_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80@\x01\0\0.\0\0 \x80P\x04\0\x80@\x02\0\0.\0\0 \x80P\x01") } };
                    const _DE_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80@\x01\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _DE_VI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80P\x04\0\0,\0\0 \0\0n\0\0g\0\0\xE0\0\0y\0\0 \x80@\x01\0\x80P\x01\0\0,\0\0 \0\0n\0\0g\0\0\xE0\0\0y\0\0 \x80@\x01") } };
                    const _DE_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80@\x01\0e\xE5\x80P\x04\0\x80@\x01\0e\xE5\x80P\x01") } };
                    const _D_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80@\x01\0\0.") } };
                    const _D_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80@\x01\0e\xE5") } };
                    const _D_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80@\x01\0\xC7|") } };
                    const _D_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80@\x01") } };
                    const _E_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x04\0\0\x80P\x04\0\x80P\x01") } };
                    const _E_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x04\0\0\x80R\x04\0\x80R\x03") } };
                    const _GYM0DE_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0 \x80 \x04\0\0 \x80@\x01\0\x13c\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x13c\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80\0\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0DE_BLO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0%\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0DE_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0+\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_CEB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0DE_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_DE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_EN_AU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_EN_IN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\x001\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_ES_419: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\x001\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_ES_CO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\x001\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_ET: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0C\0\x86\0\0\x80\0\x04\0\0.\0\0 \0\0a\0\0r\0\0o\0\0k\0\0o\0\0 \x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0.\0\0 \0\0a\0\0r\0\0o\0\0k\0\0o\0\0 \x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x03\0\x80\0\x03\0\0.\0\0 \0\0a\0\0r\0\0o\0\0k\0\0o\0\0 \x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x03") } };
                    const _GYM0DE_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0.A\0\0 \x80@\x01\0\0 \x80 \x04\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0.A\0\0 \x80@\x01\0\0 \x80 \x03\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0%\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0m\0\0h\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0m\0\0h\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_GU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0DE_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\x05\xD1\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\x05\xD1\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0%\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x04\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x03\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \0\x05i\0 $\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \0\x05i\0 $\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0(\x80P\x04\0\0)\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0(\x80P\x01\0\0)") } };
                    const _GYM0DE_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0+\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0%\0\0\x80\0\x04\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x01\0\xC6\xD4\0\0 \x80@\x01\0\xC7|\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x01\0\xC6\xD4\0\0 \x80@\x01\0\xC7|\0\0 \0\0(\x80P\x01\0\0)") } };
                    const _GYM0DE_KOK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0 \x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0 \x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80\0\x04\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x04\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x03\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\0 \x80P\x01") } };
                    const _GYM0DE_KXV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80\0\x04\0\0 \x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01") } };
                    const _GYM0DE_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \x80\0\x04\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0 \x80\0\x03\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0.\0\0\x80P\x04\0\0,\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\0\x03") } };
                    const _GYM0DE_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0DE_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\x001\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x01") } };
                    const _GYM0DE_QU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_SK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \0\x07\x12\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x03\0\x06\x0C\0\0 \x80@\x01\0\0 \0\x07\x12\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_TE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0%\0\0\x80P\x04\0\x0E\x17\0\x0E5\0\x0EH\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0DE_TI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\x13c\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_TR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80\0\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80P\x01") } };
                    const _GYM0DE_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0+\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\x06\x0C\0\0 \x80 \x04\0\0 \x80@\x01\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\x06\x0C\0\0 \x80 \x03\0\0 \x80@\x01\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0DE_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _GYM0DE_UR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x04\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x03\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0DE_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0(\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \0\0(\x80\0\x04\0\0)\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \0\0(\x80\0\x03\0\0)") } };
                    const _GYM0DE_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80\0\x04\0\0 \x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0 \x80P\x01") } };
                    const _GYM0DE_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80\0\x03\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x01") } };
                    const _GYM0DE_ZH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80\0\x03\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x03") } };
                    const _GYM0DE_ZH_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x01") } };
                    const _GYM0D_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \x80@\x01\0\x13c\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80@\x01\0\x13c\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0 \x0F\0\0/\x80 \x01\0 \x0F\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_AS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x01\0\0 \x80\x10\x01") } };
                    const _GYM0D_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0D_BLO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80 \x04\0\0 \x80@\x01\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80@\x01\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_BR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\0\x03\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _GYM0D_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\08\0\0\x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_CEB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_EL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0>\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_ES_419: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0:\0t\0\0\x80\0\x04\0\0.\0\0 \0\0a\0\0r\0\0o\0\0k\0\0o\0\0 \x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x03\0\0.\0\0 \0\0a\0\0r\0\0o\0\0k\0\0o\0\0 \x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0 \0\0(\x80\0\x03\0\0)") } };
                    const _GYM0D_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_FR_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0m\0\0h\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0m\0\0h\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_GU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\0\x03\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \0\x05\xD1\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \0\x05\xD1\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_HI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _GYM0D_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0D_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x04\0\0 \x80@\x01\0\0.\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x03\0\0 \x80@\x01\0\0.\0\x80\0\x03\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _GYM0D_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \0\x05i\0 $\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \0\x05i\0 $\0\0 \x80 \x03\0\0 \x80@\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_IA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_IS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _GYM0D_JV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _GYM0D_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x04\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x01\0\xC6\xD4\0\0 \x80@\x01\0\xC7|\0\x80\0\x03\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x01\0\xC6\xD4\0\0 \x80@\x01\0\xC7|\0\x80\0\x03\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _GYM0D_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80\0\x04\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x04\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80\0\x03\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x03\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_KXV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _GYM0D_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_LB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_LO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0D_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \x80\0\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0 \x80\0\x03\0\x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\0\x04\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\0\x03\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\x80 \x01\0\0.\x80@\x01") } };
                    const _GYM0D_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _GYM0D_NE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_OR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0,\x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0D_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_SK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_SR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0D_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \0\x07\x12\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \0\x07\x12\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_TE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\0\x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_TO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0 \x80 \x01\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_TR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \x80@\x01\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80@\x01\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x03\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_UR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \0\0(\x80\0\x04\0\0)\0\x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \0\0(\x80\0\x03\0\0)\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0D_WO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x04\0\0 \x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\0\0 \x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _GYM0D_ZH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _GYM0D_ZH_HANT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x04\0\0 \x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\0\0 \x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _GYM0D_ZH_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x03\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _GYM0_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80\0\x04\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80 \x03\0\0 \x80\x10\x01") } };
                    const _GYM0_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80!\x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03\0\x80 \x01\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80\0\x04\0\0,\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0,\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x03\0\0,\0\0 \x80 \x04\0\0 \x80\x10\x01") } };
                    const _GYM0_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80!\x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80!\x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80!\x04\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80!\x04\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0_EN_IN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_ES_419: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x004\0h\0\0\x80\0\x04\0\0.\0\0 \0\0a\0\0r\0\0o\0\0k\0\0o\0\0 \x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x04\0\x80\0\x03\0\0.\0\0 \0\0a\0\0r\0\0o\0\0k\0\0o\0\0 \x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x03\0\x80\0\x03\0\0.\0\0 \0\0a\0\0r\0\0o\0\0k\0\0o\0\0 \x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x04") } };
                    const _GYM0_GU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80 \x04\0\0 \x80\0\x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GYM0_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80!\x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x03") } };
                    const _GYM0_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \0\x05i\0 $\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \0\x05i\0 $\0\0 \x80 \x03") } };
                    const _GYM0_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x01\0g\x08\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08") } };
                    const _GYM0_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80 \x03") } };
                    const _GYM0_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80\0\x04\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x01\0\xC6\xD4\0\x80\0\x03\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x01\0\xC6\xD4") } };
                    const _GYM0_KS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80 \x04\0\0 \x80\0\x04\x80\x10\x01\0\x80 \x03\0\0 \x80\0\x03\x80\x10\x01") } };
                    const _GYM0_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80\0\x04\0\0 \x80 \x04\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80\0\x03\0\0 \x80 \x03\0\0a\0\0 \x80\x10\x01\0\0a\0\0n") } };
                    const _GYM0_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80\0\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80\0\x03") } };
                    const _GYM0_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80 \x04\0\0 \x80\0\x04\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80 \x03\0\0 \x80\0\x03") } };
                    const _GYM0_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03") } };
                    const _GYM0_RU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80!\x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x04\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x03\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GYM0_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1C\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80 \x03") } };
                    const _GYM0_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80!\x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x04\0\x80!\x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x03") } };
                    const _GYM0_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03") } };
                    const _GYM0_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \0\0(\x80\0\x04\0\0)\0\x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \0\0(\x80\0\x03\0\0)") } };
                    const _GYM0_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\0\x04\0\0 \x80\x10\x01\0^t\x80 \x01\0g\x08\0\x80\0\x03\0\0 \x80\x10\x01\0^t\x80 \x01\0g\x08") } };
                    const _GYM0_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x04\x80\x10\x01\0^t\x80 \x02\0g\x08\0\x80\0\x03\x80\x10\x01\0^t\x80 \x02\0g\x08\0\x80\0\x03\x80\x10\x01\0^t\x80 \x01\0g\x08") } };
                    const _GY_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80\x10\x01\0\0 \x80\0\x04\0\x80\x10\x01\0\0 \x80\0\x03") } };
                    const _GY_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x04\0\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x03") } };
                    const _GY_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80\x10\x01\0\0.\0\0 \x80\0\x04\0\x80\x10\x01\0\0.\0\0 \x80\0\x03") } };
                    const _GY_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x04\0\x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x03") } };
                    const _GY_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\x004\0\0\x80\0\x04\0\0.\0\0 \0\0a\0\0r\0\0o\0\0k\0\0o\0\0 \x80\x10\x01\0\0.\0\0 \0\0u\0\0r\0\0t\0\0e\0\0a\0\x80\0\x03\0\0.\0\0 \0\0a\0\0r\0\0o\0\0k\0\0o\0\0 \x80\x10\x01\0\0.\0\0 \0\0u\0\0r\0\0t\0\0e\0\0a") } };
                    const _GY_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0.\0\x80\0\x03\0\0 \x80\x10\x01\0\0.") } };
                    const _GY_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \0\x05i\0 $\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \0\x05i\0 $") } };
                    const _GY_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80\0\x04\x80\x10\x01\0^t\0\x80\0\x03\x80\x10\x01\0^t") } };
                    const _GY_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x046\0\0.") } };
                    const _GY_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80\0\x04\0\0 \x80\x10\x01\0\xB1D\0\x80\0\x03\0\0 \x80\x10\x01\0\xB1D") } };
                    const _GY_KS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x07\0\0\x80\0\x04\x80\x10\x01\0\x80\0\x03\x80\x10\x01") } };
                    const _GY_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80\0\x04\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80\0\x03") } };
                    const _GY_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\0\x04\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\x80\0\x03\0\0 \x80\x10\x01\0 /\0\x045\0\x04;") } };
                    const _GY_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80\0\x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80\x10\x01") } };
                    const _GY_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80\x10\x01\0\0 \0\0(\x80\0\x04\0\0)\0\x80\x10\x01\0\0 \0\0(\x80\0\x03\0\0)") } };
                    const _GY_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80\0\x04\0\0 \x80\x10\x01\0^t\0\x80\0\x03\0\0 \x80\x10\x01\0^t") } };
                    const _M0DE_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80 \x01\0\0/\x80@\x01") } };
                    const _M0DE_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\x13c\0\0 \x80 \x04\0\0 \x80@\x01\0\x80P\x01\0\x13c\0\0 \x80 \x03\0\0 \x80@\x01\0\x80P\x01\0\x13c\0\0 \x80 \x01\0\0/\x80@\x01") } };
                    const _M0DE_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0 \x0F\0\0/\x80 \x01") } };
                    const _M0DE_AS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01") } };
                    const _M0DE_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01\0\x80@\x02\0\0.\x80 \x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01") } };
                    const _M0DE_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x02") } };
                    const _M0DE_BLO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01") } };
                    const _M0DE_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x01") } };
                    const _M0DE_BR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0/\x80 \x01\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.") } };
                    const _M0DE_BS_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.") } };
                    const _M0DE_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.") } };
                    const _M0DE_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80R\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80R\x03\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02") } };
                    const _M0DE_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0.\x80 \x01") } };
                    const _M0DE_EN_001: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_EN_AU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0#\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_EN_BW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_EN_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02") } };
                    const _M0DE_EN_IN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0#\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_EN_ZA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80 \x02\0\0/\x80@\x02") } };
                    const _M0DE_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0/\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_ES_419: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_ES_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0-\x80 \x01") } };
                    const _M0DE_ES_CL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02") } };
                    const _M0DE_ES_MX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_ES_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80 \x02\0\0/\x80@\x02") } };
                    const _M0DE_ET: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01") } };
                    const _M0DE_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80 \x04\0\0k\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0k\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80 \x02\0\0/\x80@\x02\0\0,\0\0 \x80P\x04") } };
                    const _M0DE_FA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80!\x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80!\x03\0\x80P\x01\0\0 \x80 \x01\0\0/\x80@\x01") } };
                    const _M0DE_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0-\x80 \x01") } };
                    const _M0DE_FI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80R\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80R\x03\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0.\x80 \x01\0\0.") } };
                    const _M0DE_FO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x02\0\0.\x80 \x02") } };
                    const _M0DE_FR_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80 \x01\0\0-\x80@\x01") } };
                    const _M0DE_FR_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.") } };
                    const _M0DE_GL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\x05\xD1\x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\x05\xD1\x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\0\0 \x80 \x02\0\0.") } };
                    const _M0DE_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80 \x04\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x01\0\x80 \x01\0\0.\0\0 \x80@\x01\0\0.\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_IA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x02\0\0-\x80 \x02") } };
                    const _M0DE_IT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0(\x80P\x04\0\0)\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0(\x80P\x01\0\0)\0\x80 \x01\0\0/\x80@\x01\0\0(\x80P\x01\0\0)") } };
                    const _M0DE_KEA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0/\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0i\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\x002\0\0\x80 \x01\0\xC6\xD4\0\0 \x80@\x01\0\xC7|\0\0 \x80P\x04\0\x80 \x01\0\xC6\xD4\0\0 \x80@\x01\0\xC7|\0\0 \0\0(\x80P\x01\0\0)\0\x80 \x01\0\0.\0\0 \x80@\x01\0\0.\0\0 \0\0(\x80P\x01\0\0)") } };
                    const _M0DE_KOK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0 \x80@\x01\0\0,\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0,\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x01") } };
                    const _M0DE_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0\xEA\0\0 \x80 \x04\0\0\xEA\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0\xEA\0\0 \x80 \x03\0\0\xEA\0\0,\0\0 \x80P\x01\0\x80@\x02\0\0/\x80 \x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80P\x01\0\x80@\x02\0\0/\x80 \x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_LO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0-\x80@\x01\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0-\x80@\x01\0\0,\0\0 \x80P\x01\0\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.") } };
                    const _M0DE_ML: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80 \x01\0\0/\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x04\0\x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x01\0\x80 \x05\0\0/\x80@\x02\0\0.\0\0 \x80P\x01") } };
                    const _M0DE_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01") } };
                    const _M0DE_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0,\0\0\x80 \x04\0\0 \x80@\x01\0\0 \x80P\x04\0\x10\x14\0\x101\0\x107\0\x80 \x03\0\0 \x80@\x01\0\x10J\0\0 \x80P\x01\0\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_NE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80 \x02\0\0/\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_PL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x02") } };
                    const _M0DE_QU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02") } };
                    const _M0DE_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02") } };
                    const _M0DE_SI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80@\x01\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0 \x80P\x01\0\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.") } };
                    const _M0DE_SW_CD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0#\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \0\x07\x12\x80 \x04\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \0\x07\x12\x80 \x03\0\x80P\x04\0\x06\x0C\0\0 \x80@\x02\0\0/\x80 \x02") } };
                    const _M0DE_TG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02") } };
                    const _M0DE_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0)\0\0\x80P\x04\0\x0E\x17\0\x0E5\0\x0EH\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_TI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\x13c\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_TK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80P\x01\0\x80@\x02\0\0.\x80 \x02\0\0 \x80P\x01") } };
                    const _M0DE_TR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80P\x01\0\x80@\x02\0\0/\x80 \x02\0\0 \x80P\x01") } };
                    const _M0DE_UG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\x06\x0C\0\0 \x80 \x04\0\0 \x80@\x01\0\x80P\x01\0\x06\x0C\0\0 \x80 \x03\0\0 \x80@\x01\0\x80P\x01\0\x06\x0C\0\0 \x80 \x01\0\0/\x80@\x01") } };
                    const _M0DE_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80 \x02\0\0-\x80@\x02\0\0,\0\0 \x80P\x01") } };
                    const _M0DE_UR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x04\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0 \x80 \x03\0\x80P\x01\0\x06\x0C\0\0 \x80@\x01\0\0/\x80 \x01") } };
                    const _M0DE_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0-\x80 \x04\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x03\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02") } };
                    const _M0DE_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0 \x80P\x04\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\0 \x80P\x01\0\x80 \x01\0\0/\x80@\x01\0\xFF\x08\x80P\x01\0\xFF\t") } };
                    const _M0DE_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80 \x01\0\0/\x80@\x01\x80P\x01") } };
                    const _M0DE_ZH_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80@\x01\0\0/\x80 \x01\0\xFF\x08\x80P\x01\0\xFF\t") } };
                    const _M0DE_ZH_SG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x04\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\x80P\x01\0\x80 \x01\0\0-\x80@\x01\x80P\x01") } };
                    const _M0D_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80 \x03\0\0 \x80@\x01\0\x80 \x01\0\0/\x80@\x01") } };
                    const _M0D_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0 \x0F\0\0/\x80 \x01") } };
                    const _M0D_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02") } };
                    const _M0D_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0.\x80 \x01") } };
                    const _M0D_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0.\x80 \x02") } };
                    const _M0D_BR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0-\x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x01\0\0.\x80 \x01\0\0.") } };
                    const _M0D_BS_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x17\0\0\x80 \x04\0\0 \x80@\x01\0\x80@\x02\0\0.\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02\0\0.") } };
                    const _M0D_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.") } };
                    const _M0D_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02") } };
                    const _M0D_CY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x01\0\0.\x80 \x01") } };
                    const _M0D_EN_BW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x02\0\0 \x80 \x03\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_EN_ZA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x02\0\0 \x80 \x03\0\x80 \x02\0\0/\x80@\x02") } };
                    const _M0D_EN_ZW: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x02\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_ES_419: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_ES_CL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80@\x02\0\0-\x80 \x02") } };
                    const _M0D_ES_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80 \x02\0\0/\x80@\x02") } };
                    const _M0D_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80 \x04\0\0k\0\0 \x80@\x01\0\x80 \x03\0\0k\0\0 \x80@\x01\0\x80 \x02\0\0/\x80@\x02") } };
                    const _M0D_FA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80!\x04\0\x80@\x01\0\0 \x80!\x03\0\x80 \x01\0\0/\x80@\x01") } };
                    const _M0D_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0-\x80 \x01") } };
                    const _M0D_FO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02") } };
                    const _M0D_FR_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80 \x01\0\0-\x80@\x01") } };
                    const _M0D_FR_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02\0\0.") } };
                    const _M0D_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0\x1A\0\0\x80@\x01\0\0m\0\0h\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_GL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x17\0\0\x80 \x04\0\0 \x80@\x01\0\x80@\x01\0\0 \0\x05\xD1\x80 \x03\0\x80@\x01\0\0.\x80 \x01") } };
                    const _M0D_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x02\0\0.\0\0 \x80 \x02\0\0.") } };
                    const _M0D_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80 \x04\0\0 \x80@\x01\0\0.\0\x80 \x03\0\0 \x80@\x01\0\0.\0\x80 \x01\0\0.\0\0 \x80@\x01\0\0.") } };
                    const _M0D_IA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0-\x80 \x02") } };
                    const _M0D_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80 \x01\0\0/\x80@\x01") } };
                    const _M0D_KEA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80@\x01\0\0 \0\0d\0\0i\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x04\0\x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80 \x01\0\xC6\xD4\0\0 \x80@\x01\0\xC7|\0\x80 \x01\0\0.\0\0 \x80@\x01\0\0.") } };
                    const _M0D_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0\xEA\0\0 \x80 \x04\0\0\xEA\0\x80@\x01\0\0\xEA\0\0 \x80 \x03\0\0\xEA\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0-\x80 \x03\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80 \x03\0\0-\x80@\x01\0\x80 \x02\0\0-\x80@\x02") } };
                    const _M0D_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x02\0\0.\x80 \x02\0\0.") } };
                    const _M0D_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\x80 \x05\0\0/\x80@\x02") } };
                    const _M0D_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0 \0\0\x80@\x01\0\0 \0\0t\0\0a\0 \x19\0\0 \x80 \x04\0\x80 \x03\0\0 \x80@\x01\0\x80 \x02\0\0-\x80@\x02") } };
                    const _M0D_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80 \x03\0\0 \x80@\x01\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_PL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0.\x80 \x02") } };
                    const _M0D_PS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80 \x03\0\0 \x80@\x01\0\x80 \x01\0\0/\x80@\x01") } };
                    const _M0D_QU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0-\x80 \x02") } };
                    const _M0D_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\n\0\0\x80@\x01\0\0 \x80 \x04\0\x80@\x02\0\0-\x80 \x02") } };
                    const _M0D_SI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80 \x03\0\0 \x80@\x01\0\x80 \x01\0\0-\x80@\x01") } };
                    const _M0D_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\x80@\x01\0\0.\0\0 \x80 \x03\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.") } };
                    const _M0D_SYR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\0\x80@\x01\0\0 \0\x07\x12\x80 \x04\0\x80@\x01\0\0 \0\x07\x12\x80 \x03\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_TR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x02\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x02\0\0/\x80 \x02") } };
                    const _M0D_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80@\x01\0\x80 \x03\0\0 \x80@\x01\0\x80 \x02\0\0-\x80@\x02") } };
                    const _M0D_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x01\0\0-\x80 \x04\0\x80@\x01\0\0-\x80 \x03\0\x80@\x02\0\0.\x80 \x02") } };
                    const _M0D_VI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80@\x02\0\0 \x80 \x04\0\x80@\x01\0\0 \x80 \x03\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_ZH_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80@\x01\0\0/\x80 \x01") } };
                    const _M0D_ZH_SG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\0\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80 \x01\0\0-\x80@\x01") } };
                    const _M0_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80 \x02\0\x80 \x01") } };
                    const _M0_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80 \x04\0\x80 \x03\0\x80 \x01") } };
                    const _M0_EN_001: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80!\x02") } };
                    const _M0_ET: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x04\0\0\x80 \x04\0\x80 \x01") } };
                    const _M0_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80!\x01\0\0.") } };
                    const _M0_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80 \x01\0g\x08") } };
                    const _M0_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80 \x01\0\xC6\xD4") } };
                    const _M0_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80!\x05") } };
                    const _M0_SK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80 \x01\0\0.") } };
                    const _M0_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80!\x01") } };
                    const _M0_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x04\0\x08\0\0\x80!\x04\0\x80!\x03\0\x80 \x01\0g\x08") } };
                    const _M0_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x04\0\0\x80!\x02\0\x80!\x01") } };
                    const _Y0W_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x11\x01\0\0 \x800\x01") } };
                    const _YM0DE_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0DE_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\x13c\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \x80\x10\x01\0\x80P\x01\0\x13c\0\0 \x80 \x03\0\0 \x80@\x01\0\0 \x80\x10\x01\0\x80P\x01\0\x13c\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_AS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0DE_AST: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _YM0DE_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x01") } };
                    const _YM0DE_EN_ZA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _YM0DE_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0+\0\0\x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x04\0\0k\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0/\x80 \x02\0\0/\x80@\x02\0\0,\0\0 \x80P\x04") } };
                    const _YM0DE_FF_ADLM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0.A\0\0 \x80@\x01\0\0 \x80 \x04\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0.A\0\0 \x80@\x01\0\0 \x80 \x03\0.A\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0.A\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0DE_FO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0DE_FR_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0DE_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_GL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0V\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_HA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80P\x04\0\0,\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_HI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x01\0\0 \x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0DE_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0DE_KEA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0DE_KM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0DE_KXV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x01\0\0 \x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80@\x01\0\0-\x80 \x01\0\0,\0\0 \x80P\x01") } };
                    const _YM0DE_LO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80\0\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0.\0\\\0\0\x80P\x04\0\0,\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x01") } };
                    const _YM0DE_ML: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _YM0DE_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\x001\0b\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\0.\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0.\x80 \x01\0\0.\x80@\x01\0\0.\0\0 \x80P\x01") } };
                    const _YM0DE_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x05\0\0 \x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _YM0DE_PT_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\08\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0DE_QU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0DE_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0DE_SK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0DE_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0DE_TE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0DE_TK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80P\x04\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80P\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01\0\0 \x80P\x01") } };
                    const _YM0DE_TO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80P\x04\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80P\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0DE_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0+\0V\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80P\x04\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0,\0\0 \x80P\x01") } };
                    const _YM0DE_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80P\x04\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x01\0\x80P\x01\0\0,\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0 \x0F\0\0/\x80 \x01\0 \x0F\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_AS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0D_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0D_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01") } };
                    const _YM0D_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_BRX: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0,\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0,\0\0 \x80\0\x01\0\x80\0\x05\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x01") } };
                    const _YM0D_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\08\0\0\x80@\x01\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x005\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0D_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_CY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _YM0D_DE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0D_EN_AU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0D_EN_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_EN_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0D_EN_SE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0 \x80\0\x01") } };
                    const _YM0D_EN_ZA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _YM0D_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0>\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0D_ES_CL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_ES_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x02\0\0/\x80@\x02\0\0/\x80\x10\x01") } };
                    const _YM0D_ES_PR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x04\0\0k\0\0 \x80@\x01\0\x80\x10\x01\0\0/\x80 \x02\0\0/\x80@\x02") } };
                    const _YM0D_FO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0D_GL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\"\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0D_GU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\0\x01\0\0 \x80\x10\x01") } };
                    const _YM0D_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \0\x05\xD1\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \0\x05\xD1\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x05") } };
                    const _YM0D_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x04\0\0 \x80@\x01\0\0.\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x03\0\0 \x80@\x01\0\0.\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80@\x01\0\0.") } };
                    const _YM0D_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\0,\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\0,\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \0\x05i\0\0.\0\0,\0\0 \x80\0\x01") } };
                    const _YM0D_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80\0\x01\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5\0\x80\0\x05\x80\x10\x01\0\0/\x80 \x01\0\0/\x80@\x01") } };
                    const _YM0D_JV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \0\0-\0\0 \x80 \x01\0\0 \0\0-\0\0 \x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0D_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_KEA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0/\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0D_KGP: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \0\0n\0\0e\0\0 \x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0D_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80@\x01\0\0 \x80 \x03\0\x80\0\x05\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0D_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x1F\0\0\x80\0\x01\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x01\0\xC6\xD4\0\0 \x80@\x01\0\xC7|\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80@\x01\0\0.") } };
                    const _YM0D_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80\0\x01\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x04\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80\0\x01\0\0 \x80@\x01\0\0\xEA\0\0 \x80 \x03\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80\0\x05\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0D_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80@\x01\0\0-\x80 \x03\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80@\x01\0\0-\x80 \x01") } };
                    const _YM0D_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0 \x80\0\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0 \x80\0\x01\0\x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0 \x80\0\x01") } };
                    const _YM0D_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0%\0J\0\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\0\x01\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x01") } };
                    const _YM0D_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_ML: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x01\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0D_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0P\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x04K\0\x04=\0\0 \x80@\x01\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03\0\x04K\0\x04=\0\0 \x80@\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0.\x80 \x01\0\0.\x80@\x01") } };
                    const _YM0D_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x05\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _YM0D_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80@\x01\0\0/\x80 \x01\0\0/\x80\x11\x01") } };
                    const _YM0D_PT_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0(\0>\0\0\x80@\x01\0\0 \0\0d\0\0e\0\0 \x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0D_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x02\0\0-\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x05\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _YM0D_SI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _YM0D_SL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x01\0\0.\0\0 \x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_SR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80@\x01\0\0.\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x05") } };
                    const _YM0D_TE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0,\0\0 \x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0,\0\0 \x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0D_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0D_TK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x02\0\0.\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0D_TO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80@\x01\0\0-\x80 \x01\0\0-\x80\x10\x01") } };
                    const _YM0D_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\0D\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80@\x01\0\0 \x80 \x03\0\x80\0\x05\0\0 \x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0D_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x01\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x16\0,\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01") } };
                    const _YM0D_UR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80@\x01\0\0 \x80 \x04\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0 \x80 \x03\0\x06\x0C\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0D_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1F\0>\0\0\x80@\x01\0\0-\x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \0\0(\x80\0\x01\0\0)\0\x80@\x01\0\0-\x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \0\0(\x80\0\x01\0\0)\0\x80@\x01\0\0.\x80 \x01\0\0.\x80\x10\x01\0\0 \0\0(\x80\0\x05\0\0)") } };
                    const _YM0D_WO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80@\x01\0\0/\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x01\0\x80@\x01\0\0/\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0D_ZH_SG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80\0\x01\x80\x10\x01\0^t\x80 \x02\0g\x08\x80@\x01\0e\xE5\0\x80\0\x01\x80\x10\x01\0^t\x80 \x01\0g\x08\x80@\x01\0e\xE5") } };
                    const _YM0D_ZU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80@\x01\0\0/\x80\x10\x01") } };
                    const _YM0_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0 \x0F\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_AS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_AZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80 \x01\0\0 \x80\x10\x01") } };
                    const _YM0_BE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80!\x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80!\x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80 \x02\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01") } };
                    const _YM0_BN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80!\x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_BS_CYRL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0#\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x01") } };
                    const _YM0_CA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\0,\0\0\x80!\x04\0\0 \0\0d\0\0e\0\0l\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80!\x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_CS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80!\x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80!\x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80!\x04\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x01\0\x80!\x03\0\0 \x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_CY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01") } };
                    const _YM0_DA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_DSB: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80!\x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_EN_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_EN_IN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_EN_SE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\x10\x01\0\0-\x80 \x01\0\0 \x80\0\x01") } };
                    const _YM0_ES: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0)\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_ES_419: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_ES_AR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_ES_PA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x02\0\0/\x80\x10\x01") } };
                    const _YM0_ES_PR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_EU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x19\0\0\x80\x10\x01\0\0(\0\0e\0\0)\0\0k\0\0o\0\0 \x80 \x04\0\x80\x10\x01\0\0/\x80 \x02") } };
                    const _YM0_FA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80\x10\x01\0\0/\x80 \x01\0\0 \x80\0\x05") } };
                    const _YM0_FI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80!\x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80!\x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80!\x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_FO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x02\0\0.\x80\x10\x01") } };
                    const _YM0_FR_CH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x02\0\0.\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_GD: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80!\x04\0\0 \x80\x10\x01\0\x80!\x03\0\0 \x80\x10\x01\0\x80!\x01\0\0/\x80\x10\x01") } };
                    const _YM0_GL: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80 \x03\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\x80 \x01\0\0-\x80\x10\x01") } };
                    const _YM0_GU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80\0\x01\0\0 \x80\x10\x01") } };
                    const _YM0_HE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_HI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_HR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80!\x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80!\x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80 \x01\0\0.\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x05") } };
                    const _YM0_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x03\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.") } };
                    const _YM0_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0)\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\0 \x80!\x03\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \0\x05i\0\0.\0\0 \x80 \x01") } };
                    const _YM0_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80\0\x01\x80\x10\x01\0^t\x80 \x01\0g\x08\0\x80\0\x05\x80\x10\x01\0\0/\x80 \x01") } };
                    const _YM0_JV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0 \0\0-\0\0 \x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_KA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0#\0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0,\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_KEA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0\x1D\0\0\x80!\x04\0\0 \0\0d\0\0i\0\0 \x80\x10\x01\0\x80!\x03\0\0 \x80\x10\x01\0\x80!\x02\0\0/\x80\x10\x01") } };
                    const _YM0_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x046\0\0.\0\0 \x80 \x03\0\x80\0\x05\0\0 \x80 \x01\0\0.\x80\x10\x01") } };
                    const _YM0_KN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x16\0\0\x80\0\x01\0\0 \x80\x10\x01\0\xB1D\0\0 \x80 \x01\0\xC6\xD4\0\x80\0\x01\0\0 \x80\x10\x01\0\0.\0\0 \x80 \x01\0\0.") } };
                    const _YM0_KOK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x04") } };
                    const _YM0_KU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\0\x01\0\0 \x80 \x04\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80\0\x01\0\0 \x80 \x03\0\0a\0\0 \x80\x10\x01\0\0a\0\0n\0\x80\0\x05\0\0 \x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_KXV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\x005\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0,\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0-\0\x046\0\0.\0\0 \x80 \x03\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01") } };
                    const _YM0_LO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_LT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80\0\x01\0\x80\x10\x01\0\0 \x80 \x01\0\0 \x80\0\x01") } };
                    const _YM0_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80 \x04\0\0 \x80\0\x01\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80 \x03\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x01") } };
                    const _YM0_MK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80 \x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_MN: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x04>\0\x04=\0\x04K\0\0 \x80 \x03\0\x80\0\x05\0\0 \x80\x10\x01\0\0 \x80 \x05") } };
                    const _YM0_MT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01") } };
                    const _YM0_MY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\x80\0\x01\0\0 \x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_OR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0-\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_PS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\0\x06/\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\0 \0\x06/\0\0 \x80 \x04\0\0\x06/\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\0 \0\x06/\0\0 \x80 \x03\0\x80\0\x01\0\0 \x80\x10\x01\0\0/\x80 \x01") } };
                    const _YM0_PT_PT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\0)\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x02\0\0/\x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_RM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80!\x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80!\x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x02\0\0-\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_RU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80!\x04\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80!\x03\0\0 \x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_SC: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\"\x002\0\0\x80 \x04\0\0 \0\0d\0\0e\0\0 \0\0s\0\0u\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_SI: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\x80\0\x01\0\0 \x80\x10\x01\0\0-\x80 \x01") } };
                    const _YM0_SR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x13\0&\0\0\x80 \x04\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0.\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0\0.\0\0 \x80\0\x05") } };
                    const _YM0_TE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x1A\0\0\x80 \x04\0\0 \x80\x11\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_TH: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\0\x01\0\0 \x80\x10\x01\0\x80 \x01\0\0/\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_TO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80 \x01\0\0-\x80\x10\x01") } };
                    const _YM0_TR: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x01\0\0 \x80 \x04\0\0 \x80\x10\x01\0\x80\0\x01\0\0 \x80 \x03\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80 \x01\0\0/\x80\x10\x01") } };
                    const _YM0_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x1C\08\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80 \x03\0\x80\0\x05\0\0 \x80\x10\x01\0 /\0\x045\0\x04;\0\0,\0\0 \x80 \x01") } };
                    const _YM0_UK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80!\x04\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x01\0\x80!\x03\0\0 \x80\x10\x01\0 /\0\x04@\0\0.\0\0 \x80\0\x01\0\x80 \x01\0\0.\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _YM0_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01") } };
                    const _YM0_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x19\x002\0\0\x80\x10\x01\0\0 \0\0(\x80\0\x01\0\0)\0\0,\0\0 \x80 \x04\0\x80\x10\x01\0\0 \0\0(\x80\0\x01\0\0)\0\0,\0\0 \x80 \x03\0\x80 \x01\0\0.\x80\x10\x01\0\0 \0\0(\x80\0\x05\0\0)") } };
                    const _YM0_WO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80 \x04\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x03\0\0 \x80\x10\x01\0\0 \x80\0\x01\0\x80 \x01\0\0 \x80\x10\x01\0\0 \x80\0\x05") } };
                    const _YM0_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x13\0\0\x80\0\x01\0\0 \x80\x10\x01\0^t\x80 \x01\0g\x08\0\x80\0\x01\0\0 \x80\x10\x01\0\0/\x80 \x01") } };
                    const _YM0_YUE_HANS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x10\0 \0\0\x80\0\x01\x80\x10\x01\0^t\x80 \x01\0g\x08\0\x80\0\x01\x80\x10\x01\0^t\x80 \x02\0g\x08\0\x80\0\x01\x80\x10\x01\0^t\x80 \x01\0g\x08") } };
                    const _YM0_ZH_HK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x10\0\0\x80\0\x01\x80\x10\x01\0^t\x80 \x01\0g\x08\0\x80\0\x01\x80\x10\x01\0\0/\x80 \x01") } };
                    const _YM0_ZU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: true, has_medium: true, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\n\0\x14\0\0\x80 \x04\0\0 \x80\x10\x01\0\x80 \x03\0\0 \x80\x10\x01\0\x80\x10\x01\x80 \x01") } };
                    const _Y_AF: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0\0 \x80\0\x01") } };
                    const _Y_AM: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01") } };
                    const _Y_BG: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0 /\0\x043\0\0.\0\0 \x80\0\x01") } };
                    const _Y_BS: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0\0.\0\0 \x80\0\x01") } };
                    const _Y_CV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0 /\0\x04\xAB\0\0.\0\0 \x80\0\x01") } };
                    const _Y_HU: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\0\x01\0\0 \x80\x10\x01\0\0.") } };
                    const _Y_HY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0\0,\0\0 \x80\0\x01") } };
                    const _Y_JA: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\0\x01\x80\x10\x01\0^t") } };
                    const _Y_KK: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x046\0\0.") } };
                    const _Y_KO: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\0\x01\0\0 \x80\x10\x01\0\xB1D") } };
                    const _Y_KY: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0\0-\x80\0\x01") } };
                    const _Y_LV: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0\0.\0\0 \0\0g\0\0.\0\0 \x80\0\x01") } };
                    const _Y_TT: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\0\x01\0\0 \x80\x10\x01\0 /\0\x045\0\x04;") } };
                    const _Y_UND: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\0\x01\0\0 \x80\x10\x01") } };
                    const _Y_UZ: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\x10\x01\0\0 \0\0(\x80\0\x01\0\0)") } };
                    const _Y_YUE: &S = &icu::datetime::provider::neo::PackedSkeletonDataV1 { index_info: icu::datetime::provider::neo::SkeletonDataIndex { has_long: false, has_medium: false, has_plurals: false }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\0\x80\0\x01\0\0 \x80\x10\x01\0^t") } };
                    &[_A1_AF, _A1_AM, _A1_AR, _A1_AST, _A1_AZ, _A1_BE, _A1_BG, _A1_BLO, _A1_BN, _A1_BR, _A1_BRX, _A1_BS, _A1_BS_CYRL, _A1_CA, _A1_CEB, _A1_CEB, _A1_CS, _A1_CV, _A1_AM, _A1_DA, _A1_DE, _A1_CEB, _A1_DSB, _A1_EL, _A1_CEB, _A1_AM, _A1_AM, _A1_EN_BE, _A1_EN_BW, _A1_EN_BZ, _A1_EN_CH, _A1_EN_HK, _A1_EN_IN, _A1_EN_BW, _A1_EN_NZ, _A1_EN_PK, _A1_EN_SE, _A1_EN_SG, _A1_EN_ZA, _A1_EN_ZW, _A1_EO, _A1_ES, _A1_ES_CL, _A1_ES_CO, _A1_ES_DO, _A1_ES_CO, _A1_ES_HN, _A1_ES_PA, _A1_ES_PE, _A1_ES_PA, _A1_ET, _A1_EU, _A1_FA, _A1_FF_ADLM, _A1_FI, _A1_CEB, _A1_FO, _A1_AM, _A1_FR_BE, _A1_FR_CA, _A1_EN_CH, _A1_FY, _A1_AM, _A1_GD, _A1_ES, _A1_GU, _A1_EN_HK, _A1_HE, _A1_EL, _A1_BN, _A1_HR, _A1_DSB, _A1_HU, _A1_HY, _A1_IA, _A1_ID, _A1_AM, _A1_FI, _A1_IT, _A1_IT_CH, _A1_JA, _A1_JV, _A1_KA, _A1_KEA, _A1_KGP, _A1_KK, _A1_EL, _A1_KO, _A1_KOK, _A1_CEB, _A1_KU, _A1_KXV, _A1_KY, _A1_DE, _A1_EL, _A1_LT, _A1_LV, _A1_KXV, _A1_JV, _A1_MK, _A1_ML, _A1_MN, _A1_CEB, _A1_BN, _A1_MS, _A1_ID, _A1_MT, _A1_MY, _A1_FY, _A1_NO, _A1_CEB, _A1_AM, _A1_AM, _A1_PL, _A1_PS, _A1_PT, _A1_PT_PT, _A1_QU, _A1_RM, _A1_RO, _A1_RU, _A1_KXV, _A1_SAH, _A1_SC, _A1_CEB, _A1_SK, _A1_SL, _A1_CEB, _A1_SQ, _A1_SR, _A1_SR, _A1_EL, _A1_EN_SE, _A1_AM, _A1_SYR, _A1_BN, _A1_JV, _A1_IT, _A1_TH, _A1_ID, _A1_EN_CH, _A1_EN_SG, _A1_TR, _A1_TT, _A1_UG, _A1_UK, _A1_UND, _A1_UR, _A1_UZ, _A1_UZ_CYRL, _A1_AM, _A1_VI, _A1_WO, _A1_CEB, _A1_KXV, _A1_YO, _A1_AM, _A1_YUE, _A1_YUE_HANS, _A1_ZH, _A1_ZH_HK, _A1_YUE, _A1_ZH_HK, _A1_ZU, _A1E_AF, _A1E_AM, _A1E_AR, _A1E_AS, _A1E_AST, _A1E_AZ, _A1E_BE, _A1E_BG, _A1E_BLO, _A1E_BN, _A1E_BR, _A1E_BRX, _A1E_BS, _A1E_BS, _A1E_CA, _A1E_CEB, _A1E_CEB, _A1E_CS, _A1E_CV, _A1E_CY, _A1E_DA, _A1E_DE, _A1E_DOI, _A1E_DE, _A1E_EL, _A1E_CEB, _A1E_EL, _A1E_EL, _A1E_EN_AU, _A1E_EN_BE, _A1E_EN_BW, _A1E_EN_BW, _A1E_EN_CH, _A1E_EN_GB, _A1E_EN_HK, _A1E_EN_IE, _A1E_EN_IN, _A1E_EN_SE, _A1E_EN_ZA, _A1E_EN_ZW, _A1E_EO, _A1E_ES, _A1E_ES_419, _A1E_ES_HN, _A1E_ES_MX, _A1E_ES_PA, _A1E_ET, _A1E_EU, _A1E_FA, _A1E_FF_ADLM, _A1E_FI, _A1E_CEB, _A1E_FO, _A1E_BR, _A1E_FR_CA, _A1E_FR_CH, _A1E_FY, _A1E_BR, _A1E_GD, _A1E_GL, _A1E_GU, _A1E_HA, _A1E_HE, _A1E_HI, _A1E_HR, _A1E_DE, _A1E_HU, _A1E_HY, _A1E_IA, _A1E_EN_BW, _A1E_IG, _A1E_IS, _A1E_BR, _A1E_IT_CH, _A1E_JA, _A1E_JV, _A1E_KA, _A1E_KEA, _A1E_KGP, _A1E_KK, _A1E_KM, _A1E_KO, _A1E_EN_GB, _A1E_CEB, _A1E_KU, _A1E_KXV, _A1E_KY, _A1E_DE, _A1E_LO, _A1E_LT, _A1E_LV, _A1E_MAI, _A1E_MI, _A1E_MK, _A1E_ML, _A1E_MN, _A1E_MNI, _A1E_EN_HK, _A1E_EN_BE, _A1E_MS_BN, _A1E_EN_BW, _A1E_MT, _A1E_MY, _A1E_FY, _A1E_BR, _A1E_DA, _A1E_CEB, _A1E_PA, _A1E_MI, _A1E_BE, _A1E_PS, _A1E_PT, _A1E_PT_PT, _A1E_QU, _A1E_RM, _A1E_BE, _A1E_MK, _A1E_MAI, _A1E_SAH, _A1E_SC, _A1E_DOI, _A1E_SI, _A1E_SK, _A1E_SL, _A1E_SO, _A1E_SQ, _A1E_SR, _A1E_SR, _A1E_MI, _A1E_FR_CA, _A1E_EN_BE, _A1E_SYR, _A1E_BN, _A1E_TE, _A1E_TG, _A1E_TH, _A1E_TI, _A1E_TI_ER, _A1E_TK, _A1E_TO, _A1E_TR, _A1E_TT, _A1E_UG, _A1E_UK, _A1E_UND, _A1E_UR, _A1E_UZ, _A1E_UZ_CYRL, _A1E_BR, _A1E_VI, _A1E_WO, _A1E_CEB, _A1E_KXV, _A1E_YO, _A1E_EL, _A1E_YUE, _A1E_YUE_HANS, _A1E_YUE_HANS, _A1E_ZH_HK, _A1E_YUE, _A1E_ZH_HK, _A1E_ZH_SG, _A1E_ZU, _D_CS, _D_CS, _D_CS, _D_CS, _D_JA, _D_KO, _D_CS, _D_CS, _D_UND, _D_JA, _D_JA, _D_JA, _D_JA, _DE_AF, _DE_AF, _DE_AR, _DE_AF, _DE_BE, _DE_BE, _DE_AF, _DE_BN, _DE_AF, _DE_BS, _DE_BS, _DE_AF, _DE_BN, _DE_BN, _DE_CS, _DE_BE, _DE_BE, _DE_DA, _DE_BS, _DE_BS, _DE_AF, _DE_BN, _DE_AF, _DE_AF, _DE_AF, _DE_AF, _DE_BE, _DE_EU, _DE_FA, _DE_AF, _DE_CS, _DE_BN, _DE_CS, _DE_AF, _DE_AF, _DE_AF, _DE_BE, _DE_AF, _DE_AF, _DE_HE, _DE_BN, _DE_BS, _DE_BS, _DE_HU, _DE_HY, _DE_AF, _DE_BE, _DE_CS, _DE_AF, _DE_JA, _DE_BE, _DE_BN, _DE_BE, _DE_BE, _DE_BN, _DE_BN, _DE_KO, _DE_BE, _DE_BS, _DE_AF, _DE_BS, _DE_BE, _DE_MN, _DE_AF, _DE_BE, _DE_BN, _DE_AF, _DE_CS, _DE_BN, _DE_BE, _DE_BE, _DE_BE, _DE_BE, _DE_CS, _DE_AF, _DE_BE, _DE_AF, _DE_BN, _DE_CS, _DE_BS, _DE_BE, _DE_CS, _DE_CS, _DE_AF, _DE_AF, _DE_AR, _DE_BN, _DE_AF, _DE_AF, _DE_AF, _DE_BN, _DE_AF, _DE_BN, _DE_BN, _DE_BE, _DE_UND, _DE_BN, _DE_BE, _DE_AF, _DE_VI, _DE_BE, _DE_BN, _DE_BN, _DE_BE, _DE_BN, _DE_YUE_HANS, _DE_YUE_HANS, _DE_YUE_HANS, _DE_BN, _DE_YUE_HANS, _DE_BN, _E_MK, _E_UND, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_BG, _GY_AF, _GY_AF, _GY_AF, _GY_BS, _GY_BS, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_CV, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_EU, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_BS, _GY_AF, _GY_HU, _GY_HY, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_JA, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_KK, _GY_AF, _GY_KO, _GY_AF, _GY_KS, _GY_AF, _GY_AF, _GY_LV, _GY_BG, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_BG, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_BS, _GY_BS, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_TT, _GY_AF, _GY_AF, _GY_UND, _GY_AF, _GY_UZ, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_AF, _GY_YUE, _GY_JA, _GY_JA, _GY_JA, _GY_YUE, _GY_JA, _GY_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AZ, _GYM0_BE, _GYM0_BG, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_BRX, _GYM0_BS, _GYM0_BS, _GYM0_CA, _GYM0_AF, _GYM0_AF, _GYM0_CS, _GYM0_CV, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_EN_IN, _GYM0_ES, _GYM0_ES_419, _GYM0_AF, _GYM0_EU, _GYM0_AF, _GYM0_AF, _GYM0_BE, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_BE, _GYM0_ES_419, _GYM0_GU, _GYM0_AF, _GYM0_AF, _GYM0_HR, _GYM0_AF, _GYM0_HU, _GYM0_HY, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_JA, _GYM0_AF, _GYM0_EN_IN, _GYM0_BE, _GYM0_EN_IN, _GYM0_KK, _GYM0_AF, _GYM0_KO, _GYM0_AF, _GYM0_KS, _GYM0_KU, _GYM0_AF, _GYM0_AF, _GYM0_LT, _GYM0_LV, _GYM0_MK, _GYM0_MN, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_BE, _GYM0_ES_419, _GYM0_AF, _GYM0_BE, _GYM0_AF, _GYM0_RU, _GYM0_AF, _GYM0_BE, _GYM0_SL, _GYM0_AF, _GYM0_AF, _GYM0_BS, _GYM0_BS, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_AF, _GYM0_GU, _GYM0_AF, _GYM0_AF, _GYM0_AZ, _GYM0_TT, _GYM0_AF, _GYM0_UK, _GYM0_UND, _GYM0_AF, _GYM0_UZ, _GYM0_AF, _GYM0_AF, _GYM0_EN_IN, _GYM0_AF, _GYM0_AF, _GYM0_YUE, _GYM0_YUE_HANS, _GYM0_YUE_HANS, _GYM0_JA, _GYM0_YUE, _GYM0_JA, _GYM0_AF, _GYM0D_AF, _GYM0D_AM, _GYM0D_AR, _GYM0D_AS, _GYM0D_AST, _GYM0D_AZ, _GYM0D_BE, _GYM0D_BG, _GYM0D_BLO, _GYM0D_BN, _GYM0D_BR, _GYM0D_BRX, _GYM0D_BS, _GYM0D_BS, _GYM0D_CA, _GYM0D_CEB, _GYM0D_CEB, _GYM0D_CS, _GYM0D_CV, _GYM0D_AF, _GYM0D_DA, _GYM0D_DA, _GYM0D_DA, _GYM0D_EL, _GYM0D_CEB, _GYM0D_EL, _GYM0D_AF, _GYM0D_BE, _GYM0D_BN, _GYM0D_ES, _GYM0D_ES_419, _GYM0D_DA, _GYM0D_EU, _GYM0D_AF, _GYM0D_FF_ADLM, _GYM0D_DA, _GYM0D_CEB, _GYM0D_DA, _GYM0D_EL, _GYM0D_FR_CA, _GYM0D_BR, _GYM0D_BR, _GYM0D_GD, _GYM0D_ES_419, _GYM0D_GU, _GYM0D_HE, _GYM0D_HI, _GYM0D_HR, _GYM0D_DA, _GYM0D_HU, _GYM0D_HY, _GYM0D_IA, _GYM0D_EL, _GYM0D_IS, _GYM0D_EL, _GYM0D_JA, _GYM0D_JV, _GYM0D_KA, _GYM0D_EL, _GYM0D_KGP, _GYM0D_KK, _GYM0D_BR, _GYM0D_KO, _GYM0D_BR, _GYM0D_CEB, _GYM0D_KU, _GYM0D_KXV, _GYM0D_KY, _GYM0D_LB, _GYM0D_LO, _GYM0D_LT, _GYM0D_LV, _GYM0D_MK, _GYM0D_MN, _GYM0D_BN, _GYM0D_AF, _GYM0D_MY, _GYM0D_NE, _GYM0D_EL, _GYM0D_DA, _GYM0D_OR, _GYM0D_PA, _GYM0D_BE, _GYM0D_ES_419, _GYM0D_AF, _GYM0D_RM, _GYM0D_BE, _GYM0D_MK, _GYM0D_EL, _GYM0D_NE, _GYM0D_SK, _GYM0D_SL, _GYM0D_CEB, _GYM0D_BE, _GYM0D_SR, _GYM0D_SR, _GYM0D_FR_CA, _GYM0D_EL, _GYM0D_SYR, _GYM0D_BN, _GYM0D_TE, _GYM0D_BR, _GYM0D_TH, _GYM0D_EL, _GYM0D_TO, _GYM0D_TR, _GYM0D_TT, _GYM0D_UG, _GYM0D_UK, _GYM0D_UND, _GYM0D_UR, _GYM0D_UZ, _GYM0D_EL, _GYM0D_BN, _GYM0D_WO, _GYM0D_CEB, _GYM0D_KXV, _GYM0D_AS, _GYM0D_BR, _GYM0D_YUE, _GYM0D_YUE_HANS, _GYM0D_ZH, _GYM0D_ZH_HK, _GYM0D_ZH_HANT, _GYM0D_ZH_HK, _GYM0D_OR, _GYM0DE_AF, _GYM0DE_AM, _GYM0DE_AR, _GYM0DE_AST, _GYM0DE_AZ, _GYM0DE_BE, _GYM0DE_BG, _GYM0DE_BLO, _GYM0DE_BN, _GYM0DE_AF, _GYM0DE_BRX, _GYM0DE_BS, _GYM0DE_BS, _GYM0DE_CA, _GYM0DE_CEB, _GYM0DE_CEB, _GYM0DE_CS, _GYM0DE_CV, _GYM0DE_BE, _GYM0DE_DA, _GYM0DE_DE, _GYM0DE_DE, _GYM0DE_BE, _GYM0DE_CEB, _GYM0DE_BE, _GYM0DE_BE, _GYM0DE_EN_AU, _GYM0DE_EN_AU, _GYM0DE_EN_IN, _GYM0DE_ES, _GYM0DE_ES_419, _GYM0DE_ES_CO, _GYM0DE_ET, _GYM0DE_EU, _GYM0DE_AF, _GYM0DE_FF_ADLM, _GYM0DE_DA, _GYM0DE_CEB, _GYM0DE_DA, _GYM0DE_AF, _GYM0DE_AF, _GYM0DE_AF, _GYM0DE_GD, _GYM0DE_ES_419, _GYM0DE_GU, _GYM0DE_HE, _GYM0DE_BE, _GYM0DE_BS, _GYM0DE_DE, _GYM0DE_HU, _GYM0DE_HY, _GYM0DE_AF, _GYM0DE_BE, _GYM0DE_DE, _GYM0DE_AF, _GYM0DE_JA, _GYM0DE_BE, _GYM0DE_BN, _GYM0DE_BE, _GYM0DE_KGP, _GYM0DE_KK, _GYM0DE_BE, _GYM0DE_KO, _GYM0DE_KOK, _GYM0DE_CEB, _GYM0DE_KU, _GYM0DE_KXV, _GYM0DE_KY, _GYM0DE_DE, _GYM0DE_CEB, _GYM0DE_LT, _GYM0DE_LV, _GYM0DE_MK, _GYM0DE_MN, _GYM0DE_BN, _GYM0DE_BE, _GYM0DE_AF, _GYM0DE_DA, _GYM0DE_CEB, _GYM0DE_BE, _GYM0DE_BE, _GYM0DE_ES_419, _GYM0DE_QU, _GYM0DE_RM, _GYM0DE_BE, _GYM0DE_MK, _GYM0DE_AF, _GYM0DE_SK, _GYM0DE_DE, _GYM0DE_CEB, _GYM0DE_BE, _GYM0DE_BS, _GYM0DE_BS, _GYM0DE_AF, _GYM0DE_BE, _GYM0DE_SYR, _GYM0DE_BN, _GYM0DE_TE, _GYM0DE_BE, _GYM0DE_TH, _GYM0DE_TI, _GYM0DE_AF, _GYM0DE_TR, _GYM0DE_TT, _GYM0DE_UG, _GYM0DE_UK, _GYM0DE_UND, _GYM0DE_UR, _GYM0DE_UZ, _GYM0DE_AF, _GYM0DE_BN, _GYM0DE_BN, _GYM0DE_CEB, _GYM0DE_KXV, _GYM0DE_BE, _GYM0DE_YUE, _GYM0DE_YUE_HANS, _GYM0DE_ZH, _GYM0DE_ZH_HK, _GYM0DE_YUE, _GYM0DE_ZH_HK, _GYM0DE_CEB, _M0_BG, _M0_DA, _M0_EN_001, _M0_EN_001, _M0_ET, _M0_EN_001, _M0_DA, _M0_HR, _M0_JA, _M0_KO, _M0_DA, _M0_EN_001, _M0_MN, _M0_HR, _M0_SK, _M0_UND, _M0_DA, _M0_YUE, _M0_YUE_HANS, _M0_YUE_HANS, _M0_YUE, _M0D_AF, _M0D_AM, _M0D_AR, _M0D_AM, _M0D_AST, _M0D_AZ, _M0D_BE, _M0D_BG, _M0D_AM, _M0D_AF, _M0D_BR, _M0D_BRX, _M0D_BS, _M0D_BS_CYRL, _M0D_AF, _M0D_AM, _M0D_AM, _M0D_CS, _M0D_CV, _M0D_CY, _M0D_DA, _M0D_BS, _M0D_BS, _M0D_AF, _M0D_AM, _M0D_BR, _M0D_BR, _M0D_AF, _M0D_EN_BW, _M0D_EN_BW, _M0D_CV, _M0D_AF, _M0D_AF, _M0D_EN_BW, _M0D_AF, _M0D_EN_ZA, _M0D_EN_ZW, _M0D_AST, _M0D_ES_419, _M0D_ES_CL, _M0D_ES_PA, _M0D_ES_PA, _M0D_DA, _M0D_EU, _M0D_FA, _M0D_FF_ADLM, _M0D_BS, _M0D_AM, _M0D_FO, _M0D_BR, _M0D_FR_CA, _M0D_FR_CH, _M0D_FF_ADLM, _M0D_BR, _M0D_GD, _M0D_GL, _M0D_AF, _M0D_AM, _M0D_HE, _M0D_AF, _M0D_HR, _M0D_BS, _M0D_HU, _M0D_AZ, _M0D_IA, _M0D_AF, _M0D_AM, _M0D_BS, _M0D_AF, _M0D_JA, _M0D_BR, _M0D_BE, _M0D_KEA, _M0D_KGP, _M0D_CV, _M0D_AF, _M0D_AF, _M0D_KO, _M0D_FF_ADLM, _M0D_AM, _M0D_KU, _M0D_CY, _M0D_KY, _M0D_BS, _M0D_CY, _M0D_LT, _M0D_LV, _M0D_BE, _M0D_MN, _M0D_AF, _M0D_AF, _M0D_MT, _M0D_MY, _M0D_FF_ADLM, _M0D_AF, _M0D_BS, _M0D_AM, _M0D_CY, _M0D_AM, _M0D_PL, _M0D_PS, _M0D_ES_419, _M0D_QU, _M0D_RM, _M0D_CV, _M0D_CV, _M0D_AF, _M0D_SI, _M0D_CS, _M0D_SL, _M0D_AM, _M0D_BE, _M0D_BS, _M0D_BS, _M0D_AF, _M0D_FF_ADLM, _M0D_SYR, _M0D_AF, _M0D_AF, _M0D_QU, _M0D_AF, _M0D_AF, _M0D_CV, _M0D_AF, _M0D_TR, _M0D_CV, _M0D_AM, _M0D_CV, _M0D_UND, _M0D_AF, _M0D_UZ, _M0D_BR, _M0D_VI, _M0D_QU, _M0D_AM, _M0D_CY, _M0D_AM, _M0D_AF, _M0D_JA, _M0D_JA, _M0D_JA, _M0D_ZH_HK, _M0D_JA, _M0D_ZH_HK, _M0D_ZH_SG, _M0D_AM, _M0DE_AF, _M0DE_AM, _M0DE_AR, _M0DE_AS, _M0DE_AST, _M0DE_AZ, _M0DE_BE, _M0DE_BG, _M0DE_BLO, _M0DE_BN, _M0DE_BR, _M0DE_BRX, _M0DE_BS, _M0DE_BS_CYRL, _M0DE_AST, _M0DE_BLO, _M0DE_BLO, _M0DE_CS, _M0DE_CV, _M0DE_AST, _M0DE_DA, _M0DE_BS, _M0DE_BS, _M0DE_AST, _M0DE_BLO, _M0DE_EN_001, _M0DE_AST, _M0DE_EN_AU, _M0DE_EN_BW, _M0DE_EN_BW, _M0DE_EN_CH, _M0DE_EN_AU, _M0DE_EN_IN, _M0DE_EN_ZA, _M0DE_EN_BW, _M0DE_ES, _M0DE_ES_419, _M0DE_ES_AR, _M0DE_ES_CL, _M0DE_ES_MX, _M0DE_ES_PA, _M0DE_ES_PA, _M0DE_ET, _M0DE_EU, _M0DE_FA, _M0DE_FF_ADLM, _M0DE_FI, _M0DE_BLO, _M0DE_FO, _M0DE_BR, _M0DE_FR_CA, _M0DE_FR_CH, _M0DE_FF_ADLM, _M0DE_BR, _M0DE_AST, _M0DE_GL, _M0DE_AST, _M0DE_BLO, _M0DE_HE, _M0DE_AST, _M0DE_HR, _M0DE_BS, _M0DE_HU, _M0DE_AZ, _M0DE_IA, _M0DE_AST, _M0DE_BLO, _M0DE_BS, _M0DE_IT, _M0DE_JA, _M0DE_EN_001, _M0DE_BE, _M0DE_KEA, _M0DE_KGP, _M0DE_AZ, _M0DE_IT, _M0DE_AST, _M0DE_KO, _M0DE_KOK, _M0DE_BLO, _M0DE_KU, _M0DE_AST, _M0DE_KY, _M0DE_BS, _M0DE_LO, _M0DE_LT, _M0DE_LV, _M0DE_BE, _M0DE_ML, _M0DE_MN, _M0DE_AST, _M0DE_AST, _M0DE_MT, _M0DE_MY, _M0DE_NE, _M0DE_FF_ADLM, _M0DE_IT, _M0DE_DA, _M0DE_BLO, _M0DE_AST, _M0DE_BLO, _M0DE_PL, _M0DE_GL, _M0DE_QU, _M0DE_RM, _M0DE_EN_CH, _M0DE_CV, _M0DE_IT, _M0DE_SI, _M0DE_CS, _M0DE_SL, _M0DE_BLO, _M0DE_BE, _M0DE_BS, _M0DE_BS, _M0DE_IT, _M0DE_AST, _M0DE_SW_CD, _M0DE_SYR, _M0DE_AST, _M0DE_AST, _M0DE_TG, _M0DE_TH, _M0DE_TI, _M0DE_TK, _M0DE_IT, _M0DE_TR, _M0DE_AZ, _M0DE_UG, _M0DE_EN_CH, _M0DE_UND, _M0DE_UR, _M0DE_UZ, _M0DE_BR, _M0DE_AST, _M0DE_TG, _M0DE_BLO, _M0DE_AST, _M0DE_BLO, _M0DE_EN_001, _M0DE_YUE, _M0DE_YUE_HANS, _M0DE_YUE_HANS, _M0DE_ZH_HK, _M0DE_YUE, _M0DE_ZH_HK, _M0DE_ZH_SG, _M0DE_BLO, _Y_AF, _Y_AM, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_BG, _Y_AF, _Y_AF, _Y_AF, _Y_BS, _Y_BS, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_CV, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AM, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AM, _Y_AF, _Y_AF, _Y_BS, _Y_AF, _Y_HU, _Y_HY, _Y_AF, _Y_AF, _Y_AM, _Y_AF, _Y_AF, _Y_JA, _Y_AF, _Y_AF, _Y_AM, _Y_AF, _Y_KK, _Y_AF, _Y_KO, _Y_AF, _Y_AF, _Y_KY, _Y_AF, _Y_AF, _Y_LV, _Y_BG, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AM, _Y_BG, _Y_AF, _Y_AF, _Y_AM, _Y_AM, _Y_AF, _Y_BS, _Y_BS, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AM, _Y_AF, _Y_TT, _Y_AF, _Y_AF, _Y_UND, _Y_AF, _Y_UZ, _Y_AF, _Y_AF, _Y_AF, _Y_AF, _Y_AM, _Y_AF, _Y_YUE, _Y_JA, _Y_JA, _Y_JA, _Y_YUE, _Y_JA, _Y_AF, _Y0W_UND, _YM0_AF, _YM0_AM, _YM0_AR, _YM0_AS, _YM0_AM, _YM0_AZ, _YM0_BE, _YM0_BG, _YM0_AF, _YM0_BN, _YM0_AF, _YM0_AM, _YM0_BS, _YM0_BS_CYRL, _YM0_CA, _YM0_AF, _YM0_AF, _YM0_CS, _YM0_CV, _YM0_CY, _YM0_DA, _YM0_AF, _YM0_DSB, _YM0_AF, _YM0_AF, _YM0_BN, _YM0_BN, _YM0_EN_CH, _YM0_EN_IN, _YM0_EN_SE, _YM0_ES, _YM0_ES_419, _YM0_ES_AR, _YM0_ES_AR, _YM0_ES, _YM0_ES_PA, _YM0_ES_PR, _YM0_DA, _YM0_EU, _YM0_FA, _YM0_AS, _YM0_FI, _YM0_AF, _YM0_FO, _YM0_AF, _YM0_EN_SE, _YM0_FR_CH, _YM0_AS, _YM0_AF, _YM0_GD, _YM0_GL, _YM0_GU, _YM0_AM, _YM0_HE, _YM0_HI, _YM0_HR, _YM0_DSB, _YM0_HU, _YM0_HY, _YM0_AS, _YM0_BN, _YM0_AM, _YM0_DA, _YM0_AF, _YM0_JA, _YM0_JV, _YM0_KA, _YM0_KEA, _YM0_EN_IN, _YM0_KK, _YM0_HI, _YM0_KN, _YM0_KO, _YM0_KOK, _YM0_AF, _YM0_KU, _YM0_KXV, _YM0_KY, _YM0_EN_CH, _YM0_LO, _YM0_LT, _YM0_LV, _YM0_MK, _YM0_MN, _YM0_AF, _YM0_BN, _YM0_MT, _YM0_MY, _YM0_AS, _YM0_AF, _YM0_DA, _YM0_OR, _YM0_AF, _YM0_BE, _YM0_PS, _YM0_ES_419, _YM0_PT_PT, _YM0_AS, _YM0_RM, _YM0_DA, _YM0_RU, _YM0_SC, _YM0_SI, _YM0_CS, _YM0_BN, _YM0_AM, _YM0_EN_CH, _YM0_SR, _YM0_SR, _YM0_EN_SE, _YM0_BN, _YM0_AF, _YM0_BN, _YM0_TE, _YM0_AS, _YM0_TH, _YM0_AM, _YM0_FO, _YM0_TO, _YM0_TR, _YM0_TT, _YM0_HI, _YM0_UK, _YM0_UND, _YM0_BN, _YM0_UZ, _YM0_AF, _YM0_AF, _YM0_WO, _YM0_AF, _YM0_KXV, _YM0_AM, _YM0_AF, _YM0_YUE, _YM0_YUE_HANS, _YM0_YUE_HANS, _YM0_ZH_HK, _YM0_YUE, _YM0_ZH_HK, _YM0_ZU, _A1_EL, _YM0D_AM, _YM0D_AR, _YM0D_AS, _YM0D_AM, _YM0D_AZ, _YM0D_BE, _YM0D_BG, _A1_BLO, _YM0D_BN, _A1_EL, _YM0D_BRX, _YM0D_BS, _YM0D_BS, _YM0D_CA, _A1_CEB, _A1_CEB, _YM0D_CS, _YM0D_CV, _YM0D_CY, _A1_NO, _YM0D_DE, _YM0D_DE, _A1_EL, _A1_CEB, _A1_EL, _A1_EL, _YM0D_EN_AU, _YM0D_EN_BE, _YM0D_EN_BE, _YM0D_EN_BE, _YM0D_EN_CH, _A1_BN, _YM0D_EN_BE, _YM0D_BN, _YM0D_EN_BE, _YM0D_EN_SE, _YM0D_EN_ZA, _YM0D_BN, _YM0D_ES, _A1_ES, _YM0D_ES_CL, _YM0D_ES, _YM0D_ES_PA, _YM0D_ES_PR, _A1_NO, _YM0D_EU, _A1_FA, _A1_FF_ADLM, _A1_NO, _A1_CEB, _YM0D_FO, _A1_EL, _YM0D_EN_SE, _A1_EN_CH, _YM0D_AS, _A1_EL, _A1_EL, _YM0D_GL, _YM0D_GU, _YM0D_HE, _A1_EL, _A1_BN, _YM0D_HR, _YM0D_DE, _YM0D_HU, _YM0D_HY, _YM0D_AS, _YM0D_EN_BE, _A1_NO, _A1_EL, _YM0D_JA, _YM0D_JV, _YM0D_KA, _YM0D_KEA, _YM0D_KGP, _YM0D_KK, _A1_EL, _YM0D_KO, _YM0D_AS, _A1_CEB, _YM0D_KU, _A1_KXV, _YM0D_KY, _YM0D_DE, _A1_KXV, _YM0D_LT, _YM0D_LV, _YM0D_MK, _YM0D_ML, _YM0D_MN, _A1_BN, _YM0D_EN_BE, _YM0D_MT, _YM0D_MY, _YM0D_AS, _A1_EL, _A1_NO, _A1_CEB, _A1_EL, _YM0D_BE, _A1_ES, _YM0D_PT_PT, _YM0D_AS, _YM0D_RM, _YM0D_BE, _YM0D_MK, _A1_EL, _YM0D_SI, _YM0D_CS, _YM0D_SL, _A1_CEB, _YM0D_EN_CH, _YM0D_SR, _YM0D_SR, _YM0D_EN_SE, _YM0D_EN_BE, _A1_SYR, _YM0D_BN, _YM0D_TE, _YM0D_AS, _YM0D_TH, _A1_EL, _YM0D_TK, _YM0D_TO, _YM0D_AZ, _YM0D_TT, _A1_UG, _YM0D_UK, _YM0D_UND, _YM0D_UR, _YM0D_UZ, _A1_EL, _A1_BN, _YM0D_WO, _A1_CEB, _A1_KXV, _A1_EL, _A1_YUE, _A1_ZH, _A1_ZH, _A1_ZH_HK, _A1_YUE, _A1_ZH_HK, _YM0D_ZH_SG, _YM0D_ZU, _YM0DE_AF, _YM0DE_AM, _A1E_AR, _YM0DE_AS, _YM0DE_AST, _A1E_AZ, _A1E_BE, _A1E_BG, _A1E_BLO, _A1E_BN, _A1E_BR, _YM0DE_BRX, _YM0DE_BS, _YM0DE_BS, _A1E_CA, _A1E_CEB, _A1E_CEB, _A1E_CS, _A1E_CV, _A1E_CY, _A1E_DA, _A1E_DE, _A1E_DE, _A1E_EL, _A1E_CEB, _A1E_EL, _A1E_EL, _A1E_EN_AU, _A1E_EN_BE, _A1E_EN_BE, _A1E_EN_BE, _A1E_EN_CH, _A1E_EN_GB, _A1E_EN_HK, _A1E_EN_IE, _A1E_EN_IN, _A1E_EN_SE, _YM0DE_EN_ZA, _A1E_BN, _A1E_ES, _A1E_ES_419, _A1E_ES_MX, _A1E_ES_PA, _A1E_ET, _YM0DE_EU, _A1E_FA, _YM0DE_FF_ADLM, _A1E_DA, _A1E_CEB, _YM0DE_FO, _A1E_BR, _A1E_FR_CA, _YM0DE_FR_CH, _A1E_FY, _A1E_BR, _YM0DE_GD, _YM0DE_GL, _A1E_GU, _YM0DE_HA, _A1E_HE, _YM0DE_HI, _A1E_HR, _A1E_DE, _A1E_HU, _A1E_HY, _A1E_FY, _A1E_EN_BE, _YM0DE_HA, _A1E_IS, _A1E_BR, _A1E_JA, _A1E_JV, _YM0DE_KA, _YM0DE_KEA, _A1E_KGP, _A1E_KK, _YM0DE_KM, _A1E_KO, _A1E_EL, _A1E_CEB, _A1E_KU, _YM0DE_KXV, _YM0DE_KY, _A1E_DE, _YM0DE_LO, _A1E_LT, _YM0DE_LV, _A1E_MK, _YM0DE_ML, _YM0DE_MN, _A1E_EN_HK, _A1E_EN_BE, _YM0DE_MT, _A1E_FY, _A1E_BR, _A1E_DA, _A1E_CEB, _A1E_EL, _A1E_BE, _A1E_PT, _YM0DE_PT_PT, _YM0DE_QU, _YM0DE_RM, _A1E_BE, _A1E_MK, _A1E_BR, _A1E_SI, _YM0DE_SK, _YM0DE_SL, _YM0DE_HA, _A1E_EN_CH, _A1E_SR, _A1E_SR, _A1E_FR_CA, _A1E_EN_BE, _A1E_SYR, _A1E_BN, _YM0DE_TE, _YM0DE_QU, _A1E_TH, _A1E_TI, _YM0DE_TK, _YM0DE_TO, _A1E_TR, _YM0DE_TT, _A1E_UG, _YM0DE_UK, _A1E_UND, _A1E_UR, _A1E_UZ, _A1E_BR, _A1E_EN_HK, _A1E_EL, _A1E_CEB, _YM0DE_KXV, _YM0DE_HA, _A1E_EL, _A1E_YUE, _A1E_YUE_HANS, _A1E_YUE_HANS, _A1E_ZH_HK, _A1E_YUE, _A1E_ZH_HK, _A1E_ZH_SG, _YM0DE_HA]
                },
            );
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::IndianDateNeoSkeletonPatternsV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::IndianDateNeoSkeletonPatternsV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_INDIAN_DATE_NEO_SKELETON_PATTERNS_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::IndianDateNeoSkeletonPatternsV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_INDIAN_DATE_NEO_SKELETON_PATTERNS_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::datetime::provider::neo::IndianDateNeoSkeletonPatternsV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_indian_date_neo_skeleton_patterns_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::neo::IndianDateNeoSkeletonPatternsV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_INDIAN_DATE_NEO_SKELETON_PATTERNS_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_indian_date_neo_skeleton_patterns_v1_marker as impl_indian_date_neo_skeleton_patterns_v1_marker;
