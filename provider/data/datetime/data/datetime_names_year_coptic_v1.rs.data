// @generated
/// Implement `DataProvider<DatetimeNamesYearCopticV1>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 163B for the lookup data structure (28 data identifiers)
/// * 909B[^1] for the actual data (18 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
///
/// This macro requires the following crates:
/// * `icu`
/// * `icu_provider`
/// * `icu_provider/baked`
/// * `zerovec`
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_datetime_names_year_coptic_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.82"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.82"]
        impl $provider {
            const DATA_DATETIME_NAMES_YEAR_COPTIC_V1: icu_provider::baked::zerotrie::Data<icu::datetime::provider::neo::DatetimeNamesYearCopticV1> = {
                const TRIE: icu_provider::baked::zerotrie::ZeroTrieSimpleAscii<&'static [u8]> = icu_provider::baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xC8ceflrsuz\x0B\x0F,7P\\hv\x1E\xC3345\x01\x02\x80\x89\x8An\x1E5\x8B\xC2fr\x0F-Adlm\x1E\xC3345\x01\x02\x81\x81\x8C\x1E\xC3345\x01\x02\x82\x82\x8Dv\x1E\xC3345\x01\x02\x83\x83\x8E\xC2ou\n\x1E\xC3345\x01\x02\x84\x84\x8F\x1E\xC3345\x01\x02\x85\x85\x90\0c\x1E\xC3345\x01\x02\x86\x86\x90\x01nd\x1E\xC3345\x01\x02\x87\x87\x87h\x1E\xC3345\x01\x02\x88\x88\x88" };
                const VALUES: &'static [<icu::datetime::provider::neo::DatetimeNamesYearCopticV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct] = &[icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD0\x94\xD0\xB8\xD0\xBE\xD0\xBA\xD0\xBB-\xD1\x82.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xF0\x9E\xA4\x87\xF0\x9E\xA4\x81") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0ap. D.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0p\xC4\x93c Diokl.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0A.M.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD0\xBE\xD1\x82 \xD0\x94\xD0\xB8\xD0\xBE\xD0\xBA\xD0\xBB.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0a.M.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0AM") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xE7\xA7\x91\xE6\x99\xAE\xE7\x89\xB9\xE5\x8E\x86") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD0\x94-\xD1\x82.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD0\x94\xD0\xB8\xD0\xBE\xD0\xBA\xD0\xBB\xD0\xB5\xD1\x82\xD0\xB8\xD0\xB0\xD0\xBD\xD1\x82\xD0\xB0\xD0\xBD") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0Anno Martyrum") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xF0\x9E\xA4\xA9\xF0\x9E\xA4\xA2\xF0\x9E\xA5\x84\xF0\x9E\xA4\xB1\xF0\x9E\xA4\xAE \xF0\x9E\xA4\x81\xF0\x9E\xA4\xA2\xF0\x9E\xA4\xB4\xF0\x9E\xA4\xA2\xF0\x9E\xA4\xB3\xF0\x9E\xA4\xAD\xF0\x9E\xA4\xA4\xF0\x9E\xA4\xBC\xF0\x9E\xA4\xAD\xF0\x9E\xA4\xB4\xF0\x9E\xA4\xA2\xF0\x9E\xA5\x84\xF0\x9E\xA4\xB2") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0apr\xC3\xA8s Diocl\xC3\xA9tien") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0p\xC4\x93c Diokleti\xC4\x81na") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0dup\xC4\x83 Anno Martyrum") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD0\xBE\xD1\x82 \xD0\x94\xD0\xB8\xD0\xBE\xD0\xBA\xD0\xBB\xD0\xB5\xD1\x82\xD0\xB8\xD0\xB0\xD0\xBD\xD0\xB0") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0annu de sos m\xC3\xA0rtires") })];
                unsafe { icu_provider::baked::zerotrie::Data::from_trie_and_values_unchecked(TRIE, VALUES) }
            };
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::DatetimeNamesYearCopticV1> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::DatetimeNamesYearCopticV1>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_DATETIME_NAMES_YEAR_COPTIC_V1, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::DatetimeNamesYearCopticV1 as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_DATETIME_NAMES_YEAR_COPTIC_V1, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_unknown() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::datetime::provider::neo::DatetimeNamesYearCopticV1 as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload, metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_datetime_names_year_coptic_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::neo::DatetimeNamesYearCopticV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider::baked::DataStore::iter(&Self::DATA_DATETIME_NAMES_YEAR_COPTIC_V1).collect())
            }
        }
    };
    ($ provider : ty , DRY) => {};
    ($ provider : ty , DRY , ITER) => {
        __impl_datetime_names_year_coptic_v1!($provider, ITER);
    };
}
#[doc(inline)]
pub use __impl_datetime_names_year_coptic_v1 as impl_datetime_names_year_coptic_v1;
