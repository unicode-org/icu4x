// @generated
/// Implement `DataProvider<ExemplarCitiesRootV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 36B for the lookup data structure (1 data identifiers)
/// * 3310B[^1] for the actual data (1 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_exemplar_cities_root_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.81"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.81"]
        impl $provider {
            const DATA_EXEMPLAR_CITIES_ROOT_V1_MARKER: icu_provider_baked::zerotrie::Data<icu::datetime::provider::time_zones::ExemplarCitiesRootV1Marker> = icu_provider_baked::zerotrie::Data {
                trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"und\x80" },
                values: &[icu::datetime::provider::time_zones::ExemplarCitiesV1 {
                    exemplars: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"aedxb\0\0\0afkbl\0\0\0aganu\0\0\0altia\0\0\0amevn\0\0\0ancur\0\0\0aolad\0\0\0asppg\0\0\0atvie\0\0\0azbak\0\0\0basjj\0\0\0bddac\0\0\0bebru\0\0\0bfoua\0\0\0bgsof\0\0\0bibjm\0\0\0bjptn\0\0\0bolpb\0\0\0bqkra\0\0\0bsnas\0\0\0btthi\0\0\0bwgbe\0\0\0bymsq\0\0\0cccck\0\0\0cfbgf\0\0\0cgbzv\0\0\0chzrh\0\0\0ciabj\0\0\0ckrar\0\0\0clscl\0\0\0cmdla\0\0\0cnsha\0\0\0cobog\0\0\0cuhav\0\0\0cvrai\0\0\0cxxch\0\0\0czprg\0\0\0deber\0\0\0dkcph\0\0\0dosdq\0\0\0dzalg\0\0\0ecgye\0\0\0eetll\0\0\0egcai\0\0\0eheai\0\0\0erasm\0\0\0esmad\0\0\0etadd\0\0\0fihel\0\0\0fimhq\0\0\0fkpsy\0\0\0fotho\0\0\0frpar\0\0\0galbv\0\0\0gblon\0\0\0getbs\0\0\0gfcay\0\0\0ghacc\0\0\0gmbjl\0\0\0gncky\0\0\0gpmsb\0\0\0gpsbh\0\0\0gqssg\0\0\0grath\0\0\0gsgrv\0\0\0gwoxb\0\0\0hntgu\0\0\0hrzag\0\0\0htpap\0\0\0hubud\0\0\0iedub\0\0\0inccu\0\0\0iodga\0\0\0iqbgw\0\0\0irthr\0\0\0isrey\0\0\0itrom\0\0\0jeruslm\0joamm\0\0\0jptyo\0\0\0kenbo\0\0\0kgfru\0\0\0khpnh\0\0\0kmyva\0\0\0knbas\0\0\0kpfnj\0\0\0krsel\0\0\0kygec\0\0\0lavte\0\0\0lbbey\0\0\0livdz\0\0\0lkcmb\0\0\0lrmlw\0\0\0lsmsu\0\0\0ltvno\0\0\0lvrix\0\0\0lytip\0\0\0macas\0\0\0mdkiv\0\0\0metgd\0\0\0mgtnr\0\0\0mhmaj\0\0\0mkskp\0\0\0mlbko\0\0\0mmrgn\0\0\0momfm\0\0\0mpspn\0\0\0mrnkc\0\0\0muplu\0\0\0mwblz\0\0\0mykul\0\0\0mzmpm\0\0\0nawdh\0\0\0ncnou\0\0\0nenim\0\0\0nfnlk\0\0\0nglos\0\0\0nimga\0\0\0nlams\0\0\0noosl\0\0\0npktm\0\0\0nzakl\0\0\0ommct\0\0\0papty\0\0\0pelim\0\0\0phmnl\0\0\0pkkhi\0\0\0plwaw\0\0\0pmmqc\0\0\0pnpcn\0\0\0ptlis\0\0\0pyasu\0\0\0rereu\0\0\0robuh\0\0\0rsbeg\0\0\0rwkgl\0\0\0saruh\0\0\0sbhir\0\0\0scmaw\0\0\0sdkrt\0\0\0sesto\0\0\0silju\0\0\0sjlyr\0\0\0skbts\0\0\0slfna\0\0\0sndkr\0\0\0somgq\0\0\0srpbm\0\0\0ssjub\0\0\0sttms\0\0\0sxphi\0\0\0sydam\0\0\0szqmn\0\0\0tcgdt\0\0\0tdndj\0\0\0tfpfr\0\0\0tglfw\0\0\0thbkk\0\0\0tjdyu\0\0\0tkfko\0\0\0tldil\0\0\0tmasb\0\0\0tntun\0\0\0totbu\0\0\0trist\0\0\0ttpos\0\0\0tvfun\0\0\0twtpe\0\0\0tzdar\0\0\0ugkla\0\0\0unk\0\0\0\0\0uymvd\0\0\0uztas\0\0\0vavat\0\0\0vcsvd\0\0\0veccs\0\0\0vgtov\0\0\0vistt\0\0\0vnsgn\0\0\0vuvli\0\0\0wfmau\0\0\0wsapw\0\0\0yeade\0\0\0zajnb\0\0\0zmlun\0\0\0zwhre\0\0\0") }, unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\xBA\0\x05\0\n\0\x11\0\x17\0\x1E\0&\0,\x005\0;\0?\0G\0L\0T\0_\0d\0m\0w\0}\0\x87\0\x8D\0\x94\0\x9C\0\xA1\0\xA6\0\xAC\0\xB7\0\xBD\0\xC4\0\xCD\0\xD5\0\xDB\0\xE3\0\xE9\0\xEF\0\xF9\0\x02\x01\x08\x01\x0E\x01\x18\x01%\x01,\x015\x01<\x01A\x01I\x01O\x01U\x01`\x01h\x01q\x01x\x01}\x01\x82\x01\x8C\x01\x92\x01\x99\x01\xA0\x01\xA5\x01\xAB\x01\xB2\x01\xB9\x01\xC8\x01\xCE\x01\xD4\x01\xE1\x01\xE7\x01\xF2\x01\xF8\x01\x06\x02\x0E\x02\x14\x02\x1B\x02!\x02(\x02.\x027\x02;\x02D\x02I\x02N\x02U\x02\\\x02f\x02l\x02u\x02~\x02\x83\x02\x89\x02\x92\x02\x98\x02\x9D\x02\xA4\x02\xAC\x02\xB2\x02\xB9\x02\xBD\x02\xC4\x02\xCE\x02\xD6\x02\xDF\x02\xEB\x02\xF1\x02\xF7\x02\xFD\x02\x03\x03\x08\x03\x0E\x03\x18\x03!\x03)\x035\x03;\x03C\x03I\x03O\x03V\x03[\x03b\x03k\x03o\x03x\x03\x80\x03\x86\x03\x8C\x03\x90\x03\x96\x03\x9D\x03\xA3\x03\xAB\x03\xB3\x03\xB9\x03\xC2\x03\xCA\x03\xD3\x03\xDB\x03\xE1\x03\xE7\x03\xF2\x03\xF6\x03\xFE\x03\x07\x04\x10\x04\x1C\x04&\x04.\x043\x04<\x04F\x04J\x04T\x04l\x04t\x04{\x04\x85\x04\x8D\x04\x96\x04\x9A\x04\xA1\x04\xA9\x04\xB0\x04\xB4\x04\xBC\x04\xC1\x04\xCA\x04\xD2\x04\xDF\x04\xE7\x04\xED\x04\xFA\x04\x01\x05\x08\x05\x12\x05\x1A\x05!\x05,\x053\x05:\x05D\x05O\x05T\x05Z\x05^\x05b\x05n\x05t\x05DubaiKabulAntiguaTiraneYerevanCura\xC3\xA7aoLuandaPago PagoViennaBakuSarajevoDhakaBrusselsOuagadougouSofiaBujumburaPorto-NovoLa PazKralendijkNassauThimphuGaboroneMinskCocosBanguiBrazzavilleZurichAbidjanRarotongaSantiagoDoualaShanghaiBogotaHavanaCape VerdeChristmasPragueBerlinCopenhagenSanto DomingoAlgiersGuayaquilTallinnCairoEl AaiunAsmaraMadridAddis AbabaHelsinkiMariehamnStanleyFaroeParisLibrevilleLondonTbilisiCayenneAccraBanjulConakryMarigotSt. Barth\xC3\xA9lemyMalaboAthensSouth GeorgiaBissauTegucigalpaZagrebPort-au-PrinceBudapestDublinKolkataChagosBaghdadTehranReykjavikRomeJerusalemAmmanTokyoNairobiBishkekPhnom PenhComoroSt. KittsPyongyangSeoulCaymanVientianeBeirutVaduzColomboMonroviaMaseruVilniusRigaTripoliCasablancaChisinauPodgoricaAntananarivoMajuroSkopjeBamakoYangonMacaoSaipanNouakchottMauritiusBlantyreKuala LumpurMaputoWindhoekNoumeaNiameyNorfolkLagosManaguaAmsterdamOsloKathmanduAucklandMuscatPanamaLimaManilaKarachiWarsawMiquelonPitcairnLisbonAsunci\xC3\xB3nR\xC3\xA9unionBucharestBelgradeKigaliRiyadhGuadalcanalMaheKhartoumStockholmLjubljanaLongyearbyenBratislavaFreetownDakarMogadishuParamariboJubaS\xC3\xA3o Tom\xC3\xA9Lower Prince\xE2\x80\x99s QuarterDamascusMbabaneGrand TurkNdjamenaKerguelenLomeBangkokDushanbeFakaofoDiliAshgabatTunisTongatapuIstanbulPort of SpainFunafutiTaipeiDar es SalaamKampalaUnknownMontevideoTashkentVaticanSt. VincentCaracasTortolaSt. ThomasHo Chi MinhEfateWallisApiaAdenJohannesburgLusakaHarare") })
                    },
                }],
            };
        }
        #[clippy::msrv = "1.81"]
        impl icu_provider::DataProvider<icu::datetime::provider::time_zones::ExemplarCitiesRootV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::time_zones::ExemplarCitiesRootV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_EXEMPLAR_CITIES_ROOT_V1_MARKER, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::time_zones::ExemplarCitiesRootV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_EXEMPLAR_CITIES_ROOT_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_default() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::datetime::provider::time_zones::ExemplarCitiesRootV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_exemplar_cities_root_v1_marker!($provider);
        #[clippy::msrv = "1.81"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::time_zones::ExemplarCitiesRootV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_EXEMPLAR_CITIES_ROOT_V1_MARKER).collect())
            }
        }
    };
    ($ provider : ty , DRY) => {};
    ($ provider : ty , DRY , ITER) => {
        __impl_exemplar_cities_root_v1_marker!($provider, ITER);
    };
}
#[doc(inline)]
pub use __impl_exemplar_cities_root_v1_marker as impl_exemplar_cities_root_v1_marker;
