// @generated
/// Implement `DataProvider<DateTimePatternV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 1203B for the lookup data structure (277 data identifiers)
/// * 393B[^1] for the actual data (10 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_date_time_pattern_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_DATE_TIME_PATTERN_V1_MARKER: icu_provider_baked::zerotrie::Data<icu::datetime::provider::neo::DateTimePatternV1Marker> = icu_provider_baked::zerotrie::Data { trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xE1xabcdefghijklmnopqrstuvwx\0\0\0\0\x01\x01\x01\x01\x01\x01\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x04\x04\x04\x1Co\xB3\xD2 bp\xB7\xDE\xE6Vd\xAB\xDB\xE9\x17\x1B9\xAE\xD8\x0F.<\xC2rs\r\x1E\xC4flms\x01\x02\x03\x80\x80\x80\x80t\x1E\xC3flm\x01\x02\x81\x81\x81\xC5eglrs\r\x1A(B\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81o\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\xC2\x1Ex\t\xC3flm\x01\x02\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC2fl\x01\x81\x81\xC5aehvy\n\x18&3\x1E\xC3flm\x01\x02\x81\x81\x81b\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81r\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC2fl\x01\x81\x81\xC2eo\r\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81i\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\xC4lnsu\r,9\x1E\xC4flms\x01\x02\x03\x82\x82\x81\x81\xC2\x1E-\x0C\xC4flms\x01\x02\x03\x81\x81\x81\x81MV\x1E\xC4flms\x01\x02\x03\x83\x83\x83\x83\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x84\x84\x84\x84\xC4aior\r\x1B(\x1E\xC4flms\x01\x02\x03\x85\x85\x89\x89l\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\xC2\x1E-\t\xC3flm\x01\x02\x81\x81\x81ML\x1Es\x81l\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\xC4aeiy\n\x172\x1E\xC3lms\x01\x02\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\xC2\x1E-\x0C\xC4flms\x01\x02\x03\x81\x81\x81\x81Latn\x1E\xC2ms\x01\x83\x83\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\xC3gst\r\x1A\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC2ms\x01\x81\x81v\x1E\xC2ms\x01\x81\x81\xC6aekmsx\r\x1B(5V\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81a\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\xC2\x1E-\x0C\xC4flms\x01\x02\x03\x81\x81\x81\x81Deva\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81v\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81o\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\xC5aknrs\x0E\x1B)6i\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81i\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC2ms\x01\x81\x81\xC4elno\x07\x14\x1B\x1E\xC2ms\x01\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC2fl\x01\x83\x88\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81r\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\xC4aclt\x07\x0F\x16\x1E\xC2ms\x01\x81\x81m\x1E\xC2fl\x01\x81\x81\x1E\xC2ms\x01\x81\x81-PT\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81u\x1El\x86\xC2ou\r\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\xC8acdklquy\r\x1A,6=JW\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81-Deva\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC3flm\x01\x02\x81\x81\x81\x1E\xC2ms\x01\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81r\x1E\xC4flms\x01\x02\x03\x80\x80\x80\x80\xC3aot\r\x17\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC3flm\x01\x02\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\xC4gknz\x07\x14\"\x1E\xC2ms\x01\x80\x80\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81d\x1E\xC4flms\x01\x02\x03\x83\x83\x83\x83\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\xC2ei\x0Ec\x1E\xC4flms\x01\x02\x03\x81\x81\x81\x81\x1E\xC4flms\x01\x02\x03\x86\x86\x86\x86o\x1E\xC4flms\x01\x02\x03\x82\x82\x82\x82nr\x1E\xC4flms\x01\x02\x03\x87\x87\x81\x81" }, values: &[icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0,\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0-\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0(\x80\0\0\0\0)") } } }, icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \0\x063\0\x06'\0\x069\0\x06*\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\0\0\0 \x80\0\x01") } } }, icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\t\x1C\0\tK\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0k\0\0l\0\0.\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0 \x0F\0\0 \x80\0\0") } } }] };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::DateTimePatternV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::DateTimePatternV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_DATE_TIME_PATTERN_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_DATE_TIME_PATTERN_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_date_time_pattern_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::neo::DateTimePatternV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_DATE_TIME_PATTERN_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_date_time_pattern_v1_marker as impl_date_time_pattern_v1_marker;
