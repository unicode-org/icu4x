// @generated
/// Implement `DataProvider<DateTimePatternV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 4464B[^1] for the lookup data structure (277 data identifiers)
/// * 393B[^1] for the actual data (10 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_date_time_pattern_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_DATE_TIME_PATTERN_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::AttributesAndLocale<1usize, 7usize>, icu::datetime::provider::neo::DateTimePatternV1Marker> = icu_provider_baked::binary_search::Data(
                {
                    use icu_provider_baked::binary_search::tinystr::tinystr;
                    &[(tinystr!(1usize, "f"), tinystr!(7usize, "ar")), (tinystr!(1usize, "f"), tinystr!(7usize, "ast")), (tinystr!(1usize, "f"), tinystr!(7usize, "be")), (tinystr!(1usize, "f"), tinystr!(7usize, "bg")), (tinystr!(1usize, "f"), tinystr!(7usize, "blo")), (tinystr!(1usize, "f"), tinystr!(7usize, "br")), (tinystr!(1usize, "f"), tinystr!(7usize, "brx")), (tinystr!(1usize, "f"), tinystr!(7usize, "bs")), (tinystr!(1usize, "f"), tinystr!(7usize, "ca")), (tinystr!(1usize, "f"), tinystr!(7usize, "ceb")), (tinystr!(1usize, "f"), tinystr!(7usize, "chr")), (tinystr!(1usize, "f"), tinystr!(7usize, "cv")), (tinystr!(1usize, "f"), tinystr!(7usize, "cy")), (tinystr!(1usize, "f"), tinystr!(7usize, "de")), (tinystr!(1usize, "f"), tinystr!(7usize, "doi")), (tinystr!(1usize, "f"), tinystr!(7usize, "el")), (tinystr!(1usize, "f"), tinystr!(7usize, "en")), (tinystr!(1usize, "f"), tinystr!(7usize, "en-MV")), (tinystr!(1usize, "f"), tinystr!(7usize, "es")), (tinystr!(1usize, "f"), tinystr!(7usize, "eu")), (tinystr!(1usize, "f"), tinystr!(7usize, "fa")), (tinystr!(1usize, "f"), tinystr!(7usize, "fil")), (tinystr!(1usize, "f"), tinystr!(7usize, "fo")), (tinystr!(1usize, "f"), tinystr!(7usize, "fr")), (tinystr!(1usize, "f"), tinystr!(7usize, "gl")), (tinystr!(1usize, "f"), tinystr!(7usize, "he")), (tinystr!(1usize, "f"), tinystr!(7usize, "hi")), (tinystr!(1usize, "f"), tinystr!(7usize, "hy")), (tinystr!(1usize, "f"), tinystr!(7usize, "ig")), (tinystr!(1usize, "f"), tinystr!(7usize, "is")), (tinystr!(1usize, "f"), tinystr!(7usize, "ka")), (tinystr!(1usize, "f"), tinystr!(7usize, "kea")), (tinystr!(1usize, "f"), tinystr!(7usize, "kk")), (tinystr!(1usize, "f"), tinystr!(7usize, "km")), (tinystr!(1usize, "f"), tinystr!(7usize, "ks")), (tinystr!(1usize, "f"), tinystr!(7usize, "ks-Deva")), (tinystr!(1usize, "f"), tinystr!(7usize, "kxv")), (tinystr!(1usize, "f"), tinystr!(7usize, "lo")), (tinystr!(1usize, "f"), tinystr!(7usize, "mai")), (tinystr!(1usize, "f"), tinystr!(7usize, "mk")), (tinystr!(1usize, "f"), tinystr!(7usize, "mni")), (tinystr!(1usize, "f"), tinystr!(7usize, "mr")), (tinystr!(1usize, "f"), tinystr!(7usize, "nl")), (tinystr!(1usize, "f"), tinystr!(7usize, "nn")), (tinystr!(1usize, "f"), tinystr!(7usize, "no")), (tinystr!(1usize, "f"), tinystr!(7usize, "or")), (tinystr!(1usize, "f"), tinystr!(7usize, "pcm")), (tinystr!(1usize, "f"), tinystr!(7usize, "pt-PT")), (tinystr!(1usize, "f"), tinystr!(7usize, "ro")), (tinystr!(1usize, "f"), tinystr!(7usize, "ru")), (tinystr!(1usize, "f"), tinystr!(7usize, "sa")), (tinystr!(1usize, "f"), tinystr!(7usize, "sc")), (tinystr!(1usize, "f"), tinystr!(7usize, "sd-Deva")), (tinystr!(1usize, "f"), tinystr!(7usize, "sk")), (tinystr!(1usize, "f"), tinystr!(7usize, "sq")), (tinystr!(1usize, "f"), tinystr!(7usize, "su")), (tinystr!(1usize, "f"), tinystr!(7usize, "syr")), (tinystr!(1usize, "f"), tinystr!(7usize, "ta")), (tinystr!(1usize, "f"), tinystr!(7usize, "to")), (tinystr!(1usize, "f"), tinystr!(7usize, "tt")), (tinystr!(1usize, "f"), tinystr!(7usize, "uk")), (tinystr!(1usize, "f"), tinystr!(7usize, "und")), (tinystr!(1usize, "f"), tinystr!(7usize, "uz")), (tinystr!(1usize, "f"), tinystr!(7usize, "vec")), (tinystr!(1usize, "f"), tinystr!(7usize, "vi")), (tinystr!(1usize, "f"), tinystr!(7usize, "wo")), (tinystr!(1usize, "f"), tinystr!(7usize, "xnr")), (tinystr!(1usize, "l"), tinystr!(7usize, "ar")), (tinystr!(1usize, "l"), tinystr!(7usize, "ast")), (tinystr!(1usize, "l"), tinystr!(7usize, "be")), (tinystr!(1usize, "l"), tinystr!(7usize, "bg")), (tinystr!(1usize, "l"), tinystr!(7usize, "blo")), (tinystr!(1usize, "l"), tinystr!(7usize, "br")), (tinystr!(1usize, "l"), tinystr!(7usize, "brx")), (tinystr!(1usize, "l"), tinystr!(7usize, "bs")), (tinystr!(1usize, "l"), tinystr!(7usize, "ca")), (tinystr!(1usize, "l"), tinystr!(7usize, "ceb")), (tinystr!(1usize, "l"), tinystr!(7usize, "chr")), (tinystr!(1usize, "l"), tinystr!(7usize, "cv")), (tinystr!(1usize, "l"), tinystr!(7usize, "cy")), (tinystr!(1usize, "l"), tinystr!(7usize, "de")), (tinystr!(1usize, "l"), tinystr!(7usize, "doi")), (tinystr!(1usize, "l"), tinystr!(7usize, "el")), (tinystr!(1usize, "l"), tinystr!(7usize, "en")), (tinystr!(1usize, "l"), tinystr!(7usize, "en-MV")), (tinystr!(1usize, "l"), tinystr!(7usize, "es")), (tinystr!(1usize, "l"), tinystr!(7usize, "eu")), (tinystr!(1usize, "l"), tinystr!(7usize, "fa")), (tinystr!(1usize, "l"), tinystr!(7usize, "fil")), (tinystr!(1usize, "l"), tinystr!(7usize, "fo")), (tinystr!(1usize, "l"), tinystr!(7usize, "fr")), (tinystr!(1usize, "l"), tinystr!(7usize, "gl")), (tinystr!(1usize, "l"), tinystr!(7usize, "ha")), (tinystr!(1usize, "l"), tinystr!(7usize, "he")), (tinystr!(1usize, "l"), tinystr!(7usize, "hi")), (tinystr!(1usize, "l"), tinystr!(7usize, "hy")), (tinystr!(1usize, "l"), tinystr!(7usize, "ig")), (tinystr!(1usize, "l"), tinystr!(7usize, "is")), (tinystr!(1usize, "l"), tinystr!(7usize, "ka")), (tinystr!(1usize, "l"), tinystr!(7usize, "kea")), (tinystr!(1usize, "l"), tinystr!(7usize, "kk")), (tinystr!(1usize, "l"), tinystr!(7usize, "km")), (tinystr!(1usize, "l"), tinystr!(7usize, "ks")), (tinystr!(1usize, "l"), tinystr!(7usize, "ks-Deva")), (tinystr!(1usize, "l"), tinystr!(7usize, "kxv")), (tinystr!(1usize, "l"), tinystr!(7usize, "lo")), (tinystr!(1usize, "l"), tinystr!(7usize, "mai")), (tinystr!(1usize, "l"), tinystr!(7usize, "mk")), (tinystr!(1usize, "l"), tinystr!(7usize, "mni")), (tinystr!(1usize, "l"), tinystr!(7usize, "mr")), (tinystr!(1usize, "l"), tinystr!(7usize, "nl")), (tinystr!(1usize, "l"), tinystr!(7usize, "nn")), (tinystr!(1usize, "l"), tinystr!(7usize, "no")), (tinystr!(1usize, "l"), tinystr!(7usize, "or")), (tinystr!(1usize, "l"), tinystr!(7usize, "pcm")), (tinystr!(1usize, "l"), tinystr!(7usize, "pt-PT")), (tinystr!(1usize, "l"), tinystr!(7usize, "qu")), (tinystr!(1usize, "l"), tinystr!(7usize, "ro")), (tinystr!(1usize, "l"), tinystr!(7usize, "ru")), (tinystr!(1usize, "l"), tinystr!(7usize, "sa")), (tinystr!(1usize, "l"), tinystr!(7usize, "sc")), (tinystr!(1usize, "l"), tinystr!(7usize, "sd-Deva")), (tinystr!(1usize, "l"), tinystr!(7usize, "sk")), (tinystr!(1usize, "l"), tinystr!(7usize, "sq")), (tinystr!(1usize, "l"), tinystr!(7usize, "su")), (tinystr!(1usize, "l"), tinystr!(7usize, "syr")), (tinystr!(1usize, "l"), tinystr!(7usize, "ta")), (tinystr!(1usize, "l"), tinystr!(7usize, "to")), (tinystr!(1usize, "l"), tinystr!(7usize, "tt")), (tinystr!(1usize, "l"), tinystr!(7usize, "uk")), (tinystr!(1usize, "l"), tinystr!(7usize, "und")), (tinystr!(1usize, "l"), tinystr!(7usize, "uz")), (tinystr!(1usize, "l"), tinystr!(7usize, "vec")), (tinystr!(1usize, "l"), tinystr!(7usize, "vi")), (tinystr!(1usize, "l"), tinystr!(7usize, "wo")), (tinystr!(1usize, "l"), tinystr!(7usize, "xnr")), (tinystr!(1usize, "m"), tinystr!(7usize, "ar")), (tinystr!(1usize, "m"), tinystr!(7usize, "ast")), (tinystr!(1usize, "m"), tinystr!(7usize, "be")), (tinystr!(1usize, "m"), tinystr!(7usize, "bg")), (tinystr!(1usize, "m"), tinystr!(7usize, "blo")), (tinystr!(1usize, "m"), tinystr!(7usize, "br")), (tinystr!(1usize, "m"), tinystr!(7usize, "brx")), (tinystr!(1usize, "m"), tinystr!(7usize, "ca")), (tinystr!(1usize, "m"), tinystr!(7usize, "ceb")), (tinystr!(1usize, "m"), tinystr!(7usize, "chr")), (tinystr!(1usize, "m"), tinystr!(7usize, "cv")), (tinystr!(1usize, "m"), tinystr!(7usize, "de")), (tinystr!(1usize, "m"), tinystr!(7usize, "doi")), (tinystr!(1usize, "m"), tinystr!(7usize, "el")), (tinystr!(1usize, "m"), tinystr!(7usize, "en")), (tinystr!(1usize, "m"), tinystr!(7usize, "en-MV")), (tinystr!(1usize, "m"), tinystr!(7usize, "es")), (tinystr!(1usize, "m"), tinystr!(7usize, "eu")), (tinystr!(1usize, "m"), tinystr!(7usize, "fa")), (tinystr!(1usize, "m"), tinystr!(7usize, "fil")), (tinystr!(1usize, "m"), tinystr!(7usize, "fo")), (tinystr!(1usize, "m"), tinystr!(7usize, "fr")), (tinystr!(1usize, "m"), tinystr!(7usize, "gl")), (tinystr!(1usize, "m"), tinystr!(7usize, "ha")), (tinystr!(1usize, "m"), tinystr!(7usize, "he")), (tinystr!(1usize, "m"), tinystr!(7usize, "hi")), (tinystr!(1usize, "m"), tinystr!(7usize, "hi-Latn")), (tinystr!(1usize, "m"), tinystr!(7usize, "hy")), (tinystr!(1usize, "m"), tinystr!(7usize, "ig")), (tinystr!(1usize, "m"), tinystr!(7usize, "is")), (tinystr!(1usize, "m"), tinystr!(7usize, "it")), (tinystr!(1usize, "m"), tinystr!(7usize, "jv")), (tinystr!(1usize, "m"), tinystr!(7usize, "ka")), (tinystr!(1usize, "m"), tinystr!(7usize, "kea")), (tinystr!(1usize, "m"), tinystr!(7usize, "kk")), (tinystr!(1usize, "m"), tinystr!(7usize, "km")), (tinystr!(1usize, "m"), tinystr!(7usize, "ks")), (tinystr!(1usize, "m"), tinystr!(7usize, "ks-Deva")), (tinystr!(1usize, "m"), tinystr!(7usize, "kxv")), (tinystr!(1usize, "m"), tinystr!(7usize, "lo")), (tinystr!(1usize, "m"), tinystr!(7usize, "mai")), (tinystr!(1usize, "m"), tinystr!(7usize, "mk")), (tinystr!(1usize, "m"), tinystr!(7usize, "mni")), (tinystr!(1usize, "m"), tinystr!(7usize, "mr")), (tinystr!(1usize, "m"), tinystr!(7usize, "ms")), (tinystr!(1usize, "m"), tinystr!(7usize, "ne")), (tinystr!(1usize, "m"), tinystr!(7usize, "nl")), (tinystr!(1usize, "m"), tinystr!(7usize, "no")), (tinystr!(1usize, "m"), tinystr!(7usize, "or")), (tinystr!(1usize, "m"), tinystr!(7usize, "pa")), (tinystr!(1usize, "m"), tinystr!(7usize, "pl")), (tinystr!(1usize, "m"), tinystr!(7usize, "pt-PT")), (tinystr!(1usize, "m"), tinystr!(7usize, "ro")), (tinystr!(1usize, "m"), tinystr!(7usize, "ru")), (tinystr!(1usize, "m"), tinystr!(7usize, "sa")), (tinystr!(1usize, "m"), tinystr!(7usize, "sc")), (tinystr!(1usize, "m"), tinystr!(7usize, "sd-Deva")), (tinystr!(1usize, "m"), tinystr!(7usize, "sk")), (tinystr!(1usize, "m"), tinystr!(7usize, "sl")), (tinystr!(1usize, "m"), tinystr!(7usize, "sq")), (tinystr!(1usize, "m"), tinystr!(7usize, "su")), (tinystr!(1usize, "m"), tinystr!(7usize, "syr")), (tinystr!(1usize, "m"), tinystr!(7usize, "ta")), (tinystr!(1usize, "m"), tinystr!(7usize, "to")), (tinystr!(1usize, "m"), tinystr!(7usize, "tt")), (tinystr!(1usize, "m"), tinystr!(7usize, "ug")), (tinystr!(1usize, "m"), tinystr!(7usize, "uk")), (tinystr!(1usize, "m"), tinystr!(7usize, "und")), (tinystr!(1usize, "m"), tinystr!(7usize, "uz")), (tinystr!(1usize, "m"), tinystr!(7usize, "vec")), (tinystr!(1usize, "m"), tinystr!(7usize, "vi")), (tinystr!(1usize, "m"), tinystr!(7usize, "wo")), (tinystr!(1usize, "m"), tinystr!(7usize, "xnr")), (tinystr!(1usize, "s"), tinystr!(7usize, "ar")), (tinystr!(1usize, "s"), tinystr!(7usize, "be")), (tinystr!(1usize, "s"), tinystr!(7usize, "bg")), (tinystr!(1usize, "s"), tinystr!(7usize, "blo")), (tinystr!(1usize, "s"), tinystr!(7usize, "brx")), (tinystr!(1usize, "s"), tinystr!(7usize, "ceb")), (tinystr!(1usize, "s"), tinystr!(7usize, "chr")), (tinystr!(1usize, "s"), tinystr!(7usize, "cv")), (tinystr!(1usize, "s"), tinystr!(7usize, "de")), (tinystr!(1usize, "s"), tinystr!(7usize, "doi")), (tinystr!(1usize, "s"), tinystr!(7usize, "el")), (tinystr!(1usize, "s"), tinystr!(7usize, "en")), (tinystr!(1usize, "s"), tinystr!(7usize, "en-MV")), (tinystr!(1usize, "s"), tinystr!(7usize, "es")), (tinystr!(1usize, "s"), tinystr!(7usize, "eu")), (tinystr!(1usize, "s"), tinystr!(7usize, "fa")), (tinystr!(1usize, "s"), tinystr!(7usize, "fil")), (tinystr!(1usize, "s"), tinystr!(7usize, "fo")), (tinystr!(1usize, "s"), tinystr!(7usize, "fr-ML")), (tinystr!(1usize, "s"), tinystr!(7usize, "gl")), (tinystr!(1usize, "s"), tinystr!(7usize, "ha")), (tinystr!(1usize, "s"), tinystr!(7usize, "he")), (tinystr!(1usize, "s"), tinystr!(7usize, "hi")), (tinystr!(1usize, "s"), tinystr!(7usize, "hi-Latn")), (tinystr!(1usize, "s"), tinystr!(7usize, "hy")), (tinystr!(1usize, "s"), tinystr!(7usize, "ig")), (tinystr!(1usize, "s"), tinystr!(7usize, "is")), (tinystr!(1usize, "s"), tinystr!(7usize, "it")), (tinystr!(1usize, "s"), tinystr!(7usize, "jv")), (tinystr!(1usize, "s"), tinystr!(7usize, "ka")), (tinystr!(1usize, "s"), tinystr!(7usize, "kea")), (tinystr!(1usize, "s"), tinystr!(7usize, "kk")), (tinystr!(1usize, "s"), tinystr!(7usize, "km")), (tinystr!(1usize, "s"), tinystr!(7usize, "ks")), (tinystr!(1usize, "s"), tinystr!(7usize, "ks-Deva")), (tinystr!(1usize, "s"), tinystr!(7usize, "kxv")), (tinystr!(1usize, "s"), tinystr!(7usize, "lo")), (tinystr!(1usize, "s"), tinystr!(7usize, "mai")), (tinystr!(1usize, "s"), tinystr!(7usize, "mk")), (tinystr!(1usize, "s"), tinystr!(7usize, "mni")), (tinystr!(1usize, "s"), tinystr!(7usize, "mr")), (tinystr!(1usize, "s"), tinystr!(7usize, "ms")), (tinystr!(1usize, "s"), tinystr!(7usize, "ne")), (tinystr!(1usize, "s"), tinystr!(7usize, "nl")), (tinystr!(1usize, "s"), tinystr!(7usize, "no")), (tinystr!(1usize, "s"), tinystr!(7usize, "or")), (tinystr!(1usize, "s"), tinystr!(7usize, "pa")), (tinystr!(1usize, "s"), tinystr!(7usize, "pl")), (tinystr!(1usize, "s"), tinystr!(7usize, "pt-PT")), (tinystr!(1usize, "s"), tinystr!(7usize, "ro")), (tinystr!(1usize, "s"), tinystr!(7usize, "ru")), (tinystr!(1usize, "s"), tinystr!(7usize, "sa")), (tinystr!(1usize, "s"), tinystr!(7usize, "sc")), (tinystr!(1usize, "s"), tinystr!(7usize, "sd-Deva")), (tinystr!(1usize, "s"), tinystr!(7usize, "sl")), (tinystr!(1usize, "s"), tinystr!(7usize, "sq")), (tinystr!(1usize, "s"), tinystr!(7usize, "su")), (tinystr!(1usize, "s"), tinystr!(7usize, "syr")), (tinystr!(1usize, "s"), tinystr!(7usize, "ta")), (tinystr!(1usize, "s"), tinystr!(7usize, "tt")), (tinystr!(1usize, "s"), tinystr!(7usize, "ug")), (tinystr!(1usize, "s"), tinystr!(7usize, "uk")), (tinystr!(1usize, "s"), tinystr!(7usize, "und")), (tinystr!(1usize, "s"), tinystr!(7usize, "uz")), (tinystr!(1usize, "s"), tinystr!(7usize, "vec")), (tinystr!(1usize, "s"), tinystr!(7usize, "vi")), (tinystr!(1usize, "s"), tinystr!(7usize, "wo")), (tinystr!(1usize, "s"), tinystr!(7usize, "xnr"))]
                },
                {
                    type S = <icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                    const _F_AR: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \x80\0\0") } } };
                    const _F_AST: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0,\0\0 \x80\0\0") } } };
                    const _F_EL: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0-\0\0 \x80\0\0") } } };
                    const _F_EN_MV: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\0\0") } } };
                    const _F_EU: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0(\x80\0\0\0\0)") } } };
                    const _F_FA: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \0\x063\0\x06'\0\x069\0\x06*\0\0 \x80\0\0") } } };
                    const _F_VI: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\0\0\0 \x80\0\x01") } } };
                    const _F_XNR: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\t\x1C\0\tK\0\0 \x80\0\0") } } };
                    const _L_NN: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0k\0\0l\0\0.\0\0 \x80\0\0") } } };
                    const _M_FA: &S = &icu::datetime::provider::neo::DateTimePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0 \x0F\0\0 \x80\0\0") } } };
                    &[_F_AR, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_EL, _F_AST, _F_EN_MV, _F_AST, _F_EU, _F_FA, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_EN_MV, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AR, _F_AST, _F_AST, _F_AST, _F_AST, _F_EN_MV, _F_AST, _F_AST, _F_VI, _F_EL, _F_XNR, _F_AR, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_EL, _F_AST, _F_EN_MV, _F_AST, _F_EU, _F_FA, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _L_NN, _F_AST, _F_AST, _F_AST, _F_AST, _F_VI, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AR, _F_AST, _F_AST, _F_AST, _F_AST, _F_EN_MV, _F_AST, _F_AST, _F_VI, _F_EL, _F_XNR, _F_AR, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_EN_MV, _F_AST, _F_EU, _M_FA, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_EN_MV, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AR, _F_AST, _F_AST, _F_AST, _F_AR, _F_AST, _F_EN_MV, _F_AST, _F_AST, _F_VI, _F_EL, _F_AST, _F_AR, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_EN_MV, _F_AST, _F_EU, _M_FA, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_EN_MV, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AST, _F_AR, _F_AST, _F_AST, _F_AR, _F_AST, _F_EN_MV, _F_AST, _F_AST, _F_VI, _F_EL, _F_AST]
                },
            );
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::DateTimePatternV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::DateTimePatternV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_DATE_TIME_PATTERN_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_DATE_TIME_PATTERN_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::datetime::provider::neo::DateTimePatternV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_date_time_pattern_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::neo::DateTimePatternV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_DATE_TIME_PATTERN_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_date_time_pattern_v1_marker as impl_date_time_pattern_v1_marker;
