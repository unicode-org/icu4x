// @generated
/// Implement `DataProvider<IndianYearNamesV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 2344B[^1] for the lookup data structure (136 data identifiers)
/// * 2471B[^1] for the actual data (34 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_indian_year_names_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_INDIAN_YEAR_NAMES_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::AttributesAndLocale<1usize, 8usize>, icu::datetime::provider::neo::IndianYearNamesV1Marker> = icu_provider_baked::binary_search::Data(
                {
                    use icu_provider_baked::binary_search::tinystr::tinystr;
                    &[(tinystr!(1usize, "3"), tinystr!(8usize, "as")), (tinystr!(1usize, "3"), tinystr!(8usize, "bn")), (tinystr!(1usize, "3"), tinystr!(8usize, "brx")), (tinystr!(1usize, "3"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(1usize, "3"), tinystr!(8usize, "cs")), (tinystr!(1usize, "3"), tinystr!(8usize, "el")), (tinystr!(1usize, "3"), tinystr!(8usize, "es")), (tinystr!(1usize, "3"), tinystr!(8usize, "es-419")), (tinystr!(1usize, "3"), tinystr!(8usize, "fa")), (tinystr!(1usize, "3"), tinystr!(8usize, "ff-Adlm")), (tinystr!(1usize, "3"), tinystr!(8usize, "fy")), (tinystr!(1usize, "3"), tinystr!(8usize, "gu")), (tinystr!(1usize, "3"), tinystr!(8usize, "he")), (tinystr!(1usize, "3"), tinystr!(8usize, "hi")), (tinystr!(1usize, "3"), tinystr!(8usize, "id")), (tinystr!(1usize, "3"), tinystr!(8usize, "ja")), (tinystr!(1usize, "3"), tinystr!(8usize, "kn")), (tinystr!(1usize, "3"), tinystr!(8usize, "kok")), (tinystr!(1usize, "3"), tinystr!(8usize, "ks")), (tinystr!(1usize, "3"), tinystr!(8usize, "lo")), (tinystr!(1usize, "3"), tinystr!(8usize, "mai")), (tinystr!(1usize, "3"), tinystr!(8usize, "mk")), (tinystr!(1usize, "3"), tinystr!(8usize, "ml")), (tinystr!(1usize, "3"), tinystr!(8usize, "mr")), (tinystr!(1usize, "3"), tinystr!(8usize, "ne")), (tinystr!(1usize, "3"), tinystr!(8usize, "no")), (tinystr!(1usize, "3"), tinystr!(8usize, "or")), (tinystr!(1usize, "3"), tinystr!(8usize, "pa")), (tinystr!(1usize, "3"), tinystr!(8usize, "ps")), (tinystr!(1usize, "3"), tinystr!(8usize, "ru")), (tinystr!(1usize, "3"), tinystr!(8usize, "sd")), (tinystr!(1usize, "3"), tinystr!(8usize, "sk")), (tinystr!(1usize, "3"), tinystr!(8usize, "sr")), (tinystr!(1usize, "3"), tinystr!(8usize, "sr-Latn")), (tinystr!(1usize, "3"), tinystr!(8usize, "sv")), (tinystr!(1usize, "3"), tinystr!(8usize, "ta")), (tinystr!(1usize, "3"), tinystr!(8usize, "te")), (tinystr!(1usize, "3"), tinystr!(8usize, "th")), (tinystr!(1usize, "3"), tinystr!(8usize, "und")), (tinystr!(1usize, "3"), tinystr!(8usize, "ur")), (tinystr!(1usize, "3"), tinystr!(8usize, "yue")), (tinystr!(1usize, "3"), tinystr!(8usize, "yue-Hans")), (tinystr!(1usize, "3"), tinystr!(8usize, "zh")), (tinystr!(1usize, "3"), tinystr!(8usize, "zh-Hant")), (tinystr!(1usize, "4"), tinystr!(8usize, "as")), (tinystr!(1usize, "4"), tinystr!(8usize, "bn")), (tinystr!(1usize, "4"), tinystr!(8usize, "brx")), (tinystr!(1usize, "4"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(1usize, "4"), tinystr!(8usize, "cs")), (tinystr!(1usize, "4"), tinystr!(8usize, "el")), (tinystr!(1usize, "4"), tinystr!(8usize, "es")), (tinystr!(1usize, "4"), tinystr!(8usize, "es-419")), (tinystr!(1usize, "4"), tinystr!(8usize, "fa")), (tinystr!(1usize, "4"), tinystr!(8usize, "ff-Adlm")), (tinystr!(1usize, "4"), tinystr!(8usize, "fy")), (tinystr!(1usize, "4"), tinystr!(8usize, "gu")), (tinystr!(1usize, "4"), tinystr!(8usize, "he")), (tinystr!(1usize, "4"), tinystr!(8usize, "hi")), (tinystr!(1usize, "4"), tinystr!(8usize, "id")), (tinystr!(1usize, "4"), tinystr!(8usize, "ja")), (tinystr!(1usize, "4"), tinystr!(8usize, "kn")), (tinystr!(1usize, "4"), tinystr!(8usize, "kok")), (tinystr!(1usize, "4"), tinystr!(8usize, "ks")), (tinystr!(1usize, "4"), tinystr!(8usize, "lo")), (tinystr!(1usize, "4"), tinystr!(8usize, "mai")), (tinystr!(1usize, "4"), tinystr!(8usize, "mk")), (tinystr!(1usize, "4"), tinystr!(8usize, "ml")), (tinystr!(1usize, "4"), tinystr!(8usize, "mr")), (tinystr!(1usize, "4"), tinystr!(8usize, "ne")), (tinystr!(1usize, "4"), tinystr!(8usize, "no")), (tinystr!(1usize, "4"), tinystr!(8usize, "or")), (tinystr!(1usize, "4"), tinystr!(8usize, "pa")), (tinystr!(1usize, "4"), tinystr!(8usize, "ps")), (tinystr!(1usize, "4"), tinystr!(8usize, "ru")), (tinystr!(1usize, "4"), tinystr!(8usize, "sd")), (tinystr!(1usize, "4"), tinystr!(8usize, "sk")), (tinystr!(1usize, "4"), tinystr!(8usize, "sr")), (tinystr!(1usize, "4"), tinystr!(8usize, "sr-Latn")), (tinystr!(1usize, "4"), tinystr!(8usize, "sv")), (tinystr!(1usize, "4"), tinystr!(8usize, "ta")), (tinystr!(1usize, "4"), tinystr!(8usize, "te")), (tinystr!(1usize, "4"), tinystr!(8usize, "th")), (tinystr!(1usize, "4"), tinystr!(8usize, "und")), (tinystr!(1usize, "4"), tinystr!(8usize, "ur")), (tinystr!(1usize, "4"), tinystr!(8usize, "yue")), (tinystr!(1usize, "4"), tinystr!(8usize, "yue-Hans")), (tinystr!(1usize, "4"), tinystr!(8usize, "zh")), (tinystr!(1usize, "4"), tinystr!(8usize, "zh-Hant")), (tinystr!(1usize, "5"), tinystr!(8usize, "as")), (tinystr!(1usize, "5"), tinystr!(8usize, "bn")), (tinystr!(1usize, "5"), tinystr!(8usize, "brx")), (tinystr!(1usize, "5"), tinystr!(8usize, "bs-Cyrl")), (tinystr!(1usize, "5"), tinystr!(8usize, "cs")), (tinystr!(1usize, "5"), tinystr!(8usize, "el")), (tinystr!(1usize, "5"), tinystr!(8usize, "es")), (tinystr!(1usize, "5"), tinystr!(8usize, "es-419")), (tinystr!(1usize, "5"), tinystr!(8usize, "fa")), (tinystr!(1usize, "5"), tinystr!(8usize, "ff-Adlm")), (tinystr!(1usize, "5"), tinystr!(8usize, "fi")), (tinystr!(1usize, "5"), tinystr!(8usize, "fr")), (tinystr!(1usize, "5"), tinystr!(8usize, "fr-CA")), (tinystr!(1usize, "5"), tinystr!(8usize, "fy")), (tinystr!(1usize, "5"), tinystr!(8usize, "gu")), (tinystr!(1usize, "5"), tinystr!(8usize, "he")), (tinystr!(1usize, "5"), tinystr!(8usize, "hi")), (tinystr!(1usize, "5"), tinystr!(8usize, "id")), (tinystr!(1usize, "5"), tinystr!(8usize, "ja")), (tinystr!(1usize, "5"), tinystr!(8usize, "kn")), (tinystr!(1usize, "5"), tinystr!(8usize, "kok")), (tinystr!(1usize, "5"), tinystr!(8usize, "ks")), (tinystr!(1usize, "5"), tinystr!(8usize, "lo")), (tinystr!(1usize, "5"), tinystr!(8usize, "mai")), (tinystr!(1usize, "5"), tinystr!(8usize, "mk")), (tinystr!(1usize, "5"), tinystr!(8usize, "ml")), (tinystr!(1usize, "5"), tinystr!(8usize, "mr")), (tinystr!(1usize, "5"), tinystr!(8usize, "ne")), (tinystr!(1usize, "5"), tinystr!(8usize, "no")), (tinystr!(1usize, "5"), tinystr!(8usize, "or")), (tinystr!(1usize, "5"), tinystr!(8usize, "pa")), (tinystr!(1usize, "5"), tinystr!(8usize, "ps")), (tinystr!(1usize, "5"), tinystr!(8usize, "ru")), (tinystr!(1usize, "5"), tinystr!(8usize, "sc")), (tinystr!(1usize, "5"), tinystr!(8usize, "sd")), (tinystr!(1usize, "5"), tinystr!(8usize, "sk")), (tinystr!(1usize, "5"), tinystr!(8usize, "sr")), (tinystr!(1usize, "5"), tinystr!(8usize, "sr-Latn")), (tinystr!(1usize, "5"), tinystr!(8usize, "sv")), (tinystr!(1usize, "5"), tinystr!(8usize, "ta")), (tinystr!(1usize, "5"), tinystr!(8usize, "te")), (tinystr!(1usize, "5"), tinystr!(8usize, "th")), (tinystr!(1usize, "5"), tinystr!(8usize, "und")), (tinystr!(1usize, "5"), tinystr!(8usize, "ur")), (tinystr!(1usize, "5"), tinystr!(8usize, "yue")), (tinystr!(1usize, "5"), tinystr!(8usize, "yue-Hans")), (tinystr!(1usize, "5"), tinystr!(8usize, "zh")), (tinystr!(1usize, "5"), tinystr!(8usize, "zh-Hant"))]
                },
                {
                    type S = <icu::datetime::provider::neo::IndianYearNamesV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                    const _3_AS: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xA6\xB6\xE0\xA6\x95") })
                    });
                    const _3_BN: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xA6\xB8\xE0\xA6\xBE\xE0\xA6\xB2") })
                    });
                    const _3_BRX: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xA4\xB8\xE0\xA4\xBE\xE0\xA4\x95\xE0\xA4\xBE") })
                    });
                    const _3_BS_CYRL: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD0\xA1\xD0\x90\xD0\x9A\xD0\x90") })
                    });
                    const _3_CS: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC5\xA0aka") })
                    });
                    const _3_EL: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xCE\xA3\xCE\xAC\xCE\xBA\xCE\xB1") })
                    });
                    const _3_ES: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") })
                    });
                    const _3_ES_419: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0Saka") })
                    });
                    const _3_FA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD8\xAA\xD9\x82\xD9\x88\xDB\x8C\xD9\x85 \xD8\xB3\xD8\xA7\xDA\xA9\xD8\xA7") })
                    });
                    const _3_FF_ADLM: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xF0\x9E\xA4\x85\xF0\x9E\xA4\xA2\xF0\x9E\xA4\xB3\xF0\x9E\xA4\xA2") })
                    });
                    const _3_FY: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0SAKA") })
                    });
                    const _3_GU: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xAA\xB6\xE0\xAA\x95") })
                    });
                    const _3_HE: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD7\xA1\xD7\x90\xD7\xA7\xD7\x90") })
                    });
                    const _3_HI: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xA4\xB6\xE0\xA4\x95") })
                    });
                    const _3_JA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE3\x82\xB5\xE3\x82\xAB") })
                    });
                    const _3_KN: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xB2\xB6\xE0\xB2\x95") })
                    });
                    const _3_KS: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD8\xB3\xD8\xA7\xDA\xA9\xD8\xA7") })
                    });
                    const _3_LO: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xBA\xA1.\xE0\xBA\xAA.") })
                    });
                    const _3_MK: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD0\xA1\xD0\xB0\xD0\xBA\xD0\xB0") })
                    });
                    const _3_ML: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xB4\xB6\xE0\xB4\x95") })
                    });
                    const _3_NE: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xA4\xB8\xE0\xA4\xBE\xE0\xA4\x95") })
                    });
                    const _3_OR: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xAC\xB8\xE0\xAC\xBE\xE0\xAC\x95\xE0\xAC\xBE") })
                    });
                    const _3_PA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xA8\xB8\xE0\xA8\xBE\xE0\xA8\x95\xE0\xA8\xBE") })
                    });
                    const _3_SD: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xD8\xB3\xD8\xA7\xDA\xAA\xD8\xA7") })
                    });
                    const _3_TA: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xAE\x9A\xE0\xAE\xBE\xE0\xAE\x95\xE0\xAE\xBE") })
                    });
                    const _3_TE: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xB0\xB6\xE0\xB0\x95") })
                    });
                    const _3_TH: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xB8\xA1.\xE0\xB8\xA8.") })
                    });
                    const _3_YUE: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE5\x8D\xB0\xE5\xBA\xA6\xE6\x9B\x86") })
                    });
                    const _3_YUE_HANS: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE5\x8D\xB0\xE5\xBA\xA6\xE5\x8E\x86") })
                    });
                    const _5_FI: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0Saka-ajanlaskua") })
                    });
                    const _5_FR: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC3\xA8re Saka") })
                    });
                    const _5_GU: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xE0\xAA\xB8\xE0\xAA\xBE\xE0\xAA\x95\xE0\xAA\xBE") })
                    });
                    const _5_SC: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0era Saka") })
                    });
                    const _5_SV: &S = &icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0saka") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0Saka-eran") })
                    });
                    &[_3_AS, _3_BN, _3_BRX, _3_BS_CYRL, _3_CS, _3_EL, _3_ES, _3_ES_419, _3_FA, _3_FF_ADLM, _3_FY, _3_GU, _3_HE, _3_HI, _3_FY, _3_JA, _3_KN, _3_HI, _3_KS, _3_LO, _3_HI, _3_MK, _3_ML, _3_HI, _3_NE, _3_ES, _3_OR, _3_PA, _3_KS, _3_MK, _3_SD, _3_CS, _3_BS_CYRL, _3_FY, _3_FY, _3_TA, _3_TE, _3_TH, _3_ES_419, _3_KS, _3_YUE, _3_YUE_HANS, _3_YUE_HANS, _3_YUE, _3_AS, _3_BN, _3_BRX, _3_BS_CYRL, _3_CS, _3_EL, _3_ES, _3_ES_419, _3_FA, _3_FF_ADLM, _3_FY, _3_GU, _3_HE, _3_HI, _3_FY, _3_JA, _3_KN, _3_HI, _3_KS, _3_LO, _3_HI, _3_MK, _3_ML, _3_HI, _3_NE, _3_ES, _3_OR, _3_PA, _3_KS, _3_MK, _3_SD, _3_CS, _3_BS_CYRL, _3_FY, _3_FY, _3_TA, _3_TE, _3_TH, _3_ES_419, _3_KS, _3_YUE, _3_YUE_HANS, _3_YUE_HANS, _3_YUE, _3_AS, _3_BN, _3_BRX, _3_BS_CYRL, _3_CS, _3_EL, _3_ES, _3_ES_419, _3_FA, _3_FF_ADLM, _5_FI, _5_FR, _3_ES_419, _3_FY, _5_GU, _3_HE, _3_HI, _3_FY, _3_JA, _3_KN, _3_HI, _3_KS, _3_LO, _3_HI, _3_MK, _3_ML, _3_HI, _3_NE, _3_ES, _3_OR, _3_PA, _3_KS, _3_MK, _5_SC, _3_SD, _3_CS, _3_BS_CYRL, _3_FY, _5_SV, _3_TA, _3_TE, _3_TH, _3_ES_419, _3_KS, _3_YUE, _3_YUE_HANS, _3_YUE_HANS, _3_YUE]
                },
            );
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::IndianYearNamesV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::IndianYearNamesV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_INDIAN_YEAR_NAMES_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::IndianYearNamesV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_INDIAN_YEAR_NAMES_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::datetime::provider::neo::IndianYearNamesV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_indian_year_names_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::neo::IndianYearNamesV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_INDIAN_YEAR_NAMES_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_indian_year_names_v1_marker as impl_indian_year_names_v1_marker;
