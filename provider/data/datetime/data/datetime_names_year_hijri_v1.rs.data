// @generated
/// Implement `DataProvider<DatetimeNamesYearHijriV1>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 636B for the lookup data structure (113 data identifiers)
/// * 2549B[^1] for the actual data (49 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
///
/// This macro requires the following crates:
/// * `icu`
/// * `icu_provider`
/// * `icu_provider/baked`
/// * `zerovec`
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_datetime_names_year_hijri_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.82"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.82"]
        impl $provider {
            const DATA_DATETIME_NAMES_YEAR_HIJRI_V1: icu_provider::baked::zerotrie::Data<icu::datetime::provider::neo::DatetimeNamesYearHijriV1> = {
                const TRIE: icu_provider::baked::zerotrie::ZeroTrieSimpleAscii<&'static [u8]> = icu_provider::baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xE1qabcefhiklmnrstuyz\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x02\x0B.:L\x94\xBB\xD4\xF2\xF7\x1B\x1F+k\xA7\xE4\x07r\x1E\xC3345\x01\x02\x80\x80\x80\xC3ans\x04\x0E\x1E5\x90\x0F\x1E\xC3345\x01\x02\x81\x81\x81-Cyrl\x1E\xC3345\x01\x02\x82\x82\x82v\x1E\xC3345\x01\x02\x83\x83\x90\x10\xC2ln\n\x1E\xC3345\x01\x02\x84\x84\x84\x1E5\x90\x11\xC5afiry\x0B\x1A\x1E4\x1E\xC3345\x01\x02\x85\x85\x90\x12-Adlm\x1E\xC3345\x01\x02\x86\x86\x86\x1E5\x90\x13\xC2\x1E-\x07\xC245\x01\x8B\x90\x14CA\x1E\xC245\x02\x90\t\x90\x15\x1E\xC3345\x01\x02\x87\x87\x87\xC3eiu\x0B\x17\x1E\xC3345\x01\x02\x88\x88\x90\x16-Latn\x1E\xC234\x01\x89\x89\x1E\xC3345\x01\x02\x8A\x8A\x8A\xC2ds\n\x1E\xC3345\x01\x02\x8B\x8B\x8B\x1E\xC3345\x01\x02\x8C\x8C\x90\x17\xC3kou\n\x0E\x1E\xC3345\x01\x02\x8D\x8D\x8D\x1E5\x90\x18\x1E\xC3345\x01\x02\x8E\x8E\x8Ev\x1E5\x90\x19\xC3lrs\n\x17\x1E\xC3345\x01\x02\x8F\x8F\x8F\x1E\xC3345\x02\x04\x90\0\x90\0\x90\x1A\x1E\xC234\x01\x8B\x8Bl\x1E5\x87\xC2ou\x04\x1E5\x90\x1B\x1E5\x90\x1C\xC5chqrv\r\x1B(2\x1E\xC3345\x02\x04\x90\x01\x90\x0E\x90\x1Dn\x1E\xC3345\x02\x04\x90\x02\x90\x02\x90\x1E\x1E\xC3345\x02\x04\x90\x03\x90\x03\x90\x03\x1E\xC3345\x01\x02\x82\x82\x82\x1E5\x90\x1F\xC4ghkr\r\x1A'\x1E\xC3345\x02\x04\x90\x04\x90\x04\x90\x04\x1E\xC3345\x02\x04\x90\x05\x90\x05\x90 \x1E\xC3345\x02\x04\x90\x06\x90\x06\x90\x06\x1E\xC3345\x02\x04\x90\x07\x90\x07\x90\x07\xC4gnrz\r\x1B(\x1E\xC3345\x02\x04\x90\x08\x90\x08\x90\x08d\x1E\xC3345\x02\x04\x90\t\x90\t\x90\t\x1E\xC3345\x02\x04\x90\n\x90\n\x90\n\x1E\xC3345\x02\x04\x90\x0B\x90\x0B\x90\x0Bue\xC2\x1E-\x0C\xC3345\x02\x04\x90\x0C\x90\x0C\x90\x0CHans\x1E\xC3345\x02\x04\x90\r\x90\r\x90\rh\xC2\x1E-\x0C\xC3345\x02\x04\x90\r\x90\r\x90\rHant\x1E\xC3345\x02\x04\x90\x0C\x90\x0C\x90\x0C" };
                const VALUES: &'static [<icu::datetime::provider::neo::DatetimeNamesYearHijriV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct] = &[icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x04\0\xD9\x87\xD9\x80BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\t\0\xE0\xA6\xAF\xE0\xA7\x81\xE0\xA6\x97BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x04\0\xD0\x90\xD0\xA5BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x07\0\xD1\x85. \xD1\x85.\xD1\x85-\xD1\x87.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x06\0\xCE\x95.\xCE\x95.BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\t\0\xD9\x87\xE2\x80\x8D.\xD9\x82.BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x08\0\xF0\x9E\xA4\x87\xF0\x9E\xA4\x8ABH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x0E\0Sa\xCA\xBBna HizjriaBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\n\0\xD7\x94\xD7\x92\xD7\xB3\xD7\xA8\xD7\x94BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x05\0HijriBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x02\0MFBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x01\0HBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x02\0EHBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x04\0\xD0\xA5\xD0\x96BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x06\0Hicr\xC3\xAEBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x0C\0\xE0\xB4\xB9\xE0\xB4\xBF\xE0\xB4\x9C\xE0\xB4\xB1BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x0B\0\xE0\xA4\xB9\xE0\xA4\xBF.\xE0\xA4\xB5.BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x04\0e.E.a.E.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x08\0\xE1\x80\x95.\xE1\x82\x81.\xE1\x80\xA2.\xE1\x82\x81.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x02\0H.BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x08\0\xD0\xA1\xD0\x90\xD0\x9D\xD0\x90BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x08\0\xE0\xB8\xAE.\xE0\xB8\xA8.BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x02\0HSBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x05\0HicriBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x0E\0\xDA\xBE\xD9\x89\xD8\xAC\xD8\xB1\xD9\x89\xD9\x8A\xDB\x95BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x02\0AHBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x08\0\xDB\x81\xD8\xAC\xD8\xB1\xDB\x8CBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x06\0hijriyBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x0C\0\xE4\xBC\x8A\xE6\x96\xAF\xE8\x98\xAD\xE6\x9B\x86BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x0C\0\xE4\xBC\x8A\xE6\x96\xAF\xE5\x85\xB0\xE5\x8E\x86BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x01\0EA") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x19\0\xD2\xBA\xD0\xB8\xD0\xB6\xD1\x80\xD3\x99\xD1\x82\xD1\x82\xD3\x99\xD0\xBD \xD2\xBB\xD1\x83\xD2\xA3\xD2\xBA\xD0\xB8\xD0\xB6\xD1\x80\xD3\x99\xD1\x82\xD0\xBA\xD3\x99 \xD1\x82\xD0\xB8\xD0\xBA\xD0\xBB\xD0\xB5\xD0\xBC") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x1D\0\xD1\x85\xD0\xB8\xD0\xB4\xD0\xB6\xD1\x80\xD0\xB0 \xD1\x85\xD1\x8B\xD2\xAB\xD2\xAB\xD3\x91\xD0\xBD\xD1\x85\xD0\xB8\xD1\x85\xD0\xB8\xD0\xB4\xD0\xB6\xD1\x80\xD3\x91\xD1\x87\xD1\x87\xD0\xB5\xD0\xBD") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x0C\0Anno HegiraeBefore Hijrah") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x11\0\xD9\x87\xD8\xAC\xD8\xB1\xDB\x8C \xD9\x82\xD9\x85\xD8\xB1\xDB\x8CBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x11\0hid\xC5\xBEran j\xC3\xA4lkeenBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x13\0\xC3\xA8re de l\xE2\x80\x99H\xC3\xA9gireBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x0C\0Anno HegiraeBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x13\0\xD7\xA9\xD7\xA0\xD7\xAA \xD7\x94\xD7\x99\xD7\x92\xD7\xB3\xD7\xA8\xD7\x94BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x0B\0eftir HijraBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x0C\0\xED\x9E\x88\xEC\xA6\x88\xEB\x9D\xBC\xEB\xA0\xA5BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\r\0p\xC4\x93c hid\xC5\xBErasBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x1C\0\xE0\xA4\xB9\xE0\xA4\xBF\xE0\xA4\x9C\xE0\xA4\xB0\xE0\xA5\x80 \xE0\xA4\xB5\xE0\xA4\xB0\xE0\xA5\x8D\xE0\xA4\xB7BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x04\0A.H.BH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x17\0\xD0\xBF\xD0\xBE\xD1\x81\xD0\xBB\xD0\xB5 \xD1\x85\xD0\xB8\xD0\xB4\xD0\xB6\xD1\x80\xD1\x8BBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x11\0era de s\xE2\x80\x99\xC3\xA8girain antis de s\xE2\x80\x99\xC3\xA8gira") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0!\0\xE1\x80\x95\xE1\x80\xAE\xE1\x82\x81\xE1\x80\xB1\xE1\x80\xB8\xE1\x81\xB5\xE1\x80\xBB\xE1\x80\xAD\xE1\x80\x9B\xE1\x82\x83\xE1\x82\x87\xE1\x80\xA2\xE1\x80\xBD\xE1\x81\xBC\xE1\x80\xBA\xE1\x81\xBC\xE1\x82\x83\xE1\x82\x88 \xE1\x82\x81\xE1\x80\xB1\xE1\x80\xB8\xE1\x81\xB5\xE1\x80\xBB\xE1\x80\xAD\xE1\x80\x9B\xE1\x82\x83\xE1\x82\x87") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0\x0B\0efter HirjaBH") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x02\0-\0\xE0\xB8\xAE\xE0\xB8\xB4\xE0\xB8\x88\xE0\xB9\x80\xE0\xB8\xA3\xE0\xB8\xB2\xE0\xB8\xB0\xE0\xB8\xAB\xE0\xB9\x8C\xE0\xB8\xA8\xE0\xB8\xB1\xE0\xB8\x81\xE0\xB8\xA3\xE0\xB8\xB2\xE0\xB8\x8ABH") })];
                unsafe { icu_provider::baked::zerotrie::Data::from_trie_and_values_unchecked(TRIE, VALUES) }
            };
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::DatetimeNamesYearHijriV1> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::DatetimeNamesYearHijriV1>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_DATETIME_NAMES_YEAR_HIJRI_V1, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::DatetimeNamesYearHijriV1 as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_DATETIME_NAMES_YEAR_HIJRI_V1, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_unknown() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::datetime::provider::neo::DatetimeNamesYearHijriV1 as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload, metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_datetime_names_year_hijri_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::neo::DatetimeNamesYearHijriV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider::baked::DataStore::iter(&Self::DATA_DATETIME_NAMES_YEAR_HIJRI_V1).collect())
            }
        }
    };
    ($ provider : ty , DRY) => {};
    ($ provider : ty , DRY , ITER) => {
        __impl_datetime_names_year_hijri_v1!($provider, ITER);
    };
}
#[doc(inline)]
pub use __impl_datetime_names_year_hijri_v1 as impl_datetime_names_year_hijri_v1;
