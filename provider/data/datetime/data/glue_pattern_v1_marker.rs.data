// @generated
/// Implement `DataProvider<GluePatternV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 1880B for the lookup data structure (426 data identifiers)
/// * 912B[^1] for the actual data (22 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_glue_pattern_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_GLUE_PATTERN_V1_MARKER: icu_provider_baked::zerotrie::Data<icu::datetime::provider::neo::GluePatternV1Marker> = icu_provider_baked::zerotrie::Data { trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xE1xabcdefghijklmnopqrstuvwx\0\0\x01\x01\x01\x02\x02\x02\x02\x02\x03\x03\x04\x04\x04\x04\x04\x05\x05\x06\x06\x06\x06*\xA6\n;\xB6 7\xAD\xEE\xFE\xAD\xC47\x81\x98\xDF\xE8\x18\xD0\x11\x8C\xC0\xD7\xC2rs\x16\x1E\xC3lms\x05\ndt\x80z\x89dt\x80z\x89dt\x80z\x89t\x1E\xC2lm\x05dt\x81z\x8Adt\x81z\x8A\xC5eglrs\x16,Ck\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8Ao\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\xC2\x1Ex\x0E\xC2lm\x05dt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1Eldt\x81z\x8A\xC5aehvy\x0F&=S\x1E\xC2lm\x05dt\x81z\x8Adt\x81z\x8Ab\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8Ar\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1Eldt\x81z\x8A\xC2eo\x16\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8Ai\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\xC4lnsu\x16G]\x1E\xC3lms\x05\ndt\x82z\x8Bdt\x81z\x8Adt\x81z\x8A\xC2\x1E-\x15\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8AMV\x1E\xC3lms\x05\ndt\x83z\x8Cdt\x83z\x8Cdt\x83z\x8C\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x84z\x8Ddt\x84z\x8Ddt\x84z\x8D\xC4aior\x1A1G\x1E\xC3lms\x05\x0Cdt\x85z\x8Edt\x90\x04z\x90\x05dt\x90\x04z\x90\x05l\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\xC2\x1E-\x0E\xC2lm\x05dt\x81z\x8Adt\x81z\x8AML\x1Esdt\x81z\x8Al\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\xC4aeiy\x16,X\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\xC2\x1E-\x15\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8ALatn\x1E\xC2ms\x05dt\x83z\x8Cdt\x83z\x8C\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\xC3gst\x16,\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC2ms\x05dt\x81z\x8Adt\x81z\x8Av\x1E\xC2ms\x05dt\x81z\x8Adt\x81z\x8A\xC6aekmsx\x16-CY\x8C\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8Aa\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\xC2\x1E-\x15\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8ADeva\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8Av\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8Ao\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\xC5aknrs\x17-DZi\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8Ai\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC2ms\x05dt\x81z\x8Adt\x81z\x8A\xC4elno\x0F%,\x1E\xC2ms\x05dt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1Eldt\x86z\x8F\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8Ar\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\xC4aclt\x0F\x17&\x1E\xC2ms\x05dt\x81z\x8Adt\x81z\x8Am\x1Eldt\x81z\x8A\x1E\xC2ms\x05dt\x81z\x8Adt\x81z\x8A-PT\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8Au\x1Eldt\x87z\x90\0\xC2ou\x16\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\xC8acdklquy\x16,GVe{\x91\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A-Deva\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC2lm\x05dt\x81z\x8Adt\x81z\x8A\x1E\xC2ms\x05dt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8Ar\x1E\xC3lms\x05\ndt\x80z\x89dt\x80z\x89dt\x80z\x89\xC3aot\x16%\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC2lm\x05dt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\xC4gknz\x0F%]\x1E\xC2ms\x05dt\x80z\x89dt\x80z\x89\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8Ad\x1E\xC3lms\x10 \xC2dt\t\xC2tz\x03\x83z\x8C\x90\x02z\x90\x03\xC2dt\t\xC2tz\x03\x83z\x8C\x90\x02z\x90\x03\xC2dt\t\xC2tz\x03\x83z\x8C\x90\x02z\x90\x03\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\xC2ei\x17c\x1E\xC3lms\x05\ndt\x81z\x8Adt\x81z\x8Adt\x81z\x8A\x1E\xC3lms\x06\x0Cdt\x87z\x90\0dt\x87z\x90\0dt\x87z\x90\0o\x1E\xC3lms\x05\ndt\x82z\x8Bdt\x82z\x8Bdt\x82z\x8Bnr\x1E\xC3lms\x06\x0Bdt\x88z\x90\x01dt\x81z\x8Adt\x81z\x8A" }, values: &[icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0,\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0-\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0(\x80\0\0\0\0)") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \0\x063\0\x06'\0\x069\0\x06*\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0k\0\0l\0\0.\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\0\0\0 \x80\0\x01") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\t\x1C\0\tK\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0,\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0-\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0(\x80\0\0\0\0)\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0\0 \0\x063\0\x06'\0\x069\0\x06*\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\0k\0\0l\0\0.\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\0\0\0 \x80\0\x01\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \0\t\x1C\0\tK\0\0 \x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\0\0\0 \x80\0\x02") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0 \x0F\0\0 \x80\0\0") } } }, icu::datetime::provider::neo::GluePatternV1 { pattern: icu::datetime::pattern::runtime::GenericPattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\x06\x0C\0 \x0F\0\0 \x80\0\0\0\0 \x80\0\x02") } } }] };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::GluePatternV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::GluePatternV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_GLUE_PATTERN_V1_MARKER, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::GluePatternV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_GLUE_PATTERN_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_default() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::datetime::provider::neo::GluePatternV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_glue_pattern_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::neo::GluePatternV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_GLUE_PATTERN_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_glue_pattern_v1_marker as impl_glue_pattern_v1_marker;
