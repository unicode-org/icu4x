// @generated
/// Implement `DataProvider<DatetimeNamesYearPersianV1>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 353B for the lookup data structure (63 data identifiers)
/// * 1185B[^1] for the actual data (25 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
///
/// This macro requires the following crates:
/// * `icu`
/// * `icu_provider`
/// * `icu_provider/baked`
/// * `zerovec`
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_datetime_names_year_persian_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.83"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.83"]
        impl $provider {
            const DATA_DATETIME_NAMES_YEAR_PERSIAN_V1: icu_provider::baked::zerotrie::Data<icu::datetime::provider::neo::DatetimeNamesYearPersianV1> = {
                const TRIE: icu_provider::baked::zerotrie::ZeroTrieSimpleAscii<&'static [u8]> = icu_provider::baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xE1lacfhlmrstuyz\0\0\0\0\0\0\0\0\0\0\0\x0B\x17W\\u\x80\x9A\xBA\xC5\xDE\xFEr\x1E\xC3345\x01\x02\x80\x80\x80v\x1E\xC3345\x01\x02\x81\x81\x90\x01\xC4afir\x0B\x1A\x1E\x1E\xC3345\x01\x02\x82\x82\x90\x02-Adlm\x1E\xC3345\x01\x02\x83\x83\x83\x1E5\x90\x03\xC2\x1E-\n\xC3345\x01\x02\x84\x84\x90\x03CA\x1E\xC3345\x01\x02\x85\x85\x85e\x1E5\x90\x04\xC2ov\n\x1E\xC3345\x01\x02\x86\x86\x86\x1E\xC3345\x01\x02\x87\x87\x90\x05k\x1E\xC3345\x01\x02\x88\x88\x88\xC2ou\x0B\x1E\xC3345\x01\x02\x89\x89\x90\x03\x1E\xC3345\x01\x02\x8A\x8A\x90\x06\xC3chv\x0B\x16\x1E\xC3345\x01\x02\x8B\x8B\x90\x07n\x1E\xC3345\x01\x02\x8C\x8C\x8C\x1E5\x90\x08h\x1E\xC3345\x01\x02\x8D\x8D\x8D\xC2nz\x0Bd\x1E\xC3345\x01\x02\x85\x85\x85\x1E\xC3345\x01\x02\x8E\x8E\x8Eue\xC2\x1E-\t\xC3345\x01\x02\x8F\x8F\x8FHans\x1E\xC3345\x02\x04\x90\0\x90\0\x90\0h\xC2\x1E-\x0C\xC3345\x02\x04\x90\0\x90\0\x90\0Hant\x1E\xC3345\x01\x02\x8F\x8F\x8F" };
                const VALUES: &'static [<icu::datetime::provider::neo::DatetimeNamesYearPersianV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct] = &[icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD9\x87\xE2\x80\x8D.\xD8\xB4") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD1\x85. \xD1\x85.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD9\x87\xE2\x80\x8D.\xD8\xB4.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xF0\x9E\xA4\x80\xF0\x9E\xA4\x86") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0A. P.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0AP") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xE0\xBA\x9B\xE0\xBA\xB5\xE0\xBB\x80\xE0\xBA\x9B\xE0\xBA\xB5\xE0\xBB\x80\xE0\xBA\x8A\xE0\xBA\x8D") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0pers. gads") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD0\x90\xD0\x9F") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0A.P.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD0\xBF\xD0\xB5\xD1\x80\xD1\x81. \xD0\xB3\xD0\xBE\xD0\xB4") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0a.p.") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xE1\x80\x95\xE1\x80\xAE\xE1\x80\x95\xE1\x82\x83\xE1\x82\x87\xE1\x80\x9E\xE1\x80\xBB\xE1\x82\x83\xE1\x80\xB8") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xE0\xB8\x9B\xE0\xB8\xB5\xE0\xB9\x80\xE0\xB8\x9B\xE0\xB8\xAD\xE0\xB8\xA3\xE0\xB9\x8C\xE0\xB9\x80\xE0\xB8\x8B\xE0\xB8\xB5\xE0\xB8\xA2") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0forsiy") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xE6\xB3\xA2\xE6\x96\xAF\xE6\x9B\x86") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xE6\xB3\xA2\xE6\x96\xAF\xE5\x8E\x86") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD1\x85\xD0\xB8\xD0\xB4\xD0\xB6\xD1\x80\xD0\xB0 \xD1\x85\xD1\x8B\xD2\xAB\xD2\xAB\xD3\x91\xD0\xBD\xD1\x85\xD0\xB8") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD9\x87\xD8\xAC\xD8\xB1\xDB\x8C \xD8\xB4\xD9\x85\xD8\xB3\xDB\x8C") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0Anno Persico") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD7\x94\xD7\xA1\xD7\xA4\xD7\x99\xD7\xA8\xD7\x94 \xD7\x94\xD7\xA4\xD7\xA8\xD7\xA1\xD7\x99\xD7\xAA") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0persie\xC5\xA1u gads") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0\xD0\xBF\xD0\xB5\xD1\x80\xD1\x81\xD0\xB8\xD0\xB4\xD1\x81\xD0\xBA\xD0\xB8\xD0\xB9 \xD0\xB3\xD0\xBE\xD0\xB4") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0annu persianu") }), icu::datetime::provider::neo::YearNames::FixedEras(unsafe { zerovec::vecs::VarZeroVec16::from_bytes_unchecked(b"\x01\0Anno Persarum") })];
                unsafe { icu_provider::baked::zerotrie::Data::from_trie_and_values_unchecked(TRIE, VALUES) }
            };
        }
        #[clippy::msrv = "1.83"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::DatetimeNamesYearPersianV1> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::DatetimeNamesYearPersianV1>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_DATETIME_NAMES_YEAR_PERSIAN_V1, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::datetime::provider::neo::DatetimeNamesYearPersianV1 as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_DATETIME_NAMES_YEAR_PERSIAN_V1, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_unknown() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::datetime::provider::neo::DatetimeNamesYearPersianV1 as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload, metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_datetime_names_year_persian_v1!($provider);
        #[clippy::msrv = "1.83"]
        impl icu_provider::IterableDataProvider<icu::datetime::provider::neo::DatetimeNamesYearPersianV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider::baked::DataStore::iter(&Self::DATA_DATETIME_NAMES_YEAR_PERSIAN_V1).collect())
            }
        }
    };
    ($ provider : ty , DRY) => {};
    ($ provider : ty , DRY , ITER) => {
        __impl_datetime_names_year_persian_v1!($provider, ITER);
    };
}
#[doc(inline)]
pub use __impl_datetime_names_year_persian_v1 as impl_datetime_names_year_persian_v1;
