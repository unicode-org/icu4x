// @generated
/// Implement `DataProvider<CalendarWeekV1>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 292B for the lookup data structure (72 data identifiers)
/// * 20B[^1] for the actual data (10 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
///
/// This macro requires the following crates:
/// * `icu`
/// * `icu_provider`
/// * `icu_provider/baked`
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_calendar_week_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.82"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.82"]
        impl $provider {
            const DATA_CALENDAR_WEEK_V1: icu_provider::baked::zerotrie::Data<icu::calendar::provider::CalendarWeekV1> = {
                const TRIE: icu_provider::baked::zerotrie::ZeroTrieSimpleAscii<&'static [u8]> = icu_provider::baked::zerotrie::ZeroTrieSimpleAscii { store: b"und\x80-\xD7ABCDEGHIJKLMNOPQSTUVWYZ\t\x1E$06<BQZfl\x81\x87\x89\x9E\xA0\xAF\xB8\xC1\xC7\xC9\xCB\xC3FGS\x01\x02\x81\x82\x82\xC7DHRSTWZ\x01\x02\x03\x04\x05\x06\x82\x83\x82\x82\x82\x82\x82\xC2AO\x01\x82\x82\xC4JMOZ\x01\x02\x03\x84\x82\x82\x83\xC2GT\x01\x83\x82\xC2TU\x01\x82\x82\xC2KN\x01\x82\x82\xC5DLNQR\x01\x02\x03\x04\x82\x85\x86\x83\x87\xC3MOP\x01\x02\x82\x83\x82\xC4EHRW\x01\x02\x03\x82\x82\x82\x83\xC2AY\x01\x82\x83\xC7HMOTVXZ\x01\x02\x03\x04\x05\x06\x82\x82\x82\x82\x88\x82\x82\xC2IP\x01\x82\x82M\x83\xC7AEHKRTY\x01\x02\x03\x04\x05\x06\x82\x82\x82\x82\x82\x82\x82A\x83\xC5ADGVY\x01\x02\x03\x04\x85\x83\x82\x82\x83\xC3HTW\x01\x02\x82\x82\x82\xC3GMS\x01\x02\x89\x82\x82\xC2EI\x01\x82\x82S\x82E\x85\xC2AW\x01\x82\x82" };
                const VALUES: &'static [<icu::calendar::provider::CalendarWeekV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct] = &[icu::calendar::provider::WeekData { first_weekday: icu::calendar::types::Weekday::Monday, weekend: icu::calendar::provider::WeekdaySet::new(&[icu::calendar::types::Weekday::Saturday, icu::calendar::types::Weekday::Sunday]) }, icu::calendar::provider::WeekData { first_weekday: icu::calendar::types::Weekday::Saturday, weekend: icu::calendar::provider::WeekdaySet::new(&[icu::calendar::types::Weekday::Thursday, icu::calendar::types::Weekday::Friday]) }, icu::calendar::provider::WeekData { first_weekday: icu::calendar::types::Weekday::Sunday, weekend: icu::calendar::provider::WeekdaySet::new(&[icu::calendar::types::Weekday::Saturday, icu::calendar::types::Weekday::Sunday]) }, icu::calendar::provider::WeekData { first_weekday: icu::calendar::types::Weekday::Saturday, weekend: icu::calendar::provider::WeekdaySet::new(&[icu::calendar::types::Weekday::Friday, icu::calendar::types::Weekday::Saturday]) }, icu::calendar::provider::WeekData { first_weekday: icu::calendar::types::Weekday::Saturday, weekend: icu::calendar::provider::WeekdaySet::new(&[icu::calendar::types::Weekday::Saturday, icu::calendar::types::Weekday::Sunday]) }, icu::calendar::provider::WeekData { first_weekday: icu::calendar::types::Weekday::Sunday, weekend: icu::calendar::provider::WeekdaySet::new(&[icu::calendar::types::Weekday::Friday, icu::calendar::types::Weekday::Saturday]) }, icu::calendar::provider::WeekData { first_weekday: icu::calendar::types::Weekday::Sunday, weekend: icu::calendar::provider::WeekdaySet::new(&[icu::calendar::types::Weekday::Sunday]) }, icu::calendar::provider::WeekData { first_weekday: icu::calendar::types::Weekday::Saturday, weekend: icu::calendar::provider::WeekdaySet::new(&[icu::calendar::types::Weekday::Friday]) }, icu::calendar::provider::WeekData { first_weekday: icu::calendar::types::Weekday::Friday, weekend: icu::calendar::provider::WeekdaySet::new(&[icu::calendar::types::Weekday::Saturday, icu::calendar::types::Weekday::Sunday]) }, icu::calendar::provider::WeekData { first_weekday: icu::calendar::types::Weekday::Monday, weekend: icu::calendar::provider::WeekdaySet::new(&[icu::calendar::types::Weekday::Sunday]) }];
                unsafe { icu_provider::baked::zerotrie::Data::from_trie_and_values_unchecked(TRIE, VALUES) }
            };
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::DataProvider<icu::calendar::provider::CalendarWeekV1> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::calendar::provider::CalendarWeekV1>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_CALENDAR_WEEK_V1, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::calendar::provider::CalendarWeekV1 as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_CALENDAR_WEEK_V1, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_unknown() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::calendar::provider::CalendarWeekV1 as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload, metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_calendar_week_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu::calendar::provider::CalendarWeekV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider::baked::DataStore::iter(&Self::DATA_CALENDAR_WEEK_V1).collect())
            }
        }
    };
    ($ provider : ty , DRY) => {};
    ($ provider : ty , DRY , ITER) => {
        __impl_calendar_week_v1!($provider, ITER);
    };
}
#[doc(inline)]
pub use __impl_calendar_week_v1 as impl_calendar_week_v1;
