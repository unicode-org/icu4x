// @generated
/// Implement `DataProvider<WeekDataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 651B for the lookup data structure (169 data identifiers)
/// * 12B[^1] for the actual data (6 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_week_data_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_WEEK_DATA_V1_MARKER: icu_provider_baked::zerotrie::Data<icu::calendar::provider::WeekDataV1Marker> = icu_provider_baked::zerotrie::Data { trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xE1mbefhiknpstuwy\0\0\0\0\0\0\0\0\0\0\x02\x02\x03\x05\x0C\x0E\x14\x17\x1A\x1D#%@Blo\x80o\x80f-Adlm\x80a\x80\xC2ag\x01\x80\x80ea\x80qo\x80cm\x80\xC2ow\x01\x80\x80o\x80nd\x80-\xE1zABCDEFGHIJKLMNOPQRSTUVWXYZ\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01*Ql~\x8D\x99\xB4\xC0\xDB\xE7\xF9\x11;JLdfr\x90\xA2\xB1\xBD\xBF\xC1\xC3\xCEDEFGILMNRSTUXZ\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0B\x0C\r\x81\x82\x82\x83\x80\x80\x80\x81\x80\x83\x81\x80\x81\x80\xCDADEGHMNRSTWYZ\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0B\x0C\x80\x83\x81\x81\x82\x80\x80\x83\x83\x83\x83\x80\x83\xC9AHLMNORYZ\x01\x02\x03\x04\x05\x06\x07\x08\x83\x81\x80\x80\x80\x83\x80\x80\x81\xC6EJKMOZ\x01\x02\x03\x04\x05\x81\x82\x81\x83\x83\x82\xC5CEGST\x01\x02\x03\x04\x80\x81\x82\x81\x83\xC4IJOR\x01\x02\x03\x81\x81\x81\x81\xC9BEFGIPRTU\x01\x02\x03\x04\x05\x06\x07\x08\x81\x80\x81\x81\x81\x81\x81\x83\x83\xC4KNRU\x01\x02\x03\x83\x83\x80\x81\xC9DELMNQRST\x01\x02\x03\x04\x05\x06\x07\x08\x83\x81\x83\x81\x83\x82\x82\x81\x81\xC4EMOP\x01\x02\x03\x81\x83\x82\x83\xC6EGHRWZ\x01\x02\x03\x04\x05\x83\x80\x83\x83\x82\x80\xC8ABIKTUVY\x01\x02\x03\x04\x05\x06\x07\x83\x80\x81\x80\x81\x81\x80\x82\xCECDEHKMNOQTVXYZ\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0B\x0C\r\x81\x80\x80\x83\x80\x83\x80\x83\x81\x83\x84\x83\x80\x83\xC5ILOPZ\x01\x02\x03\x04\x83\x81\x81\x83\x80M\x82\xC8AEHKLRTY\x01\x02\x03\x04\x05\x06\x07\x83\x83\x83\x83\x81\x83\x85\x83A\x82\xC4EOSU\x01\x02\x03\x81\x80\x80\x81\xCAADEGIJKMVY\x01\x02\x03\x04\x05\x06\x07\x08\t\x83\x82\x81\x83\x80\x81\x81\x81\x83\x82\xC6HJMRTW\x01\x02\x03\x04\x05\x83\x80\x80\x80\x83\x83\xC5AMSYZ\x01\x02\x03\x04\x80\x83\x83\x80\x80\xC4AEIN\x01\x02\x03\x81\x83\x83\x80S\x83K\x80E\x83\xC2AW\x01\x83\x83o\x80o\x80" }, values: &[icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Monday, min_week_days: 1u8 }, icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Monday, min_week_days: 4u8 }, icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Saturday, min_week_days: 1u8 }, icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Sunday, min_week_days: 1u8 }, icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Friday, min_week_days: 1u8 }, icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Sunday, min_week_days: 4u8 }] };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::calendar::provider::WeekDataV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::calendar::provider::WeekDataV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_WEEK_DATA_V1_MARKER, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::calendar::provider::WeekDataV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_WEEK_DATA_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_default() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::calendar::provider::WeekDataV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_week_data_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::calendar::provider::WeekDataV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_WEEK_DATA_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_week_data_v1_marker as impl_week_data_v1_marker;
