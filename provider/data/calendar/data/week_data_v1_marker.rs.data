// @generated
/// Implement `DataProvider<WeekDataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 1642B[^1] for the lookup data structure (115 data identifiers)
/// * 12B[^1] for the actual data (6 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_week_data_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_WEEK_DATA_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::Locale<6usize>, icu::calendar::provider::WeekDataV1Marker> = icu_provider_baked::binary_search::Data(
                {
                    use icu_provider_baked::binary_search::tinystr::tinystr;
                    &[tinystr!(6usize, "und"), tinystr!(6usize, "und-AD"), tinystr!(6usize, "und-AE"), tinystr!(6usize, "und-AF"), tinystr!(6usize, "und-AG"), tinystr!(6usize, "und-AN"), tinystr!(6usize, "und-AS"), tinystr!(6usize, "und-AT"), tinystr!(6usize, "und-AX"), tinystr!(6usize, "und-BD"), tinystr!(6usize, "und-BE"), tinystr!(6usize, "und-BG"), tinystr!(6usize, "und-BH"), tinystr!(6usize, "und-BR"), tinystr!(6usize, "und-BS"), tinystr!(6usize, "und-BT"), tinystr!(6usize, "und-BW"), tinystr!(6usize, "und-BZ"), tinystr!(6usize, "und-CA"), tinystr!(6usize, "und-CH"), tinystr!(6usize, "und-CO"), tinystr!(6usize, "und-CZ"), tinystr!(6usize, "und-DE"), tinystr!(6usize, "und-DJ"), tinystr!(6usize, "und-DK"), tinystr!(6usize, "und-DM"), tinystr!(6usize, "und-DO"), tinystr!(6usize, "und-DZ"), tinystr!(6usize, "und-EE"), tinystr!(6usize, "und-EG"), tinystr!(6usize, "und-ES"), tinystr!(6usize, "und-ET"), tinystr!(6usize, "und-FI"), tinystr!(6usize, "und-FJ"), tinystr!(6usize, "und-FO"), tinystr!(6usize, "und-FR"), tinystr!(6usize, "und-GB"), tinystr!(6usize, "und-GF"), tinystr!(6usize, "und-GG"), tinystr!(6usize, "und-GI"), tinystr!(6usize, "und-GP"), tinystr!(6usize, "und-GR"), tinystr!(6usize, "und-GT"), tinystr!(6usize, "und-GU"), tinystr!(6usize, "und-HK"), tinystr!(6usize, "und-HN"), tinystr!(6usize, "und-HU"), tinystr!(6usize, "und-ID"), tinystr!(6usize, "und-IE"), tinystr!(6usize, "und-IL"), tinystr!(6usize, "und-IM"), tinystr!(6usize, "und-IN"), tinystr!(6usize, "und-IQ"), tinystr!(6usize, "und-IR"), tinystr!(6usize, "und-IS"), tinystr!(6usize, "und-IT"), tinystr!(6usize, "und-JE"), tinystr!(6usize, "und-JM"), tinystr!(6usize, "und-JO"), tinystr!(6usize, "und-JP"), tinystr!(6usize, "und-KE"), tinystr!(6usize, "und-KH"), tinystr!(6usize, "und-KR"), tinystr!(6usize, "und-KW"), tinystr!(6usize, "und-LA"), tinystr!(6usize, "und-LI"), tinystr!(6usize, "und-LT"), tinystr!(6usize, "und-LU"), tinystr!(6usize, "und-LY"), tinystr!(6usize, "und-MC"), tinystr!(6usize, "und-MH"), tinystr!(6usize, "und-MM"), tinystr!(6usize, "und-MO"), tinystr!(6usize, "und-MQ"), tinystr!(6usize, "und-MT"), tinystr!(6usize, "und-MV"), tinystr!(6usize, "und-MX"), tinystr!(6usize, "und-MZ"), tinystr!(6usize, "und-NI"), tinystr!(6usize, "und-NL"), tinystr!(6usize, "und-NO"), tinystr!(6usize, "und-NP"), tinystr!(6usize, "und-OM"), tinystr!(6usize, "und-PA"), tinystr!(6usize, "und-PE"), tinystr!(6usize, "und-PH"), tinystr!(6usize, "und-PK"), tinystr!(6usize, "und-PL"), tinystr!(6usize, "und-PR"), tinystr!(6usize, "und-PT"), tinystr!(6usize, "und-PY"), tinystr!(6usize, "und-QA"), tinystr!(6usize, "und-RE"), tinystr!(6usize, "und-RU"), tinystr!(6usize, "und-SA"), tinystr!(6usize, "und-SD"), tinystr!(6usize, "und-SE"), tinystr!(6usize, "und-SG"), tinystr!(6usize, "und-SJ"), tinystr!(6usize, "und-SK"), tinystr!(6usize, "und-SM"), tinystr!(6usize, "und-SV"), tinystr!(6usize, "und-SY"), tinystr!(6usize, "und-TH"), tinystr!(6usize, "und-TT"), tinystr!(6usize, "und-TW"), tinystr!(6usize, "und-UM"), tinystr!(6usize, "und-US"), tinystr!(6usize, "und-VA"), tinystr!(6usize, "und-VE"), tinystr!(6usize, "und-VI"), tinystr!(6usize, "und-WS"), tinystr!(6usize, "und-YE"), tinystr!(6usize, "und-ZA"), tinystr!(6usize, "und-ZW")]
                },
                {
                    type S = <icu::calendar::provider::WeekDataV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                    const __UND: &S = &icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Monday, min_week_days: 1u8 };
                    const __UND_AD: &S = &icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Monday, min_week_days: 4u8 };
                    const __UND_AE: &S = &icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Saturday, min_week_days: 1u8 };
                    const __UND_AG: &S = &icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Sunday, min_week_days: 1u8 };
                    const __UND_MV: &S = &icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Friday, min_week_days: 1u8 };
                    const __UND_PT: &S = &icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Sunday, min_week_days: 4u8 };
                    &[__UND, __UND_AD, __UND_AE, __UND_AE, __UND_AG, __UND_AD, __UND_AG, __UND_AD, __UND_AD, __UND_AG, __UND_AD, __UND_AD, __UND_AE, __UND_AG, __UND_AG, __UND_AG, __UND_AG, __UND_AG, __UND_AG, __UND_AD, __UND_AG, __UND_AD, __UND_AD, __UND_AE, __UND_AD, __UND_AG, __UND_AG, __UND_AE, __UND_AD, __UND_AE, __UND_AD, __UND_AG, __UND_AD, __UND_AD, __UND_AD, __UND_AD, __UND_AD, __UND_AD, __UND_AD, __UND_AD, __UND_AD, __UND_AD, __UND_AG, __UND_AG, __UND_AG, __UND_AG, __UND_AD, __UND_AG, __UND_AD, __UND_AG, __UND_AD, __UND_AG, __UND_AE, __UND_AE, __UND_AD, __UND_AD, __UND_AD, __UND_AG, __UND_AE, __UND_AG, __UND_AG, __UND_AG, __UND_AG, __UND_AE, __UND_AG, __UND_AD, __UND_AD, __UND_AD, __UND_AE, __UND_AD, __UND_AG, __UND_AG, __UND_AG, __UND_AD, __UND_AG, __UND_MV, __UND_AG, __UND_AG, __UND_AG, __UND_AD, __UND_AD, __UND_AG, __UND_AE, __UND_AG, __UND_AG, __UND_AG, __UND_AG, __UND_AD, __UND_AG, __UND_PT, __UND_AG, __UND_AE, __UND_AD, __UND_AD, __UND_AG, __UND_AE, __UND_AD, __UND_AG, __UND_AD, __UND_AD, __UND_AD, __UND_AG, __UND_AE, __UND_AG, __UND_AG, __UND_AG, __UND_AG, __UND_AG, __UND_AD, __UND_AG, __UND_AG, __UND_AG, __UND_AG, __UND_AG, __UND_AG]
                },
            );
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::calendar::provider::WeekDataV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::calendar::provider::WeekDataV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_WEEK_DATA_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::calendar::provider::WeekDataV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_WEEK_DATA_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::calendar::provider::WeekDataV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_week_data_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::calendar::provider::WeekDataV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_WEEK_DATA_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_week_data_v1_marker as impl_week_data_v1_marker;
