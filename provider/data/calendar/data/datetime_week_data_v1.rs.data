// @generated
/// Implement `DataProvider<WeekDataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_datetime_week_data_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::calendar::provider::WeekDataV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::calendar::provider::WeekDataV1Marker>, icu_provider::DataError> {
                static __UND_MV: <icu::calendar::provider::WeekDataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Friday, min_week_days: 1u8 };
                static __UND: <icu::calendar::provider::WeekDataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Monday, min_week_days: 1u8 };
                static __UND_AD: <icu::calendar::provider::WeekDataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Monday, min_week_days: 4u8 };
                static __UND_AE: <icu::calendar::provider::WeekDataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Saturday, min_week_days: 1u8 };
                static __UND_AG: <icu::calendar::provider::WeekDataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Sunday, min_week_days: 1u8 };
                static __UND_PT: <icu::calendar::provider::WeekDataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::calendar::provider::WeekDataV1 { first_weekday: icu::calendar::types::IsoWeekday::Sunday, min_week_days: 4u8 };
                static DATA: [(&str, &<icu::calendar::provider::WeekDataV1Marker as icu_provider::DynamicDataMarker>::Yokeable); 115usize] = [("und", &__UND), ("und-AD", &__UND_AD), ("und-AE", &__UND_AE), ("und-AF", &__UND_AE), ("und-AG", &__UND_AG), ("und-AN", &__UND_AD), ("und-AS", &__UND_AG), ("und-AT", &__UND_AD), ("und-AX", &__UND_AD), ("und-BD", &__UND_AG), ("und-BE", &__UND_AD), ("und-BG", &__UND_AD), ("und-BH", &__UND_AE), ("und-BR", &__UND_AG), ("und-BS", &__UND_AG), ("und-BT", &__UND_AG), ("und-BW", &__UND_AG), ("und-BZ", &__UND_AG), ("und-CA", &__UND_AG), ("und-CH", &__UND_AD), ("und-CO", &__UND_AG), ("und-CZ", &__UND_AD), ("und-DE", &__UND_AD), ("und-DJ", &__UND_AE), ("und-DK", &__UND_AD), ("und-DM", &__UND_AG), ("und-DO", &__UND_AG), ("und-DZ", &__UND_AE), ("und-EE", &__UND_AD), ("und-EG", &__UND_AE), ("und-ES", &__UND_AD), ("und-ET", &__UND_AG), ("und-FI", &__UND_AD), ("und-FJ", &__UND_AD), ("und-FO", &__UND_AD), ("und-FR", &__UND_AD), ("und-GB", &__UND_AD), ("und-GF", &__UND_AD), ("und-GG", &__UND_AD), ("und-GI", &__UND_AD), ("und-GP", &__UND_AD), ("und-GR", &__UND_AD), ("und-GT", &__UND_AG), ("und-GU", &__UND_AG), ("und-HK", &__UND_AG), ("und-HN", &__UND_AG), ("und-HU", &__UND_AD), ("und-ID", &__UND_AG), ("und-IE", &__UND_AD), ("und-IL", &__UND_AG), ("und-IM", &__UND_AD), ("und-IN", &__UND_AG), ("und-IQ", &__UND_AE), ("und-IR", &__UND_AE), ("und-IS", &__UND_AD), ("und-IT", &__UND_AD), ("und-JE", &__UND_AD), ("und-JM", &__UND_AG), ("und-JO", &__UND_AE), ("und-JP", &__UND_AG), ("und-KE", &__UND_AG), ("und-KH", &__UND_AG), ("und-KR", &__UND_AG), ("und-KW", &__UND_AE), ("und-LA", &__UND_AG), ("und-LI", &__UND_AD), ("und-LT", &__UND_AD), ("und-LU", &__UND_AD), ("und-LY", &__UND_AE), ("und-MC", &__UND_AD), ("und-MH", &__UND_AG), ("und-MM", &__UND_AG), ("und-MO", &__UND_AG), ("und-MQ", &__UND_AD), ("und-MT", &__UND_AG), ("und-MV", &__UND_MV), ("und-MX", &__UND_AG), ("und-MZ", &__UND_AG), ("und-NI", &__UND_AG), ("und-NL", &__UND_AD), ("und-NO", &__UND_AD), ("und-NP", &__UND_AG), ("und-OM", &__UND_AE), ("und-PA", &__UND_AG), ("und-PE", &__UND_AG), ("und-PH", &__UND_AG), ("und-PK", &__UND_AG), ("und-PL", &__UND_AD), ("und-PR", &__UND_AG), ("und-PT", &__UND_PT), ("und-PY", &__UND_AG), ("und-QA", &__UND_AE), ("und-RE", &__UND_AD), ("und-RU", &__UND_AD), ("und-SA", &__UND_AG), ("und-SD", &__UND_AE), ("und-SE", &__UND_AD), ("und-SG", &__UND_AG), ("und-SJ", &__UND_AD), ("und-SK", &__UND_AD), ("und-SM", &__UND_AD), ("und-SV", &__UND_AG), ("und-SY", &__UND_AE), ("und-TH", &__UND_AG), ("und-TT", &__UND_AG), ("und-TW", &__UND_AG), ("und-UM", &__UND_AG), ("und-US", &__UND_AG), ("und-VA", &__UND_AD), ("und-VE", &__UND_AG), ("und-VI", &__UND_AG), ("und-WS", &__UND_AG), ("und-YE", &__UND_AG), ("und-ZA", &__UND_AG), ("und-ZW", &__UND_AG)];
                fn lookup(req: icu_provider::DataRequest) -> Option<&'static <icu::calendar::provider::WeekDataV1Marker as icu_provider::DynamicDataMarker>::Yokeable> {
                    DATA.binary_search_by(|(l, _)| req.locale.strict_cmp(l.as_bytes()).reverse()).map(|i| (*unsafe { DATA.get_unchecked(i) }).1).ok()
                }
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = lookup(req) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::calendar::provider::WeekDataV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.locale.clone());
                    loop {
                        if let Some(payload) = lookup(icu_provider::DataRequest { locale: fallback_iterator.get(), ..req }) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::calendar::provider::WeekDataV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
}
#[doc(inline)]
pub use __impl_datetime_week_data_v1 as impl_datetime_week_data_v1;
/// Implement `IterableDataProvider<WeekDataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this marker.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_datetime_week_data_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        impl icu_provider::datagen::IterableDataProvider<icu::calendar::provider::WeekDataV1Marker> for $provider {
            fn supported_requests(&self) -> Result<std::collections::HashSet<(icu_provider::DataLocale, icu_provider::DataMarkerAttributes)>, icu_provider::DataError> {
                Ok([icu_provider::_internal::locale_core::locale!("und"), icu_provider::_internal::locale_core::locale!("und-AD"), icu_provider::_internal::locale_core::locale!("und-AE"), icu_provider::_internal::locale_core::locale!("und-AF"), icu_provider::_internal::locale_core::locale!("und-AG"), icu_provider::_internal::locale_core::locale!("und-AN"), icu_provider::_internal::locale_core::locale!("und-AS"), icu_provider::_internal::locale_core::locale!("und-AT"), icu_provider::_internal::locale_core::locale!("und-AX"), icu_provider::_internal::locale_core::locale!("und-BD"), icu_provider::_internal::locale_core::locale!("und-BE"), icu_provider::_internal::locale_core::locale!("und-BG"), icu_provider::_internal::locale_core::locale!("und-BH"), icu_provider::_internal::locale_core::locale!("und-BR"), icu_provider::_internal::locale_core::locale!("und-BS"), icu_provider::_internal::locale_core::locale!("und-BT"), icu_provider::_internal::locale_core::locale!("und-BW"), icu_provider::_internal::locale_core::locale!("und-BZ"), icu_provider::_internal::locale_core::locale!("und-CA"), icu_provider::_internal::locale_core::locale!("und-CH"), icu_provider::_internal::locale_core::locale!("und-CO"), icu_provider::_internal::locale_core::locale!("und-CZ"), icu_provider::_internal::locale_core::locale!("und-DE"), icu_provider::_internal::locale_core::locale!("und-DJ"), icu_provider::_internal::locale_core::locale!("und-DK"), icu_provider::_internal::locale_core::locale!("und-DM"), icu_provider::_internal::locale_core::locale!("und-DO"), icu_provider::_internal::locale_core::locale!("und-DZ"), icu_provider::_internal::locale_core::locale!("und-EE"), icu_provider::_internal::locale_core::locale!("und-EG"), icu_provider::_internal::locale_core::locale!("und-ES"), icu_provider::_internal::locale_core::locale!("und-ET"), icu_provider::_internal::locale_core::locale!("und-FI"), icu_provider::_internal::locale_core::locale!("und-FJ"), icu_provider::_internal::locale_core::locale!("und-FO"), icu_provider::_internal::locale_core::locale!("und-FR"), icu_provider::_internal::locale_core::locale!("und-GB"), icu_provider::_internal::locale_core::locale!("und-GF"), icu_provider::_internal::locale_core::locale!("und-GG"), icu_provider::_internal::locale_core::locale!("und-GI"), icu_provider::_internal::locale_core::locale!("und-GP"), icu_provider::_internal::locale_core::locale!("und-GR"), icu_provider::_internal::locale_core::locale!("und-GT"), icu_provider::_internal::locale_core::locale!("und-GU"), icu_provider::_internal::locale_core::locale!("und-HK"), icu_provider::_internal::locale_core::locale!("und-HN"), icu_provider::_internal::locale_core::locale!("und-HU"), icu_provider::_internal::locale_core::locale!("und-ID"), icu_provider::_internal::locale_core::locale!("und-IE"), icu_provider::_internal::locale_core::locale!("und-IL"), icu_provider::_internal::locale_core::locale!("und-IM"), icu_provider::_internal::locale_core::locale!("und-IN"), icu_provider::_internal::locale_core::locale!("und-IQ"), icu_provider::_internal::locale_core::locale!("und-IR"), icu_provider::_internal::locale_core::locale!("und-IS"), icu_provider::_internal::locale_core::locale!("und-IT"), icu_provider::_internal::locale_core::locale!("und-JE"), icu_provider::_internal::locale_core::locale!("und-JM"), icu_provider::_internal::locale_core::locale!("und-JO"), icu_provider::_internal::locale_core::locale!("und-JP"), icu_provider::_internal::locale_core::locale!("und-KE"), icu_provider::_internal::locale_core::locale!("und-KH"), icu_provider::_internal::locale_core::locale!("und-KR"), icu_provider::_internal::locale_core::locale!("und-KW"), icu_provider::_internal::locale_core::locale!("und-LA"), icu_provider::_internal::locale_core::locale!("und-LI"), icu_provider::_internal::locale_core::locale!("und-LT"), icu_provider::_internal::locale_core::locale!("und-LU"), icu_provider::_internal::locale_core::locale!("und-LY"), icu_provider::_internal::locale_core::locale!("und-MC"), icu_provider::_internal::locale_core::locale!("und-MH"), icu_provider::_internal::locale_core::locale!("und-MM"), icu_provider::_internal::locale_core::locale!("und-MO"), icu_provider::_internal::locale_core::locale!("und-MQ"), icu_provider::_internal::locale_core::locale!("und-MT"), icu_provider::_internal::locale_core::locale!("und-MV"), icu_provider::_internal::locale_core::locale!("und-MX"), icu_provider::_internal::locale_core::locale!("und-MZ"), icu_provider::_internal::locale_core::locale!("und-NI"), icu_provider::_internal::locale_core::locale!("und-NL"), icu_provider::_internal::locale_core::locale!("und-NO"), icu_provider::_internal::locale_core::locale!("und-NP"), icu_provider::_internal::locale_core::locale!("und-OM"), icu_provider::_internal::locale_core::locale!("und-PA"), icu_provider::_internal::locale_core::locale!("und-PE"), icu_provider::_internal::locale_core::locale!("und-PH"), icu_provider::_internal::locale_core::locale!("und-PK"), icu_provider::_internal::locale_core::locale!("und-PL"), icu_provider::_internal::locale_core::locale!("und-PR"), icu_provider::_internal::locale_core::locale!("und-PT"), icu_provider::_internal::locale_core::locale!("und-PY"), icu_provider::_internal::locale_core::locale!("und-QA"), icu_provider::_internal::locale_core::locale!("und-RE"), icu_provider::_internal::locale_core::locale!("und-RU"), icu_provider::_internal::locale_core::locale!("und-SA"), icu_provider::_internal::locale_core::locale!("und-SD"), icu_provider::_internal::locale_core::locale!("und-SE"), icu_provider::_internal::locale_core::locale!("und-SG"), icu_provider::_internal::locale_core::locale!("und-SJ"), icu_provider::_internal::locale_core::locale!("und-SK"), icu_provider::_internal::locale_core::locale!("und-SM"), icu_provider::_internal::locale_core::locale!("und-SV"), icu_provider::_internal::locale_core::locale!("und-SY"), icu_provider::_internal::locale_core::locale!("und-TH"), icu_provider::_internal::locale_core::locale!("und-TT"), icu_provider::_internal::locale_core::locale!("und-TW"), icu_provider::_internal::locale_core::locale!("und-UM"), icu_provider::_internal::locale_core::locale!("und-US"), icu_provider::_internal::locale_core::locale!("und-VA"), icu_provider::_internal::locale_core::locale!("und-VE"), icu_provider::_internal::locale_core::locale!("und-VI"), icu_provider::_internal::locale_core::locale!("und-WS"), icu_provider::_internal::locale_core::locale!("und-YE"), icu_provider::_internal::locale_core::locale!("und-ZA"), icu_provider::_internal::locale_core::locale!("und-ZW")].into_iter().map(|l| (l.into(), Default::default())).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impliterable_datetime_week_data_v1 as impliterable_datetime_week_data_v1;
