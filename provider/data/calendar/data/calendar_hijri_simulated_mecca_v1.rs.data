// @generated
/// Implement `DataProvider<CalendarHijriSimulatedMeccaV1>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 532B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
///
/// This macro requires the following crates:
/// * `icu`
/// * `icu_provider`
/// * `zerovec`
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_calendar_hijri_simulated_mecca_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.82"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.82"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_CALENDAR_HIJRI_SIMULATED_MECCA_V1: &'static <icu::calendar::provider::CalendarHijriSimulatedMeccaV1 as icu_provider::DynamicDataMarker>::DataStruct = &icu::calendar::provider::hijri::HijriData { first_extended_year: 1317i32, data: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"O9\xAE\x02\xAD\x05\xA9\r\x92-E-\x8D\n-\x05m\x05j\x0BT'I\x07\x8B\x0E&-V\x05\xAE\nl#j\x07T'\xA5\x06M\x05]\n\\\x05\xBA\n\xB4%\xAA\rT-\xAA*6\t\xB6\x02u5\xEA\nT'\xA9\x06+\x05[\n6\x05v\nl\x05Y\x0BJ+\x95\n+\t[\nZ\x05\xD5\n\xD2&\xA5\x0EJ.\x96\x0C.\tm\nj\x05Y\x0BI/\x94.*-Z*\xBA\x04\xB5\x05\xB2\x0B\xA4+I+\x95\n\xB5\x04m\t\xEA\x02\xE9\x06\xD2\x0E\xA4.*-V\n\xB6\x04u\x05\xEA\n\xE4*\xA9*S\n\xAB\x04W9\xB6\x02\xB5\t\xAA\x05S\r&-N\n\xAE\x04m\t\xEA\x02\xD5\n\xA9\x06S\x05\xA7\x0479\xB5\x02k\x05i\x0BR'\xA5\x06K\x05\xAB\x02[5\xEA\n\xD4%\xC9\r\x92-%+U\t\xAD\x02k5\xE9\n\xD2%\xA5\x05K\x05\x97\x02\xB74\xB6\t\xB4\x03\xA9\x0BJ+\x96\n.\t^\x02\xDD4\xDA\n\xD4%\xA5\x05K\x05W:\xAE\x04n\tl\x03U\x0BJ'\x8D\x06'\x05W\n\xB6\x04\xB5\x06\xAA\r\xA4-I-\x95\n-\x05\xAD\nZ\x03U\x07J\x0F\x92.&+V\x06\xAE\x02u\x05j\x0BT'\xA9&U\x06\xAD\x04]9\xBA\x02\xB9\x05\xB2\rT-*+V\t\xB6\x02u\x05Z\x0B\xD4&\xA9\x06K\x05\x9B\x0C6\tv\x02u\x05i\rR-%\rK\n\x9B\x04[9\xDA\n\xD4&\xA9\x0EJ.\x96,-\tm\nl\x05i\x0BQ/\xA4.J-Z*\xDA\x04\xB9\t\xB4\x05\xA9\x0BR+\xA5\nU\x05m\nl\x05\xE9\x06\xD2.\xA4.J-V\n\xB6\x04u\t\xEA\x04\xE5\n\xAA*U\n\xAB\x04W\x02\xB74\xB5\n\xAA\x05\x95\r*-V\n\xAE\x08m\t\xEA\x02\xD5\n\xA9\x06S\x06'\x05W9\xB5\x02\xB5\x05\xAA\x0B\xA2'E'\x93\x06\xAB\x04k9\xEA\n\xD4%\xC9\r\xA2-%-U\t\xAD\x02m\x05\xEA\t\xD4%\xA5\x05K\x05") } };
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::DataProvider<icu::calendar::provider::CalendarHijriSimulatedMeccaV1> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::calendar::provider::CalendarHijriSimulatedMeccaV1>, icu_provider::DataError> {
                if req.id.locale.is_unknown() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_CALENDAR_HIJRI_SIMULATED_MECCA_V1), metadata: icu_provider::DataResponseMetadata::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::calendar::provider::CalendarHijriSimulatedMeccaV1 as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_calendar_hijri_simulated_mecca_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu::calendar::provider::CalendarHijriSimulatedMeccaV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_calendar_hijri_simulated_mecca_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::DryDataProvider<icu::calendar::provider::CalendarHijriSimulatedMeccaV1> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_unknown() {
                    Ok(icu_provider::DataResponseMetadata::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::calendar::provider::CalendarHijriSimulatedMeccaV1 as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_calendar_hijri_simulated_mecca_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::DryDataProvider<icu::calendar::provider::CalendarHijriSimulatedMeccaV1> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_unknown() {
                    Ok(icu_provider::DataResponseMetadata::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::calendar::provider::CalendarHijriSimulatedMeccaV1 as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu::calendar::provider::CalendarHijriSimulatedMeccaV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_calendar_hijri_simulated_mecca_v1 as impl_calendar_hijri_simulated_mecca_v1;
