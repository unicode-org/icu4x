// @generated
/// Implement `DataProvider<CollationMetadataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 763B for the lookup data structure (174 data identifiers)
/// * 36B[^1] for the actual data (9 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_collation_metadata_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_COLLATION_METADATA_V1_MARKER: icu_provider_baked::zerotrie::Data<icu::collator::provider::CollationMetadataV1Marker> = icu_provider_baked::zerotrie::Data { trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xE1zabcdefghijklmnopqrstuvwxyz\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x02\x02\x02\x02\x02\x19@Vm\x8F\xB4\xC0\xD6\xE8\xF6EYw\x88\x8E\xA2\xA4\xB1\xFB\x168IKRc\xC5fmrsz\x01\x02\x0B\x0E\x80\x81\x82\x1Ecompat\x82\x82t\x83\x82\xC7eghlnrs\x01\x04\x06\x08\x0F\x12\x82\x81c\x83o\x83o\x83\x82\x1Etrad\x82\x80x\x83\x82-Cyrl\x82\xC6aehsvy\x01\x03\x05\x08\t\x83b\x80r\x81\x80w\x83\x83\x80\xC4aeos\x01\x0B\r\x84\x83\x1Ephonebk\x80i\x83b\x80\xC6lnostu\x01\x0C\r\x14\x15\x81\x83-US-posix\x80\x80\x80\x1Etrad\x80\x80\x83\xC6afiory\x01\x07\x12\x13\x18\x82-Adlm\x80\x80\xC2\x1El\x05trad\x80\x80\x80\x83-CA\x85\x80\xC4adlu\x01\x02\x03\x83\x83\x80\x82\xC7aeirsuy\x01\x02\x03\x04\x06\x07\x80\x81\x82\x82b\x80\x80\x82\xC6adegst\x01\x02\x03\x04\x05\x83\x83\x83\x80\x80\x83\xC2av\t\x82\x1Eunihan\x82\x83\xCBaegkmnosuxy\x01\x03\x05\x06\x07\x0E\x1B\"#8\x81a\x83p\x83\x82\x82\x82\x1Etrad\x82\x82\xC2\x1Ek\x07unihan\x82\x82\x83-Deva\x83\x82v\x83-\xC3DOT\x04\x08eva\x83rya\x83elu\x83\x82\xC6bimotv\x01\x03\x05\x06\x07\x83j\x83o\x83\x81\x86\x80\xC9aiklnrsty\x02\x03\x04\x05\x08\t\n\x0Bi\x83\x83\x82\x82\x81i\x83\x82\x83\x84\x82\xC5deloq\x02\x03\x04\x05s\x83\x81\x83\x80o\x83\xC2cr\x01\x83\x82\xC6aclrst\x01\x03\x04\x06\x07\x82m\x83\x80g\x83\x82\x83u\x83\xC4amou\x02\x03\x04j\x83\x83\x80\x81\xCEacdikloqruvwyz\x07\x08\x0F\x16\x17\x18\x19\x1A!\")*,\x83\xC2ht\x01\x83\x83\x83\x83-Deva\x83\x82\x1Edict\x82\x80\x80\x83\x80\x82-Latn\x82\x83\x80\x1Etrad\x80\x83r\x83l\x83\xC9aeghikort\x01\x02\x03\x04\x05\x06\x07\x08\x82\x82\x83\x87\x83\x80\x80\x80\x83\xC5gknrz\x01\x02\x10\x11\x82\x82d\x83\x1Ee\xC2mo\x04oji\x83r\x83\x82\x80-Cyrl\x83\xC3eim\x02\tc\x83\x88\x1Etrad\x88w\x83o\x80\xC2hn\x01\x83r\x83\xC3oru\x01\x03\x80l\x83e\x83-Hans\x83\xC3ahu\x01#\x83\x82\xC2\x1E-\x18\xC3suz\x06\x0Ctroke\x82nihan\x82huyin\x82Hant\x83\x83" }, values: &[icu::collator::provider::CollationMetadataV1 { bits: 9u32 }, icu::collator::provider::CollationMetadataV1 { bits: 33u32 }, icu::collator::provider::CollationMetadataV1 { bits: 41u32 }, icu::collator::provider::CollationMetadataV1 { bits: 1u32 }, icu::collator::provider::CollationMetadataV1 { bits: 1545u32 }, icu::collator::provider::CollationMetadataV1 { bits: 129u32 }, icu::collator::provider::CollationMetadataV1 { bits: 73u32 }, icu::collator::provider::CollationMetadataV1 { bits: 297u32 }, icu::collator::provider::CollationMetadataV1 { bits: 25u32 }] };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::collator::provider::CollationMetadataV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::collator::provider::CollationMetadataV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_COLLATION_METADATA_V1_MARKER, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_COLLATION_METADATA_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_default() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_collation_metadata_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::collator::provider::CollationMetadataV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_COLLATION_METADATA_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_collation_metadata_v1_marker as impl_collation_metadata_v1_marker;
