// @generated
/// Implement `DataProvider<CollationMetadataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 2320B[^1] for the lookup data structure (88 data identifiers)
/// * 36B[^1] for the actual data (9 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_collation_metadata_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_COLLATION_METADATA_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::Locale<18usize>, icu::collator::provider::CollationMetadataV1Marker> = icu_provider_baked::binary_search::Data(
                {
                    use icu_provider_baked::binary_search::tinystr::tinystr;
                    &[tinystr!(18usize, "af"), tinystr!(18usize, "am"), tinystr!(18usize, "ar"), tinystr!(18usize, "as"), tinystr!(18usize, "az"), tinystr!(18usize, "be"), tinystr!(18usize, "bg"), tinystr!(18usize, "bn"), tinystr!(18usize, "br"), tinystr!(18usize, "bs"), tinystr!(18usize, "ceb"), tinystr!(18usize, "chr"), tinystr!(18usize, "cs"), tinystr!(18usize, "cy"), tinystr!(18usize, "da"), tinystr!(18usize, "de-AT-u-co-phonebk"), tinystr!(18usize, "de-u-co-phonebk"), tinystr!(18usize, "dsb"), tinystr!(18usize, "el"), tinystr!(18usize, "en-US-posix"), tinystr!(18usize, "eo"), tinystr!(18usize, "es"), tinystr!(18usize, "et"), tinystr!(18usize, "fa"), tinystr!(18usize, "ff-Adlm"), tinystr!(18usize, "fi"), tinystr!(18usize, "fil"), tinystr!(18usize, "fo"), tinystr!(18usize, "fr-CA"), tinystr!(18usize, "fy"), tinystr!(18usize, "gl"), tinystr!(18usize, "gu"), tinystr!(18usize, "ha"), tinystr!(18usize, "he"), tinystr!(18usize, "hi"), tinystr!(18usize, "hr"), tinystr!(18usize, "hsb"), tinystr!(18usize, "hu"), tinystr!(18usize, "hy"), tinystr!(18usize, "ig"), tinystr!(18usize, "is"), tinystr!(18usize, "ja"), tinystr!(18usize, "ka"), tinystr!(18usize, "kk"), tinystr!(18usize, "km"), tinystr!(18usize, "kn"), tinystr!(18usize, "ko"), tinystr!(18usize, "kok"), tinystr!(18usize, "ku"), tinystr!(18usize, "ky"), tinystr!(18usize, "lo"), tinystr!(18usize, "lt"), tinystr!(18usize, "lv"), tinystr!(18usize, "mk"), tinystr!(18usize, "ml"), tinystr!(18usize, "mn"), tinystr!(18usize, "mr"), tinystr!(18usize, "mt"), tinystr!(18usize, "my"), tinystr!(18usize, "ne"), tinystr!(18usize, "no"), tinystr!(18usize, "or"), tinystr!(18usize, "pa"), tinystr!(18usize, "pl"), tinystr!(18usize, "ps"), tinystr!(18usize, "ro"), tinystr!(18usize, "ru"), tinystr!(18usize, "si"), tinystr!(18usize, "sk"), tinystr!(18usize, "sl"), tinystr!(18usize, "sq"), tinystr!(18usize, "sr"), tinystr!(18usize, "sv"), tinystr!(18usize, "ta"), tinystr!(18usize, "te"), tinystr!(18usize, "th"), tinystr!(18usize, "tk"), tinystr!(18usize, "to"), tinystr!(18usize, "tr"), tinystr!(18usize, "ug"), tinystr!(18usize, "uk"), tinystr!(18usize, "und"), tinystr!(18usize, "ur"), tinystr!(18usize, "uz"), tinystr!(18usize, "vi"), tinystr!(18usize, "wo"), tinystr!(18usize, "yo"), tinystr!(18usize, "zh")]
                },
                {
                    type S = <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                    const __AF: &S = &icu::collator::provider::CollationMetadataV1 { bits: 9u32 };
                    const __AM: &S = &icu::collator::provider::CollationMetadataV1 { bits: 33u32 };
                    const __AR: &S = &icu::collator::provider::CollationMetadataV1 { bits: 41u32 };
                    const __DA: &S = &icu::collator::provider::CollationMetadataV1 { bits: 1545u32 };
                    const __FR_CA: &S = &icu::collator::provider::CollationMetadataV1 { bits: 129u32 };
                    const __LT: &S = &icu::collator::provider::CollationMetadataV1 { bits: 73u32 };
                    const __TH: &S = &icu::collator::provider::CollationMetadataV1 { bits: 297u32 };
                    const __UND: &S = &icu::collator::provider::CollationMetadataV1 { bits: 1u32 };
                    const __VI: &S = &icu::collator::provider::CollationMetadataV1 { bits: 25u32 };
                    &[__AF, __AM, __AR, __AR, __AR, __AR, __AM, __AR, __AF, __AR, __AF, __AM, __AF, __AF, __DA, __AF, __AF, __AF, __AM, __AF, __AF, __AF, __AF, __AR, __AF, __AF, __AF, __AF, __FR_CA, __AF, __AF, __AR, __AF, __AM, __AR, __AR, __AF, __AF, __AR, __AF, __AF, __AR, __AM, __AR, __AR, __AR, __AR, __AR, __AR, __AR, __AM, __LT, __AF, __AR, __AR, __AM, __AR, __DA, __AR, __AM, __AF, __AR, __AR, __AF, __AR, __AF, __AM, __AR, __AF, __AF, __AF, __AR, __AF, __AR, __AR, __TH, __AF, __AF, __AF, __AR, __AR, __UND, __AR, __AF, __VI, __AF, __AF, __AR]
                },
            );
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::collator::provider::CollationMetadataV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::collator::provider::CollationMetadataV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_COLLATION_METADATA_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_COLLATION_METADATA_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_collation_metadata_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::collator::provider::CollationMetadataV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_COLLATION_METADATA_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_collation_metadata_v1_marker as impl_collation_metadata_v1_marker;
