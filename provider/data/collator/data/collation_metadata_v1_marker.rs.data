// @generated
/// Implement `DataProvider<CollationMetadataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_collation_metadata_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_COLLATION_METADATA_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::Locale, icu::collator::provider::CollationMetadataV1Marker> = {
                type S = <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                const __AF: &S = &icu::collator::provider::CollationMetadataV1 { bits: 9u32 };
                const __AM: &S = &icu::collator::provider::CollationMetadataV1 { bits: 33u32 };
                const __AR: &S = &icu::collator::provider::CollationMetadataV1 { bits: 41u32 };
                const __DA: &S = &icu::collator::provider::CollationMetadataV1 { bits: 1545u32 };
                const __FR_CA: &S = &icu::collator::provider::CollationMetadataV1 { bits: 129u32 };
                const __LT: &S = &icu::collator::provider::CollationMetadataV1 { bits: 73u32 };
                const __TH: &S = &icu::collator::provider::CollationMetadataV1 { bits: 297u32 };
                const __UND: &S = &icu::collator::provider::CollationMetadataV1 { bits: 1u32 };
                const __VI: &S = &icu::collator::provider::CollationMetadataV1 { bits: 25u32 };
                icu_provider_baked::binary_search::Data(&[("af", __AF), ("am", __AM), ("ar", __AR), ("as", __AR), ("az", __AR), ("be", __AR), ("bg", __AM), ("bn", __AR), ("br", __AF), ("bs", __AR), ("ceb", __AF), ("chr", __AM), ("cs", __AF), ("cy", __AF), ("da", __DA), ("de-AT-u-co-phonebk", __AF), ("de-u-co-phonebk", __AF), ("dsb", __AF), ("el", __AM), ("en-US-posix", __AF), ("eo", __AF), ("es", __AF), ("et", __AF), ("fa", __AR), ("ff-Adlm", __AF), ("fi", __AF), ("fil", __AF), ("fo", __AF), ("fr-CA", __FR_CA), ("fy", __AF), ("gl", __AF), ("gu", __AR), ("ha", __AF), ("he", __AM), ("hi", __AR), ("hr", __AR), ("hsb", __AF), ("hu", __AF), ("hy", __AR), ("ig", __AF), ("is", __AF), ("ja", __AR), ("ka", __AM), ("kk", __AR), ("km", __AR), ("kn", __AR), ("ko", __AR), ("kok", __AR), ("ku", __AR), ("ky", __AR), ("lo", __AM), ("lt", __LT), ("lv", __AF), ("mk", __AR), ("ml", __AR), ("mn", __AM), ("mr", __AR), ("mt", __DA), ("my", __AR), ("ne", __AM), ("no", __AF), ("or", __AR), ("pa", __AR), ("pl", __AF), ("ps", __AR), ("ro", __AF), ("ru", __AM), ("si", __AR), ("sk", __AF), ("sl", __AF), ("sq", __AF), ("sr", __AR), ("sv", __AF), ("ta", __AR), ("te", __AR), ("th", __TH), ("tk", __AF), ("to", __AF), ("tr", __AF), ("ug", __AR), ("uk", __AR), ("und", __UND), ("ur", __AR), ("uz", __AF), ("vi", __VI), ("wo", __AF), ("yo", __AF), ("zh", __AR)])
            };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::collator::provider::CollationMetadataV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::collator::provider::CollationMetadataV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_COLLATION_METADATA_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_COLLATION_METADATA_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_collation_metadata_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::collator::provider::CollationMetadataV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_COLLATION_METADATA_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_collation_metadata_v1_marker as impl_collation_metadata_v1_marker;
