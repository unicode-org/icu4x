// @generated
/// Implement `DataProvider<CollationMetadataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_collator_meta_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::collator::provider::CollationMetadataV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::collator::provider::CollationMetadataV1Marker>, icu_provider::DataError> {
                static FR_CA: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 129u32 };
                static DA: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 1545u32 };
                static UND: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 1u32 };
                static VI: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 25u32 };
                static TH: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 297u32 };
                static AM: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 33u32 };
                static AR: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 41u32 };
                static LT: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 73u32 };
                static AF: <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::collator::provider::CollationMetadataV1 { bits: 9u32 };
                static DATA: [(&str, &<icu::collator::provider::CollationMetadataV1Marker as icu_provider::DynamicDataMarker>::Yokeable); 88usize] = [("af", &AF), ("am", &AM), ("ar", &AR), ("as", &AR), ("az", &AR), ("be", &AR), ("bg", &AM), ("bn", &AR), ("br", &AF), ("bs", &AR), ("ceb", &AF), ("chr", &AM), ("cs", &AF), ("cy", &AF), ("da", &DA), ("de-AT-u-co-phonebk", &AF), ("de-u-co-phonebk", &AF), ("dsb", &AF), ("el", &AM), ("en-US-posix", &AF), ("eo", &AF), ("es", &AF), ("et", &AF), ("fa", &AR), ("ff-Adlm", &AF), ("fi", &AF), ("fil", &AF), ("fo", &AF), ("fr-CA", &FR_CA), ("fy", &AF), ("gl", &AF), ("gu", &AR), ("ha", &AF), ("he", &AM), ("hi", &AR), ("hr", &AR), ("hsb", &AF), ("hu", &AF), ("hy", &AR), ("ig", &AF), ("is", &AF), ("ja", &AR), ("ka", &AM), ("kk", &AR), ("km", &AR), ("kn", &AR), ("ko", &AR), ("kok", &AR), ("ku", &AR), ("ky", &AR), ("lo", &AM), ("lt", &LT), ("lv", &AF), ("mk", &AR), ("ml", &AR), ("mn", &AM), ("mr", &AR), ("mt", &DA), ("my", &AR), ("ne", &AM), ("no", &AF), ("or", &AR), ("pa", &AR), ("pl", &AF), ("ps", &AR), ("ro", &AF), ("ru", &AM), ("si", &AR), ("sk", &AF), ("sl", &AF), ("sq", &AF), ("sr", &AR), ("sv", &AF), ("ta", &AR), ("te", &AR), ("th", &TH), ("tk", &AF), ("to", &AF), ("tr", &AF), ("ug", &AR), ("uk", &AR), ("und", &UND), ("ur", &AR), ("uz", &AF), ("vi", &VI), ("wo", &AF), ("yo", &AF), ("zh", &AR)];
                fn lookup(req: icu_provider::DataRequest) -> Option<&'static <icu::collator::provider::CollationMetadataV1Marker as icu_provider::DynamicDataMarker>::Yokeable> {
                    DATA.binary_search_by(|(k, _)| req.legacy_cmp(k.as_bytes()).reverse()).map(|i| (*unsafe { DATA.get_unchecked(i) }).1).ok()
                }
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = lookup(req) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.locale.clone());
                    loop {
                        if let Some(payload) = lookup(icu_provider::DataRequest { locale: fallback_iterator.get(), ..req }) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::collator::provider::CollationMetadataV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(payload)), metadata })
            }
        }
    };
}
/// Implement `IterableDataProvider<CollationMetadataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this marker.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_collator_meta_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        impl icu_provider::datagen::IterableDataProvider<icu::collator::provider::CollationMetadataV1Marker> for $provider {
            fn supported_requests(&self) -> Result<std::collections::HashSet<(icu_provider::DataLocale, icu_provider::DataMarkerAttributes)>, icu_provider::DataError> {
                Ok(["af", "am", "ar", "as", "az", "be", "bg", "bn", "br", "bs", "ceb", "chr", "cs", "cy", "da", "de-AT-u-co-phonebk", "de-u-co-phonebk", "dsb", "el", "en-US-posix", "eo", "es", "et", "fa", "ff-Adlm", "fi", "fil", "fo", "fr-CA", "fy", "gl", "gu", "ha", "he", "hi", "hr", "hsb", "hu", "hy", "ig", "is", "ja", "ka", "kk", "km", "kn", "ko", "kok", "ku", "ky", "lo", "lt", "lv", "mk", "ml", "mn", "mr", "mt", "my", "ne", "no", "or", "pa", "pl", "ps", "ro", "ru", "si", "sk", "sl", "sq", "sr", "sv", "ta", "te", "th", "tk", "to", "tr", "ug", "uk", "und", "ur", "uz", "vi", "wo", "yo", "zh"].into_iter().filter_map(icu_provider::DataRequest::legacy_decode).collect())
            }
        }
    };
}
