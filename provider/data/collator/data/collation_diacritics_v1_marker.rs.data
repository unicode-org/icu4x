// @generated
/// Implement `DataProvider<CollationDiacriticsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 606B for the lookup data structure (151 data identifiers)
/// * 364B[^1] for the actual data (2 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_collation_diacritics_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_COLLATION_DIACRITICS_V1_MARKER: icu_provider_baked::zerotrie::Data<icu::collator::provider::CollationDiacriticsV1Marker> = icu_provider_baked::zerotrie::Data { trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xE1zabcdefghijklmnopqrstuvwxyz\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x11,BPb{\x87\x9D\xAF\xB5\xF4\x08&7=QS`\x98\xB3\xC3\xCE\xD0\xD7\xE7\xC5fmrsz\x01\x02\x03\x06\x80\x80\x80\x80t\x80\x80\xC7eghlnrs\x01\x04\x06\x08\t\x0C\x80\x80c\x80o\x80o\x80\x80\x80x\x80\x80\xC6aehsvy\x01\x03\x05\x08\t\x80b\x80r\x80\x80w\x80\x80\x80\xC4aeos\x01\x02\x04\x80\x80i\x80b\x80\xC6lnostu\x01\x02\x03\x04\x05\x80\x80\x80\x80\x80\x80\xC6afiory\x01\x07\n\x0B\x0C\x80-Adlm\x80\x80l\x80\x80\x80\x80\xC4adlu\x01\x02\x03\x80\x80\x80\x80\xC7aeirsuy\x01\x02\x03\x04\x06\x07\x80\x80\x80\x80b\x80\x80\x80\xC6adegst\x01\x02\x03\x04\x05\x80\x80\x80\x80\x80\x80\xC2av\x01\x80\x80\xCBaegkmnosuxy\x01\x03\x05\x06\x07\x08\x0B\x12\x13(\x80a\x80p\x80\x80\x80\x80\x80k\x80\x80-Deva\x80\x80v\x80-\xC3DOT\x04\x08eva\x80rya\x80elu\x80\x80\xC6bimotv\x01\x03\x05\x06\x07\x80j\x80o\x80\x80\x80\x80\xC9aiklnrsty\x02\x03\x04\x05\x08\t\n\x0Bi\x80\x80\x80\x80\x80i\x80\x80\x80\x80\x80\xC5deloq\x02\x03\x04\x05s\x80\x80\x80\x80o\x80\xC2cr\x01\x80\x80\xC6aclrst\x01\x03\x04\x06\x07\x80m\x80\x80g\x80\x80\x80u\x80\xC4amou\x02\x03\x04j\x80\x80\x80\x80\xCEacdikloqruvwyz\x07\x08\x0F\x10\x11\x12\x13\x14\x15\x16\x17\x18\x1A\x80\xC2ht\x01\x80\x80\x80\x80-Deva\x80\x80\x80\x80\x80\x80\x80\x80\x80\x80r\x80l\x80\xC9aeghikort\x01\x02\x03\x04\x05\x06\x07\x08\x80\x80\x80\x80\x80\x80\x80\x80\x80\xC5gknrz\x01\x02\x04\x05\x80\x80d\x80\x80\x80\xC3eim\x02\x03c\x80\x81w\x80o\x80\xC2hn\x01\x80r\x80\xC3oru\x01\x03\x80l\x80e-Hans\x80\xC3ahu\x01\x02\x80\x80\x80" }, values: &[icu::collator::provider::CollationDiacriticsV1 { secondaries: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\x8A\0\x88\0\x8E\0\x9A\0\xA4\0\xB4\0\x8C\0\x9C\0\x96\0\xB6\0\x92\0\x98\0\x90\0\xA6\0\xA6\0\xB8\0\xBA\0\xBC\0\xA6\0\x84\0\x86\0\xA6\0\xA8\0\xA8\0\xA8\0\xA8\0\xA6\0\xBE\0\xA8\0\xA8\0\xA8\0\xA8\0\xA8\0\xC0\0\xC2\0\xC4\0\xC6\0\xC8\0\xCA\0\xA0\0\xA2\0\xA8\0\xA8\0\xA8\0\xA8\0\xCC\0\xCE\0\xA8\0\xD0\0\xD2\0\x82\0\xA8\0\xD4\0\xB2\0\xAA\0\xAA\0\x9E\0\xD6\0\xA8\0\xA8\0\xA8\0\xA6\0\xA6\0\xA6\0\0\0\0\0\x94\0\0\0\0\0\xD8\0\xA6\0\xA8\0\xA8\0\xA8\0\xA6\0\xA6\0\xA6\0\xA8\0\xA8") } }, icu::collator::provider::CollationDiacriticsV1 { secondaries: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\x8A\x04\x8B\0\x8E\x03\x8B\0\xA4\0\xB4\0\x8C\0\x9C\0\x96\x02\x8B\0\x92\0\x98\0\x90\0\xA6\0\xA6\0\xB8\0\xBA\0\xBC\0\xA6\0\x84\0\x86\0\xA6\0\xA8\0\xA8\0\xA8\0\xA8\0\xA6\0\xBE\0\xA8\0\xA8\0\xA8\0\xA8\0\xA8\0\xC0\0\xC2\x05\x8B\0\xC6\0\xC8\0\xCA\0\xA0\0\xA2\0\xA8\0\xA8\0\xA8\0\xA8\0\xCC\0\xCE\0\xA8\0\xD0\0\xD2\0\x82\0\xA8\0\xD4\0\xB2\0\xAA\0\xAA\0\x9E\0\xD6\0\xA8\0\xA8\0\xA8\0\xA6\0\xA6\0\xA6\0\0\0\0\0\x94\0\0\0\0\0\xD8\0\xA6\0\xA8\0\xA8\0\xA8\0\xA6\0\xA6\0\xA6\0\xA8\0\xA8") } }] };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::collator::provider::CollationDiacriticsV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::collator::provider::CollationDiacriticsV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_COLLATION_DIACRITICS_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::collator::provider::CollationDiacriticsV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_COLLATION_DIACRITICS_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::collator::provider::CollationDiacriticsV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_collation_diacritics_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::collator::provider::CollationDiacriticsV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_COLLATION_DIACRITICS_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_collation_diacritics_v1_marker as impl_collation_diacritics_v1_marker;
