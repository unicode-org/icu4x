// @generated
/// Implement `DataProvider<DigitalDurationDataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_digital_duration_data_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_DIGITAL_DURATION_DATA_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::AttributesAndLocale, icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker> = {
                type S = <icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                const _DURATIONUNIT_TYPE_HMS_AF: &S = &icu::experimental::duration::provider::DigitalDurationDataV1 { hm: icu::experimental::duration::provider::digital::HmVariant::DoubleHourColonSep, hms: icu::experimental::duration::provider::digital::HmsVariant::DoubleHourColonSep, ms: icu::experimental::duration::provider::digital::MsVariant::DoubleMinuteColonSep };
                const _DURATIONUNIT_TYPE_HMS_DA: &S = &icu::experimental::duration::provider::DigitalDurationDataV1 { hm: icu::experimental::duration::provider::digital::HmVariant::SingleHourDotSep, hms: icu::experimental::duration::provider::digital::HmsVariant::SingleHourDotSep, ms: icu::experimental::duration::provider::digital::MsVariant::SingleMinuteDotSep };
                const _DURATIONUNIT_TYPE_HMS_ES_CL: &S = &icu::experimental::duration::provider::DigitalDurationDataV1 { hm: icu::experimental::duration::provider::digital::HmVariant::SingleHourColonSep, hms: icu::experimental::duration::provider::digital::HmsVariant::DoubleHourColonSep, ms: icu::experimental::duration::provider::digital::MsVariant::DoubleMinuteColonSep };
                const _DURATIONUNIT_TYPE_HMS_MN: &S = &icu::experimental::duration::provider::DigitalDurationDataV1 { hm: icu::experimental::duration::provider::digital::HmVariant::DoubleHourColonSep, hms: icu::experimental::duration::provider::digital::HmsVariant::DoubleHourColonSep, ms: icu::experimental::duration::provider::digital::MsVariant::SingleMinuteColonSep };
                const _DURATIONUNIT_TYPE_HMS_TK: &S = &icu::experimental::duration::provider::DigitalDurationDataV1 { hm: icu::experimental::duration::provider::digital::HmVariant::SingleHourColonSep, hms: icu::experimental::duration::provider::digital::HmsVariant::DoubleHourColonSep, ms: icu::experimental::duration::provider::digital::MsVariant::SingleMinuteColonSep };
                const _DURATIONUNIT_TYPE_HMS_UND: &S = &icu::experimental::duration::provider::DigitalDurationDataV1 { hm: icu::experimental::duration::provider::digital::HmVariant::SingleHourColonSep, hms: icu::experimental::duration::provider::digital::HmsVariant::SingleHourColonSep, ms: icu::experimental::duration::provider::digital::MsVariant::SingleMinuteColonSep };
                icu_provider_baked::binary_search::Data(&[(("durationUnit-type-hm", "af"), _DURATIONUNIT_TYPE_HMS_AF), (("durationUnit-type-hm", "be"), _DURATIONUNIT_TYPE_HMS_AF), (("durationUnit-type-hm", "da"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hm", "es-CL"), _DURATIONUNIT_TYPE_HMS_ES_CL), (("durationUnit-type-hm", "fi"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hm", "ia"), _DURATIONUNIT_TYPE_HMS_AF), (("durationUnit-type-hm", "id"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hm", "lt"), _DURATIONUNIT_TYPE_HMS_AF), (("durationUnit-type-hm", "mn"), _DURATIONUNIT_TYPE_HMS_MN), (("durationUnit-type-hm", "si"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hm", "sl"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hm", "sr"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hm", "sr-Latn"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hm", "su"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hm", "tk"), _DURATIONUNIT_TYPE_HMS_TK), (("durationUnit-type-hm", "und"), _DURATIONUNIT_TYPE_HMS_UND), (("durationUnit-type-hms", "af"), _DURATIONUNIT_TYPE_HMS_AF), (("durationUnit-type-hms", "be"), _DURATIONUNIT_TYPE_HMS_AF), (("durationUnit-type-hms", "da"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hms", "es-CL"), _DURATIONUNIT_TYPE_HMS_ES_CL), (("durationUnit-type-hms", "fi"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hms", "ia"), _DURATIONUNIT_TYPE_HMS_AF), (("durationUnit-type-hms", "id"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hms", "lt"), _DURATIONUNIT_TYPE_HMS_AF), (("durationUnit-type-hms", "mn"), _DURATIONUNIT_TYPE_HMS_MN), (("durationUnit-type-hms", "si"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hms", "sl"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hms", "sr"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hms", "sr-Latn"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hms", "su"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-hms", "tk"), _DURATIONUNIT_TYPE_HMS_TK), (("durationUnit-type-hms", "und"), _DURATIONUNIT_TYPE_HMS_UND), (("durationUnit-type-ms", "af"), _DURATIONUNIT_TYPE_HMS_AF), (("durationUnit-type-ms", "be"), _DURATIONUNIT_TYPE_HMS_AF), (("durationUnit-type-ms", "da"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-ms", "es-CL"), _DURATIONUNIT_TYPE_HMS_ES_CL), (("durationUnit-type-ms", "fi"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-ms", "ia"), _DURATIONUNIT_TYPE_HMS_AF), (("durationUnit-type-ms", "id"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-ms", "lt"), _DURATIONUNIT_TYPE_HMS_AF), (("durationUnit-type-ms", "mn"), _DURATIONUNIT_TYPE_HMS_MN), (("durationUnit-type-ms", "si"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-ms", "sl"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-ms", "sr"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-ms", "sr-Latn"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-ms", "su"), _DURATIONUNIT_TYPE_HMS_DA), (("durationUnit-type-ms", "tk"), _DURATIONUNIT_TYPE_HMS_TK), (("durationUnit-type-ms", "und"), _DURATIONUNIT_TYPE_HMS_UND)])
            };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_DIGITAL_DURATION_DATA_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_DIGITAL_DURATION_DATA_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_digital_duration_data_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_DIGITAL_DURATION_DATA_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_digital_duration_data_v1_marker as impl_digital_duration_data_v1_marker;
