// @generated
/// Implement `DataProvider<DigitalDurationDataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_digital_duration_data_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_DIGITAL_DURATION_DATA_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::Locale, icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker> = {
                type S = <icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                const __AF: &S = &icu::experimental::duration::provider::DigitalDurationDataV1 { hm: icu::experimental::duration::provider::digital::HmVariant::DoubleHourColonSep, hms: icu::experimental::duration::provider::digital::HmsVariant::DoubleHourColonSep, ms: icu::experimental::duration::provider::digital::MsVariant::DoubleMinuteColonSep };
                const __DA: &S = &icu::experimental::duration::provider::DigitalDurationDataV1 { hm: icu::experimental::duration::provider::digital::HmVariant::SingleHourDotSep, hms: icu::experimental::duration::provider::digital::HmsVariant::SingleHourDotSep, ms: icu::experimental::duration::provider::digital::MsVariant::SingleMinuteDotSep };
                const __ES_CL: &S = &icu::experimental::duration::provider::DigitalDurationDataV1 { hm: icu::experimental::duration::provider::digital::HmVariant::SingleHourColonSep, hms: icu::experimental::duration::provider::digital::HmsVariant::DoubleHourColonSep, ms: icu::experimental::duration::provider::digital::MsVariant::DoubleMinuteColonSep };
                const __MN: &S = &icu::experimental::duration::provider::DigitalDurationDataV1 { hm: icu::experimental::duration::provider::digital::HmVariant::DoubleHourColonSep, hms: icu::experimental::duration::provider::digital::HmsVariant::DoubleHourColonSep, ms: icu::experimental::duration::provider::digital::MsVariant::SingleMinuteColonSep };
                const __TK: &S = &icu::experimental::duration::provider::DigitalDurationDataV1 { hm: icu::experimental::duration::provider::digital::HmVariant::SingleHourColonSep, hms: icu::experimental::duration::provider::digital::HmsVariant::DoubleHourColonSep, ms: icu::experimental::duration::provider::digital::MsVariant::SingleMinuteColonSep };
                const __UND: &S = &icu::experimental::duration::provider::DigitalDurationDataV1 { hm: icu::experimental::duration::provider::digital::HmVariant::SingleHourColonSep, hms: icu::experimental::duration::provider::digital::HmsVariant::SingleHourColonSep, ms: icu::experimental::duration::provider::digital::MsVariant::SingleMinuteColonSep };
                icu_provider_baked::binary_search::Data(&[("af", __AF), ("be", __AF), ("da", __DA), ("es-CL", __ES_CL), ("fi", __DA), ("ia", __AF), ("id", __DA), ("lt", __AF), ("mn", __MN), ("si", __DA), ("sl", __DA), ("sr", __DA), ("sr-Latn", __DA), ("su", __DA), ("tk", __TK), ("und", __UND)])
            };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_DIGITAL_DURATION_DATA_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_DIGITAL_DURATION_DATA_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_digital_duration_data_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::experimental::duration::provider::digital::DigitalDurationDataV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_DIGITAL_DURATION_DATA_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_digital_duration_data_v1_marker as impl_digital_duration_data_v1_marker;
