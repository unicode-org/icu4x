// @generated
/// Implement `DataProvider<UnitIdsV1>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 1368B for the lookup data structure (155 data identifiers)
/// * 310B[^1] for the actual data (155 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
///
/// This macro requires the following crates:
/// * `icu`
/// * `icu_provider`
/// * `icu_provider/baked`
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_unit_ids_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.82"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.82"]
        impl $provider {
            const DATA_UNIT_IDS_V1: icu_provider::baked::zerotrie::Data<icu::experimental::measure::provider::UnitIdsV1> = {
                const TRIE: icu_provider::baked::zerotrie::ZeroTrieSimpleAscii<&'static [u8]> = icu_provider::baked::zerotrie::ZeroTrieSimpleAscii { store: b"und\x1E\xE1x1abcdefghijklmnopqrstvwy\0\0\0\0\x01\x01\x01\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x04\x04\x04\x04\x04\rJ\x95\xEDDl\xC9\x0E6BX\x99\xC1\xFB\x19D\xBC\xD3\x01\x7F\xB6\xBB\xD700-kilometer\x80\xC5cmrst\x03\x08\x1A*re\x81pere\x82c-\xC2ms\x06inute\x83econd\x84tronomical-unit\x85mosphere\x86\xC6aeiruy\x06\x17\x190;r\x87rel\x88\xC2ac\x06ufort\x89querel\x8At\x8Bitish-thermal-unit\x8C-it\x8D\xC2-s\x03jp\x8Ehel\x8Fte\x90\0\xC5aehou\x1B+5<\xC3lnr\x0B\x11orie\x90\x01-it\x90\x02dela\x90\x03at\x90\x04\xC2ln\x06sius\x90\x05tury\x90\x06\xC2ao\x04in\x90\x07\x90\x08ulomb\x90\tp\x90\n-\xC2jm\x03p\x90\x0Betric\x90\x0C\xC5aeoru\x14;>H\xC2ly\x05ton\x90\r\x90\x0E-person\x90\x0F\xC3cgs\x05\nade\x90\x10ree\x90\x11sert-spoon\x90\x12-imperial\x90\x13t\x90\x14\xC2ao\x03m\x90\x15p\x90\x16nam\x90\x17\xC3alm\x14 rth-\xC2mr\x05ass\x90\x18adius\x90\x19ectronvolt\x90\x1A\x90\x1B\xC4alou\x18.I\xC3hrt\t\rrenheit\x90\x1Cad\x90\x1Dhom\x90\x1Euid-ounce\x90\x1F-imperial\x90 \xC2or\x0F\xC2dt\tcalorie\x90!\x90\"tnight\x90#\xC2nr\x02\x90$long\x90%\xC3-ar\x071force\x90&\xC2ls\x10lon\x90'-imperial\x90(oline-energy-density\x90)a\xC3imy\x03\x05n\x90*\x90+\x90,\xC2eo\x14\xC3cnr\x06\ntare\x90-ry\x90.tz\x90/\xC2ru\tsepower\x900r\x901\xC2nt\x04ch\x902em\x903\xC2io\x06gger\x904\xC2-u\x04jp\x905le\x906\xC5aeino\x0C\x17'+\xC2rt\x04at\x907al\x908\xC2ln\x05vin\x909\x90:logram\x90;-force\x90<ot\x90=\xC2ks\x03u\x90>aji\x90?\xC2iu\x1A\xC2gt\x12ht-\xC2sy\x06peed\x90@ear\x90Aer\x90B\xC2mx\x04en\x90C\x90D\xC3eio\x05 ter\x90E\xC2ln\x12e\x90F-scandinavian\x90Gute\x90H\xC2ln\x03e\x90Ith\x90J-person\x90K\xC3aei\r\x13utical-mile\x90Lwton\x90Mght\x90N\xC4fhsu\x0F\x12\x17\xC2gh\x08lucose\x90Og\x90Pm\x90Qaji\x90Rnce\x90S-troy\x90T\xC4aeio\x0E.T\xC2rs\x05sec\x90Ucal\x90Vr\xC2cm\x05ent\x90W\xC2iy\x0Cll\xC2ei\x02\x90Xon\x90Yriad\x90Z\xC2nx\x1E\xC2ct\x03h\x90[\x90\\-\xC2im\tmperial\x90]etric\x90^el\x90_\xC3iru\x04\nnt\x90`tion\x90and\x90b-force\x90cuart\x90d\xC2-e\nimperial\x90er\x90f\xC4aeio\x0F\x19#\xC2dn\x05ian\x90gkine\x90hvolution\x90i\xC2-n\x04jp\x90j\x90kd\x90l\xC8aehilotu\x03\x10'6:[ki\x90m\xC2-c\x04jp\x90nond\x90oaku\x90p-\xC2cl\x06loth\x90qength\x90re\xC2mv\x05ens\x90sert\x90tug\x90ular-\xC3lmr\x0B\x10uminosity\x90vass\x90wadius\x90x\xC2eo\x08radian\x90yne\x90zn\x90{\xC4aeho\n\x19!blespoon\x90|\xC2as\x07spoon\x90}la\x90~erm-us\x90\x7F\xC2-n\x04jp\x91\0\x91\x01ne\x91\x02olt\x91\x03\xC2ae\x04tt\x91\x04\xC2be\x04er\x91\x05k\x91\x06-person\x91\x07\xC2ae\x04rd\x91\x08ar\x91\t-person\x91\n" };
                const VALUES: &'static [<icu::experimental::measure::provider::UnitIdsV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct] = &[0u16, 1u16, 2u16, 3u16, 4u16, 5u16, 6u16, 7u16, 8u16, 9u16, 10u16, 11u16, 12u16, 13u16, 14u16, 15u16, 16u16, 17u16, 18u16, 19u16, 20u16, 21u16, 22u16, 23u16, 24u16, 25u16, 26u16, 27u16, 28u16, 29u16, 30u16, 31u16, 32u16, 33u16, 34u16, 35u16, 36u16, 37u16, 38u16, 39u16, 40u16, 41u16, 42u16, 43u16, 44u16, 45u16, 46u16, 47u16, 48u16, 49u16, 50u16, 51u16, 52u16, 53u16, 54u16, 55u16, 56u16, 57u16, 58u16, 59u16, 60u16, 61u16, 62u16, 63u16, 64u16, 65u16, 66u16, 67u16, 68u16, 69u16, 70u16, 71u16, 72u16, 73u16, 74u16, 75u16, 76u16, 77u16, 78u16, 79u16, 80u16, 81u16, 82u16, 83u16, 84u16, 85u16, 86u16, 87u16, 88u16, 89u16, 90u16, 91u16, 92u16, 93u16, 94u16, 95u16, 96u16, 97u16, 98u16, 99u16, 100u16, 101u16, 102u16, 103u16, 104u16, 105u16, 106u16, 107u16, 108u16, 109u16, 110u16, 111u16, 112u16, 113u16, 114u16, 115u16, 116u16, 117u16, 118u16, 119u16, 120u16, 121u16, 122u16, 123u16, 124u16, 125u16, 126u16, 127u16, 128u16, 129u16, 130u16, 131u16, 132u16, 133u16, 134u16, 135u16, 136u16, 137u16, 138u16, 139u16, 140u16, 141u16, 142u16, 143u16, 144u16, 145u16, 146u16, 147u16, 148u16, 149u16, 150u16, 151u16, 152u16, 153u16, 154u16];
                unsafe { icu_provider::baked::zerotrie::Data::from_trie_and_values_unchecked(TRIE, VALUES) }
            };
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::DataProvider<icu::experimental::measure::provider::UnitIdsV1> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::experimental::measure::provider::UnitIdsV1>, icu_provider::DataError> {
                let mut req = req;
                req.id.locale = Default::default();
                let metadata = icu_provider::DataResponseMetadata::default();
                let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_UNIT_IDS_V1, req.id, req.metadata.attributes_prefix_match) else { return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::experimental::measure::provider::UnitIdsV1 as icu_provider::DataMarker>::INFO, req)) };
                Ok(icu_provider::DataResponse { payload, metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_unit_ids_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu::experimental::measure::provider::UnitIdsV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider::baked::DataStore::iter(&Self::DATA_UNIT_IDS_V1).collect())
            }
        }
    };
    ($ provider : ty , DRY) => {};
    ($ provider : ty , DRY , ITER) => {
        __impl_unit_ids_v1!($provider, ITER);
    };
}
#[doc(inline)]
pub use __impl_unit_ids_v1 as impl_unit_ids_v1;
