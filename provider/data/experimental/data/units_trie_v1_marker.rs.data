// @generated
/// Implement `DataProvider<UnitsTrieV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 1340B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_units_trie_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.71.1"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.71.1"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_UNITS_TRIE_V1_MARKER: &'static <icu::experimental::measure::provider::trie::UnitsTrieV1Marker as icu_provider::DynamicDataMarker>::DataStruct = &icu::experimental::measure::provider::trie::UnitsTrieV1 { trie: zerotrie::ZeroTrieSimpleAscii { store: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\xE1x1abcdefghijklmnopqrstvwy\0\0\0\0\x01\x01\x01\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x04\x04\x04\x04\rJ\x95\xEDDl\xC9\x0E6BX\x99\xB8\xF2\t4\xAC\xC3\xF1o\xA6\xAB\xC700-kilometer\x80\xC5cmrst\x03\x08\x1A*re\x81pere\x82c-\xC2ms\x06inute\x83econd\x84tronomical-unit\x85mosphere\x86\xC6aeiruy\x06\x17\x190;r\x87rel\x88\xC2ac\x06ufort\x89querel\x8At\x8Bitish-thermal-unit\x8C-it\x8D\xC2-s\x03jp\x8Ehel\x8Fte\x90\0\xC5aehou\x1B+5<\xC3lnr\x0B\x11orie\x90\x01-it\x90\x02dela\x90\x03at\x90\x04\xC2ln\x06sius\x90\x05tury\x90\x06\xC2ao\x04in\x90\x07\x90\x08ulomb\x90\tp\x90\n-\xC2jm\x03p\x90\x0Betric\x90\x0C\xC5aeoru\x14;>H\xC2ly\x05ton\x90\r\x90\x0E-person\x90\x0F\xC3cgs\x05\nade\x90\x10ree\x90\x11sert-spoon\x90\x12-imperial\x90\x13t\x90\x14\xC2ao\x03m\x90\x15p\x90\x16nam\x90\x17\xC3alm\x14 rth-\xC2mr\x05ass\x90\x18adius\x90\x19ectronvolt\x90\x1A\x90\x1B\xC4alou\x18.I\xC3hrt\t\rrenheit\x90\x1Cad\x90\x1Dhom\x90\x1Euid-ounce\x90\x1F-imperial\x90 \xC2or\x0F\xC2dt\tcalorie\x90!\x90\"tnight\x90#\xC2nr\x02\x90$long\x90%\xC3-ar\x071force\x90&\xC2ls\x10lon\x90'-imperial\x90(oline-energy-density\x90)a\xC3imy\x03\x05n\x90*\x90+\x90,\xC2eo\x14\xC3cnr\x06\ntare\x90-ry\x90.tz\x90/\xC2ru\tsepower\x900r\x901\xC2nt\x04ch\x902em\x903\xC2io\x06gger\x904\xC2-u\x04jp\x905le\x906\xC5aeino\x0C\x17'+\xC2rt\x04at\x907al\x908\xC2ln\x05vin\x909\x90:logram\x90;-force\x90<ot\x90=\xC2ks\x03u\x90>aji\x90?\xC2iu\x11\xC2gt\tht-year\x90@er\x90A\xC2mx\x04en\x90B\x90C\xC3eio\x05 ter\x90D\xC2ln\x12e\x90E-scandinavian\x90Fute\x90G\xC2ln\x03e\x90Hth\x90I-person\x90J\xC2ae\rutical-mile\x90Kwton\x90L\xC4fhsu\x0F\x12\x17\xC2gh\x08lucose\x90Mg\x90Nm\x90Oaji\x90Pnce\x90Q-troy\x90R\xC4aeio\x0E.T\xC2rs\x05sec\x90Scal\x90Tr\xC2cm\x05ent\x90U\xC2iy\x0Cll\xC2ei\x02\x90Von\x90Wriad\x90X\xC2nx\x1E\xC2ct\x03h\x90Y\x90Z-\xC2im\tmperial\x90[etric\x90\\el\x90]\xC3iru\x04\nnt\x90^tion\x90_nd\x90`-force\x90auart\x90b\xC2-e\nimperial\x90cr\x90d\xC4aeio\x0F\x19#\xC2dn\x05ian\x90ekine\x90fvolution\x90g\xC2-n\x04jp\x90h\x90id\x90j\xC8aehilotu\x03\x10'6:[ki\x90k\xC2-c\x04jp\x90lond\x90maku\x90n-\xC2cl\x06loth\x90oength\x90pe\xC2mv\x05ens\x90qert\x90rug\x90slar-\xC3lmr\x0B\x10uminosity\x90tass\x90uadius\x90v\xC2eo\x08radian\x90wne\x90xn\x90y\xC4aeho\n\x19!blespoon\x90z\xC2as\x07spoon\x90{la\x90|erm-us\x90}\xC2-n\x04jp\x90~\x90\x7Fne\x91\0olt\x91\x01\xC2ae\x04tt\x91\x02\xC2be\x04er\x91\x03k\x91\x04-person\x91\x05\xC2ae\x04rd\x91\x06ar\x91\x07-person\x91\x08") } } };
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DataProvider<icu::experimental::measure::provider::trie::UnitsTrieV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::experimental::measure::provider::trie::UnitsTrieV1Marker>, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_UNITS_TRIE_V1_MARKER), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::experimental::measure::provider::trie::UnitsTrieV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_units_trie_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::experimental::measure::provider::trie::UnitsTrieV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::experimental::measure::provider::trie::UnitsTrieV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_units_trie_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::experimental::measure::provider::trie::UnitsTrieV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_units_trie_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::experimental::measure::provider::trie::UnitsTrieV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::experimental::measure::provider::trie::UnitsTrieV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::experimental::measure::provider::trie::UnitsTrieV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_units_trie_v1_marker as impl_units_trie_v1_marker;
