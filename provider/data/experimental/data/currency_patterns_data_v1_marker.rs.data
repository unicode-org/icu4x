// @generated
/// Implement `DataProvider<CurrencyPatternsDataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 88B for the lookup data structure (13 data identifiers)
/// * 227B[^1] for the actual data (7 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_currency_patterns_data_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.71.1"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.71.1"]
        impl $provider {
            const DATA_CURRENCY_PATTERNS_DATA_V1_MARKER: icu_provider_baked::zerotrie::Data<icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1Marker> = icu_provider_baked::zerotrie::Data { trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xCBbcejmrstuvz\x03\x06\x08\n\x0C\x0E\x14\x16\x19\x1Clo\x80eb\x81e\x81a\x82y\x80o\x83\xC2iw\x01\x84\x81o\x80nd\x85ec\x86h\x82-SG\x85" }, values: &[icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1 { patterns: icu::experimental::relativetime::provider::PluralPatterns { strings: icu::plurals::provider::PluralElementsPackedCow { elements: alloc::borrow::Cow::Borrowed(unsafe { icu::plurals::provider::PluralElementsPackedULE::from_byte_slice_unchecked(b"\0\x03\x04 ") }) }, _phantom: core::marker::PhantomData } }, icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1 { patterns: icu::experimental::relativetime::provider::PluralPatterns { strings: icu::plurals::provider::PluralElementsPackedCow { elements: alloc::borrow::Cow::Borrowed(unsafe { icu::plurals::provider::PluralElementsPackedULE::from_byte_slice_unchecked(b"\x80\x03\x03\x04 \x01\0\0\0\0\0\x10\x02\x05 ") }) }, _phantom: core::marker::PhantomData } }, icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1 { patterns: icu::experimental::relativetime::provider::PluralPatterns { strings: icu::plurals::provider::PluralElementsPackedCow { elements: alloc::borrow::Cow::Borrowed(unsafe { icu::plurals::provider::PluralElementsPackedULE::from_byte_slice_unchecked(b"\0\x02\x03") }) }, _phantom: core::marker::PhantomData } }, icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1 { patterns: icu::experimental::relativetime::provider::PluralPatterns { strings: icu::plurals::provider::PluralElementsPackedCow { elements: alloc::borrow::Cow::Borrowed(unsafe { icu::plurals::provider::PluralElementsPackedULE::from_byte_slice_unchecked(b"\x80\x06\x02\x0B de \x02\0\0\0\0\0\x04\0\x10\x02\x05 0\x02\x05 ") }) }, _phantom: core::marker::PhantomData } }, icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1 { patterns: icu::experimental::relativetime::provider::PluralPatterns { strings: icu::plurals::provider::PluralElementsPackedCow { elements: alloc::borrow::Cow::Borrowed(unsafe { icu::plurals::provider::PluralElementsPackedULE::from_byte_slice_unchecked(b"\0\x03\x02") }) }, _phantom: core::marker::PhantomData } }, icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1 { patterns: icu::experimental::relativetime::provider::PluralPatterns { strings: icu::plurals::provider::PluralElementsPackedCow { elements: alloc::borrow::Cow::Borrowed(unsafe { icu::plurals::provider::PluralElementsPackedULE::from_byte_slice_unchecked(b"\0\x02\x05 ") }) }, _phantom: core::marker::PhantomData } }, icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1 { patterns: icu::experimental::relativetime::provider::PluralPatterns { strings: icu::plurals::provider::PluralElementsPackedCow { elements: alloc::borrow::Cow::Borrowed(unsafe { icu::plurals::provider::PluralElementsPackedULE::from_byte_slice_unchecked(b"\0\x02\t\xE2\x80\xAF") }) }, _phantom: core::marker::PhantomData } }] };
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DataProvider<icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_CURRENCY_PATTERNS_DATA_V1_MARKER, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_CURRENCY_PATTERNS_DATA_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_default() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_currency_patterns_data_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                icu_provider::DataProvider::<icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1Marker>::load(self, req).map(|r| r.metadata)
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_currency_patterns_data_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_CURRENCY_PATTERNS_DATA_V1_MARKER).collect())
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_currency_patterns_data_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                icu_provider::DataProvider::<icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1Marker>::load(self, req).map(|r| r.metadata)
            }
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::experimental::dimension::provider::currency_patterns::CurrencyPatternsDataV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_CURRENCY_PATTERNS_DATA_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_currency_patterns_data_v1_marker as impl_currency_patterns_data_v1_marker;
