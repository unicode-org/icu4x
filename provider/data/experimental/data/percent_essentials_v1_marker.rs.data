// @generated
/// Implement `DataProvider<PercentEssentialsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 858B[^1] for the lookup data structure (59 data identifiers)
/// * 1035B[^1] for the actual data (9 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_percent_essentials_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_PERCENT_ESSENTIALS_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::Locale<6usize>, icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker> = icu_provider_baked::binary_search::Data(
                {
                    use icu_provider_baked::binary_search::tinystr::tinystr;
                    &[tinystr!(6usize, "ar"), tinystr!(6usize, "ar-SA"), tinystr!(6usize, "ar-SO"), tinystr!(6usize, "as"), tinystr!(6usize, "be"), tinystr!(6usize, "blo"), tinystr!(6usize, "bn"), tinystr!(6usize, "br"), tinystr!(6usize, "brx"), tinystr!(6usize, "ca"), tinystr!(6usize, "cs"), tinystr!(6usize, "cv"), tinystr!(6usize, "da"), tinystr!(6usize, "de"), tinystr!(6usize, "de-CH"), tinystr!(6usize, "de-LI"), tinystr!(6usize, "dsb"), tinystr!(6usize, "en-AT"), tinystr!(6usize, "en-DE"), tinystr!(6usize, "en-DK"), tinystr!(6usize, "en-FI"), tinystr!(6usize, "en-IN"), tinystr!(6usize, "en-SE"), tinystr!(6usize, "es"), tinystr!(6usize, "es-419"), tinystr!(6usize, "eu"), tinystr!(6usize, "fi"), tinystr!(6usize, "fo"), tinystr!(6usize, "fr"), tinystr!(6usize, "fr-CH"), tinystr!(6usize, "gl"), tinystr!(6usize, "gu"), tinystr!(6usize, "hi"), tinystr!(6usize, "hr"), tinystr!(6usize, "hsb"), tinystr!(6usize, "ku"), tinystr!(6usize, "lb"), tinystr!(6usize, "lt"), tinystr!(6usize, "mk"), tinystr!(6usize, "nds"), tinystr!(6usize, "no"), tinystr!(6usize, "oc"), tinystr!(6usize, "pa"), tinystr!(6usize, "qu"), tinystr!(6usize, "rm"), tinystr!(6usize, "ro"), tinystr!(6usize, "ru"), tinystr!(6usize, "sa"), tinystr!(6usize, "sk"), tinystr!(6usize, "sl"), tinystr!(6usize, "sv"), tinystr!(6usize, "ta"), tinystr!(6usize, "ta-MY"), tinystr!(6usize, "ta-SG"), tinystr!(6usize, "tk"), tinystr!(6usize, "tr"), tinystr!(6usize, "tt"), tinystr!(6usize, "und"), tinystr!(6usize, "xnr")]
                },
                {
                    type S = <icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                    const __AR: &S = &icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 0u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("\u{200e}%\u{200e}"), percent_symbol_index: 5u8, standard: alloc::borrow::Cow::Borrowed("#,##0%") };
                    const __AR_SA: &S = &icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 0u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("Ùª"), percent_symbol_index: 5u8, standard: alloc::borrow::Cow::Borrowed("#,##0%") };
                    const __AS: &S = &icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 0u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 8u8, standard: alloc::borrow::Cow::Borrowed("#,##,##0%") };
                    const __BE: &S = &icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 0u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{a0}"), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 7u8, standard: alloc::borrow::Cow::Borrowed("#,##0\u{a0}%") };
                    const __BLO: &S = &icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 3u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("\u{a0}") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 0u8, standard: alloc::borrow::Cow::Borrowed("%\u{a0}#,#0;%\u{a0}-#,#0") };
                    const __DE_CH: &S = &icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 0u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 5u8, standard: alloc::borrow::Cow::Borrowed("#,##0%") };
                    const __EU: &S = &icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 3u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("\u{a0}") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 0u8, standard: alloc::borrow::Cow::Borrowed("%\u{a0}#,##0") };
                    const __KU: &S = &icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 1u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 0u8, standard: alloc::borrow::Cow::Borrowed("%#,##0") };
                    const __OC: &S = &icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 0u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{202f}"), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 8u8, standard: alloc::borrow::Cow::Borrowed("#,##0\u{202f}%") };
                    &[__AR, __AR_SA, __AR_SA, __AS, __BE, __BLO, __AS, __BE, __AS, __BE, __BE, __BE, __BE, __BE, __DE_CH, __DE_CH, __BE, __BE, __BE, __BE, __BE, __AS, __BE, __BE, __DE_CH, __EU, __BE, __BE, __BE, __DE_CH, __BE, __AS, __AS, __BE, __BE, __KU, __BE, __BE, __BE, __BE, __BE, __OC, __AS, __BE, __BE, __BE, __BE, __AS, __BE, __BE, __BE, __AS, __DE_CH, __DE_CH, __BE, __KU, __BE, __DE_CH, __AS]
                },
            );
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_PERCENT_ESSENTIALS_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_PERCENT_ESSENTIALS_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_percent_essentials_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_PERCENT_ESSENTIALS_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_percent_essentials_v1_marker as impl_percent_essentials_v1_marker;
