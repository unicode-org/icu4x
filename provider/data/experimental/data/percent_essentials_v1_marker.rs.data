// @generated
/// Implement `DataProvider<PercentEssentialsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 691B for the lookup data structure (170 data identifiers)
/// * 1035B[^1] for the actual data (9 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_percent_essentials_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_PERCENT_ESSENTIALS_V1_MARKER: icu_provider_baked::zerotrie::Data<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker> = icu_provider_baked::zerotrie::Data { trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xE1zabcdefghijklmnopqrstuvwxyz\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x02\x02\x02\x02\x19:Pg\x97\xB4\xC0\xD6\xE8\xEE-A_pv\x8A\x8C\x99\xD7\xFB\x11\x1C\x1E%6\xC5fmrsz\x01\x02\x0B\x0E\x80\x80\x81-S\xC2AO\x01\x82\x82\x83t\x80\x80\xC7eghlnrs\x01\x04\x06\x08\t\x0C\x84\x80c\x80o\x80o\x85\x83\x84x\x83\x80-Cyrl\x80\xC6aehsvy\x01\x03\x05\x08\t\x84b\x80r\x80\x84w\x80\x84\x80\xC4aeos\x01\x0B\r\x84\x84-\xC2CL\x02H\x80I\x80i\x80b\x84\xC6lnostu\x01\x1B\x1C\"#\x80\x80-\xC5ADFIS\x02\x08\n\x0CT\x84\xC2EK\x01\x84\x84I\x84N\x83E\x84\x80\x84-419\x80\x80\x86\xC6afiory\x01\x07\n\x0B\x10\x80-Adlm\x80\x84l\x80\x84\x84-CH\x80\x80\xC4adlu\x01\x02\x03\x80\x80\x84\x83\xC7aeirsuy\x01\x02\x03\x04\x06\x07\x80\x80\x83\x84b\x84\x80\x80\xC6adegst\x01\x02\x03\x04\x05\x80\x80\x80\x80\x80\x80\xC2av\x01\x80\x80\xCBaegkmnosuxy\x01\x03\x05\x06\x07\x08\x0B\x12\x13(\x80a\x80p\x80\x80\x80\x80\x80k\x80\x80-Deva\x80\x87v\x80-\xC3DOT\x04\x08eva\x80rya\x80elu\x80\x80\xC6bimotv\x01\x03\x05\x06\x07\x84j\x80o\x80\x80\x84\x80\xC9aiklnrsty\x02\x03\x04\x05\x08\t\n\x0Bi\x80\x80\x84\x80\x80i\x80\x80\x80\x80\x80\xC5deloq\x02\x03\x04\x05s\x84\x80\x80\x84o\x80\xC2cr\x01\x88\x80\xC6aclrst\x01\x03\x04\x06\x07\x83m\x80\x80g\x80\x80\x80u\x84\xC4amou\x02\x03\x04j\x80\x84\x84\x84\xCEacdikloqruvwyz\x07\x08\x0F\x10\x11\x12\x13\x14\x1B\x1C\x1D\x1E \x83\xC2ht\x01\x80\x80\x80\x80-Deva\x80\x80\x84\x84\x80\x80\x80-Latn\x80\x80\x84\x80r\x80l\x80\xC9aeghikort\n\x0B\x0C\r\x0E\x0F\x10\x11\x83-\xC2MS\x02Y\x80G\x80\x80\x80\x80\x80\x84\x80\x87\x84\xC5gknrz\x01\x02\x04\x05\x80\x80d\x80\x80\x80-Cyrl\x80\xC3eim\x02\x03c\x80\x80w\x80o\x80\xC2hn\x01\x80r\x83\xC3oru\x01\x03\x80l\x80e\x80-Hans\x80\xC3ahu\x01\x08\x80\x80-Hant\x80\x80" }, values: &[icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 0u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 5u8, standard: alloc::borrow::Cow::Borrowed("#,##0%") }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 0u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("\u{200e}%\u{200e}"), percent_symbol_index: 5u8, standard: alloc::borrow::Cow::Borrowed("#,##0%") }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 0u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("Ùª"), percent_symbol_index: 5u8, standard: alloc::borrow::Cow::Borrowed("#,##0%") }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 0u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 8u8, standard: alloc::borrow::Cow::Borrowed("#,##,##0%") }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 0u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{a0}"), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 7u8, standard: alloc::borrow::Cow::Borrowed("#,##0\u{a0}%") }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 3u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("\u{a0}") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 0u8, standard: alloc::borrow::Cow::Borrowed("%\u{a0}#,#0;%\u{a0}-#,#0") }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 3u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("\u{a0}") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 0u8, standard: alloc::borrow::Cow::Borrowed("%\u{a0}#,##0") }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 1u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed(""), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 0u8, standard: alloc::borrow::Cow::Borrowed("%#,##0") }, icu::experimental::dimension::provider::percent::PercentEssentialsV1 { number_index: 0u8, percent_sign_affixes: icu::experimental::dimension::provider::percent::PercentAffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{202f}"), suffix: alloc::borrow::Cow::Borrowed("") }, percent_sign_symbol: alloc::borrow::Cow::Borrowed("%"), percent_symbol_index: 8u8, standard: alloc::borrow::Cow::Borrowed("#,##0\u{202f}%") }] };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_PERCENT_ESSENTIALS_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_PERCENT_ESSENTIALS_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_percent_essentials_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::experimental::dimension::provider::percent::PercentEssentialsV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_PERCENT_ESSENTIALS_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_percent_essentials_v1_marker as impl_percent_essentials_v1_marker;
