// @generated
/// Implement `DataProvider<CanonicalCombiningClassV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 5360B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_canonical_combining_class_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.71.1"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.71.1"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_CANONICAL_COMBINING_CLASS_V1_MARKER: &'static <icu::properties::provider::CanonicalCombiningClassV1Marker as icu_provider::DynamicDataMarker>::DataStruct = &icu::properties::provider::PropertyCodePointMapV1::CodePointTrie(icu::collections::codepointtrie::CodePointTrie::from_parts(icu::collections::codepointtrie::CodePointTrieHeader { high_start: 125440u32, shifted12_high_start: 31u16, index3_null_offset: 336u16, data_null_offset: 0u32, null_value: 0u32, trie_type: icu::collections::codepointtrie::TrieType::Small }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\0\xBD\0\0\0\0\0\0\0\0\0\xFA\0\0\0\0\0\0\0)\x01i\x01\x99\x01\xCE\x01\0\0\xFF\x01.\x02m\x02\0\0\x82\x02\xC0\x02\xEE\x02\x17\x03M\x03\x8D\x03\xCA\x03\x8D\x03\xFD\x03\x8D\x03<\x04\x8D\x03<\x04\x8D\x03<\x04\0\0<\x04\x8D\x03o\x04\x8D\x03<\x04\x86\x04<\x04\0\0\xC3\x04\xCE\x04\t\x05\x15\x05P\x05x\x05\xB2\x05\xF2\x05,\x06\xE8\x04\x01\x05\x0E\x05$\x05D\x05T\x05l\x05\x8B\x05\0\0\x10\0 \x000\0@\0P\0`\0p\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\x80\0\x90\0\xA0\0\xB0\0\xBD\0\xCD\0\xDD\0\xED\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\xFA\0\n\x01\x1A\x01*\x01\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0)\x019\x01I\x01Y\x01i\x01y\x01\x89\x01\x99\x01\xA9\x01\xB9\x01\xC9\x01\xCE\x01\xDE\x01\xEE\x01\xFE\x01\0\0\x10\0 \x000\0\xFF\x01\x0F\x02\x1F\x02/\x02.\x02>\x02N\x02^\x02m\x02}\x02\x8D\x02\x9D\x02\0\0\x10\0 \x000\0\x82\x02\x92\x02\xA2\x02\xB2\x02\xC0\x02\xD0\x02\xE0\x02\xF0\x02\xEE\x02\xFE\x02\x0E\x03\x1E\x03\x17\x03'\x037\x03G\x03M\x03]\x03m\x03}\x03\x8D\x03\x9D\x03\xAD\x03\xBD\x03\xCA\x03\xDA\x03\xEA\x03\xFA\x03\x8D\x03\x9D\x03\xAD\x03\xBD\x03\xFD\x03\r\x04\x1D\x04-\x04\x8D\x03\x9D\x03\xAD\x03\xBD\x03<\x04L\x04\\\x04l\x04\x8D\x03\x9D\x03\xAD\x03\xBD\x03<\x04L\x04\\\x04l\x04\x8D\x03\x9D\x03\xAD\x03\xBD\x03<\x04L\x04\\\x04l\x04\0\0\x10\0 \x000\0<\x04L\x04\\\x04l\x04\x8D\x03\x9D\x03\xAD\x03\xBD\x03o\x04\x7F\x04\x8F\x04\x9F\x04\x8D\x03\x9D\x03\xAD\x03\xBD\x03<\x04L\x04\\\x04l\x04\x86\x04\x96\x04\xA6\x04\xB6\x04<\x04L\x04\\\x04l\x04\0\0\x10\0 \x000\0\xC3\x04\xD3\x04\xE3\x04\xF3\x04\xCE\x04\xDE\x04\xEE\x04\xFE\x04\t\x05\x19\x05)\x059\x05\x15\x05%\x055\x05E\x05P\x05`\x05p\x05\x80\x05x\x05\x88\x05\x98\x05\xA8\x05\xB2\x05\xC2\x05\xD2\x05\xE2\x05\xF2\x05\x02\x06\x12\x06\"\x06,\x06<\x06L\x06\\\x06\0\0\0\0\0\0e\x06\0\0\0\0\0\0\0\0%\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xBD\x04\0\0\x06\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8B\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x97\x06\0\0\0\0\0\0\0\0\n\x04\xA2\x06\0\0\0\0\0\0\xB2\x06\xC1\x06\0\0\0\0\0\0\0\0\0\0\0\0\xC5\x03\x06\x04\0\0\xD0\x06\xE9\0\0\0\0\0\xB7\x04\0\0\0\0\0\0\xC3\x03\xE0\x06\0\0\0\0\0\0\xC2\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xF0\x06\0\x07\x0E\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1E\x07.\x07\x80\08\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0H\x07W\x07\xEC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0q\0\xEB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xFB\x03\0\0\0\0\0\0\0\0\0\0\0\0\x80\0\x80\0\0\0\0\0g\x07\0\0\0\0\0\0\0\0\0\0\0\0w\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0q\0\x83\x07\0\0r\0\0\0\0\0\0\0\0\0\0\0\xEB\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\x04\0\0\xCB\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x06\x04\0\0\x80\0\xEB\0\0\0\0\0\xFC\x02\0\0\0\0\x07\x04\0\0\0\0\0\0\0\0\0\0\xC6\x03\n\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x93\x07\xA3\x07\0\0\0\0\x04\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xCA\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xA5\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xB5\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0%\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xED\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xF7\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xC5\x07\0\0\0\0\xD5\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xE5\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xF1\x07\0\0\0\0\0\0\xF4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xF9\x07\0\0\0\0\0\0\0\0\xFA\x02\0\0\0\0\0\0\0\0\x06\x08\xED\x01\0\0\0\0\x16\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\x04\0\0\0\0&\x08\0\0\0\0\0\0,\x08\0\0\0\0\0\0\0\0\xEA\0\0\0\0\09\x08\0\0\0\0\0\0\xC6\x03\0\0\0\0\0\0\0\0I\x08\0\0\0\0\0\0T\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0[\x08\0\0\0\0\0\0\0\0f\x08\xCA\x03\0\0s\x08\xE8\0\0\0\0\0\0\0\0\0\xB3\x04\n\x04\0\0\0\0\0\0\0\0\x81\x08-\x04\0\0\0\0\0\0\0\0\0\0\0\0\x8F\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xFB\x03\x92\x08\0\0\0\0\0\0\xFB\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8B\x08\0\0\0\0\0\0\0\0\0\0\0\0\xFF\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0,\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xB4\x04\xC6\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\n\x04\0\0\0\0\0\0\x06\x04\x03\x04\0\0\0\0\0\0\0\0\x01\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xFB\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xA0\x08\0\0\0\0\0\0\0\0\x03\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xA3\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xB3\x08\0\0\0\0\0\0\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xC3\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xC5\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xD4\x08\xE2\x08\xEF\x08\0\0\xFB\x08\0\0\0\0\0\0\0\0\0\0\t\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x19\t!\t/\t\0\0\0\0\0\0\0\0\0\0q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0-\x04\0\0\0\0\0\0t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0:\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0P\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0J\t\0\0\0\0\0\0\0\0\0\0\0\0V\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0H\0X\0p\0\x8F\0\xAF\0\xCF\0\xEF\0\x0F\x01/\x01:\x01P\x01_\x01}\x01\x9C\x01\xBC\x01P\x01\xDC\x01P\x01P\x01P\x01P\x01P\x01\xEE\x01P\x01\x0E\x02P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01(\x02H\x02e\x02P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01\x84\x02P\x01\xA2\x02\xA5\x02\xC5\x02P\x01P\x01P\x01\xE5\x02\xF4\x02\x0B\x03'\x03D\x03b\x03\x7F\x03\x9C\x03\xBB\x03\xD8\x03\xF2\x03P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01\xC9\x03P\x01P\x01P\x01P\x01\x07\x04P\x01\x1B\x04P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01;\x04P\x01P\x01P\x01P\x01P\x01P\x01P\x01P\x01E\x04a\x04P\x01P\x01P\x01P\x01P\x01P\x01\x81\x04\x97\x04\xA9\x04P\x01\xC8\x04") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE8\xDC\xDC\xDC\xDC\xE8\xD8\xDC\xDC\xDC\xDC\xDC\xCA\xCA\xDC\xDC\xDC\xDC\xCA\xCA\xDC\xDC\xDC\xDC\xDC\xDC\xDC\xDC\xDC\xDC\xDC\x01\x01\x01\x01\x01\xDC\xDC\xDC\xDC\xE6\xE6\xE6\xE6\xE6\xF0\xE6\xDC\xDC\xDC\xE6\xE6\xE6\xDC\xDC\0\xE6\xE6\xE6\xDC\xDC\xDC\xDC\xE6\xE8\xDC\xDC\xE6\xE9\xEA\xEA\xE9\xEA\xEA\xE9\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xE6\xE6\xE6\xE6\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xDC\xE6\xE6\xE6\xE6\xDC\xE6\xE6\xE6\xDE\xDC\xE6\xE6\xE6\xE6\xE6\xE6\xDC\xDC\xDC\xDC\xDC\xDC\xE6\xE6\xDC\xE6\xE6\xDE\xE4\xE6\n\x0B\x0C\r\x0E\x0F\x10\x11\x12\x13\x13\x14\x15\x16\0\x17\0\x18\x19\0\xE6\xDC\0\x12\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\x1E\x1F \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1B\x1C\x1D\x1E\x1F !\"\xE6\xE6\xDC\xDC\xE6\xE6\xE6\xE6\xE6\xDC\xE6\xE6\xDC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0#\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xE6\xE6\xE6\xE6\xE6\xE6\xE6\0\0\xE6\xE6\xE6\xE6\xDC\xE6\0\0\xE6\xE6\0\xDC\xE6\xE6\xDC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0$\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xE6\xDC\xE6\xE6\xDC\xE6\xE6\xDC\xDC\xDC\xE6\xDC\xDC\xE6\xDC\xE6\xE6\xDC\xE6\xDC\xE6\xDC\xE6\xDC\xE6\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xDC\xE6\0\0\0\0\0\0\0\0\0\xDC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xE6\xE6\xE6\xE6\0\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\0\xE6\xE6\xE6\0\xE6\xE6\xE6\xE6\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xDC\xDC\xDC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xE6\xE6\xDC\xDC\xDC\xE6\xE6\xE6\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xE6\xE6\xE6\xE6\xE6\xDC\xDC\xDC\xDC\xDC\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\0\xDC\xE6\xE6\xDC\xE6\xE6\xDC\xE6\xE6\xE6\xDC\xDC\xDC\x1B\x1C\x1D\xE6\xE6\xE6\xDC\xE6\xE6\xDC\xDC\xE6\xE6\xE6\xE6\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\0\0\xE6\xDC\xE6\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\0\0\0\0\0\0\0T[\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\t\0\0\0\0\0\0\0\0\0\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0gg\t\0\0\0\0\0\0\0\0kkkk\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0vv\t\0\0\0\0\0\0\0\0zzzz\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xDC\xDC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xDC\0\xDC\0\xD8\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\x82\0\x84\0\0\0\0\0\x82\x82\x82\x82\0\0\x82\0\xE6\xE6\t\0\xE6\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xDC\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\t\t\0\0\0\0\0\t\0\0\0\0\0\0\0\0\0\0\xE6\0\0\0\0\0\0\0\0\0\xE4\0\0\0\0\0\0\0\0\0\xDE\xE6\xDC\0\0\0\0\0\0\0\xE6\xDC\0\0\0\0\0\0\0\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\0\0\xDC\xE6\xE6\xE6\xE6\xE6\xDC\xDC\xDC\xDC\xDC\xDC\xE6\xE6\xDC\0\xDC\xE6\xE6\xDC\xDC\xE6\xE6\xE6\xE6\xE6\xDC\xE6\xE6\xE6\xE6\0\0\0\0\0\0\0\0\0\0\0\xE6\xDC\xE6\xE6\xE6\0\0\t\t\0\0\0\0\0\0\0\0\0\0\0\0\xE6\xE6\xE6\0\x01\xDC\xDC\xDC\xDC\xDC\xE6\xE6\xDC\xDC\xDC\xDC\xE6\0\x01\x01\x01\x01\x01\x01\x01\0\0\0\0\xDC\0\0\0\0\xE6\0\0\0\xE6\xE6\0\0\0\0\0\0\xE6\xE6\xDC\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xDC\xE6\xE6\xEA\xD6\xDC\xCA\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE8\xE4\xE4\xDC\xDA\xE6\xE9\xDC\xE6\xDC\xE6\xE6\x01\x01\xE6\xE6\xE6\xE6\x01\x01\x01\xE6\xE6\0\0\0\xE6\0\0\0\x01\x01\xE6\xDC\xE6\x01\x01\xDC\xDC\xDC\xDC\0\0\0\0\0\0\0\0\0\0\xDA\xE4\xE8\xDE\xE0\xE0\0\0\0\0\0\0\0\0\0\x08\x08\0\0\0\0\0\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\0\0\xE6\0\xE6\xE6\xDC\0\0\xE6\xE6\0\0\0\0\0\xE6\xE6\0\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1A\0\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xDC\xDC\xDC\xDC\xDC\xDC\xDC\xE6\xE6\0\0\0\0\0\0\0\0\0\0\0\0\0\xDC\0\xE6\0\0\0\0\0\0\0\0\xE6\x01\xDC\0\0\0\0\t\0\0\0\0\0\xE6\xDC\0\0\0\0\0\0\0\0\0\xE6\xE6\xE6\xE6\0\0\0\0\0\0\0\0\0\0\0\xE6\xE6\0\0\0\0\0\0\xDC\xDC\xE6\xE6\xE6\xDC\xE6\xDC\xDC\xDC\0\0\xE6\xDC\xE6\xDC\0\0\0\0\0\0\0\0\0\0\t\0\0\0\0\0\0\0\0\0\0\0\0\0\0\t\x07\0\0\0\0\0\t\t\0\0\0\0\0\0\0\0\0\0\0\t\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\t\x07\0\0\0\0\0\0\0\0\0\x07\t\0\0\0\0\0\0\0\0\0\0\0\x07\x07\0\0\0\0\0\0\xE6\xE6\xE6\xE6\xE6\xE6\xE6\0\0\0\t\0\0\0\x07\0\0\0\0\0\0\0\0\0\t\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\t\t\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\x06\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\xD8\xD8\x01\x01\x01\0\0\0\xE2\xD8\xD8\xD8\0\0\0\0\0\0\0\0\xDC\xDC\xDC\xDC\xDC\0\0\xE6\xE6\xE6\xE6\xE6\xDC\xDC\0\0\0\0\0\0\0\0\0\0\xE6\xE6\xE6\xE6\0\0\xE6\xE6\xE6\0\0\0\0\0\0\0\0\0\0\0\xE6\xE6\xE6\xE6\xE6\xE6\xE6\0\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\xE6\0\0\xE6\xE6\xE6\xE6\xE6\0\xE6\xE6\0\xE6\xE6\xE6\xE6\xE6\0\0\0\0\0\0\0\0\0\0\0\0\xE8\xE8\xDC\xE6\xDC\xDC\xDC\xDC\xDC\xDC\xDC\0\0\0\0\0\0\0\0\0\xE6\xE6\xE6\xE6\xE6\xE6\x07\0\0\0\0\0\0\0") }, icu::properties::props::CanonicalCombiningClass(0u8)));
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DataProvider<icu::properties::provider::CanonicalCombiningClassV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::CanonicalCombiningClassV1Marker>, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_CANONICAL_COMBINING_CLASS_V1_MARKER), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::CanonicalCombiningClassV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_canonical_combining_class_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::CanonicalCombiningClassV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_canonical_combining_class_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::CanonicalCombiningClassV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::CanonicalCombiningClassV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_canonical_combining_class_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::CanonicalCombiningClassV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::CanonicalCombiningClassV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::CanonicalCombiningClassV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_canonical_combining_class_v1_marker as impl_canonical_combining_class_v1_marker;
