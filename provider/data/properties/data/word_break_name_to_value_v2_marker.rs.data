// @generated
/// Implement `DataProvider<WordBreakNameToValueV2Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 332B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_word_break_name_to_value_v2_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.71.1"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.71.1"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_WORD_BREAK_NAME_TO_VALUE_V2_MARKER: &'static <icu::properties::provider::WordBreakNameToValueV2Marker as icu_provider::DynamicDataMarker>::DataStruct = &icu::properties::provider::names::PropertyValueNameToEnumMapV1 { map: zerotrie::ZeroTrieSimpleAscii { store: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\xE1qACDEFGHKLMNORSWXZ\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x07\t\x1BQ[p\x81\x8D\x93\xB0\xC6\xCB\xE1\xF1\xFB\xFDLetter\x81R\x88\xC2Qo\x02\x90\0uble_Quote\x90\0\xC5BMX_x\x05\x07\x08 \x90\x01G\x90\x02\x90\x03\x87\xC2BM\x0Base\x90\x01_GAZ\x90\x02odifier\x90\x03tend\x89NumLet\x87\xC2Oo\x01\x82rmat\x82\xC2Al\x03Z\x90\x04ue_After_Zwj\x90\x04\xC2Le\x01\x8Ebrew_Letter\x8E\xC2Aa\x01\x83takana\x83\xC2EF\x01\x81\x8A\xC4BLNi\x01\x02\x03\x8B\x84\x85d\xC2LN\x06etter\x84um\x85Let\x8B\xC4LUeu\x01\x02\x08\x8C\x86wline\x8Cmeric\x86ther\x80\xC2Ie\x01\x8Dgional_Indicator\x8D\xC2Qi\x01\x8Fngle_Quote\x8FSegSpace\x90\x06X\x80WJ\x90\x05") } } };
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DataProvider<icu::properties::provider::WordBreakNameToValueV2Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::WordBreakNameToValueV2Marker>, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_WORD_BREAK_NAME_TO_VALUE_V2_MARKER), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::WordBreakNameToValueV2Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_word_break_name_to_value_v2_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::WordBreakNameToValueV2Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_word_break_name_to_value_v2_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::WordBreakNameToValueV2Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::WordBreakNameToValueV2Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_word_break_name_to_value_v2_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::WordBreakNameToValueV2Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::WordBreakNameToValueV2Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::WordBreakNameToValueV2Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_word_break_name_to_value_v2_marker as impl_word_break_name_to_value_v2_marker;
