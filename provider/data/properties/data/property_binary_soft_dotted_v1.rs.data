// @generated
/// Implement `DataProvider<PropertyBinarySoftDottedV1>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 236B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
///
/// This macro requires the following crates:
/// * `icu`
/// * `icu_provider`
/// * `zerovec`
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_property_binary_soft_dotted_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.82"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.82"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_PROPERTY_BINARY_SOFT_DOTTED_V1: &'static <icu::properties::provider::PropertyBinarySoftDottedV1 as icu_provider::DynamicDataMarker>::DataStruct = &icu::properties::provider::PropertyCodePointSet::InversionList(unsafe {
                #[allow(unused_unsafe)]
                icu::collections::codepointinvlist::CodePointInversionList::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"i\0\0k\0\0/\x01\x000\x01\0I\x02\0J\x02\0h\x02\0i\x02\0\x9D\x02\0\x9E\x02\0\xB2\x02\0\xB3\x02\0\xF3\x03\0\xF4\x03\0V\x04\0W\x04\0X\x04\0Y\x04\0b\x1D\0c\x1D\0\x96\x1D\0\x97\x1D\0\xA4\x1D\0\xA5\x1D\0\xA8\x1D\0\xA9\x1D\0-\x1E\0.\x1E\0\xCB\x1E\0\xCC\x1E\0q \0r \0H!\0J!\0|,\0},\0\"\xD4\x01$\xD4\x01V\xD4\x01X\xD4\x01\x8A\xD4\x01\x8C\xD4\x01\xBE\xD4\x01\xC0\xD4\x01\xF2\xD4\x01\xF4\xD4\x01&\xD5\x01(\xD5\x01Z\xD5\x01\\\xD5\x01\x8E\xD5\x01\x90\xD5\x01\xC2\xD5\x01\xC4\xD5\x01\xF6\xD5\x01\xF8\xD5\x01*\xD6\x01,\xD6\x01^\xD6\x01`\xD6\x01\x92\xD6\x01\x94\xD6\x01\x1A\xDF\x01\x1B\xDF\x01L\xE0\x01N\xE0\x01h\xE0\x01i\xE0\x01") }, 50u32)
            });
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::DataProvider<icu::properties::provider::PropertyBinarySoftDottedV1> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::PropertyBinarySoftDottedV1>, icu_provider::DataError> {
                if req.id.locale.is_unknown() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_PROPERTY_BINARY_SOFT_DOTTED_V1), metadata: icu_provider::DataResponseMetadata::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::PropertyBinarySoftDottedV1 as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_property_binary_soft_dotted_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::PropertyBinarySoftDottedV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_property_binary_soft_dotted_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::DryDataProvider<icu::properties::provider::PropertyBinarySoftDottedV1> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_unknown() {
                    Ok(icu_provider::DataResponseMetadata::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::PropertyBinarySoftDottedV1 as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_property_binary_soft_dotted_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::DryDataProvider<icu::properties::provider::PropertyBinarySoftDottedV1> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_unknown() {
                    Ok(icu_provider::DataResponseMetadata::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::PropertyBinarySoftDottedV1 as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::PropertyBinarySoftDottedV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_property_binary_soft_dotted_v1 as impl_property_binary_soft_dotted_v1;
