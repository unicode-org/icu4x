// @generated
/// Implement `DataProvider<EmojiV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 932B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_emoji_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.71.1"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.71.1"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_EMOJI_V1_MARKER: &'static <icu::properties::provider::EmojiV1Marker as icu_provider::DynamicDataMarker>::DataStruct = &icu::properties::provider::PropertyCodePointSetV1::InversionList(unsafe {
                #[allow(unused_unsafe)]
                icu::collections::codepointinvlist::CodePointInversionList::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"#\0\0$\0\0*\0\0+\0\x000\0\0:\0\0\xA9\0\0\xAA\0\0\xAE\0\0\xAF\0\0< \0= \0I \0J \0\"!\0#!\09!\0:!\0\x94!\0\x9A!\0\xA9!\0\xAB!\0\x1A#\0\x1C#\0(#\0)#\0\xCF#\0\xD0#\0\xE9#\0\xF4#\0\xF8#\0\xFB#\0\xC2$\0\xC3$\0\xAA%\0\xAC%\0\xB6%\0\xB7%\0\xC0%\0\xC1%\0\xFB%\0\xFF%\0\0&\0\x05&\0\x0E&\0\x0F&\0\x11&\0\x12&\0\x14&\0\x16&\0\x18&\0\x19&\0\x1D&\0\x1E&\0 &\0!&\0\"&\0$&\0&&\0'&\0*&\0+&\0.&\x000&\08&\0;&\0@&\0A&\0B&\0C&\0H&\0T&\0_&\0a&\0c&\0d&\0e&\0g&\0h&\0i&\0{&\0|&\0~&\0\x80&\0\x92&\0\x98&\0\x99&\0\x9A&\0\x9B&\0\x9D&\0\xA0&\0\xA2&\0\xA7&\0\xA8&\0\xAA&\0\xAC&\0\xB0&\0\xB2&\0\xBD&\0\xBF&\0\xC4&\0\xC6&\0\xC8&\0\xC9&\0\xCE&\0\xD0&\0\xD1&\0\xD2&\0\xD3&\0\xD5&\0\xE9&\0\xEB&\0\xF0&\0\xF6&\0\xF7&\0\xFB&\0\xFD&\0\xFE&\0\x02'\0\x03'\0\x05'\0\x06'\0\x08'\0\x0E'\0\x0F'\0\x10'\0\x12'\0\x13'\0\x14'\0\x15'\0\x16'\0\x17'\0\x1D'\0\x1E'\0!'\0\"'\0('\0)'\x003'\x005'\0D'\0E'\0G'\0H'\0L'\0M'\0N'\0O'\0S'\0V'\0W'\0X'\0c'\0e'\0\x95'\0\x98'\0\xA1'\0\xA2'\0\xB0'\0\xB1'\0\xBF'\0\xC0'\x004)\x006)\0\x05+\0\x08+\0\x1B+\0\x1D+\0P+\0Q+\0U+\0V+\x0000\x0010\0=0\0>0\0\x972\0\x982\0\x992\0\x9A2\0\x04\xF0\x01\x05\xF0\x01\xCF\xF0\x01\xD0\xF0\x01p\xF1\x01r\xF1\x01~\xF1\x01\x80\xF1\x01\x8E\xF1\x01\x8F\xF1\x01\x91\xF1\x01\x9B\xF1\x01\xE6\xF1\x01\0\xF2\x01\x01\xF2\x01\x03\xF2\x01\x1A\xF2\x01\x1B\xF2\x01/\xF2\x010\xF2\x012\xF2\x01;\xF2\x01P\xF2\x01R\xF2\x01\0\xF3\x01\"\xF3\x01$\xF3\x01\x94\xF3\x01\x96\xF3\x01\x98\xF3\x01\x99\xF3\x01\x9C\xF3\x01\x9E\xF3\x01\xF1\xF3\x01\xF3\xF3\x01\xF6\xF3\x01\xF7\xF3\x01\xFE\xF4\x01\xFF\xF4\x01>\xF5\x01I\xF5\x01O\xF5\x01P\xF5\x01h\xF5\x01o\xF5\x01q\xF5\x01s\xF5\x01{\xF5\x01\x87\xF5\x01\x88\xF5\x01\x8A\xF5\x01\x8E\xF5\x01\x90\xF5\x01\x91\xF5\x01\x95\xF5\x01\x97\xF5\x01\xA4\xF5\x01\xA6\xF5\x01\xA8\xF5\x01\xA9\xF5\x01\xB1\xF5\x01\xB3\xF5\x01\xBC\xF5\x01\xBD\xF5\x01\xC2\xF5\x01\xC5\xF5\x01\xD1\xF5\x01\xD4\xF5\x01\xDC\xF5\x01\xDF\xF5\x01\xE1\xF5\x01\xE2\xF5\x01\xE3\xF5\x01\xE4\xF5\x01\xE8\xF5\x01\xE9\xF5\x01\xEF\xF5\x01\xF0\xF5\x01\xF3\xF5\x01\xF4\xF5\x01\xFA\xF5\x01P\xF6\x01\x80\xF6\x01\xC6\xF6\x01\xCB\xF6\x01\xD3\xF6\x01\xD5\xF6\x01\xD8\xF6\x01\xDC\xF6\x01\xE6\xF6\x01\xE9\xF6\x01\xEA\xF6\x01\xEB\xF6\x01\xED\xF6\x01\xF0\xF6\x01\xF1\xF6\x01\xF3\xF6\x01\xFD\xF6\x01\xE0\xF7\x01\xEC\xF7\x01\xF0\xF7\x01\xF1\xF7\x01\x0C\xF9\x01;\xF9\x01<\xF9\x01F\xF9\x01G\xF9\x01\0\xFA\x01p\xFA\x01}\xFA\x01\x80\xFA\x01\x8A\xFA\x01\x8F\xFA\x01\xC7\xFA\x01\xCE\xFA\x01\xDD\xFA\x01\xDF\xFA\x01\xEA\xFA\x01\xF0\xFA\x01\xF9\xFA\x01") }, 1431u32)
            });
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DataProvider<icu::properties::provider::EmojiV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::EmojiV1Marker>, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_EMOJI_V1_MARKER), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::EmojiV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_emoji_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::EmojiV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_emoji_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::EmojiV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::EmojiV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_emoji_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::EmojiV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::EmojiV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::EmojiV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_emoji_v1_marker as impl_emoji_v1_marker;
