// @generated
/// Implement `DataProvider<CasedV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 986B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_cased_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.71.1"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.71.1"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_CASED_V1_MARKER: &'static <icu::properties::provider::CasedV1Marker as icu_provider::DynamicDataMarker>::DataStruct = &icu::properties::provider::PropertyCodePointSetV1::InversionList(unsafe {
                #[allow(unused_unsafe)]
                icu::collections::codepointinvlist::CodePointInversionList::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"A\0\0[\0\0a\0\0{\0\0\xAA\0\0\xAB\0\0\xB5\0\0\xB6\0\0\xBA\0\0\xBB\0\0\xC0\0\0\xD7\0\0\xD8\0\0\xF7\0\0\xF8\0\0\xBB\x01\0\xBC\x01\0\xC0\x01\0\xC4\x01\0\x94\x02\0\x95\x02\0\xB9\x02\0\xC0\x02\0\xC2\x02\0\xE0\x02\0\xE5\x02\0E\x03\0F\x03\0p\x03\0t\x03\0v\x03\0x\x03\0z\x03\0~\x03\0\x7F\x03\0\x80\x03\0\x86\x03\0\x87\x03\0\x88\x03\0\x8B\x03\0\x8C\x03\0\x8D\x03\0\x8E\x03\0\xA2\x03\0\xA3\x03\0\xF6\x03\0\xF7\x03\0\x82\x04\0\x8A\x04\x000\x05\x001\x05\0W\x05\0`\x05\0\x89\x05\0\xA0\x10\0\xC6\x10\0\xC7\x10\0\xC8\x10\0\xCD\x10\0\xCE\x10\0\xD0\x10\0\xFB\x10\0\xFC\x10\0\0\x11\0\xA0\x13\0\xF6\x13\0\xF8\x13\0\xFE\x13\0\x80\x1C\0\x8B\x1C\0\x90\x1C\0\xBB\x1C\0\xBD\x1C\0\xC0\x1C\0\0\x1D\0\xC0\x1D\0\0\x1E\0\x16\x1F\0\x18\x1F\0\x1E\x1F\0 \x1F\0F\x1F\0H\x1F\0N\x1F\0P\x1F\0X\x1F\0Y\x1F\0Z\x1F\0[\x1F\0\\\x1F\0]\x1F\0^\x1F\0_\x1F\0~\x1F\0\x80\x1F\0\xB5\x1F\0\xB6\x1F\0\xBD\x1F\0\xBE\x1F\0\xBF\x1F\0\xC2\x1F\0\xC5\x1F\0\xC6\x1F\0\xCD\x1F\0\xD0\x1F\0\xD4\x1F\0\xD6\x1F\0\xDC\x1F\0\xE0\x1F\0\xED\x1F\0\xF2\x1F\0\xF5\x1F\0\xF6\x1F\0\xFD\x1F\0q \0r \0\x7F \0\x80 \0\x90 \0\x9D \0\x02!\0\x03!\0\x07!\0\x08!\0\n!\0\x14!\0\x15!\0\x16!\0\x19!\0\x1E!\0$!\0%!\0&!\0'!\0(!\0)!\0*!\0.!\0/!\x005!\09!\0:!\0<!\0@!\0E!\0J!\0N!\0O!\0`!\0\x80!\0\x83!\0\x85!\0\xB6$\0\xEA$\0\0,\0\xE5,\0\xEB,\0\xEF,\0\xF2,\0\xF4,\0\0-\0&-\0'-\0(-\0--\0.-\0@\xA6\0n\xA6\0\x80\xA6\0\x9E\xA6\0\"\xA7\0\x88\xA7\0\x8B\xA7\0\x8F\xA7\0\x90\xA7\0\xCE\xA7\0\xD0\xA7\0\xD2\xA7\0\xD3\xA7\0\xD4\xA7\0\xD5\xA7\0\xDD\xA7\0\xF2\xA7\0\xF7\xA7\0\xF8\xA7\0\xFB\xA7\x000\xAB\0[\xAB\0\\\xAB\0j\xAB\0p\xAB\0\xC0\xAB\0\0\xFB\0\x07\xFB\0\x13\xFB\0\x18\xFB\0!\xFF\0;\xFF\0A\xFF\0[\xFF\0\0\x04\x01P\x04\x01\xB0\x04\x01\xD4\x04\x01\xD8\x04\x01\xFC\x04\x01p\x05\x01{\x05\x01|\x05\x01\x8B\x05\x01\x8C\x05\x01\x93\x05\x01\x94\x05\x01\x96\x05\x01\x97\x05\x01\xA2\x05\x01\xA3\x05\x01\xB2\x05\x01\xB3\x05\x01\xBA\x05\x01\xBB\x05\x01\xBD\x05\x01\x80\x07\x01\x81\x07\x01\x83\x07\x01\x86\x07\x01\x87\x07\x01\xB1\x07\x01\xB2\x07\x01\xBB\x07\x01\x80\x0C\x01\xB3\x0C\x01\xC0\x0C\x01\xF3\x0C\x01P\r\x01f\r\x01p\r\x01\x86\r\x01\xA0\x18\x01\xE0\x18\x01@n\x01\x80n\x01\0\xD4\x01U\xD4\x01V\xD4\x01\x9D\xD4\x01\x9E\xD4\x01\xA0\xD4\x01\xA2\xD4\x01\xA3\xD4\x01\xA5\xD4\x01\xA7\xD4\x01\xA9\xD4\x01\xAD\xD4\x01\xAE\xD4\x01\xBA\xD4\x01\xBB\xD4\x01\xBC\xD4\x01\xBD\xD4\x01\xC4\xD4\x01\xC5\xD4\x01\x06\xD5\x01\x07\xD5\x01\x0B\xD5\x01\r\xD5\x01\x15\xD5\x01\x16\xD5\x01\x1D\xD5\x01\x1E\xD5\x01:\xD5\x01;\xD5\x01?\xD5\x01@\xD5\x01E\xD5\x01F\xD5\x01G\xD5\x01J\xD5\x01Q\xD5\x01R\xD5\x01\xA6\xD6\x01\xA8\xD6\x01\xC1\xD6\x01\xC2\xD6\x01\xDB\xD6\x01\xDC\xD6\x01\xFB\xD6\x01\xFC\xD6\x01\x15\xD7\x01\x16\xD7\x015\xD7\x016\xD7\x01O\xD7\x01P\xD7\x01o\xD7\x01p\xD7\x01\x89\xD7\x01\x8A\xD7\x01\xA9\xD7\x01\xAA\xD7\x01\xC3\xD7\x01\xC4\xD7\x01\xCC\xD7\x01\0\xDF\x01\n\xDF\x01\x0B\xDF\x01\x1F\xDF\x01%\xDF\x01+\xDF\x010\xE0\x01n\xE0\x01\0\xE9\x01D\xE9\x010\xF1\x01J\xF1\x01P\xF1\x01j\xF1\x01p\xF1\x01\x8A\xF1\x01") }, 4578u32)
            });
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DataProvider<icu::properties::provider::CasedV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::CasedV1Marker>, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_CASED_V1_MARKER), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::CasedV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_cased_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::CasedV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_cased_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::CasedV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::CasedV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_cased_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::CasedV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::CasedV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::CasedV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_cased_v1_marker as impl_cased_v1_marker;
