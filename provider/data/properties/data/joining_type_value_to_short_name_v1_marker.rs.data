// @generated
/// Implement `DataProvider<JoiningTypeValueToShortNameV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 46B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_joining_type_value_to_short_name_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_JOINING_TYPE_VALUE_TO_SHORT_NAME_V1_MARKER: &'static <icu::properties::provider::names::JoiningTypeValueToShortNameV1Marker as icu_provider::DynamicDataMarker>::Yokeable = &icu::properties::provider::names::PropertyEnumToValueNameLinearMapV1 { map: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x06\0\0\0\0\0\x01\0\x02\0\x03\0\x04\0\x05\0UCDLRT") } };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::properties::provider::names::JoiningTypeValueToShortNameV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::names::JoiningTypeValueToShortNameV1Marker>, icu_provider::DataError> {
                if req.id.locale.is_und() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_JOINING_TYPE_VALUE_TO_SHORT_NAME_V1_MARKER), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::names::JoiningTypeValueToShortNameV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_joining_type_value_to_short_name_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::names::JoiningTypeValueToShortNameV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_joining_type_value_to_short_name_v1_marker as impl_joining_type_value_to_short_name_v1_marker;
