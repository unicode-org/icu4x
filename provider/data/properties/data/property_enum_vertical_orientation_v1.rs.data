// @generated
/// Implement `DataProvider<PropertyEnumVerticalOrientationV1>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 3124B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
///
/// This macro requires the following crates:
/// * `icu`
/// * `icu_provider`
/// * `zerovec`
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_property_enum_vertical_orientation_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.82"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.82"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_PROPERTY_ENUM_VERTICAL_ORIENTATION_V1: &'static <icu::properties::provider::PropertyEnumVerticalOrientationV1 as icu_provider::DynamicDataMarker>::DataStruct = &icu::properties::provider::PropertyCodePointMap::CodePointTrie(icu::collections::codepointtrie::CodePointTrie::from_parts(icu::collections::codepointtrie::CodePointTrieHeader { high_start: 1114112u32, shifted12_high_start: 272u16, index3_null_offset: 12u16, data_null_offset: 0u32, null_value: 0u32, trie_type: icu::collections::codepointtrie::TrieType::Small }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\0@\0Y\0\x98\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xD0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0I\x03c\x03q\x03\x87\x03\xA7\x03\xC4\x03\xDE\x03\xF8\x03c\x03c\x03c\x03\x18\x04c\x03c\x03c\x03\x18\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x048\x04c\x03c\x03c\x03\x18\x04c\x03c\x03c\x03\x18\x04\0\0\x10\0 \x000\0@\0P\0`\0p\0Y\0i\0y\0\x89\0\x98\0\xA8\0\xB8\0\xC8\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\xD0\0\xE0\0\xF0\0\0\x01\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\x10\0 \x000\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x0F\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xA9\0\x96\0\x1E\x01,\x01\xAE\0\xAA\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\x01<\x01\0\0L\x01X\x01f\x01\x0B\x01u\x01\x10\x01\x10\x01\x10\x01\x84\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0r\0\0\0\xF6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90\x01\x10\x01\x98\x01\0\0\0\0\0\0\0\0\x03\x01\x10\x01\x15\x01\0\0\xEC\0\xA8\x01\xB6\x01\x0E\x01\x10\x01\x10\x01\xC6\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x16\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x18\x01\n\x01\x10\x01\xD2\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0E\x01\x10\x01\0\0\0\0\x16\x01\0\0\0\0\0\0\xA8\0\0\0\x08\x01\x10\x01\xE2\x01\x14\x01\x10\x01\0\0\0\0\0\0\0\0\0\0\x96\0\0\0\0\0\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\xF1\x01\xFF\x01\x10\x01\x0E\x02\x1D\x02\x10\x01*\x02\x10\x017\x02F\x02V\x02\x10\x01*\x02\x10\x017\x02a\x02\x10\x01\x10\x01n\x02\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01~\x02\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x0F\x02~\x02~\x02~\x02~\x02~\x02\x86\x02\x10\x01\x8E\x02\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x01\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x01\0\0\x10\x01\x17\x01\x9B\x02\xAA\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xBA\x02\xC9\x02\x10\x01\xD9\x02\x10\x01\xE9\x02\xF8\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\x03\x18\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x01\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x01\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0(\x03\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x10\x01\x12\x01\x84\0\x98\0\xA8\0\xA8\0\xA8\0\xA8\0\xA8\0\xA8\0\xC8\0\x0C\0\xE8\0\0\x01\x15\x01\x0C\0\x0C\0\x0C\x004\x01S\x01r\x01\x91\x01\x0C\0\xAB\x01\x0C\0\xCB\x01\xEB\x01\x0B\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02\xFB\0\x0C\0C\x02\x0C\0#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02\x0C\0\x0C\0\x0C\0\x0C\0#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02\xF8\0\x0C\0b\x02\x0C\0\x0C\0\x0C\0\x0C\0\x82\x02\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x9C\x02\x0C\0\x0C\0\xFC\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02\0\x01\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\xBC\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02\xF0\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\xDC\x02#\x02\xF8\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\xEB\x02#\x02\x08\x03\x0C\0\x0C\0#\x02\xFD\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0#\x02(\x03#\x02#\x02\xC8\0\xF8\0\x0C\0\x0C\0#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02#\x02)\x03\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0\x0C\0") }, unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\x03\0\0\x03\0\0\0\0\0\0\0\0\0\0\x03\x03\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\0\0\0\0\0\x03\x03\0\0\0\x03\0\0\0\0\x03\x03\x03\0\0\0\0\0\0\x03\0\x03\x03\x03\0\0\0\0\0\0\0\0\0\0\0\x03\x03\0\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\0\x03\x03\0\x03\x03\0\0\0\0\0\0\x03\x03\x03\x03\0\x03\0\x03\0\x03\0\0\0\0\x03\0\0\0\0\0\x03\x03\x03\x03\x03\x03\0\x03\x03\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\x03\x03\x03\x03\x03\x01\x01\x03\0\0\0\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\x03\x03\x03\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0\0\0\0\0\0\0\0\0\x03\x03\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x02\x03\x03\x03\x03\x03\x01\x01\x01\x01\x01\x01\x01\x01\x03\x03\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x02\x03\x03\x03\x03\x03\x02\x02\x03\x03\x03\x03\x02\x02\x03\x03\x03\x01\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x02\x02\x03\x03\x03\x03\x03\x01\x03\x03\x03\x03\x03\x03\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\0\x01\x01\x01\x01\x01\x01\x03\x03\x03\0\0\0\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\x02\x03\x03\x03\x03\x03\x03\x01\x01\x03\x03\x02\0\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x01\x01\0\0\0\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x01\x03\x01\x03\x01\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x01\x01\x01\x01\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\x03\x03\x01\x03\x03\x03\x03\0\0\0\0\0\0\0\0\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\x03\x03\0\0\x02\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\0\0\0\0") }, icu::properties::props::VerticalOrientation::Rotated));
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::DataProvider<icu::properties::provider::PropertyEnumVerticalOrientationV1> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::PropertyEnumVerticalOrientationV1>, icu_provider::DataError> {
                if req.id.locale.is_unknown() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_PROPERTY_ENUM_VERTICAL_ORIENTATION_V1), metadata: icu_provider::DataResponseMetadata::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::PropertyEnumVerticalOrientationV1 as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_property_enum_vertical_orientation_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::PropertyEnumVerticalOrientationV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_property_enum_vertical_orientation_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::DryDataProvider<icu::properties::provider::PropertyEnumVerticalOrientationV1> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_unknown() {
                    Ok(icu_provider::DataResponseMetadata::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::PropertyEnumVerticalOrientationV1 as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_property_enum_vertical_orientation_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::DryDataProvider<icu::properties::provider::PropertyEnumVerticalOrientationV1> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_unknown() {
                    Ok(icu_provider::DataResponseMetadata::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::PropertyEnumVerticalOrientationV1 as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::PropertyEnumVerticalOrientationV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_property_enum_vertical_orientation_v1 as impl_property_enum_vertical_orientation_v1;
