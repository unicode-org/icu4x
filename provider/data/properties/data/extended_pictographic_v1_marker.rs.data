// @generated
/// Implement `DataProvider<ExtendedPictographicV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 500B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_extended_pictographic_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.71.1"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.71.1"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_EXTENDED_PICTOGRAPHIC_V1_MARKER: &'static <icu::properties::provider::ExtendedPictographicV1Marker as icu_provider::DynamicDataMarker>::DataStruct = &icu::properties::provider::PropertyCodePointSetV1::InversionList(unsafe {
                #[allow(unused_unsafe)]
                icu::collections::codepointinvlist::CodePointInversionList::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\xA9\0\0\xAA\0\0\xAE\0\0\xAF\0\0< \0= \0I \0J \0\"!\0#!\09!\0:!\0\x94!\0\x9A!\0\xA9!\0\xAB!\0\x1A#\0\x1C#\0(#\0)#\0\x88#\0\x89#\0\xCF#\0\xD0#\0\xE9#\0\xF4#\0\xF8#\0\xFB#\0\xC2$\0\xC3$\0\xAA%\0\xAC%\0\xB6%\0\xB7%\0\xC0%\0\xC1%\0\xFB%\0\xFF%\0\0&\0\x06&\0\x07&\0\x13&\0\x14&\0\x86&\0\x90&\0\x06'\0\x08'\0\x13'\0\x14'\0\x15'\0\x16'\0\x17'\0\x1D'\0\x1E'\0!'\0\"'\0('\0)'\x003'\x005'\0D'\0E'\0G'\0H'\0L'\0M'\0N'\0O'\0S'\0V'\0W'\0X'\0c'\0h'\0\x95'\0\x98'\0\xA1'\0\xA2'\0\xB0'\0\xB1'\0\xBF'\0\xC0'\x004)\x006)\0\x05+\0\x08+\0\x1B+\0\x1D+\0P+\0Q+\0U+\0V+\x0000\x0010\0=0\0>0\0\x972\0\x982\0\x992\0\x9A2\0\0\xF0\x01\0\xF1\x01\r\xF1\x01\x10\xF1\x01/\xF1\x010\xF1\x01l\xF1\x01r\xF1\x01~\xF1\x01\x80\xF1\x01\x8E\xF1\x01\x8F\xF1\x01\x91\xF1\x01\x9B\xF1\x01\xAD\xF1\x01\xE6\xF1\x01\x01\xF2\x01\x10\xF2\x01\x1A\xF2\x01\x1B\xF2\x01/\xF2\x010\xF2\x012\xF2\x01;\xF2\x01<\xF2\x01@\xF2\x01I\xF2\x01\xFB\xF3\x01\0\xF4\x01>\xF5\x01F\xF5\x01P\xF6\x01\x80\xF6\x01\0\xF7\x01t\xF7\x01\x80\xF7\x01\xD5\xF7\x01\0\xF8\x01\x0C\xF8\x01\x10\xF8\x01H\xF8\x01P\xF8\x01Z\xF8\x01`\xF8\x01\x88\xF8\x01\x90\xF8\x01\xAE\xF8\x01\0\xF9\x01\x0C\xF9\x01;\xF9\x01<\xF9\x01F\xF9\x01G\xF9\x01\0\xFB\x01\0\xFC\x01\xFE\xFF\x01") }, 3537u32)
            });
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DataProvider<icu::properties::provider::ExtendedPictographicV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::ExtendedPictographicV1Marker>, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_EXTENDED_PICTOGRAPHIC_V1_MARKER), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::ExtendedPictographicV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_extended_pictographic_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::ExtendedPictographicV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_extended_pictographic_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::ExtendedPictographicV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::ExtendedPictographicV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_extended_pictographic_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::ExtendedPictographicV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::ExtendedPictographicV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::ExtendedPictographicV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_extended_pictographic_v1_marker as impl_extended_pictographic_v1_marker;
