// @generated
/// Implement `DataProvider<XdigitV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 482B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_xdigit_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.71.1"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.71.1"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_XDIGIT_V1_MARKER: &'static <icu::properties::provider::XdigitV1Marker as icu_provider::DynamicDataMarker>::DataStruct = &icu::properties::provider::PropertyCodePointSetV1::InversionList(unsafe {
                #[allow(unused_unsafe)]
                icu::collections::codepointinvlist::CodePointInversionList::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"0\0\0:\0\0A\0\0G\0\0a\0\0g\0\0`\x06\0j\x06\0\xF0\x06\0\xFA\x06\0\xC0\x07\0\xCA\x07\0f\t\0p\t\0\xE6\t\0\xF0\t\0f\n\0p\n\0\xE6\n\0\xF0\n\0f\x0B\0p\x0B\0\xE6\x0B\0\xF0\x0B\0f\x0C\0p\x0C\0\xE6\x0C\0\xF0\x0C\0f\r\0p\r\0\xE6\r\0\xF0\r\0P\x0E\0Z\x0E\0\xD0\x0E\0\xDA\x0E\0 \x0F\0*\x0F\0@\x10\0J\x10\0\x90\x10\0\x9A\x10\0\xE0\x17\0\xEA\x17\0\x10\x18\0\x1A\x18\0F\x19\0P\x19\0\xD0\x19\0\xDA\x19\0\x80\x1A\0\x8A\x1A\0\x90\x1A\0\x9A\x1A\0P\x1B\0Z\x1B\0\xB0\x1B\0\xBA\x1B\0@\x1C\0J\x1C\0P\x1C\0Z\x1C\0 \xA6\0*\xA6\0\xD0\xA8\0\xDA\xA8\0\0\xA9\0\n\xA9\0\xD0\xA9\0\xDA\xA9\0\xF0\xA9\0\xFA\xA9\0P\xAA\0Z\xAA\0\xF0\xAB\0\xFA\xAB\0\x10\xFF\0\x1A\xFF\0!\xFF\0'\xFF\0A\xFF\0G\xFF\0\xA0\x04\x01\xAA\x04\x010\r\x01:\r\x01@\r\x01J\r\x01f\x10\x01p\x10\x01\xF0\x10\x01\xFA\x10\x016\x11\x01@\x11\x01\xD0\x11\x01\xDA\x11\x01\xF0\x12\x01\xFA\x12\x01P\x14\x01Z\x14\x01\xD0\x14\x01\xDA\x14\x01P\x16\x01Z\x16\x01\xC0\x16\x01\xCA\x16\x01\xD0\x16\x01\xE4\x16\x010\x17\x01:\x17\x01\xE0\x18\x01\xEA\x18\x01P\x19\x01Z\x19\x01\xF0\x1B\x01\xFA\x1B\x01P\x1C\x01Z\x1C\x01P\x1D\x01Z\x1D\x01\xA0\x1D\x01\xAA\x1D\x01P\x1F\x01Z\x1F\x010a\x01:a\x01`j\x01jj\x01\xC0j\x01\xCAj\x01Pk\x01Zk\x01pm\x01zm\x01\xF0\xCC\x01\xFA\xCC\x01\xCE\xD7\x01\0\xD8\x01@\xE1\x01J\xE1\x01\xF0\xE2\x01\xFA\xE2\x01\xF0\xE4\x01\xFA\xE4\x01\xF1\xE5\x01\xFB\xE5\x01P\xE9\x01Z\xE9\x01\xF0\xFB\x01\xFA\xFB\x01") }, 784u32)
            });
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DataProvider<icu::properties::provider::XdigitV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::XdigitV1Marker>, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_XDIGIT_V1_MARKER), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::XdigitV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_xdigit_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::XdigitV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_xdigit_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::XdigitV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::XdigitV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_xdigit_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::XdigitV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::XdigitV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::XdigitV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_xdigit_v1_marker as impl_xdigit_v1_marker;
