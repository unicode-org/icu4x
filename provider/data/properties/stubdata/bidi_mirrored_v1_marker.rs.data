// @generated
/// Implement `DataProvider<BidiMirroredV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 716B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_bidi_mirrored_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.71.1"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.71.1"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_BIDI_MIRRORED_V1_MARKER: &'static <icu::properties::provider::BidiMirroredV1Marker as icu_provider::DynamicDataMarker>::DataStruct = &icu::properties::provider::PropertyCodePointSetV1::InversionList(unsafe {
                #[allow(unused_unsafe)]
                icu::collections::codepointinvlist::CodePointInversionList::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"(\0\0*\0\0<\0\0=\0\0>\0\0?\0\0[\0\0\\\0\0]\0\0^\0\0{\0\0|\0\0}\0\0~\0\0\xAB\0\0\xAC\0\0\xBB\0\0\xBC\0\0:\x0F\0>\x0F\0\x9B\x16\0\x9D\x16\09 \0; \0E \0G \0} \0\x7F \0\x8D \0\x8F \0@!\0A!\0\x01\"\0\x05\"\0\x08\"\0\x0E\"\0\x11\"\0\x12\"\0\x15\"\0\x17\"\0\x1A\"\0\x1E\"\0\x1F\"\0#\"\0$\"\0%\"\0&\"\0'\"\0+\"\x004\"\09\"\0:\"\0;\"\0M\"\0R\"\0V\"\0_\"\0a\"\0b\"\0c\"\0d\"\0l\"\0m\"\0\x8D\"\0\x8F\"\0\x93\"\0\x98\"\0\x99\"\0\xA2\"\0\xA4\"\0\xA6\"\0\xB9\"\0\xBE\"\0\xC0\"\0\xC9\"\0\xCE\"\0\xD0\"\0\xD2\"\0\xD6\"\0\xEE\"\0\xF0\"\0\0#\0\x08#\0\x0C#\0 #\0\"#\0)#\0+#\0h'\0v'\0\xC0'\0\xC1'\0\xC3'\0\xC7'\0\xC8'\0\xCA'\0\xCB'\0\xCE'\0\xD3'\0\xD7'\0\xDC'\0\xDF'\0\xE2'\0\xF0'\0\x83)\0\x99)\0\x9B)\0\xA1)\0\xA2)\0\xB0)\0\xB8)\0\xB9)\0\xC0)\0\xC6)\0\xC9)\0\xCA)\0\xCE)\0\xD3)\0\xD4)\0\xD6)\0\xD8)\0\xDD)\0\xE1)\0\xE2)\0\xE3)\0\xE6)\0\xE8)\0\xEA)\0\xF4)\0\xFA)\0\xFC)\0\xFE)\0\n*\0\x1D*\0\x1E*\0\"*\0$*\0%*\0&*\0'*\0)*\0**\0+*\0/*\x004*\x006*\0<*\0?*\0W*\0Y*\0d*\0f*\0j*\0n*\0o*\0q*\0s*\0u*\0y*\0\xA4*\0\xA6*\0\xAE*\0\xAF*\0\xD7*\0\xDC*\0\xDD*\0\xDE*\0\xDF*\0\xE2*\0\xE7*\0\xEC*\0\xEF*\0\xF3*\0\xF4*\0\xF7*\0\xFC*\0\xFD*\0\xFE*\0\xFE+\0\xFF+\0\x02.\0\x06.\0\t.\0\x0B.\0\x0C.\0\x0E.\0\x1C.\0\x1E.\0 .\0*.\0U.\0].\0\x080\0\x120\0\x140\0\x1C0\0Y\xFE\0_\xFE\0d\xFE\0f\xFE\0\x08\xFF\0\n\xFF\0\x1C\xFF\0\x1D\xFF\0\x1E\xFF\0\x1F\xFF\0;\xFF\0<\xFF\0=\xFF\0>\xFF\0[\xFF\0\\\xFF\0]\xFF\0^\xFF\0_\xFF\0a\xFF\0b\xFF\0d\xFF\0\xDB\xD6\x01\xDC\xD6\x01\x15\xD7\x01\x16\xD7\x01O\xD7\x01P\xD7\x01\x89\xD7\x01\x8A\xD7\x01\xC3\xD7\x01\xC4\xD7\x01") }, 554u32)
            });
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DataProvider<icu::properties::provider::BidiMirroredV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::BidiMirroredV1Marker>, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_BIDI_MIRRORED_V1_MARKER), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::BidiMirroredV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_bidi_mirrored_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::BidiMirroredV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_bidi_mirrored_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::BidiMirroredV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::BidiMirroredV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_bidi_mirrored_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::BidiMirroredV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::BidiMirroredV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::BidiMirroredV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_bidi_mirrored_v1_marker as impl_bidi_mirrored_v1_marker;
