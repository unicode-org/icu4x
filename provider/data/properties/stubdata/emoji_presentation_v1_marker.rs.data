// @generated
/// Implement `DataProvider<EmojiPresentationV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 512B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_emoji_presentation_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.71.1"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.71.1"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_EMOJI_PRESENTATION_V1_MARKER: &'static <icu::properties::provider::EmojiPresentationV1Marker as icu_provider::DynamicDataMarker>::DataStruct = &icu::properties::provider::PropertyCodePointSetV1::InversionList(unsafe {
                #[allow(unused_unsafe)]
                icu::collections::codepointinvlist::CodePointInversionList::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x1A#\0\x1C#\0\xE9#\0\xED#\0\xF0#\0\xF1#\0\xF3#\0\xF4#\0\xFD%\0\xFF%\0\x14&\0\x16&\0H&\0T&\0\x7F&\0\x80&\0\x93&\0\x94&\0\xA1&\0\xA2&\0\xAA&\0\xAC&\0\xBD&\0\xBF&\0\xC4&\0\xC6&\0\xCE&\0\xCF&\0\xD4&\0\xD5&\0\xEA&\0\xEB&\0\xF2&\0\xF4&\0\xF5&\0\xF6&\0\xFA&\0\xFB&\0\xFD&\0\xFE&\0\x05'\0\x06'\0\n'\0\x0C'\0('\0)'\0L'\0M'\0N'\0O'\0S'\0V'\0W'\0X'\0\x95'\0\x98'\0\xB0'\0\xB1'\0\xBF'\0\xC0'\0\x1B+\0\x1D+\0P+\0Q+\0U+\0V+\0\x04\xF0\x01\x05\xF0\x01\xCF\xF0\x01\xD0\xF0\x01\x8E\xF1\x01\x8F\xF1\x01\x91\xF1\x01\x9B\xF1\x01\xE6\xF1\x01\0\xF2\x01\x01\xF2\x01\x02\xF2\x01\x1A\xF2\x01\x1B\xF2\x01/\xF2\x010\xF2\x012\xF2\x017\xF2\x018\xF2\x01;\xF2\x01P\xF2\x01R\xF2\x01\0\xF3\x01!\xF3\x01-\xF3\x016\xF3\x017\xF3\x01}\xF3\x01~\xF3\x01\x94\xF3\x01\xA0\xF3\x01\xCB\xF3\x01\xCF\xF3\x01\xD4\xF3\x01\xE0\xF3\x01\xF1\xF3\x01\xF4\xF3\x01\xF5\xF3\x01\xF8\xF3\x01?\xF4\x01@\xF4\x01A\xF4\x01B\xF4\x01\xFD\xF4\x01\xFF\xF4\x01>\xF5\x01K\xF5\x01O\xF5\x01P\xF5\x01h\xF5\x01z\xF5\x01{\xF5\x01\x95\xF5\x01\x97\xF5\x01\xA4\xF5\x01\xA5\xF5\x01\xFB\xF5\x01P\xF6\x01\x80\xF6\x01\xC6\xF6\x01\xCC\xF6\x01\xCD\xF6\x01\xD0\xF6\x01\xD3\xF6\x01\xD5\xF6\x01\xD8\xF6\x01\xDC\xF6\x01\xE0\xF6\x01\xEB\xF6\x01\xED\xF6\x01\xF4\xF6\x01\xFD\xF6\x01\xE0\xF7\x01\xEC\xF7\x01\xF0\xF7\x01\xF1\xF7\x01\x0C\xF9\x01;\xF9\x01<\xF9\x01F\xF9\x01G\xF9\x01\0\xFA\x01p\xFA\x01}\xFA\x01\x80\xFA\x01\x8A\xFA\x01\x8F\xFA\x01\xC7\xFA\x01\xCE\xFA\x01\xDD\xFA\x01\xDF\xFA\x01\xEA\xFA\x01\xF0\xFA\x01\xF9\xFA\x01") }, 1212u32)
            });
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DataProvider<icu::properties::provider::EmojiPresentationV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::EmojiPresentationV1Marker>, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_EMOJI_PRESENTATION_V1_MARKER), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::EmojiPresentationV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_emoji_presentation_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::EmojiPresentationV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_emoji_presentation_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::EmojiPresentationV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::EmojiPresentationV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_emoji_presentation_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::EmojiPresentationV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::EmojiPresentationV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::EmojiPresentationV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_emoji_presentation_v1_marker as impl_emoji_presentation_v1_marker;
