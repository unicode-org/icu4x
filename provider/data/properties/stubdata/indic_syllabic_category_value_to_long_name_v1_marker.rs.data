// @generated
/// Implement `DataProvider<IndicSyllabicCategoryValueToLongNameV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_indic_syllabic_category_value_to_long_name_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_INDIC_SYLLABIC_CATEGORY_VALUE_TO_LONG_NAME_V1_MARKER: &'static <icu::properties::provider::names::IndicSyllabicCategoryValueToLongNameV1Marker as icu_provider::DynamicDataMarker>::Yokeable = &icu::properties::provider::names::PropertyEnumToValueNameLinearMapV1 { map: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"$\0\0\0\0\0\x05\0\r\0\x12\0'\08\0A\0O\0^\0s\0\x8E\0\x9E\0\xAE\0\xC3\0\xDC\0\xEE\0\x01\x01\x1B\x011\x01@\x01Q\x01W\x01g\x01q\x01v\x01|\x01\x89\x01\x94\x01\xA4\x01\xB5\x01\xC0\x01\xC9\x01\xCF\x01\xD6\x01\xDB\x01\xEA\x01OtherAvagrahaBinduBrahmi_Joining_NumberCantillation_MarkConsonantConsonant_DeadConsonant_FinalConsonant_Head_LetterConsonant_Initial_PostfixedConsonant_KillerConsonant_MedialConsonant_PlaceholderConsonant_Preceding_RephaConsonant_PrefixedConsonant_SubjoinedConsonant_Succeeding_RephaConsonant_With_StackerGemination_MarkInvisible_StackerJoinerModifying_LetterNon_JoinerNuktaNumberNumber_JoinerPure_KillerRegister_ShifterSyllable_ModifierTone_LetterTone_MarkViramaVisargaVowelVowel_DependentVowel_Independent") } };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::properties::provider::names::IndicSyllabicCategoryValueToLongNameV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::names::IndicSyllabicCategoryValueToLongNameV1Marker>, icu_provider::DataError> {
                if req.id.locale.is_empty() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_INDIC_SYLLABIC_CATEGORY_VALUE_TO_LONG_NAME_V1_MARKER), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::ExtraneousLocale.with_req(<icu::properties::provider::names::IndicSyllabicCategoryValueToLongNameV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_indic_syllabic_category_value_to_long_name_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::names::IndicSyllabicCategoryValueToLongNameV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(HashSet::from_iter([Default::default()]))
            }
        }
    };
}
#[doc(inline)]
pub use __impl_indic_syllabic_category_value_to_long_name_v1_marker as impl_indic_syllabic_category_value_to_long_name_v1_marker;
