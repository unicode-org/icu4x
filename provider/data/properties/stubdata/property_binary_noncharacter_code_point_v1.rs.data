// @generated
/// Implement `DataProvider<PropertyBinaryNoncharacterCodePointV1>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 140B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
///
/// This macro requires the following crates:
/// * `icu`
/// * `icu_provider`
/// * `zerovec`
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_property_binary_noncharacter_code_point_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.82"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.82"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_PROPERTY_BINARY_NONCHARACTER_CODE_POINT_V1: &'static <icu::properties::provider::PropertyBinaryNoncharacterCodePointV1 as icu_provider::DynamicDataMarker>::DataStruct = &icu::properties::provider::PropertyCodePointSet::InversionList(unsafe {
                #[allow(unused_unsafe)]
                icu::collections::codepointinvlist::CodePointInversionList::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\xD0\xFD\0\xF0\xFD\0\xFE\xFF\0\0\0\x01\xFE\xFF\x01\0\0\x02\xFE\xFF\x02\0\0\x03\xFE\xFF\x03\0\0\x04\xFE\xFF\x04\0\0\x05\xFE\xFF\x05\0\0\x06\xFE\xFF\x06\0\0\x07\xFE\xFF\x07\0\0\x08\xFE\xFF\x08\0\0\t\xFE\xFF\t\0\0\n\xFE\xFF\n\0\0\x0B\xFE\xFF\x0B\0\0\x0C\xFE\xFF\x0C\0\0\r\xFE\xFF\r\0\0\x0E\xFE\xFF\x0E\0\0\x0F\xFE\xFF\x0F\0\0\x10\xFE\xFF\x10\0\0\x11") }, 66u32)
            });
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::DataProvider<icu::properties::provider::PropertyBinaryNoncharacterCodePointV1> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::PropertyBinaryNoncharacterCodePointV1>, icu_provider::DataError> {
                if req.id.locale.is_unknown() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_PROPERTY_BINARY_NONCHARACTER_CODE_POINT_V1), metadata: icu_provider::DataResponseMetadata::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::PropertyBinaryNoncharacterCodePointV1 as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_property_binary_noncharacter_code_point_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::PropertyBinaryNoncharacterCodePointV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_property_binary_noncharacter_code_point_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::DryDataProvider<icu::properties::provider::PropertyBinaryNoncharacterCodePointV1> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_unknown() {
                    Ok(icu_provider::DataResponseMetadata::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::PropertyBinaryNoncharacterCodePointV1 as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_property_binary_noncharacter_code_point_v1!($provider);
        #[clippy::msrv = "1.82"]
        impl icu_provider::DryDataProvider<icu::properties::provider::PropertyBinaryNoncharacterCodePointV1> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_unknown() {
                    Ok(icu_provider::DataResponseMetadata::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::PropertyBinaryNoncharacterCodePointV1 as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.82"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::PropertyBinaryNoncharacterCodePointV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_property_binary_noncharacter_code_point_v1 as impl_property_binary_noncharacter_code_point_v1;
