// @generated
/// Implement `DataProvider<BidiClassNameToValueV2Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 444B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_bidi_class_name_to_value_v2_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.71.1"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.71.1"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_BIDI_CLASS_NAME_TO_VALUE_V2_MARKER: &'static <icu::properties::provider::BidiClassNameToValueV2Marker as icu_provider::DynamicDataMarker>::DataStruct = &icu::properties::provider::names::PropertyValueNameToEnumMapV1 { map: zerotrie::ZeroTrieSimpleAscii { store: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\xE1labceflnoprsw\0\0\0\0\0\0\0\0\x01\x01\x01\x1C2Eu\x8E\xC6\xDB\xEB)ar\xC3lnr\x01\x02\x8D\x85abic\xC2ln\x06etter\x8Dumber\x85\x87\xC2no\x02\x90\x02undaryneutral\x90\x02\xC2os\x0Emmonseparator\x86\x86\xC4nstu\x01\x02\x03\x82\x83\x84ropean\xC3nst\x06\x0Fumber\x82eparator\x83erminator\x84\xC2is\x12rststrongisolate\x90\x03i\x90\x03\x80\xC2er)fttoright\x80\xC3eio\t\x11mbedding\x8Bsolate\x90\x04verride\x8C\xC3eio\x01\x03\x8B\x90\x04\x8C\xC2os\x0Enspacingmark\x90\x01m\x90\x01\xC2nt\x01\x8Aherneutral\x8A\xC3ado\x11\x19ragraphseparator\x87\xC2fi\x02\x90\0\x90\x06pdirectional\xC2fi\x07ormat\x90\0solate\x90\x06\x81\xC2il)ghttoleft\x81\xC3eio\t\x11mbedding\x8Esolate\x90\x05verride\x8F\xC3eio\x01\x03\x8E\x90\x05\x8F\x88egmentseparator\x88\xC2hs\titespace\x89\x89") } } };
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DataProvider<icu::properties::provider::BidiClassNameToValueV2Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::BidiClassNameToValueV2Marker>, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_BIDI_CLASS_NAME_TO_VALUE_V2_MARKER), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::BidiClassNameToValueV2Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_bidi_class_name_to_value_v2_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::BidiClassNameToValueV2Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_bidi_class_name_to_value_v2_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::BidiClassNameToValueV2Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::BidiClassNameToValueV2Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_bidi_class_name_to_value_v2_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::BidiClassNameToValueV2Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::BidiClassNameToValueV2Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::BidiClassNameToValueV2Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_bidi_class_name_to_value_v2_marker as impl_bidi_class_name_to_value_v2_marker;
