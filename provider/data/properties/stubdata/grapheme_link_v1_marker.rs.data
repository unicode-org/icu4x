// @generated
/// Implement `DataProvider<GraphemeLinkV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 380B[^1] for the singleton data struct
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_grapheme_link_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.71.1"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.71.1"]
        impl $provider {
            #[doc(hidden)]
            pub const SINGLETON_GRAPHEME_LINK_V1_MARKER: &'static <icu::properties::provider::GraphemeLinkV1Marker as icu_provider::DynamicDataMarker>::DataStruct = &icu::properties::provider::PropertyCodePointSetV1::InversionList(unsafe {
                #[allow(unused_unsafe)]
                icu::collections::codepointinvlist::CodePointInversionList::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"M\t\0N\t\0\xCD\t\0\xCE\t\0M\n\0N\n\0\xCD\n\0\xCE\n\0M\x0B\0N\x0B\0\xCD\x0B\0\xCE\x0B\0M\x0C\0N\x0C\0\xCD\x0C\0\xCE\x0C\0;\r\0=\r\0M\r\0N\r\0\xCA\r\0\xCB\r\0:\x0E\0;\x0E\0\xBA\x0E\0\xBB\x0E\0\x84\x0F\0\x85\x0F\09\x10\0;\x10\0\x14\x17\0\x16\x17\x004\x17\x005\x17\0\xD2\x17\0\xD3\x17\0`\x1A\0a\x1A\0D\x1B\0E\x1B\0\xAA\x1B\0\xAC\x1B\0\xF2\x1B\0\xF4\x1B\0\x7F-\0\x80-\0\x06\xA8\0\x07\xA8\0,\xA8\0-\xA8\0\xC4\xA8\0\xC5\xA8\0S\xA9\0T\xA9\0\xC0\xA9\0\xC1\xA9\0\xF6\xAA\0\xF7\xAA\0\xED\xAB\0\xEE\xAB\0?\n\x01@\n\x01F\x10\x01G\x10\x01p\x10\x01q\x10\x01\x7F\x10\x01\x80\x10\x01\xB9\x10\x01\xBA\x10\x013\x11\x015\x11\x01\xC0\x11\x01\xC1\x11\x015\x12\x016\x12\x01\xEA\x12\x01\xEB\x12\x01M\x13\x01N\x13\x01\xCE\x13\x01\xD1\x13\x01B\x14\x01C\x14\x01\xC2\x14\x01\xC3\x14\x01\xBF\x15\x01\xC0\x15\x01?\x16\x01@\x16\x01\xB6\x16\x01\xB7\x16\x01+\x17\x01,\x17\x019\x18\x01:\x18\x01=\x19\x01?\x19\x01\xE0\x19\x01\xE1\x19\x014\x1A\x015\x1A\x01G\x1A\x01H\x1A\x01\x99\x1A\x01\x9A\x1A\x01?\x1C\x01@\x1C\x01D\x1D\x01F\x1D\x01\x97\x1D\x01\x98\x1D\x01A\x1F\x01C\x1F\x01/a\x010a\x01") }, 69u32)
            });
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DataProvider<icu::properties::provider::GraphemeLinkV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::properties::provider::GraphemeLinkV1Marker>, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(Self::SINGLETON_GRAPHEME_LINK_V1_MARKER), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::GraphemeLinkV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_grapheme_link_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::GraphemeLinkV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
    ($ provider : ty , DRY) => {
        __impl_grapheme_link_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::GraphemeLinkV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::GraphemeLinkV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
    ($ provider : ty , DRY , ITER) => {
        __impl_grapheme_link_v1_marker!($provider);
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::DryDataProvider<icu::properties::provider::GraphemeLinkV1Marker> for $provider {
            fn dry_load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponseMetadata, icu_provider::DataError> {
                if req.id.locale.is_default() {
                    Ok(Default::default())
                } else {
                    Err(icu_provider::DataErrorKind::InvalidRequest.with_req(<icu::properties::provider::GraphemeLinkV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
        #[clippy::msrv = "1.71.1"]
        impl icu_provider::IterableDataProvider<icu::properties::provider::GraphemeLinkV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BtreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok([Default::default()].into_iter().collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_grapheme_link_v1_marker as impl_grapheme_link_v1_marker;
