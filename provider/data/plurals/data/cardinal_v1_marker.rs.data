// @generated
/// Implement `DataProvider<CardinalV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 435B for the lookup data structure (103 data identifiers)
/// * 7214B[^1] for the actual data (34 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_cardinal_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_CARDINAL_V1_MARKER: icu_provider_baked::zerotrie::Data<icu::plurals::provider::CardinalV1Marker> = icu_provider_baked::zerotrie::Data { trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xE1vabcdefghiklmnoprstuvxz\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x11*;I[m{\x93\x9D\xAF\xBE\xCF\xD8\xDA\xF5\0)8JMO\xC5fmrsz\x01\x02\x03\x06\x80\x81\x82\x81t\x83\x80\xC7eghlnrs\x01\x02\x04\x06\x07\n\x84\x80o\x85o\x86\x81\x87x\x80\x88\xC5aehsy\x01\x03\x05\x06\x89b\x8Ar\x80\x8B\x8C\xC4aeos\x01\x02\x04\x8D\x83i\x81b\x8E\xC6lnostu\x01\x02\x03\x04\x05\x80\x83\x80\x8F\x83\x80\xC5aiory\x01\x04\x05\x07\x81\x83l\x8A\x80\x90\0\x83\xC4adlu\x02\x04\x05\x90\x01\x90\x02\x83\x81\xC7aeirsuy\x01\x03\x04\x05\x07\x08\x80\x90\x03\x81\x88b\x8E\x80\x90\x04\xC3ast\x01\x03\x83\x90\x05\x89\xC6aknsuy\x01\x02\x03\x04\x05\x80\x80\x81\x80\x80\x80\xC4bitv\x01\x03\x05\x80j\x83\x90\x06\x90\x07\xC5klnrt\x02\x03\x04\x05\x90\x08\x80\x80\x80\x90\t\xC3elo\x01\x02\x80\x83\x80r\x80\xC6aclrst\x01\x03\x05\x08\t\x85m\x81\x90\ng\x90\x07\x80\x90\x0B-PT\x89\xC3mou\x01\x03\x80\x90\x0C\x90\r\xCCacdikloqrvwy\x03\x04\x05\x07\x08\n\x0B\x0C\r\x0E\x0Ft\x90\x0E\x83\x80\x90\x0F\x8B\x90\x10\x80\x80\x88\x83\x83r\x80\xC5aeikr\x01\x02\x03\x04\x80\x80\x85\x80\x80\xC5gknrz\x01\x03\x06\x07\x80\x90\rd\x90\x11\x83\x80ec\x89h\x80u\x81" }, values: &[icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0") })), one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0d\0\0\0\x03\0\0\0\n\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0d\0\0\0\x0B\0\0\0c\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0") })), two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x02\0\0\0\x04\0\0\0\x80d\0\0\0\x0C\0\0\0\x0E\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\xC0\n\0\0\0\0\0\0\0\0\0\0\0@\n\0\0\0\x05\0\0\0\t\0\0\0@d\0\0\0\x0B\0\0\0\x0E\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\x01\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0") })), one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0G\0\0\0G\0\0\0[\0\0\0[\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x02\0\0\0\x02\0\0\0\x80d\0\0\0\x0C\0\0\0\x0C\0\0\0H\0\0\0H\0\0\0\\\0\0\0\\\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x15\0\xC0\n\0\0\0\x03\0\0\0\x04\0\0\0\t\0\0\0\t\0\0\0\x80d\0\0\0\n\0\0\0\x13\0\0\0F\0\0\0O\0\0\0Z\0\0\0c\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\xC0@B\x0F\0\0\0\0\0\0\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0D\n\0\0\0\x01\0\0\0\x01\0\0\0\x84d\0\0\0\x0B\0\0\0\x0B\0\0\0") })), two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x02\0\0\0\x04\0\0\0\x81d\0\0\0\x0C\0\0\0\x0E\0\0\0D\n\0\0\0\x02\0\0\0\x04\0\0\0\x84d\0\0\0\x0C\0\0\0\x0E\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") })), two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC7\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\0\0\0\0\0\0\0\xC1@B\x0F\0\0\0\0\0\0\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\x05\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x06\0\0\0\0\0\r\0*\x007\0T\0a\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\x81\n\0\0\0\x04\0\0\0\x04\0\0\0\x06\0\0\0\x06\0\0\0\t\0\0\0\t\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\x84\n\0\0\0\x04\0\0\0\x04\0\0\0\x06\0\0\0\x06\0\0\0\t\0\0\0\t\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") })), two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x02\0\0\0\x04\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\x82\0\0\0\0\0\0\0\0\0\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0") })), one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x03\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x01\0\0\0\x01\0\0\0Dd\0\0\0\x01\0\0\0\x01\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x02\0\0\0\x02\0\0\0Dd\0\0\0\x02\0\0\0\x02\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x03\0\0\0\x04\0\0\0Dd\0\0\0\x03\0\0\0\x04\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC7\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\0\0\0\0\0\0\0\xC1@B\x0F\0\0\0\0\0\0\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\x05\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC7\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\0\0\0\0\0\0\0\xC1@B\x0F\0\0\0\0\0\0\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\x05\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x06\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x07\0\0\0\n\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x0B\0\0\0\x0B\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x0C\0\0\0\x0C\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\n\0\0\0\r\0\0\0\x13\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x04\0\0\0\0\0\r\0\x1A\0'\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0A\0\0\0\0\0\0\0\0\0\0\0\0\x82\0\0\0\0\0\0\0\0\0\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x02\0\0\0\x02\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") })), few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC5\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0E\n\0\0\0\x01\0\0\0\x01\0\0\0\x85d\0\0\0\x0B\0\0\0\x0B\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x13\0\0\0") })), two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x02\0\0\0\t\0\0\0\x80d\0\0\0\x0B\0\0\0\x13\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\x84\0\0\0\0\0\0\0\0\0\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x04\0\0\0\0\0\r\0\x1A\0'\0\xC0\n\0\0\0\0\0\0\0\0\0\0\0@d\0\0\0\x0B\0\0\0\x13\0\0\0B\0\0\0\0\x02\0\0\0\x02\0\0\0\xC4d\0\0\0\x0B\0\0\0\x13\0\0\0") })), one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x07\0\0\0\0\0\r\0\x1A\0'\x004\0A\0N\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0B\0\0\0\0\x02\0\0\0\x02\0\0\0\xC4\n\0\0\0\x01\0\0\0\x01\0\0\0\x84d\0\0\0\x0B\0\0\0\x0B\0\0\0\x02\0\0\0\0\x02\0\0\0\x02\0\0\0\xC4\n\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0D\n\0\0\0\x01\0\0\0\x01\0\0\0\x84d\0\0\0\x0B\0\0\0\x0B\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0@d\0\0\0\x03\0\0\0\n\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0d\0\0\0\x0B\0\0\0\x13\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") })), two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x02\0\0\0\x04\0\0\0\x81d\0\0\0\x0C\0\0\0\x0E\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x07\0\0\0\0\0\r\0\x1A\0'\x004\0A\0N\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\x01\0\0\0\x01\0\0\0\xC1\n\0\0\0\0\0\0\0\x01\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x05\0\0\0\t\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x0C\0\0\0\x0E\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\x01\0\0\0") })), two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC7\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\0\0\0\0\0\0\0\xC1@B\x0F\0\0\0\0\0\0\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\x05\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") })), two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x04\0\0\0\0\0\r\0\x1A\0'\0\x82\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\xC0d\0\0\0\x01\0\0\0\x13\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0") })), two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x02\0\0\0\x04\0\0\0\x81d\0\0\0\x0C\0\0\0\x0E\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x06\0\0\0\0\0\r\0\x1A\0'\x004\0A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\0\0\0\0\0\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x05\0\0\0\t\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x0B\0\0\0\x0E\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") })), few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\x15\0\"\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0A\0\0\0\0\0\0\0\0\0\0\0\0\xC4\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x01\0\0\0\x01\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x02\0\0\0\x02\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x03\0\0\0\x04\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: None, many: None }] };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::plurals::provider::CardinalV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::plurals::provider::CardinalV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_CARDINAL_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::plurals::provider::CardinalV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_CARDINAL_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::plurals::provider::CardinalV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_cardinal_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::plurals::provider::CardinalV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_CARDINAL_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_cardinal_v1_marker as impl_cardinal_v1_marker;
