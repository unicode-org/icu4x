// @generated
/// Implement `DataProvider<OrdinalV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 180B for the lookup data structure (35 data identifiers)
/// * 4625B[^1] for the actual data (24 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_ordinal_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_ORDINAL_V1_MARKER: icu_provider_baked::zerotrie::Data<icu::plurals::provider::OrdinalV1Marker> = icu_provider_baked::zerotrie::Data { trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xD2abcefghiklmnorstuv\x06\x10\x16\x18\x1F(139@JMPR]`i\xC2sz\x01\x80\x81\xC3eln\x01\x03\x82o\x83\x80\xC2ay\x01\x84\x85n\x86\xC2ir\x02l\x87\x87\xC3adu\x01\x02\x87\x88\x89\xC3iuy\x01\x02\x89\x8A\x87t\x8B\xC2ak\x01\x8C\x8D\xC2io\x02j\x8E\x87\xC3krs\x01\x03\x8F\x90\0\x87e\x90\x01r\x90\x02o\x87\xC3cqv\x01\x03\x8B\x90\x03\x90\x04k\x90\x05\xC2kn\x02\x90\x06d\x90\x07\xC2ei\x02c\x8B\x87" }, values: &[icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\x05\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0\t\0\0\0\t\0\0\0\n\0\0\0\n\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0-\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x02\0\0\0\x02\0\0\0\x05\0\0\0\x05\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0Ad\0\0\0\x14\0\0\0\x14\0\0\x002\0\0\x002\0\0\0F\0\0\0F\0\0\0P\0\0\0P\0\0\0") })), two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x15\0\xC1\n\0\0\0\x03\0\0\0\x03\0\0\0\x04\0\0\0\x04\0\0\0A\xE8\x03\0\0d\0\0\0d\0\0\0\xC8\0\0\0\xC8\0\0\0,\x01\0\0,\x01\0\0\x90\x01\0\0\x90\x01\0\0\xF4\x01\0\0\xF4\x01\0\0X\x02\0\0X\x02\0\0\xBC\x02\0\0\xBC\x02\0\0 \x03\0\0 \x03\0\0\x84\x03\0\0\x84\x03\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0A\n\0\0\0\x06\0\0\0\x06\0\0\0Ad\0\0\0(\0\0\0(\0\0\0<\0\0\0<\0\0\0Z\0\0\0Z\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x15\0\xC0\n\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0\x80d\0\0\0\x0C\0\0\0\x0C\0\0\0\r\0\0\0\r\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0") })), one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC1\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0\x04\0\0\0\x04\0\0\0\x05\0\0\0\x05\0\0\0\x06\0\0\0\x06\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x03\0\0\0\x03\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0\t\0\0\0\t\0\0\0") })), one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x03\0\0\0\x04\0\0\0\x04\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x05\0\0\0\x05\0\0\0\x06\0\0\0\x06\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x02\0\0\0\x02\0\0\0\x80d\0\0\0\x0C\0\0\0\x0C\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x03\0\0\0\x03\0\0\0\x80d\0\0\0\r\0\0\0\r\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x0B\0\0\0\x0B\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x0C\0\0\0\x0C\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x03\0\0\0\r\0\0\0\r\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\x05\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x0B\0\0\0\x0B\0\0\0\x08\0\0\0\x08\0\0\0P\0\0\0P\0\0\0 \x03\0\0 \x03\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0Ad\0\0\0\x02\0\0\0\x14\0\0\0(\0\0\0(\0\0\0<\0\0\0<\0\0\0P\0\0\0P\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x04\0\0\0\0\0\r\0\x1A\0'\0\xC0\n\0\0\0\x06\0\0\0\x06\0\0\0@\n\0\0\0\t\0\0\0\t\0\0\0@\n\0\0\0\0\0\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x0B\0\0\0\x0B\0\0\0\x08\0\0\0\x08\0\0\0P\0\0\0Y\0\0\0 \x03\0\0\x83\x03\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\n\0\0\0\x02\0\0\0\x02\0\0\0\x81d\0\0\0\x0C\0\0\0\x0C\0\0\0") })), few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x15\0\xC1\n\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0\x81d\0\0\0\x11\0\0\0\x11\0\0\0\x12\0\0\0\x12\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x04\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\x05\0\0\0\x07\0\0\0\t\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x04\0\0\0\x04\0\0\0\x80d\0\0\0\x0E\0\0\0\x0E\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x15\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x02\0\0\0\x02\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0\x0C\0\0\0\x0C\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x15\0\xC0\n\0\0\0\x06\0\0\0\x06\0\0\0\t\0\0\0\t\0\0\0@\0\0\0\0\n\0\0\0\n\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x03\0\0\0\x03\0\0\0\x80d\0\0\0\r\0\0\0\r\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: None, many: None }] };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::plurals::provider::OrdinalV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::plurals::provider::OrdinalV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_ORDINAL_V1_MARKER, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::plurals::provider::OrdinalV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_ORDINAL_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_default() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::plurals::provider::OrdinalV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_ordinal_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::plurals::provider::OrdinalV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_ORDINAL_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_ordinal_v1_marker as impl_ordinal_v1_marker;
