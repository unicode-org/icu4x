// @generated
/// Implement `DataProvider<OrdinalV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 639B for the lookup data structure (156 data identifiers)
/// * 4625B[^1] for the actual data (24 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_ordinal_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_ORDINAL_V1_MARKER: icu_provider_baked::zerotrie::Data<icu::plurals::provider::OrdinalV1Marker> = icu_provider_baked::zerotrie::Data { trie: icu_provider_baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xE1zabcdefghijklmnopqrstuvwxyz\0\0\0\0\0\0\0\0\0\0\0\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x02\x112HVh\x81\x8D\xA3\xB5\xBB\xFA\x0E.@G[]j\xAA\xC6\xDD\xE8\xEA\xF1\x02\xC5fmrsz\x01\x02\x03\x06\x80\x80\x80\x81t\x80\x82\xC7eghlnrs\x01\x04\x06\x08\t\x0C\x83\x80c\x80o\x80o\x84\x81\x80x\x80\x80-Cyrl\x80\xC6aehsvy\x01\x03\x05\x08\t\x85b\x80r\x80\x80w\x80\x80\x86\xC4aeos\x01\x02\x04\x80\x80i\x80b\x80\xC6lnostu\x01\x02\x03\x04\x05\x80\x87\x80\x80\x80\x80\xC6afiory\x01\x07\n\x0B\x0C\x80-Adlm\x80\x80l\x88\x80\x88\x80\xC4adlu\x01\x02\x03\x88\x89\x80\x8A\xC7aeirsuy\x01\x02\x03\x04\x06\x07\x80\x80\x8A\x80b\x80\x8B\x88\xC6adegst\x01\x02\x03\x04\x05\x80\x80\x80\x80\x80\x8C\xC2av\x01\x80\x80\xCBaegkmnosuxy\x01\x03\x05\x06\x07\x08\x0B\x12\x13(\x8Da\x80p\x80\x8E\x80\x80\x80k\x80\x80-Deva\x80\x80v\x80-\xC3DOT\x04\x08eva\x80rya\x80elu\x80\x80\xC6bimotv\x01\x03\x05\x06\x07\x80j\x8Fo\x80\x88\x80\x80\xC9aiklnrsty\x02\x03\x05\x06\t\x0B\x0C\ri\x80\x80\x90\0\x80\x80i\x80\x90\x01\x88\x80\x80\xC5deloq\x02\x04\x05\x06s\x80\x90\x02\x80\x80o\x80\xC2cr\x01\x80\x90\x03\xC6aclrst\x01\x03\x04\x06\x07\x80m\x80\x80g\x80\x80\x80u\x80\xC4amou\x02\x03\x04j\x80\x80\x88\x80\xCEacdikloqruvwyz\x07\x08\x0F\x10\x11\x12\x13\x15\x1C\x1D\x1F \"\x80\xC2ht\x01\x80\x80\x8C\x80-Deva\x80\x80\x80\x80\x80\x90\x04\x80-Latn\x80\x80\x90\x05\x80r\x80l\x80\xC9aeghikort\x01\x02\x03\x04\x05\x07\x08\t\x80\x80\x80\x80\x80\x90\x06\x80\x80\x80\xC5gknrz\x01\x03\x05\x06\x80\x90\x07d\x80\x80\x80-Cyrl\x80\xC3eim\x02\x03c\x8C\x88w\x80o\x80\xC2hn\x01\x80r\x80\xC3oru\x01\x03\x80l\x80e\x80-Hans\x80\xC3ahu\x01\x08\x80\x80-Hant\x80\x80" }, values: &[icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\x05\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0\t\0\0\0\t\0\0\0\n\0\0\0\n\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0-\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x02\0\0\0\x02\0\0\0\x05\0\0\0\x05\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0Ad\0\0\0\x14\0\0\0\x14\0\0\x002\0\0\x002\0\0\0F\0\0\0F\0\0\0P\0\0\0P\0\0\0") })), two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x15\0\xC1\n\0\0\0\x03\0\0\0\x03\0\0\0\x04\0\0\0\x04\0\0\0A\xE8\x03\0\0d\0\0\0d\0\0\0\xC8\0\0\0\xC8\0\0\0,\x01\0\0,\x01\0\0\x90\x01\0\0\x90\x01\0\0\xF4\x01\0\0\xF4\x01\0\0X\x02\0\0X\x02\0\0\xBC\x02\0\0\xBC\x02\0\0 \x03\0\0 \x03\0\0\x84\x03\0\0\x84\x03\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x03\0\0\0\0\0\r\0\x1A\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0A\n\0\0\0\x06\0\0\0\x06\0\0\0Ad\0\0\0(\0\0\0(\0\0\0<\0\0\0<\0\0\0Z\0\0\0Z\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x15\0\xC0\n\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0\x80d\0\0\0\x0C\0\0\0\x0C\0\0\0\r\0\0\0\r\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0") })), one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC1\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0\x04\0\0\0\x04\0\0\0\x05\0\0\0\x05\0\0\0\x06\0\0\0\x06\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x03\0\0\0\x03\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0\t\0\0\0\t\0\0\0") })), one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x03\0\0\0\x04\0\0\0\x04\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x05\0\0\0\x05\0\0\0\x06\0\0\0\x06\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x02\0\0\0\x02\0\0\0\x80d\0\0\0\x0C\0\0\0\x0C\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x03\0\0\0\x03\0\0\0\x80d\0\0\0\r\0\0\0\r\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x0B\0\0\0\x0B\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x0C\0\0\0\x0C\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x03\0\0\0\r\0\0\0\r\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\x05\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x0B\0\0\0\x0B\0\0\0\x08\0\0\0\x08\0\0\0P\0\0\0P\0\0\0 \x03\0\0 \x03\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0Ad\0\0\0\x02\0\0\0\x14\0\0\0(\0\0\0(\0\0\0<\0\0\0<\0\0\0P\0\0\0P\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x04\0\0\0\0\0\r\0\x1A\0'\0\xC0\n\0\0\0\x06\0\0\0\x06\0\0\0@\n\0\0\0\t\0\0\0\t\0\0\0@\n\0\0\0\0\0\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x0B\0\0\0\x0B\0\0\0\x08\0\0\0\x08\0\0\0P\0\0\0Y\0\0\0 \x03\0\0\x83\x03\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC1\n\0\0\0\x02\0\0\0\x02\0\0\0\x81d\0\0\0\x0C\0\0\0\x0C\0\0\0") })), few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x15\0\xC1\n\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0\x81d\0\0\0\x11\0\0\0\x11\0\0\0\x12\0\0\0\x12\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x04\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\x05\0\0\0\x07\0\0\0\t\0\0\0") })), two: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") })), few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") })), many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") })), two: None, few: None, many: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x04\0\0\0\x04\0\0\0\x80d\0\0\0\x0E\0\0\0\x0E\0\0\0") })) }, icu::plurals::provider::PluralRulesV1 { zero: None, one: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x15\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x02\0\0\0\x02\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0\x0C\0\0\0\x0C\0\0\0") })), two: None, few: None, many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x15\0\xC0\n\0\0\0\x06\0\0\0\x06\0\0\0\t\0\0\0\t\0\0\0@\0\0\0\0\n\0\0\0\n\0\0\0") })), many: None }, icu::plurals::provider::PluralRulesV1 { zero: None, one: None, two: None, few: Some(icu::plurals::rules::runtime::ast::Rule(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x03\0\0\0\x03\0\0\0\x80d\0\0\0\r\0\0\0\r\0\0\0") })), many: None }] };
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::plurals::provider::OrdinalV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::plurals::provider::OrdinalV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_ORDINAL_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::plurals::provider::OrdinalV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_ORDINAL_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::plurals::provider::OrdinalV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_ordinal_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::plurals::provider::OrdinalV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_ORDINAL_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_ordinal_v1_marker as impl_ordinal_v1_marker;
