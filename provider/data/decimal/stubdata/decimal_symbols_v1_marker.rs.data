// @generated
/// Implement `DataProvider<DecimalSymbolsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_decimal_symbols_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::decimal::provider::DecimalSymbolsV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::decimal::provider::DecimalSymbolsV1Marker>, icu_provider::DataError> {
                Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::decimal::provider::DecimalSymbolsV1Marker as icu_provider::DataMarker>::INFO, req))
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_decimal_symbols_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::decimal::provider::DecimalSymbolsV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(Default::default())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_decimal_symbols_v1_marker as impl_decimal_symbols_v1_marker;
