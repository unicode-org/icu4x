// @generated
/// Implement `DataProvider<DecimalSymbolsV1>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 1387B for the lookup data structure (272 data identifiers)
/// * 2307B[^1] for the actual data (48 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
///
/// This macro requires the following crates:
/// * `icu`
/// * `icu_provider`
/// * `icu_provider/baked`
/// * `zerovec`
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_decimal_symbols_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.83"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.83"]
        impl $provider {
            const DATA_DECIMAL_SYMBOLS_V1: icu_provider::baked::zerotrie::Data<icu::decimal::provider::DecimalSymbolsV1> = {
                const TRIE: icu_provider::baked::zerotrie::ZeroTrieSimpleAscii<&'static [u8]> = icu_provider::baked::zerotrie::ZeroTrieSimpleAscii { store: b"\xE1zabcdefghijklmnopqrstuvwxyz\0\x01\x01\x01\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03\x03\x03\x03\x04\x04\x04\x04\x04\x04\x04\xFE?Hh\x11GTr\x86\x8F\xFF\x1C\\}\x8A\xB2\xB7\xD1\x1Cn\xA4\xAF\xB1\xBF\xE1\xC4frsz\x01\xEA\xF5\x80\x81\xC2\x1E-\x05arab\x82\xCEBDEIJKLMOPQSTY\x08\x14&8@R^jrz\x82\xAF\xBBH\x82\x1Elatn\x81\xC2JZ\x07\x82\x1Elatn\x81\x83\xC2GR\x07\x82\x1Elatn\x81\x82\x1Elatn\x81\xC2LQ\x07\x82\x1Elatn\x81\x82\x1Elatn\x81O\x82\x1Elatn\x81\xC2MW\x07\x82\x1Elatn\x81\x82\x1Elatn\x81\xC2BY\x07\x82\x1Elatn\x83\x83\xC2AR\x01\x83\x82\x1Elatn\x83M\x82\x1Elatn\x81S\x82\x1Elatn\x81A\x82\x1Elatn\x81\xC5ADOSY\x07\x0E\x15\x1C\x82\x1Elatn\x81\x82\x1Elatn\x81\x82\x1Elatn\x81\x82\x1Elatn\x81\x82\x1Elatn\x81\xC2DN\x07\x82\x1Elatn\x81\x83E\x82\x1Elatn\x81\x84\xC2\x1Et\x05latn\x89\x85\x85\xC9aeghlnrsu\x01\x02\x0B\x13\x15\x1C&-\x86\x87\x87c\x88\x1Elatn\x8Eo\x88\x1Elatn\x8Eo\x80\x84\x1Elatn\x89\x80x\x89\x1Edeva\x90\x08\x85-Cyrl\x85a\x80\xC3asv\x01\x02\x85\x80\x80\xC4aeos\x01\x0F\x16\x85\x85-\xC3ACL\x02\x04T\x80H\x8AI\x8Ai\x1Edeva\x88b\x85\xC7elnostu\x01\x02mn\x98\x99\x8B\x85-\xD0ABCDEFGHILNPRSUZ\x02\x04\n\x10\x16\x1C\x1E )/5;=FHT\x85E\x85\xC2HZ\x01\x8A\x80\xC2EK\x01\x85\x85\xC2ES\x01\x80\x85\xC2IR\x01\x80\x8CE\x8CU\x80\xC3DNT\x01\x02\x85\x89\x85\xC2TV\x01\x80\x80\xC2LO\x01\x85\x80\xC2LT\x01\x85\x80O\x85\xC3EIK\x01\x02\x80\x85\x80A\x80A\x80\x8C\x8D-\xC84ABCEPUV\x03\x05\x07\x10\x12\x14\x1619\x8ER\x85O\x85\xC3LOR\x01\x02\x85\x85\x80C\x85Y\x85Y\x85E\x85\x8F\x90\0\xC6afiory\t\x17\x19\x1B)\x90\x01\x1Elatn\x90\x15-Adlm\x90\x02\x1Elatn\x90\x16\x90\x03\x90\0\x8C-\xC3CLM\x02\x04A\x80U\x85A\x85\x85\xC2lu\x01\x85\x89\x1Egujr\x90\x0E\xC7eirstuy\x01\t\x0B\r\x0E\x0F\x81\x89\x1Edeva\x90\x08\x90\0b\x85\x80\x87\x87\xC5adest\x01\x02\x03\x04\x8D\x85\x87\x85\x8D-CH\x90\x04v\x85\x1Ejava\x90\x11\xCBaegkmnosuxy\x01\x03\x05\x06\r\x14%./Y\x87a\x80p\x85\x80\x1Ekhmr\x90\x12\x1Eknda\x90\x13k\x89\xC2\x1E-\x06deva\x90\x08Latn\x89\x90\x05\x1Elatn\x90\x17\x85v\x89-\xC3DOT\x0B\x16eva\x89\x1Edeva\x90\x08rya\x89\x1Eorya\x90\x1Aelu\x89\x1Etelu\x90\x1D\x80\xC6bimotv\x01\x03\x06\x0E\x10\x85j\x85o\x90\x06\x85\x1Elaoo\x90\x14\x90\x03\x87\xC7aklnrsy\x07\x08\x10\x19!*i\x1Edeva\x88\x85\x89\x1Emlym\x90\x19i\x90\x07\x1Elatn\x8E\x90\x08\x1Elatn\x89-\xC2BI\x02N\x85D\x85\x90\t\x1Elatn\x8E\xC5deloq\x02\n\x0B\rs\x85\x90\x08\x1Elatn\x89\x85\x90\x03o\x90\n\x1Elatn\x90\x17\xC2cr\x01\x80\x89\x1Eorya\x90\x1A\xC5almst\x08\t\x0B\x14\x89\x1Eguru\x90\x0F\x87s\x85\x90\x05\x1Elatn\x90\x18\x85-\xC2AP\x02O\x80T\x87u-BO\x85\xC5amouw\x08\t\n\x0Fj\x88\x1Elatn\x8E\x8C\x85\x80-UA\x87\x85\xCBacdklqruvwz\x16\x19!\"$%,-/3\x90\x08\xC3\x1Eht\x05\x06latn\x89\x80\x90\x0B\x1Elatn\x8E\x85n\x85\x90\x0C\x1Elatn\x8E\x80\x90\r\x87\x85-Latn\x85\x85\x90\x03-CD\x85l\x80\xC9aeghknrty*23:;<=>\x89\xC2\x1E-\ttamldec\x90\x1B\xC2MS\x0CY\x8E\x1Etamldec\x90\x1CG\x8E\x1Etamldec\x90\x1C\x89\x1Etelu\x90\x1E\x80\x1Ethai\x90\x1F\x80\x8A\x85\x80v\x86\xC5gknrz\n\x0B\r%\x1Earabext\x90\x05\x80d\x8E\x81\xC2\x1E-\tarabext\x90\x05IN\x90\x05\x1Elatn\x81\x80-Cyrl\x80\xC3eim\x02\x03c\x8C\x85w\x85o\x85\xC2hn\x01\x86r\x89\x1Edeva\x90\x08\xC2ru\x02l\x85e\xC2\x1E-\thanidec\x90\x10Hans\x1Ehanidec\x90\x10h\xC2\x1E-\thanidec\x90\x10Hant\x1Ehanidec\x90\x10" };
                const VALUES: &'static [<icu::decimal::provider::DecimalSymbolsV1 as icu_provider::baked::zerotrie::DynamicDataMarker>::DataStruct] = &[icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x05-+,\xC2\xA0latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x04\x04\x08\x08\t\n\xE2\x80\x8E-\xE2\x80\x8E+.,latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x03\x03\x06\x06\x08\n\xD8\x9C-\xD8\x9C+\xD9\xAB\xD9\xACarab") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x04\x04\x08\x08\t\n\xE2\x80\x8E-\xE2\x80\x8E+,.latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,beng") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 2u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+,.latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x05-+.\xC2\xA0latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x05-+,\xC2\xA0latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 2u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,deva") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 2u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.'latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 3u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x06-+,\xE2\x80\xAFlatn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+,.latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 2u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x03\x03\x04\x04\x05\x07\xE2\x88\x92+,\xC2\xA0latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 2u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x03\x03\x04\x04\x05\x06\xE2\x88\x92+,.latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x06\x06\n\n\x0C\x0E\xE2\x80\x8E\xE2\x88\x92\xE2\x80\x8E+\xD9\xAB\xD9\xACarabext") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x06-+.\xE2\xB9\x81adlm") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x03\x03\x04\x04\x05\x07\xE2\x88\x92+,\xC2\xA0latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.'latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 2u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x07\x07\x0E\x0E\x10\x12\xE2\x80\x8E-\xE2\x80\x8E\xE2\x80\x8E+\xE2\x80\x8E\xD9\xAB\xD9\xACarabext") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+,'latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,beng") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,deva") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 2u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,mymr") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x05-+.\xD8\x8Cnkoo") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,olck") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x03\x03\x06\x06\x07\t\xD8\x9C-\xD8\x9C+.\xD9\xACarab") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x03\x03\x04\x04\x05\x06\xE2\x88\x92+,.latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 2u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,gujr") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 2u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,guru") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 2u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,hanidec") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+,.java") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+,.khmr") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,knda") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+,.laoo") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x06\x06\n\n\x0B\x0C\xE2\x80\x8E\xE2\x88\x92\xE2\x80\x8E+.,latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x06-+.\xE2\xB9\x81latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x05-+.\xD8\x8Clatn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x06\x06\n\n\x0B\x0C\xE2\x80\x8E\xE2\x88\x92\xE2\x80\x8E+,.latn") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,mlym") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 2u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,orya") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 2u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,tamldec") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 2u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,tamldec") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,telu") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 2u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,telu") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }, icu::decimal::provider::DecimalSymbols { strings: unsafe { zerovec::VarZeroCow::from_bytes_unchecked(b"\x01\x01\x02\x02\x03\x04-+.,thai") }, grouping_sizes: icu::decimal::provider::GroupingSizes { primary: 3u8, secondary: 3u8, min_grouping: 1u8 } }];
                unsafe { icu_provider::baked::zerotrie::Data::from_trie_and_values_unchecked(TRIE, VALUES) }
            };
        }
        #[clippy::msrv = "1.83"]
        impl icu_provider::DataProvider<icu::decimal::provider::DecimalSymbolsV1> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::decimal::provider::DecimalSymbolsV1>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_DECIMAL_SYMBOLS_V1, req.id, req.metadata.attributes_prefix_match) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::decimal::provider::DecimalSymbolsV1 as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider::baked::DataStore::get(&Self::DATA_DECIMAL_SYMBOLS_V1, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get()), req.metadata.attributes_prefix_match) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_unknown() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::decimal::provider::DecimalSymbolsV1 as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload, metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_decimal_symbols_v1!($provider);
        #[clippy::msrv = "1.83"]
        impl icu_provider::IterableDataProvider<icu::decimal::provider::DecimalSymbolsV1> for $provider {
            fn iter_ids(&self) -> Result<std::collections::BTreeSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider::baked::DataStore::iter(&Self::DATA_DECIMAL_SYMBOLS_V1).collect())
            }
        }
    };
    ($ provider : ty , DRY) => {};
    ($ provider : ty , DRY , ITER) => {
        __impl_decimal_symbols_v1!($provider, ITER);
    };
}
#[doc(inline)]
pub use __impl_decimal_symbols_v1 as impl_decimal_symbols_v1;
