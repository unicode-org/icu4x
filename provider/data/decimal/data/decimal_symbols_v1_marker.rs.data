// @generated
/// Implement `DataProvider<DecimalSymbolsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
///
/// Using this implementation will embed the following data in the binary's data segment:
/// * 7340B[^1] for the lookup data structure (252 data identifiers)
/// * 8905B[^1] for the actual data (45 unique structs)
///
/// [^1]: these numbers can be smaller in practice due to linker deduplication
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_decimal_symbols_v1_marker {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl $provider {
            const DATA_DECIMAL_SYMBOLS_V1_MARKER: icu_provider_baked::binary_search::Data<icu_provider_baked::binary_search::Locale<21usize>, icu::decimal::provider::DecimalSymbolsV1Marker> = icu_provider_baked::binary_search::Data(
                {
                    use icu_provider_baked::binary_search::tinystr::tinystr;
                    &[tinystr!(21usize, "af"), tinystr!(21usize, "ar"), tinystr!(21usize, "ar-AE"), tinystr!(21usize, "ar-AE-u-nu-arab"), tinystr!(21usize, "ar-BH-u-nu-latn"), tinystr!(21usize, "ar-DJ-u-nu-latn"), tinystr!(21usize, "ar-DZ"), tinystr!(21usize, "ar-DZ-u-nu-arab"), tinystr!(21usize, "ar-EG-u-nu-latn"), tinystr!(21usize, "ar-EH"), tinystr!(21usize, "ar-EH-u-nu-arab"), tinystr!(21usize, "ar-ER-u-nu-latn"), tinystr!(21usize, "ar-IL-u-nu-latn"), tinystr!(21usize, "ar-IQ-u-nu-latn"), tinystr!(21usize, "ar-JO-u-nu-latn"), tinystr!(21usize, "ar-KM-u-nu-latn"), tinystr!(21usize, "ar-KW-u-nu-latn"), tinystr!(21usize, "ar-LB-u-nu-latn"), tinystr!(21usize, "ar-LY"), tinystr!(21usize, "ar-LY-u-nu-arab"), tinystr!(21usize, "ar-MA"), tinystr!(21usize, "ar-MA-u-nu-arab"), tinystr!(21usize, "ar-MR-u-nu-latn"), tinystr!(21usize, "ar-OM-u-nu-latn"), tinystr!(21usize, "ar-PS-u-nu-latn"), tinystr!(21usize, "ar-QA-u-nu-latn"), tinystr!(21usize, "ar-SA-u-nu-latn"), tinystr!(21usize, "ar-SD-u-nu-latn"), tinystr!(21usize, "ar-SO-u-nu-latn"), tinystr!(21usize, "ar-SS-u-nu-latn"), tinystr!(21usize, "ar-SY-u-nu-latn"), tinystr!(21usize, "ar-TD-u-nu-latn"), tinystr!(21usize, "ar-TN"), tinystr!(21usize, "ar-TN-u-nu-arab"), tinystr!(21usize, "ar-YE-u-nu-latn"), tinystr!(21usize, "ar-u-nu-latn"), tinystr!(21usize, "as"), tinystr!(21usize, "as-u-nu-latn"), tinystr!(21usize, "ast"), tinystr!(21usize, "az"), tinystr!(21usize, "be"), tinystr!(21usize, "bg"), tinystr!(21usize, "bgc"), tinystr!(21usize, "bgc-u-nu-latn"), tinystr!(21usize, "bho"), tinystr!(21usize, "bho-u-nu-latn"), tinystr!(21usize, "blo"), tinystr!(21usize, "bn"), tinystr!(21usize, "bn-IN-u-nu-latn"), tinystr!(21usize, "bn-u-nu-latn"), tinystr!(21usize, "br"), tinystr!(21usize, "brx"), tinystr!(21usize, "brx-u-nu-deva"), tinystr!(21usize, "bs"), tinystr!(21usize, "bs-Cyrl"), tinystr!(21usize, "ca"), tinystr!(21usize, "cs"), tinystr!(21usize, "cv"), tinystr!(21usize, "da"), tinystr!(21usize, "de"), tinystr!(21usize, "de-AT"), tinystr!(21usize, "de-CH"), tinystr!(21usize, "de-LI"), tinystr!(21usize, "doi-u-nu-deva"), tinystr!(21usize, "dsb"), tinystr!(21usize, "el"), tinystr!(21usize, "en-AT"), tinystr!(21usize, "en-BE"), tinystr!(21usize, "en-CH"), tinystr!(21usize, "en-DE"), tinystr!(21usize, "en-DK"), tinystr!(21usize, "en-FI"), tinystr!(21usize, "en-ID"), tinystr!(21usize, "en-IN"), tinystr!(21usize, "en-NL"), tinystr!(21usize, "en-SE"), tinystr!(21usize, "en-SI"), tinystr!(21usize, "eo"), tinystr!(21usize, "es"), tinystr!(21usize, "es-419"), tinystr!(21usize, "es-AR"), tinystr!(21usize, "es-BO"), tinystr!(21usize, "es-CL"), tinystr!(21usize, "es-CO"), tinystr!(21usize, "es-CR"), tinystr!(21usize, "es-EC"), tinystr!(21usize, "es-PY"), tinystr!(21usize, "es-UY"), tinystr!(21usize, "es-VE"), tinystr!(21usize, "et"), tinystr!(21usize, "eu"), tinystr!(21usize, "fa"), tinystr!(21usize, "fa-AF-u-nu-latn"), tinystr!(21usize, "fa-u-nu-latn"), tinystr!(21usize, "ff-Adlm"), tinystr!(21usize, "ff-Adlm-BF-u-nu-latn"), tinystr!(21usize, "ff-Adlm-CM-u-nu-latn"), tinystr!(21usize, "ff-Adlm-GH-u-nu-latn"), tinystr!(21usize, "ff-Adlm-GM-u-nu-latn"), tinystr!(21usize, "ff-Adlm-GW-u-nu-latn"), tinystr!(21usize, "ff-Adlm-LR-u-nu-latn"), tinystr!(21usize, "ff-Adlm-MR-u-nu-latn"), tinystr!(21usize, "ff-Adlm-NE-u-nu-latn"), tinystr!(21usize, "ff-Adlm-NG-u-nu-latn"), tinystr!(21usize, "ff-Adlm-SL-u-nu-latn"), tinystr!(21usize, "ff-Adlm-SN-u-nu-latn"), tinystr!(21usize, "ff-Adlm-u-nu-latn"), tinystr!(21usize, "fi"), tinystr!(21usize, "fo"), tinystr!(21usize, "fr"), tinystr!(21usize, "fr-CA"), tinystr!(21usize, "fr-LU"), tinystr!(21usize, "fr-MA"), tinystr!(21usize, "fy"), tinystr!(21usize, "gl"), tinystr!(21usize, "gu"), tinystr!(21usize, "gu-u-nu-gujr"), tinystr!(21usize, "he"), tinystr!(21usize, "hi"), tinystr!(21usize, "hi-u-nu-deva"), tinystr!(21usize, "hr"), tinystr!(21usize, "hsb"), tinystr!(21usize, "hu"), tinystr!(21usize, "hy"), tinystr!(21usize, "ia"), tinystr!(21usize, "id"), tinystr!(21usize, "ie"), tinystr!(21usize, "is"), tinystr!(21usize, "it"), tinystr!(21usize, "it-CH"), tinystr!(21usize, "jv"), tinystr!(21usize, "jv-u-nu-java"), tinystr!(21usize, "ka"), tinystr!(21usize, "kea"), tinystr!(21usize, "kgp"), tinystr!(21usize, "kk"), tinystr!(21usize, "km-u-nu-khmr"), tinystr!(21usize, "kn-u-nu-knda"), tinystr!(21usize, "kok-u-nu-deva"), tinystr!(21usize, "ks"), tinystr!(21usize, "ks-u-nu-latn"), tinystr!(21usize, "ku"), tinystr!(21usize, "kxv"), tinystr!(21usize, "kxv-Deva"), tinystr!(21usize, "kxv-Deva-u-nu-deva"), tinystr!(21usize, "kxv-Orya"), tinystr!(21usize, "kxv-Orya-u-nu-orya"), tinystr!(21usize, "kxv-Telu"), tinystr!(21usize, "kxv-Telu-u-nu-telu"), tinystr!(21usize, "ky"), tinystr!(21usize, "lb"), tinystr!(21usize, "lij"), tinystr!(21usize, "lmo"), tinystr!(21usize, "lo"), tinystr!(21usize, "lo-u-nu-laoo"), tinystr!(21usize, "lt"), tinystr!(21usize, "lv"), tinystr!(21usize, "mai-u-nu-deva"), tinystr!(21usize, "mk"), tinystr!(21usize, "ml"), tinystr!(21usize, "ml-u-nu-mlym"), tinystr!(21usize, "mni"), tinystr!(21usize, "mni-u-nu-latn"), tinystr!(21usize, "mr"), tinystr!(21usize, "mr-u-nu-latn"), tinystr!(21usize, "ms-BN"), tinystr!(21usize, "ms-ID"), tinystr!(21usize, "my"), tinystr!(21usize, "my-u-nu-latn"), tinystr!(21usize, "nds"), tinystr!(21usize, "ne"), tinystr!(21usize, "ne-IN-u-nu-latn"), tinystr!(21usize, "ne-u-nu-latn"), tinystr!(21usize, "nl"), tinystr!(21usize, "no"), tinystr!(21usize, "nqo"), tinystr!(21usize, "nqo-u-nu-latn"), tinystr!(21usize, "oc"), tinystr!(21usize, "or"), tinystr!(21usize, "or-u-nu-orya"), tinystr!(21usize, "pa"), tinystr!(21usize, "pa-u-nu-guru"), tinystr!(21usize, "pl"), tinystr!(21usize, "prg"), tinystr!(21usize, "ps"), tinystr!(21usize, "ps-PK-u-nu-latn"), tinystr!(21usize, "ps-u-nu-latn"), tinystr!(21usize, "pt"), tinystr!(21usize, "pt-AO"), tinystr!(21usize, "pt-PT"), tinystr!(21usize, "qu-BO"), tinystr!(21usize, "raj"), tinystr!(21usize, "raj-u-nu-latn"), tinystr!(21usize, "rm"), tinystr!(21usize, "ro"), tinystr!(21usize, "ru"), tinystr!(21usize, "ru-UA"), tinystr!(21usize, "sa"), tinystr!(21usize, "sa-u-nu-latn"), tinystr!(21usize, "sah"), tinystr!(21usize, "sat"), tinystr!(21usize, "sat-u-nu-latn"), tinystr!(21usize, "sc"), tinystr!(21usize, "sd"), tinystr!(21usize, "sd-u-nu-latn"), tinystr!(21usize, "sk"), tinystr!(21usize, "sl"), tinystr!(21usize, "sq"), tinystr!(21usize, "sr"), tinystr!(21usize, "sr-Latn"), tinystr!(21usize, "su"), tinystr!(21usize, "sv"), tinystr!(21usize, "sw-CD"), tinystr!(21usize, "szl"), tinystr!(21usize, "ta"), tinystr!(21usize, "ta-LK-u-nu-tamldec"), tinystr!(21usize, "ta-MY"), tinystr!(21usize, "ta-MY-u-nu-tamldec"), tinystr!(21usize, "ta-SG"), tinystr!(21usize, "ta-SG-u-nu-tamldec"), tinystr!(21usize, "ta-u-nu-tamldec"), tinystr!(21usize, "te"), tinystr!(21usize, "te-u-nu-telu"), tinystr!(21usize, "tg"), tinystr!(21usize, "th-u-nu-thai"), tinystr!(21usize, "tk"), tinystr!(21usize, "tr"), tinystr!(21usize, "tt"), tinystr!(21usize, "ug-u-nu-arabext"), tinystr!(21usize, "uk"), tinystr!(21usize, "und"), tinystr!(21usize, "ur"), tinystr!(21usize, "ur-IN"), tinystr!(21usize, "ur-IN-u-nu-latn"), tinystr!(21usize, "ur-u-nu-arabext"), tinystr!(21usize, "uz"), tinystr!(21usize, "uz-Cyrl"), tinystr!(21usize, "vec"), tinystr!(21usize, "vi"), tinystr!(21usize, "vmw"), tinystr!(21usize, "wo"), tinystr!(21usize, "xh"), tinystr!(21usize, "xnr"), tinystr!(21usize, "xnr-u-nu-deva"), tinystr!(21usize, "yrl"), tinystr!(21usize, "yue-Hans-u-nu-hanidec"), tinystr!(21usize, "yue-u-nu-hanidec"), tinystr!(21usize, "zh-HK-u-nu-hanidec"), tinystr!(21usize, "zh-Hant-u-nu-hanidec"), tinystr!(21usize, "zh-MO-u-nu-hanidec"), tinystr!(21usize, "zh-SG-u-nu-hanidec"), tinystr!(21usize, "zh-u-nu-hanidec")]
                },
                {
                    type S = <icu::decimal::provider::DecimalSymbolsV1Marker as icu_provider::DynamicDataMarker>::Yokeable;
                    const __AF: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("\u{a0}"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __AR: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{61c}-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{61c}+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("٫"), grouping_separator: alloc::borrow::Cow::Borrowed("٬"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['٠', '١', '٢', '٣', '٤', '٥', '٦', '٧', '٨', '٩'] };
                    const __AR_AE: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{200e}-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{200e}+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __AR_DZ: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{200e}-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{200e}+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("."), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __AS: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 2u8, min_grouping: 1u8 }, digits: ['০', '১', '২', '৩', '৪', '৫', '৬', '৭', '৮', '৯'] };
                    const __AST: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("."), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __AS_U_NU_LATN: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 2u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __BE: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("\u{a0}"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 2u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __BGC: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९'] };
                    const __BGC_U_NU_LATN: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __BRX_U_NU_DEVA: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 2u8, min_grouping: 1u8 }, digits: ['०', '१', '२', '३', '४', '५', '६', '७', '८', '९'] };
                    const __DE_CH: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed("’"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __ES: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("."), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 2u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __ET: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("−"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("\u{a0}"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 2u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __EU: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("−"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("."), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __FA: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{200e}−"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{200e}+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("٫"), grouping_separator: alloc::borrow::Cow::Borrowed("٬"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'] };
                    const __FA_AF_U_NU_LATN: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{200e}−"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{200e}+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __FF_ADLM: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed("⹁"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['𞥐', '𞥑', '𞥒', '𞥓', '𞥔', '𞥕', '𞥖', '𞥗', '𞥘', '𞥙'] };
                    const __FF_ADLM_BF_U_NU_LATN: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed("⹁"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __FI: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("−"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("\u{a0}"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __FR: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("\u{202f}"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __GU_U_NU_GUJR: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 2u8, min_grouping: 1u8 }, digits: ['૦', '૧', '૨', '૩', '૪', '૫', '૬', '૭', '૮', '૯'] };
                    const __JV_U_NU_JAVA: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("."), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['꧐', '꧑', '꧒', '꧓', '꧔', '꧕', '꧖', '꧗', '꧘', '꧙'] };
                    const __KM_U_NU_KHMR: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("."), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['០', '១', '២', '៣', '៤', '៥', '៦', '៧', '៨', '៩'] };
                    const __KN_U_NU_KNDA: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['೦', '೧', '೨', '೩', '೪', '೫', '೬', '೭', '೮', '೯'] };
                    const __KS: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{200e}-\u{200e}"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{200e}+\u{200e}"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("٫"), grouping_separator: alloc::borrow::Cow::Borrowed("٬"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['۰', '۱', '۲', '۳', '۴', '۵', '۶', '۷', '۸', '۹'] };
                    const __KS_U_NU_LATN: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed("،"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __KXV_ORYA_U_NU_ORYA: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 2u8, min_grouping: 1u8 }, digits: ['୦', '୧', '୨', '୩', '୪', '୫', '୬', '୭', '୮', '୯'] };
                    const __KXV_TELU_U_NU_TELU: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 2u8, min_grouping: 1u8 }, digits: ['౦', '౧', '౨', '౩', '౪', '౫', '౬', '౭', '౮', '౯'] };
                    const __LMO: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("’"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __LO_U_NU_LAOO: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("."), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['໐', '໑', '໒', '໓', '໔', '໕', '໖', '໗', '໘', '໙'] };
                    const __ML_U_NU_MLYM: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 2u8, min_grouping: 1u8 }, digits: ['൦', '൧', '൨', '൩', '൪', '൫', '൬', '൭', '൮', '൯'] };
                    const __MNI: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['০', '১', '২', '৩', '৪', '৫', '৬', '৭', '৮', '৯'] };
                    const __MY: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['၀', '၁', '၂', '၃', '၄', '၅', '၆', '၇', '၈', '၉'] };
                    const __NQO: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed("،"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['߀', '߁', '߂', '߃', '߄', '߅', '߆', '߇', '߈', '߉'] };
                    const __PA_U_NU_GURU: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 2u8, min_grouping: 1u8 }, digits: ['੦', '੧', '੨', '੩', '੪', '੫', '੬', '੭', '੮', '੯'] };
                    const __PS_PK_U_NU_LATN: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{200e}−"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("\u{200e}+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed(","), grouping_separator: alloc::borrow::Cow::Borrowed("."), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __RM: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("−"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed("’"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __SAT: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['᱐', '᱑', '᱒', '᱓', '᱔', '᱕', '᱖', '᱗', '᱘', '᱙'] };
                    const __TA_LK_U_NU_TAMLDEC: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 2u8, min_grouping: 1u8 }, digits: ['௦', '௧', '௨', '௩', '௪', '௫', '௬', '௭', '௮', '௯'] };
                    const __TA_MY_U_NU_TAMLDEC: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['௦', '௧', '௨', '௩', '௪', '௫', '௬', '௭', '௮', '௯'] };
                    const __TE_U_NU_TELU: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['౦', '౧', '౨', '౩', '౪', '౫', '౬', '౭', '౮', '౯'] };
                    const __TH_U_NU_THAI: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['๐', '๑', '๒', '๓', '๔', '๕', '๖', '๗', '๘', '๙'] };
                    const __XH: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed("\u{a0}"), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'] };
                    const __YUE_HANS_U_NU_HANIDEC: &S = &icu::decimal::provider::DecimalSymbolsV1 { minus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("-"), suffix: alloc::borrow::Cow::Borrowed("") }, plus_sign_affixes: icu::decimal::provider::AffixesV1 { prefix: alloc::borrow::Cow::Borrowed("+"), suffix: alloc::borrow::Cow::Borrowed("") }, decimal_separator: alloc::borrow::Cow::Borrowed("."), grouping_separator: alloc::borrow::Cow::Borrowed(","), grouping_sizes: icu::decimal::provider::GroupingSizesV1 { primary: 3u8, secondary: 3u8, min_grouping: 1u8 }, digits: ['〇', '一', '二', '三', '四', '五', '六', '七', '八', '九'] };
                    &[__AF, __AR, __AR_AE, __AR, __AR_AE, __AR_AE, __AR_DZ, __AR, __AR_AE, __AR_AE, __AR, __AR_AE, __AR_AE, __AR_AE, __AR_AE, __AR_AE, __AR_AE, __AR_DZ, __AR_DZ, __AR, __AR_DZ, __AR, __AR_DZ, __AR_AE, __AR_AE, __AR_AE, __AR_AE, __AR_AE, __AR_AE, __AR_AE, __AR_AE, __AR_AE, __AR_DZ, __AR, __AR_AE, __AR_AE, __AS, __AS_U_NU_LATN, __AST, __AST, __BE, __BE, __BGC, __BGC_U_NU_LATN, __BGC, __BGC_U_NU_LATN, __AF, __AS, __AS_U_NU_LATN, __AS_U_NU_LATN, __AF, __AS_U_NU_LATN, __BRX_U_NU_DEVA, __AST, __AST, __AST, __AF, __AF, __AST, __AST, __AF, __DE_CH, __DE_CH, __BGC, __AST, __AST, __AST, __AST, __DE_CH, __AST, __AST, __AF, __AST, __AS_U_NU_LATN, __AST, __AF, __AST, __AF, __ES, __BGC_U_NU_LATN, __AST, __AST, __AST, __AST, __AF, __AST, __AST, __AST, __AST, __ET, __EU, __FA, __FA_AF_U_NU_LATN, __FA_AF_U_NU_LATN, __FF_ADLM, __FF_ADLM_BF_U_NU_LATN, __FF_ADLM_BF_U_NU_LATN, __FF_ADLM_BF_U_NU_LATN, __FF_ADLM_BF_U_NU_LATN, __FF_ADLM_BF_U_NU_LATN, __FF_ADLM_BF_U_NU_LATN, __FF_ADLM_BF_U_NU_LATN, __FF_ADLM_BF_U_NU_LATN, __FF_ADLM_BF_U_NU_LATN, __FF_ADLM_BF_U_NU_LATN, __FF_ADLM_BF_U_NU_LATN, __FF_ADLM_BF_U_NU_LATN, __FI, __EU, __FR, __AF, __AST, __AST, __AST, __AST, __AS_U_NU_LATN, __GU_U_NU_GUJR, __AR_AE, __AS_U_NU_LATN, __BRX_U_NU_DEVA, __EU, __AST, __BE, __AF, __ES, __AST, __AF, __AST, __AST, __DE_CH, __AST, __JV_U_NU_JAVA, __BE, __AF, __AST, __AF, __KM_U_NU_KHMR, __KN_U_NU_KNDA, __BGC, __KS, __KS_U_NU_LATN, __AST, __AS_U_NU_LATN, __AS_U_NU_LATN, __BRX_U_NU_DEVA, __AS_U_NU_LATN, __KXV_ORYA_U_NU_ORYA, __AS_U_NU_LATN, __KXV_TELU_U_NU_TELU, __AF, __AST, __AST, __LMO, __AST, __LO_U_NU_LAOO, __FI, __BE, __BGC, __AST, __AS_U_NU_LATN, __ML_U_NU_MLYM, __MNI, __BGC_U_NU_LATN, __BRX_U_NU_DEVA, __AS_U_NU_LATN, __AST, __AST, __MY, __BGC_U_NU_LATN, __AST, __BRX_U_NU_DEVA, __AS_U_NU_LATN, __AS_U_NU_LATN, __AST, __FI, __NQO, __KS_U_NU_LATN, __AF, __AS_U_NU_LATN, __KXV_ORYA_U_NU_ORYA, __AS_U_NU_LATN, __PA_U_NU_GURU, __BE, __AF, __KS, __PS_PK_U_NU_LATN, __PS_PK_U_NU_LATN, __AST, __AF, __BE, __AST, __BGC, __BGC_U_NU_LATN, __RM, __AST, __AF, __BE, __BRX_U_NU_DEVA, __AS_U_NU_LATN, __AF, __SAT, __BGC_U_NU_LATN, __AST, __AR, __BGC_U_NU_LATN, __AF, __EU, __BE, __AST, __AST, __AST, __FI, __AST, __AF, __AS_U_NU_LATN, __TA_LK_U_NU_TAMLDEC, __BGC_U_NU_LATN, __TA_MY_U_NU_TAMLDEC, __BGC_U_NU_LATN, __TA_MY_U_NU_TAMLDEC, __TA_LK_U_NU_TAMLDEC, __AS_U_NU_LATN, __TE_U_NU_TELU, __AF, __TH_U_NU_THAI, __AF, __AST, __AF, __KS, __AF, __BGC_U_NU_LATN, __AR_AE, __KS, __AR_AE, __KS, __AF, __AF, __FR, __AST, __AST, __AST, __XH, __AS_U_NU_LATN, __BRX_U_NU_DEVA, __AST, __YUE_HANS_U_NU_HANIDEC, __YUE_HANS_U_NU_HANIDEC, __YUE_HANS_U_NU_HANIDEC, __YUE_HANS_U_NU_HANIDEC, __YUE_HANS_U_NU_HANIDEC, __YUE_HANS_U_NU_HANIDEC, __YUE_HANS_U_NU_HANIDEC]
                },
            );
        }
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::decimal::provider::DecimalSymbolsV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::decimal::provider::DecimalSymbolsV1Marker>, icu_provider::DataError> {
                let mut metadata = icu_provider::DataResponseMetadata::default();
                let payload = if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_DECIMAL_SYMBOLS_V1_MARKER, req.id) {
                    payload
                } else {
                    const FALLBACKER: icu::locale::fallback::LocaleFallbackerWithConfig<'static> = icu::locale::fallback::LocaleFallbacker::new().for_config(<icu::decimal::provider::DecimalSymbolsV1Marker as icu_provider::DataMarker>::INFO.fallback_config);
                    let mut fallback_iterator = FALLBACKER.fallback_for(req.id.locale.clone());
                    loop {
                        if let Some(payload) = icu_provider_baked::DataStore::get(&Self::DATA_DECIMAL_SYMBOLS_V1_MARKER, icu_provider::DataIdentifierBorrowed::for_marker_attributes_and_locale(req.id.marker_attributes, fallback_iterator.get())) {
                            metadata.locale = Some(fallback_iterator.take());
                            break payload;
                        }
                        if fallback_iterator.get().is_und() {
                            return Err(icu_provider::DataErrorKind::IdentifierNotFound.with_req(<icu::decimal::provider::DecimalSymbolsV1Marker as icu_provider::DataMarker>::INFO, req));
                        }
                        fallback_iterator.step();
                    }
                };
                Ok(icu_provider::DataResponse { payload: icu_provider::DataPayload::from_static_ref(payload), metadata })
            }
        }
    };
    ($ provider : ty , ITER) => {
        __impl_decimal_symbols_v1_marker!($provider);
        #[clippy::msrv = "1.70"]
        impl icu_provider::IterableDataProvider<icu::decimal::provider::DecimalSymbolsV1Marker> for $provider {
            fn iter_ids(&self) -> Result<std::collections::HashSet<icu_provider::DataIdentifierCow<'static>>, icu_provider::DataError> {
                Ok(icu_provider_baked::DataStore::iter(&Self::DATA_DECIMAL_SYMBOLS_V1_MARKER).collect())
            }
        }
    };
}
#[doc(inline)]
pub use __impl_decimal_symbols_v1_marker as impl_decimal_symbols_v1_marker;
