// @generated
mod calendar;
mod collator;
mod core;
mod datetime;
mod decimal;
mod fallback;
mod list;
mod locale_canonicalizer;
mod normalizer;
mod plurals;
mod props;
mod segmenter;
mod time_zone;
/// This data provider was programmatically generated by [`icu_datagen`](
/// https://unicode-org.github.io/icu4x-docs/doc/icu_datagen/enum.Out.html#variant.Module).
#[non_exhaustive]
pub struct BakedDataProvider;
use ::icu_provider::prelude::*;
impl DataProvider<::icu_calendar::provider::JapaneseErasV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_calendar::provider::JapaneseErasV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    calendar::japanese_v1_u_ca::DATA,
                    <::icu_calendar::provider::JapaneseErasV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_casemapping::provider::CaseMappingV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_casemapping::provider::CaseMappingV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::casemap_v1::DATA,
                    <::icu_casemapping::provider::CaseMappingV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_collator::provider::CollationDataV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_collator::provider::CollationDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    collator::data_v1::DATA,
                    <::icu_collator::provider::CollationDataV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_collator::provider::CollationDiacriticsV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_collator::provider::CollationDiacriticsV1Marker>, DataError>
    {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    collator::dia_v1::DATA,
                    <::icu_collator::provider::CollationDiacriticsV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_collator::provider::CollationJamoV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_collator::provider::CollationJamoV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    collator::jamo_v1::DATA,
                    <::icu_collator::provider::CollationJamoV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_collator::provider::CollationMetadataV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_collator::provider::CollationMetadataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    collator::meta_v1::DATA,
                    <::icu_collator::provider::CollationMetadataV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_collator::provider::CollationReorderingV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_collator::provider::CollationReorderingV1Marker>, DataError>
    {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    collator::reord_v1::DATA,
                    <::icu_collator::provider::CollationReorderingV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_collator::provider::CollationSpecialPrimariesV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_collator::provider::CollationSpecialPrimariesV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (collator :: prim_v1 :: DATA , < :: icu_collator :: provider :: CollationSpecialPrimariesV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_datetime::provider::calendar::DatePatternsV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_datetime::provider::calendar::DatePatternsV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (datetime :: datelengths_v1_u_ca :: DATA , < :: icu_datetime :: provider :: calendar :: DatePatternsV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_datetime::provider::calendar::DateSkeletonPatternsV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_datetime::provider::calendar::DateSkeletonPatternsV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (datetime :: skeletons_v1_u_ca :: DATA , < :: icu_datetime :: provider :: calendar :: DateSkeletonPatternsV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_datetime::provider::calendar::DateSymbolsV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_datetime::provider::calendar::DateSymbolsV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (datetime :: datesymbols_v1_u_ca :: DATA , < :: icu_datetime :: provider :: calendar :: DateSymbolsV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_datetime::provider::calendar::TimePatternsV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_datetime::provider::calendar::TimePatternsV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (datetime :: timelengths_v1_u_ca :: DATA , < :: icu_datetime :: provider :: calendar :: TimePatternsV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_datetime::provider::calendar::TimeSymbolsV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_datetime::provider::calendar::TimeSymbolsV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (datetime :: timesymbols_v1_u_ca :: DATA , < :: icu_datetime :: provider :: calendar :: TimeSymbolsV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_datetime::provider::time_zones::ExemplarCitiesV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_datetime::provider::time_zones::ExemplarCitiesV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (time_zone :: exemplar_cities_v1 :: DATA , < :: icu_datetime :: provider :: time_zones :: ExemplarCitiesV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_datetime::provider::time_zones::MetaZoneGenericNamesLongV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_datetime::provider::time_zones::MetaZoneGenericNamesLongV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (time_zone :: generic_long_v1 :: DATA , < :: icu_datetime :: provider :: time_zones :: MetaZoneGenericNamesLongV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_datetime::provider::time_zones::MetaZoneGenericNamesShortV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_datetime::provider::time_zones::MetaZoneGenericNamesShortV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (time_zone :: generic_short_v1 :: DATA , < :: icu_datetime :: provider :: time_zones :: MetaZoneGenericNamesShortV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_datetime::provider::time_zones::MetaZonePeriodV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_datetime::provider::time_zones::MetaZonePeriodV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (time_zone :: metazone_period_v1 :: DATA , < :: icu_datetime :: provider :: time_zones :: MetaZonePeriodV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_datetime::provider::time_zones::MetaZoneSpecificNamesLongV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_datetime::provider::time_zones::MetaZoneSpecificNamesLongV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (time_zone :: specific_long_v1 :: DATA , < :: icu_datetime :: provider :: time_zones :: MetaZoneSpecificNamesLongV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_datetime::provider::time_zones::MetaZoneSpecificNamesShortV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_datetime::provider::time_zones::MetaZoneSpecificNamesShortV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (time_zone :: specific_short_v1 :: DATA , < :: icu_datetime :: provider :: time_zones :: MetaZoneSpecificNamesShortV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_datetime::provider::time_zones::TimeZoneFormatsV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_datetime::provider::time_zones::TimeZoneFormatsV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (time_zone :: formats_v1 :: DATA , < :: icu_datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_datetime::provider::week_data::WeekDataV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_datetime::provider::week_data::WeekDataV1Marker>, DataError>
    {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    datetime::week_data_v1_r::DATA,
                    <::icu_datetime::provider::week_data::WeekDataV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_decimal::provider::DecimalSymbolsV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_decimal::provider::DecimalSymbolsV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    decimal::symbols_v1::DATA,
                    <::icu_decimal::provider::DecimalSymbolsV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_list::provider::AndListV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_list::provider::AndListV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    list::and_v1::DATA,
                    <::icu_list::provider::AndListV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_list::provider::OrListV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_list::provider::OrListV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    list::or_v1::DATA,
                    <::icu_list::provider::OrListV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_list::provider::UnitListV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_list::provider::UnitListV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    list::unit_v1::DATA,
                    <::icu_list::provider::UnitListV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_locale_canonicalizer::provider::AliasesV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_locale_canonicalizer::provider::AliasesV1Marker>, DataError>
    {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    locale_canonicalizer::aliases_v1::DATA,
                    <::icu_locale_canonicalizer::provider::AliasesV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_locale_canonicalizer::provider::LikelySubtagsV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_locale_canonicalizer::provider::LikelySubtagsV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (locale_canonicalizer :: likelysubtags_v1 :: DATA , < :: icu_locale_canonicalizer :: provider :: LikelySubtagsV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_normalizer::provider::CanonicalCompositionPassthroughV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_normalizer::provider::CanonicalCompositionPassthroughV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (normalizer :: nfc_v1 :: DATA , < :: icu_normalizer :: provider :: CanonicalCompositionPassthroughV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_normalizer::provider::CanonicalCompositionsV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_normalizer::provider::CanonicalCompositionsV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (normalizer :: comp_v1 :: DATA , < :: icu_normalizer :: provider :: CanonicalCompositionsV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_normalizer::provider::CanonicalDecompositionDataV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_normalizer::provider::CanonicalDecompositionDataV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (normalizer :: nfd_v1 :: DATA , < :: icu_normalizer :: provider :: CanonicalDecompositionDataV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_normalizer::provider::CanonicalDecompositionTablesV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_normalizer::provider::CanonicalDecompositionTablesV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (normalizer :: nfdex_v1 :: DATA , < :: icu_normalizer :: provider :: CanonicalDecompositionTablesV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_normalizer::provider::CompatibilityCompositionPassthroughV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_normalizer::provider::CompatibilityCompositionPassthroughV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (normalizer :: nfkc_v1 :: DATA , < :: icu_normalizer :: provider :: CompatibilityCompositionPassthroughV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_normalizer::provider::CompatibilityDecompositionSupplementV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_normalizer::provider::CompatibilityDecompositionSupplementV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (normalizer :: nfkd_v1 :: DATA , < :: icu_normalizer :: provider :: CompatibilityDecompositionSupplementV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_normalizer::provider::CompatibilityDecompositionTablesV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_normalizer::provider::CompatibilityDecompositionTablesV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (normalizer :: nfkdex_v1 :: DATA , < :: icu_normalizer :: provider :: CompatibilityDecompositionTablesV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_normalizer::provider::NonRecursiveDecompositionSupplementV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_normalizer::provider::NonRecursiveDecompositionSupplementV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (normalizer :: decomp_v1 :: DATA , < :: icu_normalizer :: provider :: NonRecursiveDecompositionSupplementV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_normalizer::provider::Uts46CompositionPassthroughV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_normalizer::provider::Uts46CompositionPassthroughV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (normalizer :: uts46_v1 :: DATA , < :: icu_normalizer :: provider :: Uts46CompositionPassthroughV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_normalizer::provider::Uts46DecompositionSupplementV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_normalizer::provider::Uts46DecompositionSupplementV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (normalizer :: uts46d_v1 :: DATA , < :: icu_normalizer :: provider :: Uts46DecompositionSupplementV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_plurals::provider::CardinalV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_plurals::provider::CardinalV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    plurals::cardinal_v1::DATA,
                    <::icu_plurals::provider::CardinalV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_plurals::provider::OrdinalV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_plurals::provider::OrdinalV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    plurals::ordinal_v1::DATA,
                    <::icu_plurals::provider::OrdinalV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::AlphabeticV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::AlphabeticV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::alpha_v1::DATA,
                    <::icu_properties::provider::AlphabeticV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::AsciiHexDigitV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::AsciiHexDigitV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::ahex_v1::DATA,
                    <::icu_properties::provider::AsciiHexDigitV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::BidiClassV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::BidiClassV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::bc_v1::DATA,
                    <::icu_properties::provider::BidiClassV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::BidiControlV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::BidiControlV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::bidi_c_v1::DATA,
                    <::icu_properties::provider::BidiControlV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::BidiMirroredV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::BidiMirroredV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::bidi_m_v1::DATA,
                    <::icu_properties::provider::BidiMirroredV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::CanonicalCombiningClassV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::CanonicalCombiningClassV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: ccc_v1 :: DATA , < :: icu_properties :: provider :: CanonicalCombiningClassV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::CaseIgnorableV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::CaseIgnorableV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::ci_v1::DATA,
                    <::icu_properties::provider::CaseIgnorableV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::CasedV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::CasedV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::cased_v1::DATA,
                    <::icu_properties::provider::CasedV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::ChangesWhenCasefoldedV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::ChangesWhenCasefoldedV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: cwcf_v1 :: DATA , < :: icu_properties :: provider :: ChangesWhenCasefoldedV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::ChangesWhenLowercasedV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::ChangesWhenLowercasedV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: cwl_v1 :: DATA , < :: icu_properties :: provider :: ChangesWhenLowercasedV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::ChangesWhenNfkcCasefoldedV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_properties::provider::ChangesWhenNfkcCasefoldedV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: cwkcf_v1 :: DATA , < :: icu_properties :: provider :: ChangesWhenNfkcCasefoldedV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::ChangesWhenTitlecasedV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::ChangesWhenTitlecasedV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: cwt_v1 :: DATA , < :: icu_properties :: provider :: ChangesWhenTitlecasedV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::ChangesWhenUppercasedV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::ChangesWhenUppercasedV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: cwu_v1 :: DATA , < :: icu_properties :: provider :: ChangesWhenUppercasedV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::DashV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::DashV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::dash_v1::DATA,
                    <::icu_properties::provider::DashV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::DefaultIgnorableCodePointV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_properties::provider::DefaultIgnorableCodePointV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: di_v1 :: DATA , < :: icu_properties :: provider :: DefaultIgnorableCodePointV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::DeprecatedV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::DeprecatedV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::dep_v1::DATA,
                    <::icu_properties::provider::DeprecatedV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::DiacriticV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::DiacriticV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::dia_v1::DATA,
                    <::icu_properties::provider::DiacriticV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::EastAsianWidthV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::EastAsianWidthV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::ea_v1::DATA,
                    <::icu_properties::provider::EastAsianWidthV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::EmojiComponentV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::EmojiComponentV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::ecomp_v1::DATA,
                    <::icu_properties::provider::EmojiComponentV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::EmojiModifierBaseV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::EmojiModifierBaseV1Marker>, DataError>
    {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::ebase_v1::DATA,
                    <::icu_properties::provider::EmojiModifierBaseV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::EmojiModifierV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::EmojiModifierV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::emod_v1::DATA,
                    <::icu_properties::provider::EmojiModifierV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::EmojiPresentationV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::EmojiPresentationV1Marker>, DataError>
    {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::epres_v1::DATA,
                    <::icu_properties::provider::EmojiPresentationV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::EmojiV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::EmojiV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::emoji_v1::DATA,
                    <::icu_properties::provider::EmojiV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::ExtendedPictographicV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::ExtendedPictographicV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: extpict_v1 :: DATA , < :: icu_properties :: provider :: ExtendedPictographicV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::ExtenderV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::ExtenderV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::ext_v1::DATA,
                    <::icu_properties::provider::ExtenderV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::GeneralCategoryV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::GeneralCategoryV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::gc_v1::DATA,
                    <::icu_properties::provider::GeneralCategoryV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::GraphemeBaseV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::GraphemeBaseV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::gr_base_v1::DATA,
                    <::icu_properties::provider::GraphemeBaseV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::GraphemeClusterBreakV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::GraphemeClusterBreakV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: gcb_v1 :: DATA , < :: icu_properties :: provider :: GraphemeClusterBreakV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::GraphemeExtendV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::GraphemeExtendV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::gr_ext_v1::DATA,
                    <::icu_properties::provider::GraphemeExtendV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::HexDigitV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::HexDigitV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::hex_v1::DATA,
                    <::icu_properties::provider::HexDigitV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::IdContinueV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::IdContinueV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::idc_v1::DATA,
                    <::icu_properties::provider::IdContinueV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::IdStartV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::IdStartV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::ids_v1::DATA,
                    <::icu_properties::provider::IdStartV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::IdeographicV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::IdeographicV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::ideo_v1::DATA,
                    <::icu_properties::provider::IdeographicV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::IdsBinaryOperatorV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::IdsBinaryOperatorV1Marker>, DataError>
    {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::idsb_v1::DATA,
                    <::icu_properties::provider::IdsBinaryOperatorV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::IdsTrinaryOperatorV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::IdsTrinaryOperatorV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: idst_v1 :: DATA , < :: icu_properties :: provider :: IdsTrinaryOperatorV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::JoinControlV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::JoinControlV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::join_c_v1::DATA,
                    <::icu_properties::provider::JoinControlV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::LineBreakV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::LineBreakV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::lb_v1::DATA,
                    <::icu_properties::provider::LineBreakV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::LogicalOrderExceptionV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::LogicalOrderExceptionV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: loe_v1 :: DATA , < :: icu_properties :: provider :: LogicalOrderExceptionV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::LowercaseV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::LowercaseV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::lower_v1::DATA,
                    <::icu_properties::provider::LowercaseV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::MathV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::MathV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::math_v1::DATA,
                    <::icu_properties::provider::MathV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::NoncharacterCodePointV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::NoncharacterCodePointV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: nchar_v1 :: DATA , < :: icu_properties :: provider :: NoncharacterCodePointV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::PatternSyntaxV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::PatternSyntaxV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::pat_syn_v1::DATA,
                    <::icu_properties::provider::PatternSyntaxV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::PatternWhiteSpaceV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::PatternWhiteSpaceV1Marker>, DataError>
    {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::pat_ws_v1::DATA,
                    <::icu_properties::provider::PatternWhiteSpaceV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::QuotationMarkV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::QuotationMarkV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::qmark_v1::DATA,
                    <::icu_properties::provider::QuotationMarkV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::RadicalV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::RadicalV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::radical_v1::DATA,
                    <::icu_properties::provider::RadicalV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::RegionalIndicatorV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::RegionalIndicatorV1Marker>, DataError>
    {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::ri_v1::DATA,
                    <::icu_properties::provider::RegionalIndicatorV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::ScriptV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::ScriptV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::sc_v1::DATA,
                    <::icu_properties::provider::ScriptV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::ScriptWithExtensionsPropertyV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_properties::provider::ScriptWithExtensionsPropertyV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: scx_v1 :: DATA , < :: icu_properties :: provider :: ScriptWithExtensionsPropertyV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::SentenceBreakV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::SentenceBreakV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::sb_v1::DATA,
                    <::icu_properties::provider::SentenceBreakV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::SentenceTerminalV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::SentenceTerminalV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::sterm_v1::DATA,
                    <::icu_properties::provider::SentenceTerminalV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::SoftDottedV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::SoftDottedV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::sd_v1::DATA,
                    <::icu_properties::provider::SoftDottedV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::TerminalPunctuationV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::TerminalPunctuationV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (props :: term_v1 :: DATA , < :: icu_properties :: provider :: TerminalPunctuationV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_properties::provider::UnifiedIdeographV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::UnifiedIdeographV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::uideo_v1::DATA,
                    <::icu_properties::provider::UnifiedIdeographV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::UppercaseV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::UppercaseV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::upper_v1::DATA,
                    <::icu_properties::provider::UppercaseV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::VariationSelectorV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::VariationSelectorV1Marker>, DataError>
    {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::vs_v1::DATA,
                    <::icu_properties::provider::VariationSelectorV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::WhiteSpaceV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::WhiteSpaceV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::wspace_v1::DATA,
                    <::icu_properties::provider::WhiteSpaceV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::WordBreakV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::WordBreakV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::wb_v1::DATA,
                    <::icu_properties::provider::WordBreakV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::XidContinueV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::XidContinueV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::xidc_v1::DATA,
                    <::icu_properties::provider::XidContinueV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::XidStartV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_properties::provider::XidStartV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    props::xids_v1::DATA,
                    <::icu_properties::provider::XidStartV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_provider::hello_world::HelloWorldV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_provider::hello_world::HelloWorldV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    core::helloworld_v1::DATA,
                    <::icu_provider::hello_world::HelloWorldV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<
            ::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker,
        >,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (fallback :: likelysubtags_v1 :: DATA , < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackLikelySubtagsV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<
        DataResponse<::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker>,
        DataError,
    > {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (fallback :: parents_v1 :: DATA , < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackParentsV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_segmenter::LstmDataV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_segmenter::LstmDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    segmenter::lstm_v1::DATA,
                    <::icu_segmenter::LstmDataV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_segmenter::provider::GraphemeClusterBreakDataV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_segmenter::provider::GraphemeClusterBreakDataV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (segmenter :: grapheme_v1 :: DATA , < :: icu_segmenter :: provider :: GraphemeClusterBreakDataV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_segmenter::provider::LineBreakDataV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_segmenter::provider::LineBreakDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    segmenter::line_v1::DATA,
                    <::icu_segmenter::provider::LineBreakDataV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_segmenter::provider::SentenceBreakDataV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_segmenter::provider::SentenceBreakDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    segmenter::sentence_v1::DATA,
                    <::icu_segmenter::provider::SentenceBreakDataV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
impl DataProvider<::icu_segmenter::provider::UCharDictionaryBreakDataV1Marker>
    for BakedDataProvider
{
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_segmenter::provider::UCharDictionaryBreakDataV1Marker>, DataError>
    {
        Ok (DataResponse { metadata : Default :: default () , payload : Some (DataPayload :: from_owned (zerofrom :: ZeroFrom :: zero_from (litemap_slice_get (segmenter :: dictionary_v1 :: DATA , < :: icu_segmenter :: provider :: UCharDictionaryBreakDataV1Marker as KeyedDataMarker > :: KEY , req) ? ,))) , })
    }
}
impl DataProvider<::icu_segmenter::provider::WordBreakDataV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: &DataRequest,
    ) -> Result<DataResponse<::icu_segmenter::provider::WordBreakDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                litemap_slice_get(
                    segmenter::word_v1::DATA,
                    <::icu_segmenter::provider::WordBreakDataV1Marker as KeyedDataMarker>::KEY,
                    req,
                )?,
            ))),
        })
    }
}
fn litemap_slice_get<T: ?Sized>(
    values: &'static [(&'static str, &'static T)],
    key: DataKey,
    req: &DataRequest,
) -> Result<&'static T, DataError> {
    #[allow(clippy::unwrap_used)]
    values
        .binary_search_by(|(k, _)| req.options.strict_cmp(k.as_bytes()).reverse())
        .map(|i| values.get(i).unwrap().1)
        .map_err(|_| DataErrorKind::MissingDataOptions.with_req(key, req))
}
