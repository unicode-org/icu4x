// @generated
mod calendar;
mod collator;
mod core;
mod datetime;
mod decimal;
mod fallback;
mod list;
mod locale_canonicalizer;
mod normalizer;
mod plurals;
mod props;
mod segmenter;
mod time_zone;
/// This data provider was programmatically generated by [`icu_datagen`](
/// https://unicode-org.github.io/icu4x-docs/doc/icu_datagen/enum.Out.html#variant.Module).
#[non_exhaustive]
pub struct BakedDataProvider;
use ::icu_provider::prelude::*;
impl DataProvider<::icu_calendar::provider::JapaneseErasV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_calendar::provider::JapaneseErasV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *calendar::japanese_v1_u_ca::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_calendar::provider::JapaneseErasV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_casemapping::provider::CaseMappingV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_casemapping::provider::CaseMappingV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::casemap_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_casemapping::provider::CaseMappingV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_collator::provider::CollationDataV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_collator::provider::CollationDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *collator::data_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_collator::provider::CollationDataV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_collator::provider::CollationDiacriticsV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_collator::provider::CollationDiacriticsV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *collator::dia_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_collator::provider::CollationDiacriticsV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_collator::provider::CollationJamoV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_collator::provider::CollationJamoV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *collator::jamo_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_collator::provider::CollationJamoV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_collator::provider::CollationMetadataV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_collator::provider::CollationMetadataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *collator::meta_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_collator::provider::CollationMetadataV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_collator::provider::CollationReorderingV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_collator::provider::CollationReorderingV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *collator::reord_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_collator::provider::CollationReorderingV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_collator::provider::CollationSpecialPrimariesV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_collator::provider::CollationSpecialPrimariesV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *collator::prim_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_collator::provider::CollationSpecialPrimariesV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_datetime::provider::calendar::DateLengthsV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_datetime::provider::calendar::DateLengthsV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *datetime::datelengths_v1_u_ca::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_datetime::provider::calendar::DateLengthsV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_datetime::provider::calendar::DateSkeletonPatternsV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_datetime::provider::calendar::DateSkeletonPatternsV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *datetime::skeletons_v1_u_ca::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_datetime::provider::calendar::DateSkeletonPatternsV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_datetime::provider::calendar::DateSymbolsV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_datetime::provider::calendar::DateSymbolsV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *datetime::datesymbols_v1_u_ca::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_datetime::provider::calendar::DateSymbolsV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_datetime::provider::calendar::TimeLengthsV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_datetime::provider::calendar::TimeLengthsV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *datetime::timelengths_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_datetime::provider::calendar::TimeLengthsV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_datetime::provider::calendar::TimeSymbolsV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_datetime::provider::calendar::TimeSymbolsV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *datetime::timesymbols_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_datetime::provider::calendar::TimeSymbolsV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_datetime::provider::time_zones::ExemplarCitiesV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_datetime::provider::time_zones::ExemplarCitiesV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *time_zone::exemplar_cities_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_datetime::provider::time_zones::ExemplarCitiesV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_datetime::provider::time_zones::MetaZoneGenericNamesLongV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_datetime::provider::time_zones::MetaZoneGenericNamesLongV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *time_zone::generic_long_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_datetime::provider::time_zones::MetaZoneGenericNamesLongV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_datetime::provider::time_zones::MetaZoneGenericNamesShortV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_datetime::provider::time_zones::MetaZoneGenericNamesShortV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *time_zone::generic_short_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_datetime::provider::time_zones::MetaZoneGenericNamesShortV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_datetime::provider::time_zones::MetaZoneSpecificNamesLongV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_datetime::provider::time_zones::MetaZoneSpecificNamesLongV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *time_zone::specific_long_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_datetime::provider::time_zones::MetaZoneSpecificNamesLongV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_datetime::provider::time_zones::MetaZoneSpecificNamesShortV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_datetime::provider::time_zones::MetaZoneSpecificNamesShortV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *time_zone::specific_short_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_datetime::provider::time_zones::MetaZoneSpecificNamesShortV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_datetime::provider::time_zones::TimeZoneFormatsV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_datetime::provider::time_zones::TimeZoneFormatsV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *time_zone::formats_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_datetime::provider::time_zones::TimeZoneFormatsV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_datetime::provider::week_data::WeekDataV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_datetime::provider::week_data::WeekDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *datetime::week_data_v1_r::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_datetime::provider::week_data::WeekDataV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_decimal::provider::DecimalSymbolsV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_decimal::provider::DecimalSymbolsV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *decimal::symbols_v1_u_nu::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_decimal::provider::DecimalSymbolsV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_list::provider::AndListV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_list::provider::AndListV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *list::and_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_list::provider::AndListV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_list::provider::OrListV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_list::provider::OrListV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *list::or_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_list::provider::OrListV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_list::provider::UnitListV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_list::provider::UnitListV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *list::unit_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_list::provider::UnitListV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_locale_canonicalizer::provider::AliasesV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_locale_canonicalizer::provider::AliasesV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *locale_canonicalizer::aliases_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_locale_canonicalizer::provider::AliasesV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_locale_canonicalizer::provider::LikelySubtagsV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_locale_canonicalizer::provider::LikelySubtagsV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *locale_canonicalizer::likelysubtags_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_locale_canonicalizer::provider::LikelySubtagsV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_normalizer::provider::CanonicalCompositionPassthroughV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_normalizer::provider::CanonicalCompositionPassthroughV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *normalizer::nfc_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_normalizer::provider::CanonicalCompositionPassthroughV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_normalizer::provider::CanonicalCompositionsV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_normalizer::provider::CanonicalCompositionsV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *normalizer::comp_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_normalizer::provider::CanonicalCompositionsV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_normalizer::provider::CanonicalDecompositionDataV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_normalizer::provider::CanonicalDecompositionDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *normalizer::nfd_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_normalizer::provider::CanonicalDecompositionDataV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_normalizer::provider::CanonicalDecompositionTablesV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_normalizer::provider::CanonicalDecompositionTablesV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *normalizer::nfdex_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_normalizer::provider::CanonicalDecompositionTablesV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_normalizer::provider::CompatibilityCompositionPassthroughV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_normalizer::provider::CompatibilityCompositionPassthroughV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *normalizer::nfkc_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_normalizer::provider::CompatibilityCompositionPassthroughV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_normalizer::provider::CompatibilityDecompositionSupplementV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_normalizer::provider::CompatibilityDecompositionSupplementV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *normalizer::nfkd_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_normalizer::provider::CompatibilityDecompositionSupplementV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_normalizer::provider::CompatibilityDecompositionTablesV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_normalizer::provider::CompatibilityDecompositionTablesV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *normalizer::nfkdex_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_normalizer::provider::CompatibilityDecompositionTablesV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_normalizer::provider::NonRecursiveDecompositionSupplementV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_normalizer::provider::NonRecursiveDecompositionSupplementV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *normalizer::decomp_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_normalizer::provider::NonRecursiveDecompositionSupplementV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_normalizer::provider::Uts46CompositionPassthroughV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_normalizer::provider::Uts46CompositionPassthroughV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *normalizer::uts46_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_normalizer::provider::Uts46CompositionPassthroughV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_normalizer::provider::Uts46DecompositionSupplementV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_normalizer::provider::Uts46DecompositionSupplementV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *normalizer::uts46d_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_normalizer::provider::Uts46DecompositionSupplementV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_plurals::provider::CardinalV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_plurals::provider::CardinalV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *plurals::cardinal_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_plurals::provider::CardinalV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_plurals::provider::OrdinalV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_plurals::provider::OrdinalV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *plurals::ordinal_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_plurals::provider::OrdinalV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::AlphabeticV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::AlphabeticV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::alpha_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::AlphabeticV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::AsciiHexDigitV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::AsciiHexDigitV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::ahex_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::AsciiHexDigitV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::BidiClassV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::BidiClassV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::bc_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::BidiClassV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::BidiControlV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::BidiControlV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::bidi_c_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::BidiControlV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::BidiMirroredV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::BidiMirroredV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::bidi_m_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::BidiMirroredV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::CanonicalCombiningClassV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::CanonicalCombiningClassV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::ccc_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::CanonicalCombiningClassV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::CaseIgnorableV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::CaseIgnorableV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::ci_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::CaseIgnorableV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::CasedV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::CasedV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::cased_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::CasedV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::ChangesWhenCasefoldedV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::ChangesWhenCasefoldedV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::cwcf_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::ChangesWhenCasefoldedV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::ChangesWhenLowercasedV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::ChangesWhenLowercasedV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::cwl_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::ChangesWhenLowercasedV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::ChangesWhenNfkcCasefoldedV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::ChangesWhenNfkcCasefoldedV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::cwkcf_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::ChangesWhenNfkcCasefoldedV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::ChangesWhenTitlecasedV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::ChangesWhenTitlecasedV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::cwt_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::ChangesWhenTitlecasedV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::ChangesWhenUppercasedV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::ChangesWhenUppercasedV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::cwu_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::ChangesWhenUppercasedV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::DashV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::DashV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::dash_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::DashV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::DefaultIgnorableCodePointV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::DefaultIgnorableCodePointV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::di_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::DefaultIgnorableCodePointV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::DeprecatedV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::DeprecatedV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::dep_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::DeprecatedV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::DiacriticV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::DiacriticV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::dia_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::DiacriticV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::EastAsianWidthV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::EastAsianWidthV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::ea_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::EastAsianWidthV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::EmojiComponentV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::EmojiComponentV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::ecomp_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::EmojiComponentV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::EmojiModifierBaseV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::EmojiModifierBaseV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::ebase_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::EmojiModifierBaseV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::EmojiModifierV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::EmojiModifierV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::emod_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::EmojiModifierV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::EmojiPresentationV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::EmojiPresentationV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::epres_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::EmojiPresentationV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::EmojiV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::EmojiV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::emoji_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::EmojiV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::ExtendedPictographicV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::ExtendedPictographicV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::extpict_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::ExtendedPictographicV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::ExtenderV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::ExtenderV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::ext_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::ExtenderV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::GeneralCategoryV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::GeneralCategoryV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::gc_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::GeneralCategoryV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::GraphemeBaseV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::GraphemeBaseV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::gr_base_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::GraphemeBaseV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::GraphemeClusterBreakV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::GraphemeClusterBreakV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::gcb_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::GraphemeClusterBreakV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::GraphemeExtendV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::GraphemeExtendV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::gr_ext_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::GraphemeExtendV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::HexDigitV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::HexDigitV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::hex_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::HexDigitV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::IdContinueV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::IdContinueV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::idc_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::IdContinueV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::IdStartV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::IdStartV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::ids_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::IdStartV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::IdeographicV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::IdeographicV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::ideo_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::IdeographicV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::IdsBinaryOperatorV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::IdsBinaryOperatorV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::idsb_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::IdsBinaryOperatorV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::IdsTrinaryOperatorV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::IdsTrinaryOperatorV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::idst_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::IdsTrinaryOperatorV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::JoinControlV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::JoinControlV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::join_c_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::JoinControlV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::LineBreakV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::LineBreakV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::lb_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::LineBreakV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::LogicalOrderExceptionV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::LogicalOrderExceptionV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::loe_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::LogicalOrderExceptionV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::LowercaseV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::LowercaseV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::lower_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::LowercaseV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::MathV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::MathV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::math_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::MathV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::NoncharacterCodePointV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::NoncharacterCodePointV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::nchar_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::NoncharacterCodePointV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::PatternSyntaxV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::PatternSyntaxV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::pat_syn_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::PatternSyntaxV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::PatternWhiteSpaceV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::PatternWhiteSpaceV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::pat_ws_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::PatternWhiteSpaceV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::QuotationMarkV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::QuotationMarkV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::qmark_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::QuotationMarkV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::RadicalV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::RadicalV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::radical_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::RadicalV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::RegionalIndicatorV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::RegionalIndicatorV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::ri_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::RegionalIndicatorV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::ScriptV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::ScriptV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::sc_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::ScriptV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::ScriptWithExtensionsPropertyV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::ScriptWithExtensionsPropertyV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::scx_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_properties::provider::ScriptWithExtensionsPropertyV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::SentenceBreakV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::SentenceBreakV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::sb_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::SentenceBreakV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::SentenceTerminalV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::SentenceTerminalV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::sterm_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::SentenceTerminalV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::SoftDottedV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::SoftDottedV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::sd_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::SoftDottedV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::TerminalPunctuationV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::TerminalPunctuationV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::term_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::TerminalPunctuationV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::UnifiedIdeographV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::UnifiedIdeographV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::uideo_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::UnifiedIdeographV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::UppercaseV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::UppercaseV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::upper_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::UppercaseV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::VariationSelectorV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::VariationSelectorV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::vs_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::VariationSelectorV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::WhiteSpaceV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::WhiteSpaceV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::wspace_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::WhiteSpaceV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::WordBreakV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::WordBreakV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::wb_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::WordBreakV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::XidContinueV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::XidContinueV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::xidc_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::XidContinueV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_properties::provider::XidStartV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_properties::provider::XidStartV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *props::xids_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_properties::provider::XidStartV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_provider::hello_world::HelloWorldV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_provider::hello_world::HelloWorldV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *core::helloworld_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_provider::hello_world::HelloWorldV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker> for BakedDataProvider {
    fn load(
        &self,
        req: DataRequest,
    ) -> Result<DataResponse<::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *fallback::likelysubtags_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale
                            .with_req(::icu_provider_adapters::fallback::provider::LocaleFallbackLikelySubtagsV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *fallback::parents_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| {
                        DataErrorKind::MissingLocale.with_req(::icu_provider_adapters::fallback::provider::LocaleFallbackParentsV1Marker::KEY, req)
                    })?,
            ))),
        })
    }
}
impl DataProvider<::icu_segmenter::LstmDataV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_segmenter::LstmDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *segmenter::lstm_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_segmenter::LstmDataV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_segmenter::provider::GraphemeClusterBreakDataV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_segmenter::provider::GraphemeClusterBreakDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *segmenter::grapheme_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_segmenter::provider::GraphemeClusterBreakDataV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_segmenter::provider::LineBreakDataV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_segmenter::provider::LineBreakDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *segmenter::line_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_segmenter::provider::LineBreakDataV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_segmenter::provider::SentenceBreakDataV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_segmenter::provider::SentenceBreakDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *segmenter::sentence_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_segmenter::provider::SentenceBreakDataV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_segmenter::provider::UCharDictionaryBreakDataV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_segmenter::provider::UCharDictionaryBreakDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *segmenter::dictionary_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_segmenter::provider::UCharDictionaryBreakDataV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_segmenter::provider::WordBreakDataV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_segmenter::provider::WordBreakDataV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *segmenter::word_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_segmenter::provider::WordBreakDataV1Marker::KEY, req))?,
            ))),
        })
    }
}
impl DataProvider<::icu_timezone::provider::MetaZonePeriodV1Marker> for BakedDataProvider {
    fn load(&self, req: DataRequest) -> Result<DataResponse<::icu_timezone::provider::MetaZonePeriodV1Marker>, DataError> {
        Ok(DataResponse {
            metadata: Default::default(),
            payload: Some(DataPayload::from_owned(zerofrom::ZeroFrom::zero_from(
                *time_zone::metazone_period_v1::DATA
                    .get_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse())
                    .ok_or_else(|| DataErrorKind::MissingLocale.with_req(::icu_timezone::provider::MetaZonePeriodV1Marker::KEY, req))?,
            ))),
        })
    }
}
