// @generated
/// Implement `DataProvider<ExemplarCitiesV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_time_zone_exemplar_cities_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::time_zones::ExemplarCitiesV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::time_zones::ExemplarCitiesV1Marker>, icu_provider::DataError> {
                static UND: <icu::datetime::provider::time_zones::ExemplarCitiesV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::time_zones::ExemplarCitiesV1(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"adalv\0\0\0aedxb\0\0\0afkbl\0\0\0aganu\0\0\0aiaxa\0\0\0altia\0\0\0amevn\0\0\0ancur\0\0\0aolad\0\0\0aqcas\0\0\0aqdav\0\0\0aqddu\0\0\0aqmaw\0\0\0aqmcm\0\0\0aqplm\0\0\0aqrot\0\0\0aqsyw\0\0\0aqtrl\0\0\0aqvos\0\0\0arbue\0\0\0arcor\0\0\0arctc\0\0\0arirj\0\0\0arjuj\0\0\0arluq\0\0\0armdz\0\0\0arrgl\0\0\0arsla\0\0\0artuc\0\0\0aruaq\0\0\0arush\0\0\0asppg\0\0\0atvie\0\0\0auadl\0\0\0aubhq\0\0\0aubne\0\0\0audrw\0\0\0aueuc\0\0\0auhba\0\0\0auldc\0\0\0auldh\0\0\0aumel\0\0\0aumqi\0\0\0auper\0\0\0ausyd\0\0\0awaua\0\0\0azbak\0\0\0basjj\0\0\0bbbgi\0\0\0bddac\0\0\0bebru\0\0\0bfoua\0\0\0bgsof\0\0\0bhbah\0\0\0bibjm\0\0\0bjptn\0\0\0bmbda\0\0\0bnbwn\0\0\0bolpb\0\0\0bqkra\0\0\0braux\0\0\0brbel\0\0\0brbvb\0\0\0brcgb\0\0\0brcgr\0\0\0brern\0\0\0brfen\0\0\0brfor\0\0\0brmao\0\0\0brmcz\0\0\0brpvh\0\0\0brrbr\0\0\0brrec\0\0\0brsao\0\0\0brssa\0\0\0brstm\0\0\0bsnas\0\0\0btthi\0\0\0bwgbe\0\0\0bymsq\0\0\0bzbze\0\0\0cacfq\0\0\0caedm\0\0\0cafne\0\0\0caglb\0\0\0cagoo\0\0\0cahal\0\0\0caiql\0\0\0camon\0\0\0careb\0\0\0careg\0\0\0casjf\0\0\0cator\0\0\0cavan\0\0\0cawnp\0\0\0caybx\0\0\0caycb\0\0\0cayda\0\0\0caydq\0\0\0cayek\0\0\0cayev\0\0\0cayxy\0\0\0cayyn\0\0\0cayzs\0\0\0cccck\0\0\0cdfbm\0\0\0cdfih\0\0\0cfbgf\0\0\0cgbzv\0\0\0chzrh\0\0\0ciabj\0\0\0ckrar\0\0\0clipc\0\0\0clpuq\0\0\0clscl\0\0\0cmdla\0\0\0cnsha\0\0\0cnurc\0\0\0cobog\0\0\0crsjo\0\0\0cuhav\0\0\0cvrai\0\0\0cxxch\0\0\0cyfmg\0\0\0cynic\0\0\0czprg\0\0\0deber\0\0\0debsngn\0djjib\0\0\0dkcph\0\0\0dmdom\0\0\0dosdq\0\0\0dzalg\0\0\0ecgps\0\0\0ecgye\0\0\0eetll\0\0\0egcai\0\0\0eheai\0\0\0erasm\0\0\0esceu\0\0\0eslpa\0\0\0esmad\0\0\0etadd\0\0\0fihel\0\0\0fimhq\0\0\0fjsuv\0\0\0fkpsy\0\0\0fmksa\0\0\0fmpni\0\0\0fmtkk\0\0\0fotho\0\0\0frpar\0\0\0galbv\0\0\0gazastrpgblon\0\0\0gdgnd\0\0\0getbs\0\0\0gfcay\0\0\0gggci\0\0\0ghacc\0\0\0gigib\0\0\0gldkshvnglgoh\0\0\0globy\0\0\0glthu\0\0\0gmbjl\0\0\0gncky\0\0\0gpbbr\0\0\0gpmsb\0\0\0gpsbh\0\0\0gqssg\0\0\0grath\0\0\0gsgrv\0\0\0gtgua\0\0\0gugum\0\0\0gwoxb\0\0\0gygeo\0\0\0hebron\0\0hkhkg\0\0\0hntgu\0\0\0hrzag\0\0\0htpap\0\0\0hubud\0\0\0iddjj\0\0\0idjkt\0\0\0idmak\0\0\0idpnk\0\0\0iedub\0\0\0imdgs\0\0\0inccu\0\0\0iodga\0\0\0iqbgw\0\0\0irthr\0\0\0isrey\0\0\0itrom\0\0\0jeruslm\0jesth\0\0\0jmkin\0\0\0joamm\0\0\0jptyo\0\0\0kenbo\0\0\0kgfru\0\0\0khpnh\0\0\0kicxi\0\0\0kipho\0\0\0kitrw\0\0\0kmyva\0\0\0knbas\0\0\0kpfnj\0\0\0krsel\0\0\0kwkwi\0\0\0kygec\0\0\0kzaau\0\0\0kzakx\0\0\0kzala\0\0\0kzguw\0\0\0kzksn\0\0\0kzkzo\0\0\0kzura\0\0\0lavte\0\0\0lbbey\0\0\0lccas\0\0\0livdz\0\0\0lkcmb\0\0\0lrmlw\0\0\0lsmsu\0\0\0ltvno\0\0\0lulux\0\0\0lvrix\0\0\0lytip\0\0\0macas\0\0\0mcmon\0\0\0mdkiv\0\0\0metgd\0\0\0mgtnr\0\0\0mhkwa\0\0\0mhmaj\0\0\0mkskp\0\0\0mlbko\0\0\0mmrgn\0\0\0mncoq\0\0\0mnhvd\0\0\0mnuln\0\0\0momfm\0\0\0mpspn\0\0\0mqfdf\0\0\0mrnkc\0\0\0msmni\0\0\0mtmla\0\0\0muplu\0\0\0mvmle\0\0\0mwblz\0\0\0mxchi\0\0\0mxcjs\0\0\0mxcun\0\0\0mxhmo\0\0\0mxmam\0\0\0mxmex\0\0\0mxmid\0\0\0mxmty\0\0\0mxmzt\0\0\0mxoji\0\0\0mxpvr\0\0\0mxtij\0\0\0mykch\0\0\0mykul\0\0\0mzmpm\0\0\0nawdh\0\0\0ncnou\0\0\0nenim\0\0\0nfnlk\0\0\0nglos\0\0\0nimga\0\0\0nlams\0\0\0noosl\0\0\0npktm\0\0\0nrinu\0\0\0nuiue\0\0\0nzakl\0\0\0nzcht\0\0\0ommct\0\0\0papty\0\0\0pelim\0\0\0pfgmr\0\0\0pfnhv\0\0\0pfppt\0\0\0pgpom\0\0\0pgraw\0\0\0phmnl\0\0\0pkkhi\0\0\0plwaw\0\0\0pmmqc\0\0\0pnpcn\0\0\0prsju\0\0\0ptfnc\0\0\0ptlis\0\0\0ptpdl\0\0\0pwror\0\0\0pyasu\0\0\0qadoh\0\0\0rereu\0\0\0robuh\0\0\0rsbeg\0\0\0ruasf\0\0\0rubax\0\0\0ruchita\0rudyr\0\0\0rugdx\0\0\0ruikt\0\0\0rukgd\0\0\0rukhndg\0rukra\0\0\0rukuf\0\0\0rukvx\0\0\0rumow\0\0\0runoz\0\0\0ruoms\0\0\0ruovb\0\0\0rupkc\0\0\0rurtw\0\0\0rusred\0\0rutof\0\0\0ruuly\0\0\0ruunera\0ruuus\0\0\0ruvog\0\0\0ruvvo\0\0\0ruyek\0\0\0ruyks\0\0\0rwkgl\0\0\0saruh\0\0\0sbhir\0\0\0scmaw\0\0\0sdkrt\0\0\0sesto\0\0\0sgsin\0\0\0shshn\0\0\0silju\0\0\0sjlyr\0\0\0skbts\0\0\0slfna\0\0\0smsai\0\0\0sndkr\0\0\0somgq\0\0\0srpbm\0\0\0ssjub\0\0\0sttms\0\0\0svsal\0\0\0sxphi\0\0\0sydam\0\0\0szqmn\0\0\0tcgdt\0\0\0tdndj\0\0\0tfpfr\0\0\0tglfw\0\0\0thbkk\0\0\0tjdyu\0\0\0tkfko\0\0\0tldil\0\0\0tmasb\0\0\0tntun\0\0\0totbu\0\0\0trist\0\0\0ttpos\0\0\0tvfun\0\0\0twtpe\0\0\0tzdar\0\0\0uaiev\0\0\0uasip\0\0\0ugkla\0\0\0umawk\0\0\0ummdy\0\0\0unk\0\0\0\0\0usadk\0\0\0usaeg\0\0\0usanc\0\0\0usboi\0\0\0uschi\0\0\0usden\0\0\0usdet\0\0\0ushnl\0\0\0usind\0\0\0usinvev\0usjnu\0\0\0usknx\0\0\0uslax\0\0\0uslui\0\0\0usmnm\0\0\0usmoc\0\0\0usmtm\0\0\0usndcnt\0usndnsl\0usnyc\0\0\0usoea\0\0\0usome\0\0\0usphx\0\0\0ussit\0\0\0ustel\0\0\0uswlz\0\0\0uswsq\0\0\0usxul\0\0\0usyak\0\0\0uymvd\0\0\0uzskd\0\0\0uztas\0\0\0vavat\0\0\0vcsvd\0\0\0veccs\0\0\0vgtov\0\0\0vistt\0\0\0vnsgn\0\0\0vuvli\0\0\0wfmau\0\0\0wsapw\0\0\0yeade\0\0\0ytmam\0\0\0zajnb\0\0\0zmlun\0\0\0zwhre\0\0\0") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\xA3\x01\0\0\0\0\x07\0\x0C\0\x11\0\x18\0 \0&\0-\x005\0;\0@\0E\0W\0]\0d\0j\0q\0v\0{\0\x81\0\x8D\0\x94\0\x9D\0\xA5\0\xAA\0\xB2\0\xB9\0\xC5\0\xCA\0\xD1\0\xD9\0\xE0\0\xE9\0\xEF\0\xF7\0\x02\x01\n\x01\x10\x01\x15\x01\x1B\x01#\x01,\x015\x01>\x01C\x01I\x01N\x01R\x01Z\x01b\x01g\x01o\x01z\x01\x7F\x01\x86\x01\x8F\x01\x99\x01\xA0\x01\xA6\x01\xAC\x01\xB6\x01\xBF\x01\xC4\x01\xCD\x01\xD3\x01\xDF\x01\xE7\x01\xEE\x01\xF7\x01\xFD\x01\x03\x02\x0E\x02\x18\x02\x1E\x02'\x02,\x024\x02:\x02A\x02I\x02N\x02T\x02[\x02c\x02n\x02w\x02\x80\x02\x87\x02\x8E\x02\x95\x02\x9D\x02\xA3\x02\xAF\x02\xB6\x02\xBF\x02\xC7\x02\xD3\x02\xE0\x02\xE6\x02\xF2\x02\xFE\x02\x04\x03\x0E\x03\x1B\x03#\x03(\x032\x03:\x03@\x03K\x03Q\x03X\x03a\x03g\x03s\x03{\x03\x81\x03\x89\x03\x8F\x03\x95\x03\x9F\x03\xA5\x03\xAF\x03\xB8\x03\xC1\x03\xC8\x03\xCE\x03\xD4\x03\xDC\x03\xE4\x03\xEE\x03\xF6\x03\x03\x04\n\x04\x13\x04\x1C\x04#\x04(\x040\x046\x04;\x04A\x04G\x04R\x04Z\x04c\x04g\x04n\x04t\x04{\x04\x80\x04\x85\x04\x8A\x04\x94\x04\x98\x04\x9E\x04\xA5\x04\xAC\x04\xB3\x04\xBB\x04\xC0\x04\xC9\x04\xD5\x04\xD9\x04\xE9\x04\xEE\x04\xF4\x04\xFB\x04\x05\x05\x0C\x05\x1B\x05!\x05'\x054\x05=\x05A\x05G\x05M\x05S\x05\\\x05g\x05m\x05{\x05\x83\x05\x8B\x05\x92\x05\x9A\x05\xA3\x05\xA9\x05\xB4\x05\xBB\x05\xC1\x05\xC8\x05\xCE\x05\xD7\x05\xDB\x05\xE4\x05\xEA\x05\xF1\x05\xF6\x05\xFB\x05\x02\x06\t\x06\x13\x06\x1D\x06&\x06,\x062\x06;\x06D\x06I\x06O\x06U\x06Z\x06`\x06f\x06l\x06t\x06}\x06\x81\x06\x8A\x06\x90\x06\x99\x06\x9E\x06\xA5\x06\xAD\x06\xB3\x06\xBA\x06\xC4\x06\xC8\x06\xCF\x06\xD9\x06\xDF\x06\xE7\x06\xF0\x06\xFC\x06\x05\x07\x0B\x07\x11\x07\x17\x07\x1D\x07'\x07+\x076\x07;\x07A\x07K\x07U\x07_\x07d\x07m\x07u\x07}\x07\x86\x07\x94\x07\x9B\x07\xA5\x07\xAE\x07\xB9\x07\xC0\x07\xC9\x07\xD1\x07\xD8\x07\xEA\x07\xF1\x07\xF8\x07\x04\x08\n\x08\x12\x08\x18\x08\x1E\x08%\x08*\x081\x08:\x08>\x08G\x08L\x08P\x08X\x08_\x08e\x08k\x08o\x08v\x08\x7F\x08\x85\x08\x91\x08\x9D\x08\xA3\x08\xAA\x08\xB0\x08\xB8\x08\xC0\x08\xCB\x08\xD2\x08\xD8\x08\xDE\x08\xE3\x08\xEC\x08\xF1\x08\xF9\x08\x02\t\n\t\x13\t\x1A\t\x1F\t%\t,\t3\t>\tF\tQ\tW\t\\\tb\tn\tr\t}\t\x86\t\x8D\t\x9A\t\x9F\t\xA8\t\xB0\t\xB8\t\xC1\t\xCC\t\xD9\t\xE0\t\xE6\t\xEC\t\xF7\t\xFB\t\x03\n\x0C\n\x15\n\x1F\n(\n4\n>\nF\nP\nU\n^\nh\nl\nv\n\x81\n\x99\n\xA1\n\xA8\n\xB2\n\xBA\n\xC3\n\xC7\n\xCE\n\xD6\n\xDD\n\xE1\n\xE9\n\xEE\n\xF7\n\xFF\n\x0C\x0B\x14\x0B\x1A\x0B'\x0B+\x0B5\x0B<\x0B@\x0BF\x0BM\x0BQ\x0Ba\x0Bj\x0Bo\x0Bv\x0B|\x0B\x83\x0B\x8B\x0B\x97\x0B\xA5\x0B\xAB\x0B\xB8\x0B\xC3\x0B\xCD\x0B\xD6\x0B\xEA\x0B\xF4\x0B\x08\x0C\x1F\x0C'\x0C9\x0C=\x0CD\x0CI\x0C[\x0Ck\x0C~\x0C\x92\x0C\x99\x0C\xA3\x0C\xAC\x0C\xB4\x0C\xBB\x0C\xC6\x0C\xCD\x0C\xD4\x0C\xDE\x0C\xE9\x0C\xEE\x0C\xF4\x0C\xF8\x0C\xFC\x0C\x03\r\x0F\r\x15\rAndorraDubaiKabulAntiguaAnguillaTiraneYerevanCura\xC3\xA7aoLuandaCaseyDavisDumont d\xE2\x80\x99UrvilleMawsonMcMurdoPalmerRotheraSyowaTrollVostokBuenos AiresCordobaCatamarcaLa RiojaJujuySan LuisMendozaRio GallegosSaltaTucumanSan JuanUshuaiaPago PagoViennaAdelaideBroken HillBrisbaneDarwinEuclaHobartLindemanLord HoweMelbourneMacquariePerthSydneyArubaBakuSarajevoBarbadosDhakaBrusselsOuagadougouSofiaBahrainBujumburaPorto-NovoBermudaBruneiLa PazKralendijkAraguainaBelemBoa VistaCuiabaCampo GrandeEirunepeNoronhaFortalezaManausMaceioPorto VelhoRio BrancoRecifeSao PauloBahiaSantaremNassauThimphuGaboroneMinskBelizeCrestonEdmontonFort NelsonGlace BayGoose BayHalifaxIqaluitMonctonResoluteReginaSt. John\xE2\x80\x99sTorontoVancouverWinnipegBlanc-SablonCambridge BayDawsonDawson CreekRankin InletInuvikWhitehorseSwift CurrentAtikokanCocosLubumbashiKinshasaBanguiBrazzavilleZurichAbidjanRarotongaEasterPunta ArenasSantiagoDoualaShanghaiUrumqiBogotaCosta RicaHavanaCape VerdeChristmasFamagustaNicosiaPragueBerlinBusingenDjiboutiCopenhagenDominicaSanto DomingoAlgiersGalapagosGuayaquilTallinnCairoEl AaiunAsmaraCeutaCanaryMadridAddis AbabaHelsinkiMariehamnFijiStanleyKosraePohnpeiChuukFaroeParisLibrevilleGazaLondonGrenadaTbilisiCayenneGuernseyAccraGibraltarDanmarkshavnNuukIttoqqortoormiitThuleBanjulConakryGuadeloupeMarigotSt. Barth\xC3\xA9lemyMalaboAthensSouth GeorgiaGuatemalaGuamBissauGuyanaHebronHong KongTegucigalpaZagrebPort-au-PrinceBudapestJayapuraJakartaMakassarPontianakDublinIsle of ManKolkataChagosBaghdadTehranReykjavikRomeJerusalemJerseyJamaicaAmmanTokyoNairobiBishkekPhnom PenhKiritimatiEnderburyTarawaComoroSt. KittsPyongyangSeoulKuwaitCaymanAqtauAqtobeAlmatyAtyrauQostanayQyzylordaOralVientianeBeirutSt. LuciaVaduzColomboMonroviaMaseruVilniusLuxembourgRigaTripoliCasablancaMonacoChisinauPodgoricaAntananarivoKwajaleinMajuroSkopjeBamakoYangonChoibalsanHovdUlaanbaatarMacaoSaipanMartiniqueNouakchottMontserratMaltaMauritiusMaldivesBlantyreChihuahuaCiudad Ju\xC3\xA1rezCanc\xC3\xBAnHermosilloMatamorosMexico CityM\xC3\xA9ridaMonterreyMazatlanOjinagaBah\xC3\xADa de BanderasTijuanaKuchingKuala LumpurMaputoWindhoekNoumeaNiameyNorfolkLagosManaguaAmsterdamOsloKathmanduNauruNiueAucklandChathamMuscatPanamaLimaGambierMarquesasTahitiPort MoresbyBougainvilleManilaKarachiWarsawMiquelonPitcairnPuerto RicoMadeiraLisbonAzoresPalauAsunci\xC3\xB3nQatarR\xC3\xA9unionBucharestBelgradeAstrakhanBarnaulChitaAnadyrMagadanIrkutskKaliningradKhandygaKrasnoyarskSamaraKirovMoscowNovokuznetskOmskNovosibirskKamchatkaSaratovSrednekolymskTomskUlyanovskUst-NeraSakhalinVolgogradVladivostokYekaterinburgYakutskKigaliRiyadhGuadalcanalMaheKhartoumStockholmSingaporeSt. HelenaLjubljanaLongyearbyenBratislavaFreetownSan MarinoDakarMogadishuParamariboJubaS\xC3\xA3o Tom\xC3\xA9El SalvadorLower Prince\xE2\x80\x99s QuarterDamascusMbabaneGrand TurkNdjamenaKerguelenLomeBangkokDushanbeFakaofoDiliAshgabatTunisTongatapuIstanbulPort of SpainFunafutiTaipeiDar es SalaamKyivSimferopolKampalaWakeMidwayUnknownAdakMarengo, IndianaAnchorageBoiseChicagoDenverDetroitHonoluluIndianapolisVevay, IndianaJuneauKnox, IndianaLos AngelesLouisvilleMenomineeMonticello, KentuckyMetlakatlaCenter, North DakotaNew Salem, North DakotaNew YorkVincennes, IndianaNomePhoenixSitkaTell City, IndianaWinamac, IndianaPetersburg, IndianaBeulah, North DakotaYakutatMontevideoSamarkandTashkentVaticanSt. VincentCaracasTortolaSt. ThomasHo Chi MinhEfateWallisApiaAdenMayotteJohannesburgLusakaHarare") })
                });
                static VALUES: [&<icu::datetime::provider::time_zones::ExemplarCitiesV1Marker as icu_provider::DynamicDataMarker>::Yokeable; 1usize] = [&UND];
                static KEYS: [&str; 1usize] = ["und"];
                if let Ok(payload) = KEYS.binary_search_by(|k| req.legacy_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(payload)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::datetime::provider::time_zones::ExemplarCitiesV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
}
/// Implement `IterableDataProvider<ExemplarCitiesV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this marker.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_time_zone_exemplar_cities_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        impl icu_provider::datagen::IterableDataProvider<icu::datetime::provider::time_zones::ExemplarCitiesV1Marker> for $provider {
            fn supported_requests(&self) -> Result<std::collections::HashSet<(icu_provider::DataLocale, icu_provider::DataMarkerAttributes)>, icu_provider::DataError> {
                Ok(["und"].into_iter().filter_map(icu_provider::DataRequest::legacy_decode).collect())
            }
        }
    };
}
