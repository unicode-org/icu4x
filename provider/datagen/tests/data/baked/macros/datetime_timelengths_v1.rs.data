// @generated
/// Implement `DataProvider<TimeLengthsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_datetime_timelengths_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::calendar::TimeLengthsV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::calendar::TimeLengthsV1Marker>, icu_provider::DataError> {
                static UND: <icu::datetime::provider::calendar::TimeLengthsV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::calendar::TimeLengthsV1 { time_h11_h12: icu::datetime::provider::calendar::patterns::LengthPatternsV1 { full: icu::datetime::pattern::runtime::Pattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80q\x01\0\0:\x80\x80\x02\0\0:\x80\x90\x02\0\0 \x80`\x01\0\0 \x80\xA3\x01") }, metadata: icu::datetime::pattern::runtime::PatternMetadata::from_time_granularity(icu::datetime::pattern::TimeGranularity::Seconds) }, long: icu::datetime::pattern::runtime::Pattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80q\x01\0\0:\x80\x80\x02\0\0:\x80\x90\x02\0\0 \x80`\x01\0\0 \x80\xA3\x01") }, metadata: icu::datetime::pattern::runtime::PatternMetadata::from_time_granularity(icu::datetime::pattern::TimeGranularity::Seconds) }, medium: icu::datetime::pattern::runtime::Pattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80q\x01\0\0:\x80\x80\x02\0\0:\x80\x90\x02\0\0 \x80`\x01") }, metadata: icu::datetime::pattern::runtime::PatternMetadata::from_time_granularity(icu::datetime::pattern::TimeGranularity::Seconds) }, short: icu::datetime::pattern::runtime::Pattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80q\x01\0\0:\x80\x80\x02\0\0 \x80`\x01") }, metadata: icu::datetime::pattern::runtime::PatternMetadata::from_time_granularity(icu::datetime::pattern::TimeGranularity::Minutes) } }, time_h23_h24: icu::datetime::provider::calendar::patterns::LengthPatternsV1 { full: icu::datetime::pattern::runtime::Pattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80r\x02\0\0:\x80\x80\x02\0\0:\x80\x90\x02\0\0 \x80\xA0\x04") }, metadata: icu::datetime::pattern::runtime::PatternMetadata::from_time_granularity(icu::datetime::pattern::TimeGranularity::Seconds) }, long: icu::datetime::pattern::runtime::Pattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80r\x02\0\0:\x80\x80\x02\0\0:\x80\x90\x02\0\0 \x80\xA0\x01") }, metadata: icu::datetime::pattern::runtime::PatternMetadata::from_time_granularity(icu::datetime::pattern::TimeGranularity::Seconds) }, medium: icu::datetime::pattern::runtime::Pattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80r\x02\0\0:\x80\x80\x02\0\0:\x80\x90\x02") }, metadata: icu::datetime::pattern::runtime::PatternMetadata::from_time_granularity(icu::datetime::pattern::TimeGranularity::Seconds) }, short: icu::datetime::pattern::runtime::Pattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80r\x02\0\0:\x80\x80\x02") }, metadata: icu::datetime::pattern::runtime::PatternMetadata::from_time_granularity(icu::datetime::pattern::TimeGranularity::Minutes) } }, preferred_hour_cycle: icu::datetime::pattern::CoarseHourCycle::H23H24 };
                static VALUES: [&<icu::datetime::provider::calendar::TimeLengthsV1Marker as icu_provider::DataMarker>::Yokeable; 1usize] = [&UND];
                static KEYS: [&str; 1usize] = ["und"];
                if let Ok(payload) = KEYS.binary_search_by(|k| req.legacy_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(payload)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::datetime::provider::calendar::TimeLengthsV1Marker as icu_provider::KeyedDataMarker>::KEY, req))
                }
            }
        }
    };
}
/// Implement `IterableDataProvider<TimeLengthsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this key.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_datetime_timelengths_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        impl icu_provider::datagen::IterableDataProvider<icu::datetime::provider::calendar::TimeLengthsV1Marker> for $provider {
            fn supported_requests(&self) -> Result<std::collections::HashSet<(icu_provider::DataLocale, icu_provider::DataKeyAttributes)>, icu_provider::DataError> {
                Ok(["und"].into_iter().filter_map(icu_provider::DataRequest::legacy_decode).collect())
            }
        }
    };
}
