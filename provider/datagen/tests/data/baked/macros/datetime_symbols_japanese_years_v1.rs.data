// @generated
/// Implement `DataProvider<JapaneseYearNamesV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_datetime_symbols_japanese_years_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.67"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::JapaneseYearNamesV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::JapaneseYearNamesV1Marker>, icu_provider::DataError> {
                static UND_X_4: <icu::datetime::provider::neo::JapaneseYearNamesV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x07\0\0\0\0\0\x03\0\x05\0\x0B\0\x10\0\x15\0\x1A\0bceceheiseimeijireiwashowataisho") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x07\0\0\0\0\0\x02\0\x05\0\x06\0\x07\0\x08\0\t\0CEBCEHMRST") })
                });
                static UND_X_3: <icu::datetime::provider::neo::JapaneseYearNamesV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::neo::YearNamesV1::Eras(unsafe {
                    #[allow(unused_unsafe)]
                    zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x07\0\0\0\0\0\x03\0\x05\0\x0B\0\x10\0\x15\0\x1A\0bceceheiseimeijireiwashowataisho") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x07\0\0\0\0\0\x02\0\x05\0\x0B\0\x10\0\x15\0\x1B\0CEBCEHeiseiMeijiReiwaSh\xC5\x8DwaTaish\xC5\x8D") })
                });
                static VALUES: [&<icu::datetime::provider::neo::JapaneseYearNamesV1Marker as icu_provider::DataMarker>::Yokeable; 3usize] = [&UND_X_3, &UND_X_4, &UND_X_3];
                static KEYS: [&str; 3usize] = ["und-x-3", "und-x-4", "und-x-5"];
                if let Ok(payload) = KEYS.binary_search_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(payload)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::datetime::provider::neo::JapaneseYearNamesV1Marker as icu_provider::KeyedDataMarker>::KEY, req))
                }
            }
        }
    };
}
