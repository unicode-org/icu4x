// @generated
/// Implement `DataProvider<CurrencyExtendedDataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_currency_extended_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::experimental::dimension::provider::extended_currency::CurrencyExtendedDataV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::experimental::dimension::provider::extended_currency::CurrencyExtendedDataV1Marker>, icu_provider::DataError> {
                static UND_X_AFN: <icu::experimental::dimension::provider::extended_currency::CurrencyExtendedDataV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::experimental::dimension::provider::extended_currency::CurrencyExtendedDataV1 {
                    placeholders: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(zerovec::ZeroVec::new(), zerovec::VarZeroVec::new())
                    },
                    other_placeholder: None,
                    display_name: None,
                };
                static VALUES: [&<icu::experimental::dimension::provider::extended_currency::CurrencyExtendedDataV1Marker as icu_provider::DynamicDataMarker>::Yokeable; 106usize
                static KEYS: [&str; 106usize] = ["und-x-AFN", "und-x-AMD", "und-x-AOA", "und-x-ARS", "und-x-AUD", "und-x-AZN", "und-x-BAM", "und-x-BBD", "und-x-BDT", "und-x-BMD", "und-x-BND", "und-x-BOB", "und-x-BRL", "und-x-BSD", "und-x-BWP", "und-x-BZD", "und-x-CAD", "und-x-CLP", "und-x-CNY", "und-x-COP", "und-x-CRC", "und-x-CUC", "und-x-CUP", "und-x-CZK", "und-x-DKK", "und-x-DOP", "und-x-EGP", "und-x-ESP", "und-x-EUR", "und-x-FJD", "und-x-FKP", "und-x-GBP", "und-x-GEL", "und-x-GHS", "und-x-GIP", "und-x-GNF", "und-x-GTQ", "und-x-GYD", "und-x-HKD", "und-x-HNL", "und-x-HRK", "und-x-HUF", "und-x-IDR", "und-x-ILS", "und-x-INR", "und-x-ISK", "und-x-JMD", "und-x-JPY", "und-x-KGS", "und-x-KHR", "und-x-KMF", "und-x-KPW", "und-x-KRW", "und-x-KYD", "und-x-KZT", "und-x-LAK", "und-x-LBP", "und-x-LKR", "und-x-LRD", "und-x-LTL", "und-x-LVL", "und-x-MGA", "und-x-MMK", "und-x-MNT", "und-x-MUR", "und-x-MXN", "und-x-MYR", "und-x-NAD", "und-x-NGN", "und-x-NIO", "und-x-NOK", "und-x-NPR", "und-x-NZD", "und-x-PHP", "und-x-PKR", "und-x-PLN", "und-x-PYG", "und-x-RON", "und-x-RUB", "und-x-RWF", "und-x-SBD", "und-x-SEK", "und-x-SGD", "und-x-SHP", "und-x-SRD", "und-x-SSP", "und-x-STN", "und-x-SYP", "und-x-THB", "und-x-TOP", "und-x-TRY", "und-x-TTD", "und-x-TWD", "und-x-UAH", "und-x-USD", "und-x-UYU", "und-x-VEF", "und-x-VND", "und-x-XAF", "und-x-XCD", "und-x-XCG", "und-x-XOF", "und-x-XPF", "und-x-XXX", "und-x-ZAR", "und-x-ZMW"];
                if let Ok(payload) = KEYS.binary_search_by(|k| req.legacy_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(payload)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::experimental::dimension::provider::extended_currency::CurrencyExtendedDataV1Marker as icu_provider::DataMarker>::KEY, req))
                }
            }
        }
    };
}
/// Implement `IterableDataProvider<CurrencyExtendedDataV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this key.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_currency_extended_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        impl icu_provider::datagen::IterableDataProvider<icu::experimental::dimension::provider::extended_currency::CurrencyExtendedDataV1Marker> for $provider {
            fn supported_requests(&self) -> Result<std::collections::HashSet<(icu_provider::DataLocale, icu_provider::DataKeyAttributes)>, icu_provider::DataError> {
                Ok(["und-x-AFN", "und-x-AMD", "und-x-AOA", "und-x-ARS", "und-x-AUD", "und-x-AZN", "und-x-BAM", "und-x-BBD", "und-x-BDT", "und-x-BMD", "und-x-BND", "und-x-BOB", "und-x-BRL", "und-x-BSD", "und-x-BWP", "und-x-BZD", "und-x-CAD", "und-x-CLP", "und-x-CNY", "und-x-COP", "und-x-CRC", "und-x-CUC", "und-x-CUP", "und-x-CZK", "und-x-DKK", "und-x-DOP", "und-x-EGP", "und-x-ESP", "und-x-EUR", "und-x-FJD", "und-x-FKP", "und-x-GBP", "und-x-GEL", "und-x-GHS", "und-x-GIP", "und-x-GNF", "und-x-GTQ", "und-x-GYD", "und-x-HKD", "und-x-HNL", "und-x-HRK", "und-x-HUF", "und-x-IDR", "und-x-ILS", "und-x-INR", "und-x-ISK", "und-x-JMD", "und-x-JPY", "und-x-KGS", "und-x-KHR", "und-x-KMF", "und-x-KPW", "und-x-KRW", "und-x-KYD", "und-x-KZT", "und-x-LAK", "und-x-LBP", "und-x-LKR", "und-x-LRD", "und-x-LTL", "und-x-LVL", "und-x-MGA", "und-x-MMK", "und-x-MNT", "und-x-MUR", "und-x-MXN", "und-x-MYR", "und-x-NAD", "und-x-NGN", "und-x-NIO", "und-x-NOK", "und-x-NPR", "und-x-NZD", "und-x-PHP", "und-x-PKR", "und-x-PLN", "und-x-PYG", "und-x-RON", "und-x-RUB", "und-x-RWF", "und-x-SBD", "und-x-SEK", "und-x-SGD", "und-x-SHP", "und-x-SRD", "und-x-SSP", "und-x-STN", "und-x-SYP", "und-x-THB", "und-x-TOP", "und-x-TRY", "und-x-TTD", "und-x-TWD", "und-x-UAH", "und-x-USD", "und-x-UYU", "und-x-VEF", "und-x-VND", "und-x-XAF", "und-x-XCD", "und-x-XCG", "und-x-XOF", "und-x-XPF", "und-x-XXX", "und-x-ZAR", "und-x-ZMW"].into_iter().filter_map(icu_provider::DataRequest::legacy_decode).collect())
            }
        }
    };
}
