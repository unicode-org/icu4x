// @generated
/// Implement `DataProvider<TimeZoneFormatsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_time_zone_formats_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::time_zones::TimeZoneFormatsV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::time_zones::TimeZoneFormatsV1Marker>, icu_provider::DataError> {
                static UND: <icu::datetime::provider::time_zones::TimeZoneFormatsV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::time_zones::TimeZoneFormatsV1 {
                    hour_format: (alloc::borrow::Cow::Borrowed("+HH:mm"), alloc::borrow::Cow::Borrowed("-HH:mm")),
                    gmt_format: alloc::borrow::Cow::Borrowed("GMT{0}"),
                    gmt_zero_format: alloc::borrow::Cow::Borrowed("GMT"),
                    region_format: alloc::borrow::Cow::Borrowed("{0}"),
                    region_format_variants: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"daylightstandard") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x02\0\0\0\0\0\x08\0{0} (+1){0} (+0)") })
                    },
                    fallback_format: alloc::borrow::Cow::Borrowed("{1} ({0})"),
                    gmt_offset_fallback: alloc::borrow::Cow::Borrowed("GMT+?"),
                };
                static VALUES: [&<icu::datetime::provider::time_zones::TimeZoneFormatsV1Marker as icu_provider::DynamicDataMarker>::Yokeable; 1usize] = [&UND];
                static KEYS: [&str; 1usize] = ["und"];
                if let Ok(payload) = KEYS.binary_search_by(|k| req.legacy_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(payload)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::datetime::provider::time_zones::TimeZoneFormatsV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
}
/// Implement `IterableDataProvider<TimeZoneFormatsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this marker.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_time_zone_formats_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        impl icu_provider::datagen::IterableDataProvider<icu::datetime::provider::time_zones::TimeZoneFormatsV1Marker> for $provider {
            fn supported_requests(&self) -> Result<std::collections::HashSet<(icu_provider::DataLocale, icu_provider::DataMarkerAttributes)>, icu_provider::DataError> {
                Ok(["und"].into_iter().filter_map(icu_provider::DataRequest::legacy_decode).collect())
            }
        }
    };
}
