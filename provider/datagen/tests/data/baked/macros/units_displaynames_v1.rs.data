// @generated
/// Implement `DataProvider<UnitsDisplayNameV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_units_displaynames_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.67"]
        impl icu_provider::DataProvider<icu::experimental::dimension::provider::units::UnitsDisplayNameV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::experimental::dimension::provider::units::UnitsDisplayNameV1Marker>, icu_provider::DataError> {
                static UND_X_ACCELERA: <icu::experimental::dimension::provider::units::UnitsDisplayNameV1Marker as icu_provider::DataMarker>::Yokeable = icu::experimental::dimension::provider::units::UnitsDisplayNameV1 {
                    long_width: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap2d::from_parts_unchecked(zerovec::VarZeroVec::new(), zerovec::ZeroVec::new(), zerovec::ZeroVec::new(), zerovec::VarZeroVec::new())
                    },
                    short_width: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap2d::from_parts_unchecked(zerovec::VarZeroVec::new(), zerovec::ZeroVec::new(), zerovec::ZeroVec::new(), zerovec::VarZeroVec::new())
                    },
                    narrow_width: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap2d::from_parts_unchecked(zerovec::VarZeroVec::new(), zerovec::ZeroVec::new(), zerovec::ZeroVec::new(), zerovec::VarZeroVec::new())
                    },
                };
                static VALUES: [&<icu::experimental::dimension::provider::units::UnitsDisplayNameV1Marker as icu_provider::DataMarker>::Yokeable; 21usize] = [&UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA, &UND_X_ACCELERA];
                static KEYS: [&str; 21usize] = ["und-x-accelera", "und-x-angle", "und-x-area", "und-x-concentr", "und-x-consumpt", "und-x-coordina", "und-x-digital", "und-x-duration", "und-x-electric", "und-x-energy", "und-x-force", "und-x-frequenc", "und-x-graphics", "und-x-length", "und-x-light", "und-x-mass", "und-x-pressure", "und-x-speed", "und-x-temperat", "und-x-torque", "und-x-volume"];
                if let Ok(payload) = KEYS.binary_search_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(payload)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::experimental::dimension::provider::units::UnitsDisplayNameV1Marker as icu_provider::KeyedDataMarker>::KEY, req))
                }
            }
        }
    };
}
/// Implement `IterableDataProvider<UnitsDisplayNameV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this key.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_units_displaynames_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        impl icu_provider::datagen::IterableDataProvider<icu::experimental::dimension::provider::units::UnitsDisplayNameV1Marker> for $provider {
            fn supported_locales(&self) -> Result<alloc::vec::Vec<icu_provider::DataLocale>, icu_provider::DataError> {
                Ok(["und-x-accelera", "und-x-angle", "und-x-area", "und-x-concentr", "und-x-consumpt", "und-x-coordina", "und-x-digital", "und-x-duration", "und-x-electric", "und-x-energy", "und-x-force", "und-x-frequenc", "und-x-graphics", "und-x-length", "und-x-light", "und-x-mass", "und-x-pressure", "und-x-speed", "und-x-temperat", "und-x-torque", "und-x-volume"].into_iter().map(|s| <icu_provider::DataLocale as core::str::FromStr>::from_str(s).unwrap()).collect())
            }
        }
    };
}
