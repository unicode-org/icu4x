// @generated
/// Implement `DataProvider<UnitsDisplayNameV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_units_displaynames_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::experimental::dimension::provider::units::UnitsDisplayNameV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::experimental::dimension::provider::units::UnitsDisplayNameV1Marker>, icu_provider::DataError> {
                static UND_X_ASTRONOMICAL: <icu::experimental::dimension::provider::units::UnitsDisplayNameV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::experimental::dimension::provider::units::UnitsDisplayNameV1 {
                    long_width: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap2d::from_parts_unchecked(zerovec::VarZeroVec::new(), zerovec::ZeroVec::new(), zerovec::ZeroVec::new(), zerovec::VarZeroVec::new())
                    },
                    short_width: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap2d::from_parts_unchecked(zerovec::VarZeroVec::new(), zerovec::ZeroVec::new(), zerovec::ZeroVec::new(), zerovec::VarZeroVec::new())
                    },
                    narrow_width: unsafe {
                        #[allow(unused_unsafe)]
                        zerovec::ZeroMap2d::from_parts_unchecked(zerovec::VarZeroVec::new(), zerovec::ZeroVec::new(), zerovec::ZeroVec::new(), zerovec::VarZeroVec::new())
                    },
                };
                static VALUES: [&<icu::experimental::dimension::provider::units::UnitsDisplayNameV1Marker as icu_provider::DynamicDataMarker>::Yokeable; 34usize
                static KEYS: [&str; 34usize] = ["und-x-astronomical", "und-x-centimeter", "und-x-century", "und-x-day", "und-x-decade", "und-x-decimeter", "und-x-earth", "und-x-fathom", "und-x-foot", "und-x-furlong", "und-x-hour", "und-x-inch", "und-x-kilometer", "und-x-light", "und-x-meter", "und-x-micrometer", "und-x-microsecond", "und-x-mile", "und-x-millimeter", "und-x-millisecond", "und-x-minute", "und-x-month", "und-x-nanometer", "und-x-nanosecond", "und-x-nautical", "und-x-parsec", "und-x-picometer", "und-x-point", "und-x-quarter", "und-x-second", "und-x-solar", "und-x-week", "und-x-yard", "und-x-year"];
                if let Ok(payload) = KEYS.binary_search_by(|k| req.legacy_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(payload)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::experimental::dimension::provider::units::UnitsDisplayNameV1Marker as icu_provider::DataMarker>::KEY, req))
                }
            }
        }
    };
}
/// Implement `IterableDataProvider<UnitsDisplayNameV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this key.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_units_displaynames_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        impl icu_provider::datagen::IterableDataProvider<icu::experimental::dimension::provider::units::UnitsDisplayNameV1Marker> for $provider {
            fn supported_requests(&self) -> Result<std::collections::HashSet<(icu_provider::DataLocale, icu_provider::DataKeyAttributes)>, icu_provider::DataError> {
                Ok(["und-x-astronomical", "und-x-centimeter", "und-x-century", "und-x-day", "und-x-decade", "und-x-decimeter", "und-x-earth", "und-x-fathom", "und-x-foot", "und-x-furlong", "und-x-hour", "und-x-inch", "und-x-kilometer", "und-x-light", "und-x-meter", "und-x-micrometer", "und-x-microsecond", "und-x-mile", "und-x-millimeter", "und-x-millisecond", "und-x-minute", "und-x-month", "und-x-nanometer", "und-x-nanosecond", "und-x-nautical", "und-x-parsec", "und-x-picometer", "und-x-point", "und-x-quarter", "und-x-second", "und-x-solar", "und-x-week", "und-x-yard", "und-x-year"].into_iter().filter_map(icu_provider::DataRequest::legacy_decode).collect())
            }
        }
    };
}
