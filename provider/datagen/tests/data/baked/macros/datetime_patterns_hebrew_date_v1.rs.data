// @generated
/// Implement `DataProvider<HebrewDatePatternV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_datetime_patterns_hebrew_date_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::HebrewDatePatternV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::HebrewDatePatternV1Marker>, icu_provider::DataError> {
                static UND_X_M: <icu::datetime::provider::neo::HebrewDatePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DatePatternV1 { pattern: icu::datetime::pattern::runtime::Pattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01") }, metadata: icu::datetime::pattern::runtime::PatternMetadata::from_time_granularity(icu::datetime::pattern::TimeGranularity::None) } };
                static UND_X_L: <icu::datetime::provider::neo::HebrewDatePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DatePatternV1 { pattern: icu::datetime::pattern::runtime::Pattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01") }, metadata: icu::datetime::pattern::runtime::PatternMetadata::from_time_granularity(icu::datetime::pattern::TimeGranularity::None) } };
                static UND_X_F: <icu::datetime::provider::neo::HebrewDatePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DatePatternV1 { pattern: icu::datetime::pattern::runtime::Pattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x01\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04") }, metadata: icu::datetime::pattern::runtime::PatternMetadata::from_time_granularity(icu::datetime::pattern::TimeGranularity::None) } };
                static UND_X_S: <icu::datetime::provider::neo::HebrewDatePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable = icu::datetime::provider::neo::DatePatternV1 { pattern: icu::datetime::pattern::runtime::Pattern { items: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02") }, metadata: icu::datetime::pattern::runtime::PatternMetadata::from_time_granularity(icu::datetime::pattern::TimeGranularity::None) } };
                static VALUES: [&<icu::datetime::provider::neo::HebrewDatePatternV1Marker as icu_provider::DynamicDataMarker>::Yokeable; 4usize] = [&UND_X_F, &UND_X_L, &UND_X_M, &UND_X_S];
                static KEYS: [&str; 4usize] = ["und-x-f", "und-x-l", "und-x-m", "und-x-s"];
                if let Ok(payload) = KEYS.binary_search_by(|k| req.legacy_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(payload)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::datetime::provider::neo::HebrewDatePatternV1Marker as icu_provider::DataMarker>::INFO, req))
                }
            }
        }
    };
}
/// Implement `IterableDataProvider<HebrewDatePatternV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this marker.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_datetime_patterns_hebrew_date_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        impl icu_provider::datagen::IterableDataProvider<icu::datetime::provider::neo::HebrewDatePatternV1Marker> for $provider {
            fn supported_requests(&self) -> Result<std::collections::HashSet<(icu_provider::DataLocale, icu_provider::DataMarkerAttributes)>, icu_provider::DataError> {
                Ok(["und-x-f", "und-x-l", "und-x-m", "und-x-s"].into_iter().filter_map(icu_provider::DataRequest::legacy_decode).collect())
            }
        }
    };
}
