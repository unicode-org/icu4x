// @generated
/// Implement `DataProvider<GregorianDateSkeletonPatternsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_datetime_patterns_gregory_date_skeleton_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.67"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.67"]
        impl icu_provider::DataProvider<icu::datetime::provider::neo::GregorianDateSkeletonPatternsV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::neo::GregorianDateSkeletonPatternsV1Marker>, icu_provider::DataError> {
                static UND: &'static [(&'static [icu::datetime::fields::Field], icu::datetime::pattern::runtime::PatternPlurals<'static>)] = icu::datetime::provider::neo::PackedSkeletonDataV1 { indices: unsafe { zerovec::ZeroVec::from_bytes_unchecked(b"\0\0\xC0\x01\xC0\x04\xC0\x07\xC0\n\xC0\r\xC0\x10\xC0\x13\0\x16\xC0\x17\xC0\x1A\xC0\x1D\0 \xC0!\0$\0%\0&") }, patterns: unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"'\0\0\0\0\0\x04\0\x0E\0\x18\0\"\x002\0B\0R\0h\0~\0\x94\0\xA1\0\xAE\0\xBB\0\xCE\0\xE1\0\xF4\0\r\x01&\x01?\x01^\x01}\x01\x9C\x01\xA0\x01\xA4\x01\xA8\x01\xAC\x01\xB6\x01\xC0\x01\xCA\x01\xDA\x01\xEA\x01\xFA\x01\xFE\x01\x08\x02\x12\x02\x1C\x02>\x02f\x02\0\x80@\x01\0\x80 \x04\0\0 \x80@\x01\0\x80 \x03\0\0 \x80@\x01\0\x80 \x02\0\0-\x80@\x02\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\x10\x01\0\0-\x80 \x02\0\0-\x80@\x02\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\x80@\x01\0\0,\0\0 \x80P\x04\0\x80@\x01\0\0,\0\0 \x80P\x01\0\x80@\x01\0\0,\0\0 \x80P\x05\0\x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x05\0\x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\x10\x01\0\0-\x80 \x01\0\0-\x80@\x01\0\0,\0\0 \x80P\x05\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\0 \x80@\x01\0\0,\0\0 \x80P\x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0 \x80 \x03\0\0 \x80@\x01\0\0,\0\0 \x80P\x05\0\x80R\x03\0\x80 \x04\0\x80!\x03\0\x80!\x01\0\x80\x10\x01\0\0 \x80 \x04\0\x80\x10\x01\0\0 \x80 \x03\0\x80\x10\x01\0\0-\x80 \x02\0\x80\0\x04\0\0 \x80\x10\x01\0\0 \x80 \x04\0\x80\0\x03\0\0 \x80\x10\x01\0\0 \x80 \x03\0\x80\0\x05\0\0 \x80\x10\x01\0\0 \x80 \x03\0\x80\x10\x01\0\x80\0\x04\0\0 \x80\x10\x01\0\x80\0\x03\0\0 \x80\x10\x01\0\x80\0\x05\0\0 \x80\x10\x01\0\0\0w\0\0e\0\0e\0\0k\0\0 \x800\x01\0\0 \0\0o\0\0f\0\0 \x80\x11\x01\0\0\0u\0\0n\0\0i\0\0m\0\0p\0\0l\0\0e\0\0m\0\0e\0\0n\0\0t\0\0e\0\0d\0\0\0u\0\0n\0\0i\0\0m\0\0p\0\0l\0\0e\0\0m\0\0e\0\0n\0\0t\0\0e\0\0d") } };
                static VALUES: [&&'static [(&'static [icu::datetime::fields::Field], icu::datetime::pattern::runtime::PatternPlurals<'static>)]; 1usize] = [&UND];
                static KEYS: [&str; 1usize] = ["und"];
                if let Ok(payload) = KEYS.binary_search_by(|k| req.locale.strict_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_owned(icu::datetime::provider::calendar::DateSkeletonPatternsV1(payload.iter().map(|(fields, pattern)| (icu::datetime::provider::calendar::SkeletonV1((*fields).into()), icu_provider::prelude::zerofrom::ZeroFrom::zero_from(pattern))).collect()))), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::datetime::provider::neo::GregorianDateSkeletonPatternsV1Marker as icu_provider::KeyedDataMarker>::KEY, req))
                }
            }
        }
    };
}
