// @generated
/// Implement `DataProvider<JapaneseDateSymbolsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `icu`'s `_unstable` constructors.
#[doc(hidden)]
#[macro_export]
macro_rules! __impl_datetime_japanese_datesymbols_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        const _: () = <$provider>::MUST_USE_MAKE_PROVIDER_MACRO;
        #[clippy::msrv = "1.70"]
        impl icu_provider::DataProvider<icu::datetime::provider::calendar::JapaneseDateSymbolsV1Marker> for $provider {
            fn load(&self, req: icu_provider::DataRequest) -> Result<icu_provider::DataResponse<icu::datetime::provider::calendar::JapaneseDateSymbolsV1Marker>, icu_provider::DataError> {
                static UND: <icu::datetime::provider::calendar::JapaneseDateSymbolsV1Marker as icu_provider::DataMarker>::Yokeable = icu::datetime::provider::calendar::DateSymbolsV1 {
                    months: icu::datetime::provider::calendar::months::ContextsV1 { format: icu::datetime::provider::calendar::months::FormatWidthsV1 { abbreviated: icu::datetime::provider::calendar::months::SymbolsV1::SolarTwelve([alloc::borrow::Cow::Borrowed("M01"), alloc::borrow::Cow::Borrowed("M02"), alloc::borrow::Cow::Borrowed("M03"), alloc::borrow::Cow::Borrowed("M04"), alloc::borrow::Cow::Borrowed("M05"), alloc::borrow::Cow::Borrowed("M06"), alloc::borrow::Cow::Borrowed("M07"), alloc::borrow::Cow::Borrowed("M08"), alloc::borrow::Cow::Borrowed("M09"), alloc::borrow::Cow::Borrowed("M10"), alloc::borrow::Cow::Borrowed("M11"), alloc::borrow::Cow::Borrowed("M12")]), narrow: icu::datetime::provider::calendar::months::SymbolsV1::SolarTwelve([alloc::borrow::Cow::Borrowed("1"), alloc::borrow::Cow::Borrowed("2"), alloc::borrow::Cow::Borrowed("3"), alloc::borrow::Cow::Borrowed("4"), alloc::borrow::Cow::Borrowed("5"), alloc::borrow::Cow::Borrowed("6"), alloc::borrow::Cow::Borrowed("7"), alloc::borrow::Cow::Borrowed("8"), alloc::borrow::Cow::Borrowed("9"), alloc::borrow::Cow::Borrowed("10"), alloc::borrow::Cow::Borrowed("11"), alloc::borrow::Cow::Borrowed("12")]), short: None, wide: icu::datetime::provider::calendar::months::SymbolsV1::SolarTwelve([alloc::borrow::Cow::Borrowed("M01"), alloc::borrow::Cow::Borrowed("M02"), alloc::borrow::Cow::Borrowed("M03"), alloc::borrow::Cow::Borrowed("M04"), alloc::borrow::Cow::Borrowed("M05"), alloc::borrow::Cow::Borrowed("M06"), alloc::borrow::Cow::Borrowed("M07"), alloc::borrow::Cow::Borrowed("M08"), alloc::borrow::Cow::Borrowed("M09"), alloc::borrow::Cow::Borrowed("M10"), alloc::borrow::Cow::Borrowed("M11"), alloc::borrow::Cow::Borrowed("M12")]) }, stand_alone: None },
                    weekdays: icu::datetime::provider::calendar::weekdays::ContextsV1 { format: icu::datetime::provider::calendar::weekdays::FormatWidthsV1 { abbreviated: icu::datetime::provider::calendar::weekdays::SymbolsV1([alloc::borrow::Cow::Borrowed("Sun"), alloc::borrow::Cow::Borrowed("Mon"), alloc::borrow::Cow::Borrowed("Tue"), alloc::borrow::Cow::Borrowed("Wed"), alloc::borrow::Cow::Borrowed("Thu"), alloc::borrow::Cow::Borrowed("Fri"), alloc::borrow::Cow::Borrowed("Sat")]), narrow: icu::datetime::provider::calendar::weekdays::SymbolsV1([alloc::borrow::Cow::Borrowed("S"), alloc::borrow::Cow::Borrowed("M"), alloc::borrow::Cow::Borrowed("T"), alloc::borrow::Cow::Borrowed("W"), alloc::borrow::Cow::Borrowed("T"), alloc::borrow::Cow::Borrowed("F"), alloc::borrow::Cow::Borrowed("S")]), short: Some(icu::datetime::provider::calendar::weekdays::SymbolsV1([alloc::borrow::Cow::Borrowed("Sun"), alloc::borrow::Cow::Borrowed("Mon"), alloc::borrow::Cow::Borrowed("Tue"), alloc::borrow::Cow::Borrowed("Wed"), alloc::borrow::Cow::Borrowed("Thu"), alloc::borrow::Cow::Borrowed("Fri"), alloc::borrow::Cow::Borrowed("Sat")])), wide: icu::datetime::provider::calendar::weekdays::SymbolsV1([alloc::borrow::Cow::Borrowed("Sun"), alloc::borrow::Cow::Borrowed("Mon"), alloc::borrow::Cow::Borrowed("Tue"), alloc::borrow::Cow::Borrowed("Wed"), alloc::borrow::Cow::Borrowed("Thu"), alloc::borrow::Cow::Borrowed("Fri"), alloc::borrow::Cow::Borrowed("Sat")]) }, stand_alone: None },
                    eras: icu::datetime::provider::calendar::Eras {
                        names: unsafe {
                            #[allow(unused_unsafe)]
                            zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x07\0\0\0\0\0\x03\0\x05\0\x0B\0\x10\0\x15\0\x1A\0bceceheiseimeijireiwashowataisho") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x07\0\0\0\0\0\x03\0\x05\0\x0B\0\x10\0\x15\0\x1B\0BCECEHeiseiMeijiReiwaSh\xC5\x8DwaTaish\xC5\x8D") })
                        },
                        abbr: unsafe {
                            #[allow(unused_unsafe)]
                            zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x07\0\0\0\0\0\x03\0\x05\0\x0B\0\x10\0\x15\0\x1A\0bceceheiseimeijireiwashowataisho") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x07\0\0\0\0\0\x03\0\x05\0\x0B\0\x10\0\x15\0\x1B\0BCECEHeiseiMeijiReiwaSh\xC5\x8DwaTaish\xC5\x8D") })
                        },
                        narrow: unsafe {
                            #[allow(unused_unsafe)]
                            zerovec::ZeroMap::from_parts_unchecked(unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x07\0\0\0\0\0\x03\0\x05\0\x0B\0\x10\0\x15\0\x1A\0bceceheiseimeijireiwashowataisho") }, unsafe { zerovec::VarZeroVec::from_bytes_unchecked(b"\x07\0\0\0\0\0\x03\0\x05\0\x06\0\x07\0\x08\0\t\0BCECEHMRST") })
                        },
                    },
                };
                static VALUES: [&<icu::datetime::provider::calendar::JapaneseDateSymbolsV1Marker as icu_provider::DataMarker>::Yokeable; 1usize] = [&UND];
                static KEYS: [&str; 1usize] = ["und"];
                if let Ok(payload) = KEYS.binary_search_by(|k| req.legacy_cmp(k.as_bytes()).reverse()).map(|i| *unsafe { VALUES.get_unchecked(i) }) {
                    Ok(icu_provider::DataResponse { payload: Some(icu_provider::DataPayload::from_static_ref(payload)), metadata: Default::default() })
                } else {
                    Err(icu_provider::DataErrorKind::MissingLocale.with_req(<icu::datetime::provider::calendar::JapaneseDateSymbolsV1Marker as icu_provider::KeyedDataMarker>::KEY, req))
                }
            }
        }
    };
}
/// Implement `IterableDataProvider<JapaneseDateSymbolsV1Marker>` on the given struct using the data
/// hardcoded in this file. This allows the struct to be used with
/// `DatagenDriver` for this key.
#[doc(hidden)]
#[macro_export]
macro_rules! __impliterable_datetime_japanese_datesymbols_v1 {
    ($ provider : ty) => {
        #[clippy::msrv = "1.70"]
        impl icu_provider::datagen::IterableDataProvider<icu::datetime::provider::calendar::JapaneseDateSymbolsV1Marker> for $provider {
            fn supported_requests(&self) -> Result<std::collections::HashSet<(icu_provider::DataLocale, icu_provider::DataKeyAttributes)>, icu_provider::DataError> {
                Ok(["und"].into_iter().filter_map(icu_provider::DataRequest::legacy_decode).collect())
            }
        }
    };
}
