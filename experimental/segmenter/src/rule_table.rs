// This file is part of ICU4X. For terms of use, please see the file
// called LICENSE at the top level of the ICU4X source tree
// (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

// This file is generated by generate_properties.py. DO NOT EDIT MANUALLY!

use crate::lb_define::*;

pub const UAX14_RULE_TABLE: [i8; 3249] = [
    // AI
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    AL as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -1,
    AL as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // AL
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    AL as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -1,
    AL as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // B2
    -128,
    -128,
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    B2 as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    B2_SP as i8,
    -1,
    -1,
    -128,
    -1,
    B2 as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // BA
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    BA as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    BA as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // BB
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -1,
    BB as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    BB as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -128,
    // BK
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // CB
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -1,
    CB as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    CB as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // CJ
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    NS as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    NS as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // CL
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    CL as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    CL_CP_SP as i8,
    -1,
    -1,
    -128,
    -1,
    CL as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // CM
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    CM as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -1,
    CM as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // CP
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    CP as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    CL_CP_SP as i8,
    -1,
    -1,
    -1,
    -1,
    CP as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // CR
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // EB
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    EB as i8,
    -1,
    -1,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    EB as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // EM
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    EM as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    EM as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // EX
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    EX as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    EX as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // GL
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    GL as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    GL as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -128,
    // H2
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    H2 as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    H2 as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // H3
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    H3 as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    H3 as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // HL
    -1,
    -1,
    -128,
    HL_HY as i8,
    -128,
    -1,
    -128,
    -1,
    -1,
    HL as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    HL_HY as i8,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -1,
    HL as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // HY
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    HY as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    HY as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // ID
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    ID as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    ID as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // IN
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    IN as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    IN as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // IS
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    IS as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -1,
    IS as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // JL
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    JL as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    JL as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // JT
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    JT as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    JT as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // JV
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    JV as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    JV as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // LF
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // NL
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // NS
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    NS as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    NS as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // NU
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    LB25_NU_CL as i8,
    NU as i8,
    LB25_NU_CP as i8,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -1,
    LB25_NU_IS as i8,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    NU as i8,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    LB25_NU_SY as i8,
    -1,
    -1,
    -1,
    NU as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // OP_EA
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    OP_EA as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    OP_SP as i8,
    -1,
    -1,
    -1,
    -1,
    OP_EA as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -128,
    // OP_OP30
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    OP_OP30 as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    OP_SP as i8,
    -1,
    -1,
    -1,
    -1,
    OP_OP30 as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -128,
    // PO
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    PO as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -1,
    LB25_OP as i8,
    LB25_OP as i8,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -1,
    PO as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // PR
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    PR as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    LB25_OP as i8,
    LB25_OP as i8,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -1,
    PR as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // QU
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    QU as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    QU_SP as i8,
    -1,
    -1,
    -1,
    -1,
    QU as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -128,
    // RI
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    RI as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    RI_RI as i8,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    RI as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // SA
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    AL as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -1,
    AL as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // SG
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    SG as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    SG as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // SP
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // SY
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    SY as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    SY as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // WJ
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    WJ as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    WJ as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -128,
    // XX
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    AL as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -1,
    AL as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // ZW
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    ZW as i8,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // ZWJ
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -128,
    // B2_SP
    -128,
    -128,
    -1,
    -128,
    -128,
    -1,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    B2_SP as i8,
    -1,
    -1,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // CL_CP_SP
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    CL_CP_SP as i8,
    -1,
    -1,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // HL_HY
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -128,
    -1,
    -1,
    HL_HY as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    HL_HY as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -128,
    // LB25_HY
    -2,
    -2,
    -2,
    -1,
    -2,
    -1,
    -128,
    -1,
    -1,
    LB25_HY as i8,
    -1,
    -1,
    -2,
    -2,
    -1,
    -1,
    -2,
    -2,
    -2,
    -1,
    -2,
    -1,
    -1,
    -2,
    -2,
    -2,
    -1,
    -1,
    -1,
    -1,
    -2,
    -2,
    -2,
    -2,
    -1,
    -2,
    -2,
    -2,
    -1,
    -1,
    -1,
    -2,
    -1,
    LB25_HY as i8,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    // LB25_OP
    -2,
    -2,
    -2,
    -1,
    -2,
    -1,
    -128,
    -1,
    -1,
    LB25_OP as i8,
    -1,
    -1,
    -2,
    -2,
    -1,
    -1,
    -2,
    -2,
    -2,
    -1,
    -2,
    -1,
    -1,
    -2,
    -2,
    -2,
    -1,
    -1,
    -1,
    -1,
    -2,
    -2,
    -2,
    -2,
    -1,
    -2,
    -2,
    -2,
    -1,
    -1,
    -1,
    -2,
    -1,
    LB25_OP as i8,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    -2,
    // LB25_NU_IS
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    LB25_NU_CL as i8,
    LB25_NU_IS as i8,
    LB25_NU_CP as i8,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -1,
    LB25_NU_IS as i8,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    NU as i8,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    LB25_NU_SY as i8,
    -1,
    -1,
    -1,
    LB25_NU_IS as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // LB25_NU_SY
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    LB25_NU_CL as i8,
    LB25_NU_SY as i8,
    LB25_NU_CP as i8,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    LB25_NU_IS as i8,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    NU as i8,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    LB25_NU_SY as i8,
    -1,
    -128,
    -1,
    LB25_NU_SY as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // LB25_NU_CL
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    LB25_NU_CL as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    LB25_NU_CL as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // LB25_NU_CP
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    LB25_NU_CP as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    -1,
    -1,
    -1,
    LB25_NU_CP as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // OP_SP
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    OP_SP as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    OP_SP as i8,
    -1,
    -1,
    -1,
    -1,
    OP_SP as i8,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    -128,
    // QU_SP
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    QU_SP as i8,
    -1,
    -1,
    -128,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // RI_RI
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    RI_RI as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    RI_RI as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    // EOT
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -128,
    -1,
    -1,
    EOT as i8,
    -1,
    -1,
    -128,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -128,
    -1,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -128,
    -128,
    -128,
    -128,
    -1,
    -128,
    -128,
    -128,
    -1,
    -1,
    -1,
    -128,
    -1,
    EOT as i8,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
    -128,
];
