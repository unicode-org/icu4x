// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// The raw (non-recursive) canonical decomposition operation.
///
/// Callers should generally use ICU4XDecomposingNormalizer unless they specifically need raw composition operations
///
/// See the [Rust documentation for `CanonicalDecomposition`](https://docs.rs/icu/latest/icu/normalizer/properties/struct.CanonicalDecomposition.html) for more information.
final class CanonicalDecomposition implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  CanonicalDecomposition._(this._underlying) {
    _finalizer.attach(this, _underlying.cast());
  }

  static final _finalizer = ffi.NativeFinalizer(_capi('ICU4XCanonicalDecomposition_destroy'));

  /// Construct a new ICU4XCanonicalDecomposition instance for NFC
  ///
  /// See the [Rust documentation for `new`](https://docs.rs/icu/latest/icu/normalizer/properties/struct.CanonicalDecomposition.html#method.new) for more information.
  ///
  /// Throws [Error] on failure.
  factory CanonicalDecomposition(DataProvider provider) {
    final result = _ICU4XCanonicalDecomposition_create(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CanonicalDecomposition._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XCanonicalDecomposition_create =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XCanonicalDecomposition_create')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// Performs non-recursive canonical decomposition (including for Hangul).
  ///
  /// See the [Rust documentation for `decompose`](https://docs.rs/icu/latest/icu/normalizer/properties/struct.CanonicalDecomposition.html#method.decompose) for more information.
  Decomposed decompose(Rune c) {
    final result = _ICU4XCanonicalDecomposition_decompose(_underlying, c);
    return Decomposed._(result);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XCanonicalDecomposition_decompose =
    _capi<ffi.NativeFunction<_DecomposedFfi Function(ffi.Pointer<ffi.Opaque>, ffi.Uint32)>>('ICU4XCanonicalDecomposition_decompose')
      .asFunction<_DecomposedFfi Function(ffi.Pointer<ffi.Opaque>, Rune)>(isLeaf: true);
}
