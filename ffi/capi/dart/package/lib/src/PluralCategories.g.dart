// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// FFI version of `PluralRules::categories()` data.
final class _PluralCategoriesFfi extends ffi.Struct {
  @ffi.Bool()
  external bool zero;
  @ffi.Bool()
  external bool one;
  @ffi.Bool()
  external bool two;
  @ffi.Bool()
  external bool few;
  @ffi.Bool()
  external bool many;
  @ffi.Bool()
  external bool other;
}

final class PluralCategories {
  final _PluralCategoriesFfi _underlying;

  PluralCategories._(this._underlying);

  factory PluralCategories() {
    final pointer = ffi2.calloc<_PluralCategoriesFfi>();
    final result = PluralCategories._(pointer.ref);
    _callocFree.attach(result, pointer.cast());
    return result;
  }

  bool get zero => _underlying.zero;
  set zero(bool zero) {
    _underlying.zero = zero;
  }

  bool get one => _underlying.one;
  set one(bool one) {
    _underlying.one = one;
  }

  bool get two => _underlying.two;
  set two(bool two) {
    _underlying.two = two;
  }

  bool get few => _underlying.few;
  set few(bool few) {
    _underlying.few = few;
  }

  bool get many => _underlying.many;
  set many(bool many) {
    _underlying.many = many;
  }

  bool get other => _underlying.other;
  set other(bool other) {
    _underlying.other = other;
  }

  @override
  bool operator ==(Object other) =>
      other is PluralCategories &&
      other._underlying.zero == _underlying.zero &&
      other._underlying.one == _underlying.one &&
      other._underlying.two == _underlying.two &&
      other._underlying.few == _underlying.few &&
      other._underlying.many == _underlying.many &&
      other._underlying.other == _underlying.other;

  @override
  int get hashCode => Object.hashAll([
        _underlying.zero,
        _underlying.one,
        _underlying.two,
        _underlying.few,
        _underlying.many,
        _underlying.other,
      ]);
}
