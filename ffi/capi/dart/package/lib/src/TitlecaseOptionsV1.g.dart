// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// See the [Rust documentation for `TitlecaseOptions`](https://docs.rs/icu/latest/icu/casemap/titlecase/struct.TitlecaseOptions.html) for more information.
final class _TitlecaseOptionsV1Ffi extends ffi.Struct {
  @ffi.Int32()
  external int leadingAdjustment;
  @ffi.Int32()
  external int trailingCase;
}

final class TitlecaseOptionsV1 {
  final _TitlecaseOptionsV1Ffi _underlying;

  TitlecaseOptionsV1._(this._underlying);

  factory TitlecaseOptionsV1() {
    final pointer = ffi2.calloc<_TitlecaseOptionsV1Ffi>();
    final result = TitlecaseOptionsV1._(pointer.ref);
    _callocFree.attach(result, pointer.cast());
    return result;
  }

  LeadingAdjustment get leadingAdjustment => LeadingAdjustment.values[_underlying.leadingAdjustment];
  set leadingAdjustment(LeadingAdjustment leadingAdjustment) {
    _underlying.leadingAdjustment = leadingAdjustment.index;
  }

  TrailingCase get trailingCase => TrailingCase.values[_underlying.trailingCase];
  set trailingCase(TrailingCase trailingCase) {
    _underlying.trailingCase = trailingCase.index;
  }

  /// See the [Rust documentation for `default`](https://docs.rs/icu/latest/icu/casemap/titlecase/struct.TitlecaseOptions.html#method.default) for more information.
  factory TitlecaseOptionsV1.options() {
    final result = _ICU4XTitlecaseOptionsV1_default_options();
    return TitlecaseOptionsV1._(result);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XTitlecaseOptionsV1_default_options =
    _capi<ffi.NativeFunction<_TitlecaseOptionsV1Ffi Function()>>('ICU4XTitlecaseOptionsV1_default_options')
      .asFunction<_TitlecaseOptionsV1Ffi Function()>(isLeaf: true);

  @override
  bool operator ==(Object other) =>
      other is TitlecaseOptionsV1 &&
      other._underlying.leadingAdjustment == _underlying.leadingAdjustment &&
      other._underlying.trailingCase == _underlying.trailingCase;

  @override
  int get hashCode => Object.hashAll([
        _underlying.leadingAdjustment,
        _underlying.trailingCase,
      ]);
}
