// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// Collection of configurations for the ICU4X fallback algorithm.
///
/// See the [Rust documentation for `LocaleFallbackConfig`](https://docs.rs/icu/latest/icu/locid_transform/fallback/struct.LocaleFallbackConfig.html) for more information.
final class _LocaleFallbackConfigFfi extends ffi.Struct {
  @ffi.Int32()
  external int priority;
  external _SliceUtf8 extensionKey;
  @ffi.Int32()
  external int fallbackSupplement;
}

final class LocaleFallbackConfig {
  final _LocaleFallbackConfigFfi _underlying;

  LocaleFallbackConfig._(this._underlying);

  factory LocaleFallbackConfig() {
    final pointer = ffi2.calloc<_LocaleFallbackConfigFfi>();
    final result = LocaleFallbackConfig._(pointer.ref);
    _callocFree.attach(result, pointer.cast());
    return result;
  }

  LocaleFallbackPriority get priority => LocaleFallbackPriority.values[_underlying.priority];
  set priority(LocaleFallbackPriority priority) {
    _underlying.priority = priority.index;
  }

  String get extensionKey => Utf8Decoder().convert(_underlying.extensionKey._pointer.asTypedList(_underlying.extensionKey._length));
  set extensionKey(String extensionKey) {
    ffi2.calloc.free(_underlying.extensionKey._pointer);
    final extensionKeyView = extensionKey.utf8View;
    _underlying.extensionKey._pointer = extensionKeyView.pointer(ffi2.calloc);
    _underlying.extensionKey._length = extensionKeyView.length;
  }

  LocaleFallbackSupplement get fallbackSupplement => LocaleFallbackSupplement.values[_underlying.fallbackSupplement];
  set fallbackSupplement(LocaleFallbackSupplement fallbackSupplement) {
    _underlying.fallbackSupplement = fallbackSupplement.index;
  }

  @override
  bool operator ==(Object other) =>
      other is LocaleFallbackConfig &&
      other._underlying.priority == _underlying.priority &&
      other._underlying.extensionKey == _underlying.extensionKey &&
      other._underlying.fallbackSupplement == _underlying.fallbackSupplement;

  @override
  int get hashCode => Object.hashAll([
        _underlying.priority,
        _underlying.extensionKey,
        _underlying.fallbackSupplement,
      ]);
}
