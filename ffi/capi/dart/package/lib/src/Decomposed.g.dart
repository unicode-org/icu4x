// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// The outcome of non-recursive canonical decomposition of a character.
/// `second` will be NUL when the decomposition expands to a single character
/// (which may or may not be the original one)
///
/// See the [Rust documentation for `Decomposed`](https://docs.rs/icu/latest/icu/normalizer/properties/enum.Decomposed.html) for more information.
class _DecomposedFfi extends ffi.Struct {
  @ffi.Uint32()
  external int first;
  @ffi.Uint32()
  external int second;
}

class Decomposed {
  final _DecomposedFfi _underlying;

  // ignore: unused_element
  Decomposed._(this._underlying);

  factory Decomposed() {
    final pointer = ffi2.calloc<_DecomposedFfi>();
    final result = Decomposed._(pointer.ref);
    _callocFree.attach(result, pointer.cast());
    return result;
  }

  int get first => _underlying.first;
  set first(int first) {
    _underlying.first = first;
  }

  int get second => _underlying.second;
  set second(int second) {
    _underlying.second = second;
  }

  @override
  bool operator ==(Object other) =>
      other is Decomposed &&
      other._underlying.first == _underlying.first &&
      other._underlying.second == _underlying.second;

  @override
  int get hashCode => Object.hashAll([
        _underlying.first,
        _underlying.second,
      ]);
}
