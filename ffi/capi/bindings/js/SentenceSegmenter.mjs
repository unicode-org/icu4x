// generated by diplomat-tool
import { DataError } from "./DataError.mjs"
import { DataProvider } from "./DataProvider.mjs"
import { SentenceBreakIteratorUtf16 } from "./SentenceBreakIteratorUtf16.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** An ICU4X sentence-break segmenter, capable of finding sentence breakpoints in strings.
*
*See the [Rust documentation for `SentenceSegmenter`](https://docs.rs/icu/latest/icu/segmenter/struct.SentenceSegmenter.html) for more information.
*/

const SentenceSegmenter_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.ICU4XSentenceSegmenter_destroy(ptr);
});
export class SentenceSegmenter {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    
    constructor(ptr, selfEdge) {
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        SentenceSegmenter_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }


    static create(provider) {
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(5, 4);
        const result = wasm.ICU4XSentenceSegmenter_create(diplomat_receive_buffer, provider.ffiValue);
    
        try {
    
            if (!diplomatRuntime.resultFlag(wasm, diplomat_receive_buffer, 4)) {
                const cause = DataError[Array.from(DataError.values.keys())[diplomatRuntime.enumDiscriminant(wasm, diplomat_receive_buffer)]];
                throw new Error('DataError: ' + cause.value, { cause });
            }
            return new SentenceSegmenter(diplomatRuntime.ptrRead(wasm, diplomat_receive_buffer), []);
        } finally {
        
            wasm.diplomat_free(diplomat_receive_buffer, 5, 4);
        
        }
    }

    segment(input) {
        
        const inputSlice = diplomatRuntime.DiplomatBuf.str16(wasm, input);
        
        // This lifetime edge depends on lifetimes 'a
        let aEdges = [this, inputSlice];
        const result = wasm.ICU4XSentenceSegmenter_segment_utf16(this.ffiValue, inputSlice.ptr, inputSlice.size);
    
        try {
    
            return new SentenceBreakIteratorUtf16(result, [], aEdges);
        } finally {
        
            inputSlice.garbageCollect();
        
        }
    }

    

}