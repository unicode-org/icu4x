// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** 
 * Additional information: [1](https://docs.rs/icu/latest/icu/datetime/fieldsets/builder/enum.BuilderError.html)
 */


export class DateTimeFormatterBuildOrLoadError {
    
    #value = undefined;

    static #values = new Map([
        ["Unknown", 0],
        ["DataMarkerNotFound", 1],
        ["DataIdentifierNotFound", 2],
        ["DataInvalidRequest", 3],
        ["DataInconsistentData", 4],
        ["DataDowncast", 5],
        ["DataDeserialize", 6],
        ["DataCustom", 7],
        ["DataIo", 8],
        ["MissingDateFields", 1025],
        ["MissingTimePrecision", 1026],
        ["MissingZoneStyle", 1027],
        ["InvalidDateFields", 1028],
        ["SuperfluousOptions", 1029],
        ["UnsupportedLength", 2051],
        ["ConflictingField", 2057],
        ["FormatterTooSpecific", 2058]
    ]);

    static getAllEntries() {
        return DateTimeFormatterBuildOrLoadError.#values.entries();
    }
    
    #internalConstructor(value) {
        if (arguments.length > 1 && arguments[0] === diplomatRuntime.internalConstructor) {
            // We pass in two internalConstructor arguments to create *new*
            // instances of this type, otherwise the enums are treated as singletons.
            if (arguments[1] === diplomatRuntime.internalConstructor ) {
                this.#value = arguments[2];
                return this;
            }
            return DateTimeFormatterBuildOrLoadError.#objectValues[arguments[1]];
        }

        if (value instanceof DateTimeFormatterBuildOrLoadError) {
            return value;
        }

        let intVal = DateTimeFormatterBuildOrLoadError.#values.get(value);

        // Nullish check, checks for null or undefined
        if (intVal != null) {
            return DateTimeFormatterBuildOrLoadError.#objectValues[intVal];
        }

        throw TypeError(value + " is not a DateTimeFormatterBuildOrLoadError and does not correspond to any of its enumerator values.");
    }

    static fromValue(value) {
        return new DateTimeFormatterBuildOrLoadError(value);
    }

    get value() {
        for (let entry of DateTimeFormatterBuildOrLoadError.#values) {
            if (entry[1] == this.#value) {
                return entry[0];
            }
        }
    }

    get ffiValue() {
        return this.#value;
    }
    static #objectValues = {
        [0]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 0),
        [1]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 1),
        [2]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 2),
        [3]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 3),
        [4]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 4),
        [5]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 5),
        [6]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 6),
        [7]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 7),
        [8]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 8),
        [1025]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 1025),
        [1026]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 1026),
        [1027]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 1027),
        [1028]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 1028),
        [1029]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 1029),
        [2051]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 2051),
        [2057]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 2057),
        [2058]: new DateTimeFormatterBuildOrLoadError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 2058),
    };

    static Unknown = DateTimeFormatterBuildOrLoadError.#objectValues[0];
    static DataMarkerNotFound = DateTimeFormatterBuildOrLoadError.#objectValues[1];
    static DataIdentifierNotFound = DateTimeFormatterBuildOrLoadError.#objectValues[2];
    static DataInvalidRequest = DateTimeFormatterBuildOrLoadError.#objectValues[3];
    static DataInconsistentData = DateTimeFormatterBuildOrLoadError.#objectValues[4];
    static DataDowncast = DateTimeFormatterBuildOrLoadError.#objectValues[5];
    static DataDeserialize = DateTimeFormatterBuildOrLoadError.#objectValues[6];
    static DataCustom = DateTimeFormatterBuildOrLoadError.#objectValues[7];
    static DataIo = DateTimeFormatterBuildOrLoadError.#objectValues[8];
    static MissingDateFields = DateTimeFormatterBuildOrLoadError.#objectValues[1025];
    static MissingTimePrecision = DateTimeFormatterBuildOrLoadError.#objectValues[1026];
    static MissingZoneStyle = DateTimeFormatterBuildOrLoadError.#objectValues[1027];
    static InvalidDateFields = DateTimeFormatterBuildOrLoadError.#objectValues[1028];
    static SuperfluousOptions = DateTimeFormatterBuildOrLoadError.#objectValues[1029];
    static UnsupportedLength = DateTimeFormatterBuildOrLoadError.#objectValues[2051];
    static ConflictingField = DateTimeFormatterBuildOrLoadError.#objectValues[2057];
    static FormatterTooSpecific = DateTimeFormatterBuildOrLoadError.#objectValues[2058];

    constructor(value) {
        return this.#internalConstructor(...arguments)
    }
}