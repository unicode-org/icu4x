// generated by diplomat-tool
import { DataError } from "./DataError.mjs"
import { DataProvider } from "./DataProvider.mjs"
import { IsoWeekday } from "./IsoWeekday.mjs"
import { Locale } from "./Locale.mjs"
import { WeekendContainsDay } from "./WeekendContainsDay.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** A Week calculator, useful to be passed in to `week_of_year()` on Date and DateTime types
*
*See the [Rust documentation for `WeekCalculator`](https://docs.rs/icu/latest/icu/calendar/week/struct.WeekCalculator.html) for more information.
*/

const WeekCalculator_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.icu4x_WeekCalculator_destroy_mv1(ptr);
});
export class WeekCalculator {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    
    constructor(ptr, selfEdge) {
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        WeekCalculator_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }


    static create(provider, locale) {
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(5, 4);
        const result = wasm.icu4x_WeekCalculator_create_mv1(diplomat_receive_buffer, provider.ffiValue, locale.ffiValue);
    
        try {
    
            if (!diplomatRuntime.resultFlag(wasm, diplomat_receive_buffer, 4)) {
                const cause = DataError[Array.from(DataError.values.keys())[diplomatRuntime.enumDiscriminant(wasm, diplomat_receive_buffer)]];
                throw new Error('DataError: ' + cause.value, { cause });
            }
            return new WeekCalculator(diplomatRuntime.ptrRead(wasm, diplomat_receive_buffer), []);
        } finally {
        
            wasm.diplomat_free(diplomat_receive_buffer, 5, 4);
        
        }
    }

    static fromFirstDayOfWeekAndMinWeekDays(firstWeekday, minWeekDays) {
        const result = wasm.icu4x_WeekCalculator_from_first_day_of_week_and_min_week_days_mv1(firstWeekday.ffiValue, minWeekDays);
    
        try {
    
            return new WeekCalculator(result, []);
        } finally {
        
        }
    }

    get firstWeekday() {
        const result = wasm.icu4x_WeekCalculator_first_weekday_mv1(this.ffiValue);
    
        try {
    
            return (() => {for (let i of IsoWeekday.values) { if(i[1] === result) return IsoWeekday[i[0]]; } return null;})();
        } finally {
        
        }
    }

    get minWeekDays() {
        const result = wasm.icu4x_WeekCalculator_min_week_days_mv1(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get weekend() {
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(7, 1);
        const result = wasm.icu4x_WeekCalculator_weekend_mv1(diplomat_receive_buffer, this.ffiValue);
    
        try {
    
            return new WeekendContainsDay()._fromFFI(diplomat_receive_buffer);
        } finally {
        
            wasm.diplomat_free(diplomat_receive_buffer, 7, 1);
        
        }
    }

    

}