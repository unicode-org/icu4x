// generated by diplomat-tool
import { LocaleFallbackPriority } from "./LocaleFallbackPriority.mjs"
import { LocaleFallbackSupplement } from "./LocaleFallbackSupplement.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** Collection of configurations for the ICU4X fallback algorithm.
*
*See the [Rust documentation for `LocaleFallbackConfig`](https://docs.rs/icu/latest/icu/locale/fallback/struct.LocaleFallbackConfig.html) for more information.
*/
export class LocaleFallbackConfig {
    #priority;
    get priority()  {
        return this.#priority;
    }
    set priority(value) {
        this.#priority = value;
    }
    #extensionKey;
    get extensionKey()  {
        return this.#extensionKey;
    }
    set extensionKey(value) {
        this.#extensionKey = value;
    }
    #fallbackSupplement;
    get fallbackSupplement()  {
        return this.#fallbackSupplement;
    }
    set fallbackSupplement(value) {
        this.#fallbackSupplement = value;
    }

    // Return this struct in FFI function friendly format.
    // Returns an array that can be expanded with spread syntax (...)
    // If this struct contains any slices, their lifetime-edge-relevant information will be
    // set up here, and can be appended to any relevant lifetime arrays here. <lifetime>AppendArray accepts a list
    // of arrays for each lifetime to do so. It accepts multiple lists per lifetime in case the caller needs to tie a lifetime to multiple
    // output arrays. Null is equivalent to an empty list: this lifetime is not being borrowed from.
    _intoFFI(
        slice_cleanup_callbacks,
        appendArrayMap
    ) {
        slice_cleanup_callbacks.push((appendArrayMap[aAppendArray] || []).length > 0 ? () => { for (let lifetime of appendArrayMap[aAppendArray]) { appendArrayMap[aAppendArray].push(extensionKey); } extensionKey.garbageCollect(); } : extensionKey.free);
        
        return [this.#priority.ffiValue, diplomatRuntime.DiplomatBuf.str8(wasm, this.#extensionKey), this.#fallbackSupplement.ffiValue]
    }

    _fromFFI(ptr, aEdges) {
        const priorityDeref = diplomatRuntime.enumDiscriminant(wasm, ptr);
        this.#priority = LocaleFallbackPriority[Array.from(LocaleFallbackPriority.values.keys())[priorityDeref]];
        const extensionKeyDeref = ptr + 4;
        this.#extensionKey = diplomatRuntime.DiplomatBuf.stringFromPtr(wasm.memory.buffer, extensionKeyDeref, "string8");
        const fallbackSupplementDeref = diplomatRuntime.enumDiscriminant(wasm, ptr + 12);
        this.#fallbackSupplement = LocaleFallbackSupplement[Array.from(LocaleFallbackSupplement.values.keys())[fallbackSupplementDeref]];

        return this;
    }

    // Return all fields corresponding to lifetime `'a` 
    // without handling lifetime dependencies (this is the job of the caller)
    // This is all fields that may be borrowed from if borrowing `'a`,
    // assuming that there are no `'other: a`. bounds. In case of such bounds,
    // the caller should take care to also call _fieldsForLifetimeOther
    get _fieldsForLifetimeA() { 
        return [extensionKey];
    };
    

}