// generated by diplomat-tool
import { Calendar } from "./Calendar.mjs"
import { CalendarError } from "./CalendarError.mjs"
import { Date } from "./Date.mjs"
import { IsoDateTime } from "./IsoDateTime.mjs"
import { IsoWeekday } from "./IsoWeekday.mjs"
import { Time } from "./Time.mjs"
import { WeekCalculator } from "./WeekCalculator.mjs"
import { WeekOf } from "./WeekOf.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** An ICU4X DateTime object capable of containing a date and time for any calendar.
*
*See the [Rust documentation for `DateTime`](https://docs.rs/icu/latest/icu/calendar/struct.DateTime.html) for more information.
*/

const DateTime_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.ICU4XDateTime_destroy(ptr);
});
export class DateTime {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    
    constructor(ptr, selfEdge) {
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        DateTime_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }


    static createFromIsoInCalendar(year, month, day, hour, minute, second, nanosecond, calendar) {
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(5, 4);
        const result = wasm.ICU4XDateTime_create_from_iso_in_calendar(diplomat_receive_buffer, year, month, day, hour, minute, second, nanosecond, calendar.ffiValue);
    
        try {
    
            if (!diplomatRuntime.resultFlag(wasm, diplomat_receive_buffer, 4)) {
                const cause = CalendarError[Array.from(CalendarError.values.keys())[diplomatRuntime.enumDiscriminant(wasm, diplomat_receive_buffer)]];
                throw new Error('CalendarError: ' + cause.value, { cause });
            }
            return new DateTime(diplomatRuntime.ptrRead(wasm, diplomat_receive_buffer), []);
        } finally {
        
            wasm.diplomat_free(diplomat_receive_buffer, 5, 4);
        
        }
    }

    static createFromCodesInCalendar(eraCode, year, monthCode, day, hour, minute, second, nanosecond, calendar) {
        
        const eraCodeSlice = diplomatRuntime.DiplomatBuf.str8(wasm, eraCode);
        
        const monthCodeSlice = diplomatRuntime.DiplomatBuf.str8(wasm, monthCode);
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(5, 4);
        const result = wasm.ICU4XDateTime_create_from_codes_in_calendar(diplomat_receive_buffer, eraCodeSlice.ptr, eraCodeSlice.size, year, monthCodeSlice.ptr, monthCodeSlice.size, day, hour, minute, second, nanosecond, calendar.ffiValue);
    
        try {
    
            if (!diplomatRuntime.resultFlag(wasm, diplomat_receive_buffer, 4)) {
                const cause = CalendarError[Array.from(CalendarError.values.keys())[diplomatRuntime.enumDiscriminant(wasm, diplomat_receive_buffer)]];
                throw new Error('CalendarError: ' + cause.value, { cause });
            }
            return new DateTime(diplomatRuntime.ptrRead(wasm, diplomat_receive_buffer), []);
        } finally {
        
            eraCodeSlice.free();
        
            monthCodeSlice.free();
        
            wasm.diplomat_free(diplomat_receive_buffer, 5, 4);
        
        }
    }

    static createFromDateAndTime(date, time) {
        const result = wasm.ICU4XDateTime_create_from_date_and_time(date.ffiValue, time.ffiValue);
    
        try {
    
            return new DateTime(result, []);
        } finally {
        
        }
    }

    get date() {
        const result = wasm.ICU4XDateTime_date(this.ffiValue);
    
        try {
    
            return new Date(result, []);
        } finally {
        
        }
    }

    get time() {
        const result = wasm.ICU4XDateTime_time(this.ffiValue);
    
        try {
    
            return new Time(result, []);
        } finally {
        
        }
    }

    toIso() {
        const result = wasm.ICU4XDateTime_to_iso(this.ffiValue);
    
        try {
    
            return new IsoDateTime(result, []);
        } finally {
        
        }
    }

    toCalendar(calendar) {
        const result = wasm.ICU4XDateTime_to_calendar(this.ffiValue, calendar.ffiValue);
    
        try {
    
            return new DateTime(result, []);
        } finally {
        
        }
    }

    get hour() {
        const result = wasm.ICU4XDateTime_hour(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get minute() {
        const result = wasm.ICU4XDateTime_minute(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get second() {
        const result = wasm.ICU4XDateTime_second(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get nanosecond() {
        const result = wasm.ICU4XDateTime_nanosecond(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get dayOfYear() {
        const result = wasm.ICU4XDateTime_day_of_year(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get dayOfMonth() {
        const result = wasm.ICU4XDateTime_day_of_month(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get dayOfWeek() {
        const result = wasm.ICU4XDateTime_day_of_week(this.ffiValue);
    
        try {
    
            return (() => {for (let i of IsoWeekday.values) { if(i[1] === result) return IsoWeekday[i[0]]; } return null;})();
        } finally {
        
        }
    }

    weekOfMonth(firstWeekday) {
        const result = wasm.ICU4XDateTime_week_of_month(this.ffiValue, firstWeekday.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    weekOfYear(calculator) {
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(8, 4);
        const result = wasm.ICU4XDateTime_week_of_year(diplomat_receive_buffer, this.ffiValue, calculator.ffiValue);
    
        try {
    
            return new WeekOf(diplomat_receive_buffer);
        } finally {
        
            wasm.diplomat_free(diplomat_receive_buffer, 8, 4);
        
        }
    }

    get ordinalMonth() {
        const result = wasm.ICU4XDateTime_ordinal_month(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get monthCode() {
        
        const write = wasm.diplomat_buffer_write_create(0);
        wasm.ICU4XDateTime_month_code(this.ffiValue, write);
    
        try {
    
            return diplomatRuntime.readString8(wasm, wasm.diplomat_buffer_write_get_bytes(write), wasm.diplomat_buffer_write_len(write));
        } finally {
        
            wasm.diplomat_buffer_write_destroy(write);
        
        }
    }

    get yearInEra() {
        const result = wasm.ICU4XDateTime_year_in_era(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get era() {
        
        const write = wasm.diplomat_buffer_write_create(0);
        wasm.ICU4XDateTime_era(this.ffiValue, write);
    
        try {
    
            return diplomatRuntime.readString8(wasm, wasm.diplomat_buffer_write_get_bytes(write), wasm.diplomat_buffer_write_len(write));
        } finally {
        
            wasm.diplomat_buffer_write_destroy(write);
        
        }
    }

    get monthsInYear() {
        const result = wasm.ICU4XDateTime_months_in_year(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get daysInMonth() {
        const result = wasm.ICU4XDateTime_days_in_month(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get daysInYear() {
        const result = wasm.ICU4XDateTime_days_in_year(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get calendar() {
        const result = wasm.ICU4XDateTime_calendar(this.ffiValue);
    
        try {
    
            return new Calendar(result, []);
        } finally {
        
        }
    }

    

}