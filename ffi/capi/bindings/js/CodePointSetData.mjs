// generated by diplomat-tool
import { CodePointRangeIterator } from "./CodePointRangeIterator.mjs"
import { DataError } from "./DataError.mjs"
import { DataProvider } from "./DataProvider.mjs"
import { GeneralCategoryGroup } from "./GeneralCategoryGroup.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** An ICU4X Unicode Set Property object, capable of querying whether a code point is contained in a set based on a Unicode property.
*
*See the [Rust documentation for `properties`](https://docs.rs/icu/latest/icu/properties/index.html) for more information.
*
*See the [Rust documentation for `CodePointSetData`](https://docs.rs/icu/latest/icu/properties/struct.CodePointSetData.html) for more information.
*
*See the [Rust documentation for `CodePointSetDataBorrowed`](https://docs.rs/icu/latest/icu/properties/struct.CodePointSetDataBorrowed.html) for more information.
*/
const CodePointSetData_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.icu4x_CodePointSetData_destroy_mv1(ptr);
});

export class CodePointSetData {
    
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("CodePointSetData is an Opaque type. You cannot call its constructor.");
            return;
        }
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        
        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            CodePointSetData_box_destroy_registry.register(this, this.#ptr);
        }
        
        return this;
    }
    get ffiValue() {
        return this.#ptr;
    }

    contains(cp) {
        const result = wasm.icu4x_CodePointSetData_contains_mv1(this.ffiValue, cp);
    
        try {
            return result;
        }
        
        finally {}
    }

    iterRanges() {
        // This lifetime edge depends on lifetimes 'a
        let aEdges = [this];
        
        const result = wasm.icu4x_CodePointSetData_iter_ranges_mv1(this.ffiValue);
    
        try {
            return new CodePointRangeIterator(diplomatRuntime.internalConstructor, result, [], aEdges);
        }
        
        finally {}
    }

    iterRangesComplemented() {
        // This lifetime edge depends on lifetimes 'a
        let aEdges = [this];
        
        const result = wasm.icu4x_CodePointSetData_iter_ranges_complemented_mv1(this.ffiValue);
    
        try {
            return new CodePointRangeIterator(diplomatRuntime.internalConstructor, result, [], aEdges);
        }
        
        finally {}
    }

    static createGeneralCategoryGroup(group) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();
        
        const result = wasm.icu4x_CodePointSetData_create_general_category_group_mv1(...GeneralCategoryGroup._fromSuppliedValue(diplomatRuntime.internalConstructor, group)._intoFFI(functionCleanupArena, {}));
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {
            functionCleanupArena.free();
        }
    }

    static createGeneralCategoryGroupWithProvider(provider, group) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_general_category_group_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue, group);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static asciiHexDigitForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_ascii_hex_digit_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createAsciiHexDigit() {
        const result = wasm.icu4x_CodePointSetData_create_ascii_hex_digit_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createAsciiHexDigitWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_ascii_hex_digit_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static alnumForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_alnum_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createAlnum() {
        const result = wasm.icu4x_CodePointSetData_create_alnum_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createAlnumWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_alnum_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static alphabeticForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_alphabetic_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createAlphabetic() {
        const result = wasm.icu4x_CodePointSetData_create_alphabetic_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createAlphabeticWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_alphabetic_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static bidiControlForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_bidi_control_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createBidiControl() {
        const result = wasm.icu4x_CodePointSetData_create_bidi_control_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createBidiControlWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_bidi_control_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static bidiMirroredForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_bidi_mirrored_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createBidiMirrored() {
        const result = wasm.icu4x_CodePointSetData_create_bidi_mirrored_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createBidiMirroredWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_bidi_mirrored_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static blankForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_blank_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createBlank() {
        const result = wasm.icu4x_CodePointSetData_create_blank_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createBlankWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_blank_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static casedForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_cased_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createCased() {
        const result = wasm.icu4x_CodePointSetData_create_cased_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createCasedWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_cased_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static caseIgnorableForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_case_ignorable_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createCaseIgnorable() {
        const result = wasm.icu4x_CodePointSetData_create_case_ignorable_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createCaseIgnorableWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_case_ignorable_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static fullCompositionExclusionForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_full_composition_exclusion_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createFullCompositionExclusion() {
        const result = wasm.icu4x_CodePointSetData_create_full_composition_exclusion_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createFullCompositionExclusionWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_full_composition_exclusion_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static changesWhenCasefoldedForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_changes_when_casefolded_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createChangesWhenCasefolded() {
        const result = wasm.icu4x_CodePointSetData_create_changes_when_casefolded_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createChangesWhenCasefoldedWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_changes_when_casefolded_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static changesWhenCasemappedForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_changes_when_casemapped_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createChangesWhenCasemapped() {
        const result = wasm.icu4x_CodePointSetData_create_changes_when_casemapped_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createChangesWhenCasemappedWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_changes_when_casemapped_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static changesWhenNfkcCasefoldedForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_changes_when_nfkc_casefolded_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createChangesWhenNfkcCasefolded() {
        const result = wasm.icu4x_CodePointSetData_create_changes_when_nfkc_casefolded_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createChangesWhenNfkcCasefoldedWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_changes_when_nfkc_casefolded_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static changesWhenLowercasedForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_changes_when_lowercased_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createChangesWhenLowercased() {
        const result = wasm.icu4x_CodePointSetData_create_changes_when_lowercased_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createChangesWhenLowercasedWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_changes_when_lowercased_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static changesWhenTitlecasedForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_changes_when_titlecased_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createChangesWhenTitlecased() {
        const result = wasm.icu4x_CodePointSetData_create_changes_when_titlecased_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createChangesWhenTitlecasedWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_changes_when_titlecased_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static changesWhenUppercasedForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_changes_when_uppercased_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createChangesWhenUppercased() {
        const result = wasm.icu4x_CodePointSetData_create_changes_when_uppercased_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createChangesWhenUppercasedWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_changes_when_uppercased_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static dashForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_dash_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createDash() {
        const result = wasm.icu4x_CodePointSetData_create_dash_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createDashWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_dash_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static deprecatedForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_deprecated_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createDeprecated() {
        const result = wasm.icu4x_CodePointSetData_create_deprecated_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createDeprecatedWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_deprecated_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static defaultIgnorableCodePointForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_default_ignorable_code_point_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createDefaultIgnorableCodePoint() {
        const result = wasm.icu4x_CodePointSetData_create_default_ignorable_code_point_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createDefaultIgnorableCodePointWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_default_ignorable_code_point_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static diacriticForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_diacritic_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createDiacritic() {
        const result = wasm.icu4x_CodePointSetData_create_diacritic_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createDiacriticWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_diacritic_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static emojiModifierBaseForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_emoji_modifier_base_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createEmojiModifierBase() {
        const result = wasm.icu4x_CodePointSetData_create_emoji_modifier_base_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createEmojiModifierBaseWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_emoji_modifier_base_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static emojiComponentForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_emoji_component_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createEmojiComponent() {
        const result = wasm.icu4x_CodePointSetData_create_emoji_component_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createEmojiComponentWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_emoji_component_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static emojiModifierForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_emoji_modifier_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createEmojiModifier() {
        const result = wasm.icu4x_CodePointSetData_create_emoji_modifier_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createEmojiModifierWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_emoji_modifier_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static emojiForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_emoji_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createEmoji() {
        const result = wasm.icu4x_CodePointSetData_create_emoji_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createEmojiWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_emoji_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static emojiPresentationForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_emoji_presentation_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createEmojiPresentation() {
        const result = wasm.icu4x_CodePointSetData_create_emoji_presentation_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createEmojiPresentationWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_emoji_presentation_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static extenderForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_extender_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createExtender() {
        const result = wasm.icu4x_CodePointSetData_create_extender_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createExtenderWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_extender_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static extendedPictographicForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_extended_pictographic_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createExtendedPictographic() {
        const result = wasm.icu4x_CodePointSetData_create_extended_pictographic_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createExtendedPictographicWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_extended_pictographic_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static graphForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_graph_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createGraph() {
        const result = wasm.icu4x_CodePointSetData_create_graph_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createGraphWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_graph_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static graphemeBaseForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_grapheme_base_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createGraphemeBase() {
        const result = wasm.icu4x_CodePointSetData_create_grapheme_base_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createGraphemeBaseWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_grapheme_base_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static graphemeExtendForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_grapheme_extend_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createGraphemeExtend() {
        const result = wasm.icu4x_CodePointSetData_create_grapheme_extend_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createGraphemeExtendWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_grapheme_extend_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static graphemeLinkForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_grapheme_link_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createGraphemeLink() {
        const result = wasm.icu4x_CodePointSetData_create_grapheme_link_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createGraphemeLinkWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_grapheme_link_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static hexDigitForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_hex_digit_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createHexDigit() {
        const result = wasm.icu4x_CodePointSetData_create_hex_digit_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createHexDigitWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_hex_digit_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static hyphenForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_hyphen_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createHyphen() {
        const result = wasm.icu4x_CodePointSetData_create_hyphen_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createHyphenWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_hyphen_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static idContinueForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_id_continue_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createIdContinue() {
        const result = wasm.icu4x_CodePointSetData_create_id_continue_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createIdContinueWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_id_continue_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static ideographicForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_ideographic_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createIdeographic() {
        const result = wasm.icu4x_CodePointSetData_create_ideographic_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createIdeographicWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_ideographic_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static idStartForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_id_start_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createIdStart() {
        const result = wasm.icu4x_CodePointSetData_create_id_start_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createIdStartWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_id_start_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static idsBinaryOperatorForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_ids_binary_operator_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createIdsBinaryOperator() {
        const result = wasm.icu4x_CodePointSetData_create_ids_binary_operator_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createIdsBinaryOperatorWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_ids_binary_operator_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static idsTrinaryOperatorForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_ids_trinary_operator_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createIdsTrinaryOperator() {
        const result = wasm.icu4x_CodePointSetData_create_ids_trinary_operator_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createIdsTrinaryOperatorWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_ids_trinary_operator_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static joinControlForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_join_control_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createJoinControl() {
        const result = wasm.icu4x_CodePointSetData_create_join_control_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createJoinControlWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_join_control_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static logicalOrderExceptionForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_logical_order_exception_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createLogicalOrderException() {
        const result = wasm.icu4x_CodePointSetData_create_logical_order_exception_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createLogicalOrderExceptionWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_logical_order_exception_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static lowercaseForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_lowercase_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createLowercase() {
        const result = wasm.icu4x_CodePointSetData_create_lowercase_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createLowercaseWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_lowercase_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static mathForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_math_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createMath() {
        const result = wasm.icu4x_CodePointSetData_create_math_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createMathWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_math_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static noncharacterCodePointForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_noncharacter_code_point_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createNoncharacterCodePoint() {
        const result = wasm.icu4x_CodePointSetData_create_noncharacter_code_point_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createNoncharacterCodePointWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_noncharacter_code_point_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static nfcInertForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_nfc_inert_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createNfcInert() {
        const result = wasm.icu4x_CodePointSetData_create_nfc_inert_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createNfcInertWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_nfc_inert_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static nfdInertForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_nfd_inert_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createNfdInert() {
        const result = wasm.icu4x_CodePointSetData_create_nfd_inert_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createNfdInertWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_nfd_inert_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static nfkcInertForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_nfkc_inert_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createNfkcInert() {
        const result = wasm.icu4x_CodePointSetData_create_nfkc_inert_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createNfkcInertWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_nfkc_inert_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static nfkdInertForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_nfkd_inert_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createNfkdInert() {
        const result = wasm.icu4x_CodePointSetData_create_nfkd_inert_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createNfkdInertWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_nfkd_inert_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static patternSyntaxForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_pattern_syntax_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createPatternSyntax() {
        const result = wasm.icu4x_CodePointSetData_create_pattern_syntax_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createPatternSyntaxWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_pattern_syntax_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static patternWhiteSpaceForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_pattern_white_space_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createPatternWhiteSpace() {
        const result = wasm.icu4x_CodePointSetData_create_pattern_white_space_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createPatternWhiteSpaceWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_pattern_white_space_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static prependedConcatenationMarkForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_prepended_concatenation_mark_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createPrependedConcatenationMark() {
        const result = wasm.icu4x_CodePointSetData_create_prepended_concatenation_mark_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createPrependedConcatenationMarkWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_prepended_concatenation_mark_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static printForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_print_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createPrint() {
        const result = wasm.icu4x_CodePointSetData_create_print_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createPrintWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_print_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static quotationMarkForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_quotation_mark_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createQuotationMark() {
        const result = wasm.icu4x_CodePointSetData_create_quotation_mark_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createQuotationMarkWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_quotation_mark_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static radicalForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_radical_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createRadical() {
        const result = wasm.icu4x_CodePointSetData_create_radical_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createRadicalWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_radical_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static regionalIndicatorForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_regional_indicator_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createRegionalIndicator() {
        const result = wasm.icu4x_CodePointSetData_create_regional_indicator_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createRegionalIndicatorWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_regional_indicator_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static softDottedForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_soft_dotted_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createSoftDotted() {
        const result = wasm.icu4x_CodePointSetData_create_soft_dotted_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createSoftDottedWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_soft_dotted_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static segmentStarterForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_segment_starter_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createSegmentStarter() {
        const result = wasm.icu4x_CodePointSetData_create_segment_starter_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createSegmentStarterWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_segment_starter_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static caseSensitiveForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_case_sensitive_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createCaseSensitive() {
        const result = wasm.icu4x_CodePointSetData_create_case_sensitive_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createCaseSensitiveWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_case_sensitive_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static sentenceTerminalForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_sentence_terminal_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createSentenceTerminal() {
        const result = wasm.icu4x_CodePointSetData_create_sentence_terminal_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createSentenceTerminalWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_sentence_terminal_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static terminalPunctuationForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_terminal_punctuation_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createTerminalPunctuation() {
        const result = wasm.icu4x_CodePointSetData_create_terminal_punctuation_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createTerminalPunctuationWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_terminal_punctuation_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static unifiedIdeographForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_unified_ideograph_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createUnifiedIdeograph() {
        const result = wasm.icu4x_CodePointSetData_create_unified_ideograph_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createUnifiedIdeographWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_unified_ideograph_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static uppercaseForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_uppercase_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createUppercase() {
        const result = wasm.icu4x_CodePointSetData_create_uppercase_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createUppercaseWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_uppercase_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static variationSelectorForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_variation_selector_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createVariationSelector() {
        const result = wasm.icu4x_CodePointSetData_create_variation_selector_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createVariationSelectorWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_variation_selector_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static whiteSpaceForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_white_space_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createWhiteSpace() {
        const result = wasm.icu4x_CodePointSetData_create_white_space_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createWhiteSpaceWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_white_space_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static xdigitForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_xdigit_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createXdigit() {
        const result = wasm.icu4x_CodePointSetData_create_xdigit_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createXdigitWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_xdigit_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static xidContinueForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_xid_continue_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createXidContinue() {
        const result = wasm.icu4x_CodePointSetData_create_xid_continue_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createXidContinueWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_xid_continue_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static xidStartForChar(ch) {
        const result = wasm.icu4x_CodePointSetData_xid_start_for_char_mv1(ch);
    
        try {
            return result;
        }
        
        finally {}
    }

    static createXidStart() {
        const result = wasm.icu4x_CodePointSetData_create_xid_start_mv1();
    
        try {
            return new CodePointSetData(diplomatRuntime.internalConstructor, result, []);
        }
        
        finally {}
    }

    static createXidStartWithProvider(provider) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_xid_start_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static createForEcma262(propertyName) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();
        
        const propertyNameSlice = functionCleanupArena.alloc(diplomatRuntime.DiplomatBuf.str8(wasm, propertyName));
        
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_for_ecma262_mv1(diplomatReceive.buffer, ...propertyNameSlice.splat());
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            functionCleanupArena.free();
        
            diplomatReceive.free();
        }
    }

    static createForEcma262WithProvider(provider, propertyName) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();
        
        const propertyNameSlice = functionCleanupArena.alloc(diplomatRuntime.DiplomatBuf.str8(wasm, propertyName));
        
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_CodePointSetData_create_for_ecma262_with_provider_mv1(diplomatReceive.buffer, provider.ffiValue, ...propertyNameSlice.splat());
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DataError(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
                throw new globalThis.Error('DataError: ' + cause.value, { cause });
            }
            return new CodePointSetData(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }
        
        finally {
            functionCleanupArena.free();
        
            diplomatReceive.free();
        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}