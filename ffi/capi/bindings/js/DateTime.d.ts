// generated by diplomat-tool
import type { Calendar } from "./Calendar"
import type { Date } from "./Date"
import type { IsoDateTime } from "./IsoDateTime"
import type { IsoWeekday } from "./IsoWeekday"
import type { Time } from "./Time"
import type { WeekCalculator } from "./WeekCalculator"
import type { WeekOf } from "./WeekOf"
import type { pointer, char } from "./diplomat-runtime.d.ts";


/** An ICU4X DateTime object capable of containing a date and time for any calendar.
*
*See the [Rust documentation for `DateTime`](https://docs.rs/icu/latest/icu/calendar/struct.DateTime.html) for more information.
*/
export class DateTime {
    

    get ffiValue(): pointer;


    static fromIsoInCalendar(year: number, month: number, day: number, hour: number, minute: number, second: number, nanosecond: number, calendar: Calendar): DateTime;

    static fromCodesInCalendar(eraCode: string, year: number, monthCode: string, day: number, hour: number, minute: number, second: number, nanosecond: number, calendar: Calendar): DateTime;

    static fromDateAndTime(date: Date, time: Time): DateTime;

    static fromString(v: string): DateTime;

    get date(): Date;

    get time(): Time;

    toIso(): IsoDateTime;

    toCalendar(calendar: Calendar): DateTime;

    get hour(): number;

    get minute(): number;

    get second(): number;

    get nanosecond(): number;

    get dayOfYear(): number;

    get dayOfMonth(): number;

    get dayOfWeek(): IsoWeekday;

    weekOfMonth(firstWeekday: IsoWeekday): number;

    weekOfYear(calculator: WeekCalculator): WeekOf;

    get ordinalMonth(): number;

    get monthCode(): string;

    get yearInEra(): number;

    get era(): string;

    get monthsInYear(): number;

    get daysInMonth(): number;

    get daysInYear(): number;

    get calendar(): Calendar;

    

}