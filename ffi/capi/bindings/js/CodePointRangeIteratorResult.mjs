// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** Result of a single iteration of [`CodePointRangeIterator`].
*Logically can be considered to be an `Option<RangeInclusive<u32>>`,
*
*`start` and `end` represent an inclusive range of code points [start, end],
*and `done` will be true if the iterator has already finished. The last contentful
*iteration will NOT produce a range done=true, in other words `start` and `end` are useful
*values if and only if `done=false`.
*/
export class CodePointRangeIteratorResult {
    #start;
    get start()  {
        return this.#start;
    }
    
    #end;
    get end()  {
        return this.#end;
    }
    
    #done;
    get done()  {
        return this.#done;
    }
    

    // Return this struct in FFI function friendly format.
    // Returns an array that can be expanded with spread syntax (...)
    
    _intoFFI(
        slice_cleanup_callbacks,
        appendArrayMap
    ) {
        return [this.#start, this.#end, this.#done]
    }

    // This struct contains borrowed fields, so this takes in a list of
    // "edges" corresponding to where each lifetime's data may have been borrowed from
    // and passes it down to individual fields containing the borrow.
    // This method does not attempt to handle any dependencies between lifetimes, the caller
    // should handle this when constructing edge arrays.
    _fromFFI(ptr) {
        const startDeref = (new Uint32Array(wasm.memory.buffer, ptr, 1))[0];
        this.#start = startDeref;
        const endDeref = (new Uint32Array(wasm.memory.buffer, ptr + 4, 1))[0];
        this.#end = endDeref;
        const doneDeref = (new Uint8Array(wasm.memory.buffer, ptr + 8, 1))[0] == 1;
        this.#done = doneDeref;

        return this;
    }
    // This is an out struct. You need to call other methods to be able to get this struct.
    constructor(ptr) {
        this._fromFFI(ptr);
    }
    

}