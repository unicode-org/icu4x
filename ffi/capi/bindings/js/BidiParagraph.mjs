// generated by diplomat-tool
import { BidiDirection } from "./BidiDirection.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** Bidi information for a single processed paragraph
*/

const BidiParagraph_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.ICU4XBidiParagraph_destroy(ptr);
});
export class BidiParagraph {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    #infoEdge = [];
    
    
    constructor(ptr, selfEdge, infoEdge) {
        
        
        this.#infoEdge = infoEdge;
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        BidiParagraph_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }


    setParagraphInText(n) {
        const result = wasm.ICU4XBidiParagraph_set_paragraph_in_text(this.ffiValue, n);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get direction() {
        const result = wasm.ICU4XBidiParagraph_direction(this.ffiValue);
    
        try {
    
            return BidiDirection[Array.from(BidiDirection.values.keys())[result]];
        } finally {
        
        }
    }

    get size() {
        const result = wasm.ICU4XBidiParagraph_size(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get rangeStart() {
        const result = wasm.ICU4XBidiParagraph_range_start(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get rangeEnd() {
        const result = wasm.ICU4XBidiParagraph_range_end(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    reorderLine(rangeStart, rangeEnd) {
        
        const write = wasm.diplomat_buffer_write_create(0);
        const result = wasm.ICU4XBidiParagraph_reorder_line(this.ffiValue, rangeStart, rangeEnd, write);
    
        try {
    
            return result == 0 ? null : diplomatRuntime.readString8(wasm, wasm.diplomat_buffer_write_get_bytes(write), wasm.diplomat_buffer_write_len(write));
        } finally {
        
            wasm.diplomat_buffer_write_destroy(write);
        
        }
    }

    levelAt(pos) {
        const result = wasm.ICU4XBidiParagraph_level_at(this.ffiValue, pos);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    

}