// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

// Base enumerator definition
/** See the [Rust documentation for `PluralCategory`](https://docs.rs/icu/latest/icu/plurals/enum.PluralCategory.html) for more information.
*/
export class PluralCategory {
    #value = undefined;

    static values = new Map([
        ["Zero", 0],
        ["One", 1],
        ["Two", 2],
        ["Few", 3],
        ["Many", 4],
        ["Other", 5]
    ]);

    constructor(value) {
        if (value instanceof PluralCategory) {
            this.#value = value.value;
            return;
        }

        if (PluralCategory.values.has(value)) {
            this.#value = value;
            return;
        }

        throw TypeError(value + " is not a PluralCategory and does not correspond to any of its enumerator values.");
    }

    get value() {
        return this.#value;
    }

    get ffiValue() {
        return PluralCategory.values.get(this.#value);
    }

    static Zero = new PluralCategory("Zero");
    static One = new PluralCategory("One");
    static Two = new PluralCategory("Two");
    static Few = new PluralCategory("Few");
    static Many = new PluralCategory("Many");
    static Other = new PluralCategory("Other");

    static getForCldrString(s) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();
        
        const sSlice = [...functionCleanupArena.alloc(diplomatRuntime.DiplomatBuf.str8(wasm, s)).splat()];
        
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        const result = wasm.icu4x_PluralCategory_get_for_cldr_string_mv1(diplomatReceive.buffer, ...sSlice);
    
        try {
            if (!diplomatReceive.resultFlag) {
                return null;
            }
            return PluralCategory[Array.from(PluralCategory.values.keys())[diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer)]];
        }
        
        finally {
            functionCleanupArena.free();
        
            diplomatReceive.free();
        }
    }
}