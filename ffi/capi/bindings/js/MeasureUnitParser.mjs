// generated by diplomat-tool
import { MeasureUnit } from "./MeasureUnit.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** An ICU4X Measurement Unit parser object which is capable of parsing the CLDR unit identifier
*(e.g. `meter-per-square-second`) and get the [`MeasureUnit`].
*
*See the [Rust documentation for `MeasureUnitParser`](https://docs.rs/icu/latest/icu/experimental/units/measureunit/struct.MeasureUnitParser.html) for more information.
*/

const MeasureUnitParser_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.icu4x_MeasureUnitParser_destroy_mv1(ptr);
});
export class MeasureUnitParser {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    #aEdge = [];
    
    
    constructor(ptr, selfEdge, aEdge) {
        
        
        this.#aEdge = aEdge;
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        MeasureUnitParser_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }


    parse(unitId) {
        
        const unitIdSlice = diplomatRuntime.DiplomatBuf.str8(wasm, unitId);
        const result = wasm.icu4x_MeasureUnitParser_parse_mv1(this.ffiValue, unitIdSlice.ptr, unitIdSlice.size);
    
        try {
    
            return result == 0 ? null : new MeasureUnit(result, []);
        } finally {
        
            unitIdSlice.free();
        
        }
    }

    

}