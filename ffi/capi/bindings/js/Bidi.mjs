// generated by diplomat-tool
import { BidiInfo } from "./BidiInfo.mjs"
import { DataError } from "./DataError.mjs"
import { DataProvider } from "./DataProvider.mjs"
import { ReorderedIndexMap } from "./ReorderedIndexMap.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** An ICU4X Bidi object, containing loaded bidi data
*
*See the [Rust documentation for `BidiClassAdapter`](https://docs.rs/icu/latest/icu/properties/bidi/struct.BidiClassAdapter.html) for more information.
*/

const Bidi_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.icu4x_Bidi_destroy_mv1(ptr);
});
export class Bidi {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    
    constructor(ptr, selfEdge) {
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        Bidi_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }


    static create(provider) {
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(5, 4);
        const result = wasm.icu4x_Bidi_create_mv1(diplomat_receive_buffer, provider.ffiValue);
    
        try {
    
            if (!diplomatRuntime.resultFlag(wasm, diplomat_receive_buffer, 4)) {
                const cause = DataError[Array.from(DataError.values.keys())[diplomatRuntime.enumDiscriminant(wasm, diplomat_receive_buffer)]];
                throw new Error('DataError: ' + cause.value, { cause });
            }
            return new Bidi(diplomatRuntime.ptrRead(wasm, diplomat_receive_buffer), []);
        } finally {
        
            wasm.diplomat_free(diplomat_receive_buffer, 5, 4);
        
        }
    }

    forText(text, defaultLevel) {
        
        const textSlice = diplomatRuntime.DiplomatBuf.str8(wasm, text);
        
        // This lifetime edge depends on lifetimes 'text
        let textEdges = [textSlice];
        const result = wasm.icu4x_Bidi_for_text_valid_utf8_mv1(this.ffiValue, textSlice.ptr, textSlice.size, defaultLevel);
    
        try {
    
            return new BidiInfo(result, [], textEdges);
        } finally {
        
            textSlice.garbageCollect();
        
        }
    }

    reorderVisual(levels) {
        
        const levelsSlice = diplomatRuntime.DiplomatBuf.slice(wasm, levels, "u8");
        const result = wasm.icu4x_Bidi_reorder_visual_mv1(this.ffiValue, levelsSlice.ptr, levelsSlice.size);
    
        try {
    
            return new ReorderedIndexMap(result, []);
        } finally {
        
            levelsSlice.free();
        
        }
    }

    static levelIsRtl(level) {
        const result = wasm.icu4x_Bidi_level_is_rtl_mv1(level);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    static levelIsLtr(level) {
        const result = wasm.icu4x_Bidi_level_is_ltr_mv1(level);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    static levelRtl() {
        const result = wasm.icu4x_Bidi_level_rtl_mv1();
    
        try {
    
            return result;
        } finally {
        
        }
    }

    static levelLtr() {
        const result = wasm.icu4x_Bidi_level_ltr_mv1();
    
        try {
    
            return result;
        } finally {
        
        }
    }

    

}