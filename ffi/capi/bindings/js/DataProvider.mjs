// generated by diplomat-tool
import { DataError } from "./DataError.mjs"
import { LocaleFallbacker } from "./LocaleFallbacker.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** An ICU4X data provider, capable of loading ICU4X data keys from some source.
*
*See the [Rust documentation for `icu_provider`](https://docs.rs/icu_provider/latest/icu_provider/index.html) for more information.
*/

const DataProvider_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.icu4x_DataProvider_destroy_mv1(ptr);
});
export class DataProvider {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    
    constructor(ptr, selfEdge) {
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        DataProvider_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }


    static compiled() {
        const result = wasm.icu4x_DataProvider_compiled_mv1();
    
        try {
    
            return new DataProvider(result, []);
        } finally {
        
        }
    }

    static fromByteSlice(blob) {
        
        const blobSlice = diplomatRuntime.DiplomatBuf.slice(wasm, blob, "u8");
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(5, 4);
        const result = wasm.icu4x_DataProvider_from_byte_slice_mv1(diplomat_receive_buffer, blobSlice.ptr, blobSlice.size);
    
        try {
    
            if (!diplomatRuntime.resultFlag(wasm, diplomat_receive_buffer, 4)) {
                const cause = DataError[Array.from(DataError.values.keys())[diplomatRuntime.enumDiscriminant(wasm, diplomat_receive_buffer)]];
                throw new Error('DataError: ' + cause.value, { cause });
            }
            return new DataProvider(diplomatRuntime.ptrRead(wasm, diplomat_receive_buffer), []);
        } finally {
        
            blobSlice.free();
        
            wasm.diplomat_free(diplomat_receive_buffer, 5, 4);
        
        }
    }

    static empty() {
        const result = wasm.icu4x_DataProvider_empty_mv1();
    
        try {
    
            return new DataProvider(result, []);
        } finally {
        
        }
    }

    forkByKey(other) {
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(5, 4);
        const result = wasm.icu4x_DataProvider_fork_by_key_mv1(diplomat_receive_buffer, this.ffiValue, other.ffiValue);
    
        try {
    
            if (!diplomatRuntime.resultFlag(wasm, diplomat_receive_buffer, 4)) {
                const cause = DataError[Array.from(DataError.values.keys())[diplomatRuntime.enumDiscriminant(wasm, diplomat_receive_buffer)]];
                throw new Error('DataError: ' + cause.value, { cause });
            }
    
        } finally {
        
            wasm.diplomat_free(diplomat_receive_buffer, 5, 4);
        
        }
    }

    forkByLocale(other) {
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(5, 4);
        const result = wasm.icu4x_DataProvider_fork_by_locale_mv1(diplomat_receive_buffer, this.ffiValue, other.ffiValue);
    
        try {
    
            if (!diplomatRuntime.resultFlag(wasm, diplomat_receive_buffer, 4)) {
                const cause = DataError[Array.from(DataError.values.keys())[diplomatRuntime.enumDiscriminant(wasm, diplomat_receive_buffer)]];
                throw new Error('DataError: ' + cause.value, { cause });
            }
    
        } finally {
        
            wasm.diplomat_free(diplomat_receive_buffer, 5, 4);
        
        }
    }

    enableLocaleFallbackWith(fallbacker) {
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(5, 4);
        const result = wasm.icu4x_DataProvider_enable_locale_fallback_with_mv1(diplomat_receive_buffer, this.ffiValue, fallbacker.ffiValue);
    
        try {
    
            if (!diplomatRuntime.resultFlag(wasm, diplomat_receive_buffer, 4)) {
                const cause = DataError[Array.from(DataError.values.keys())[diplomatRuntime.enumDiscriminant(wasm, diplomat_receive_buffer)]];
                throw new Error('DataError: ' + cause.value, { cause });
            }
    
        } finally {
        
            wasm.diplomat_free(diplomat_receive_buffer, 5, 4);
        
        }
    }

    

}