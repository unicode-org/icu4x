// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** The outcome of non-recursive canonical decomposition of a character.
*`second` will be NUL when the decomposition expands to a single character
*(which may or may not be the original one)
*
*See the [Rust documentation for `Decomposed`](https://docs.rs/icu/latest/icu/normalizer/properties/enum.Decomposed.html) for more information.
*/
export class Decomposed {
    #first;
    get first()  {
        return this.#first;
    }
    
    #second;
    get second()  {
        return this.#second;
    }
    

    // Return this struct in FFI function friendly format.
    // Returns an array that can be expanded with spread syntax (...)
    
    _intoFFI(
        slice_cleanup_callbacks,
        appendArrayMap
    ) {
        return [diplomatRuntime.extractCodePoint(this.#first, 'this.#first'), diplomatRuntime.extractCodePoint(this.#second, 'this.#second')]
    }

    // This struct contains borrowed fields, so this takes in a list of
    // "edges" corresponding to where each lifetime's data may have been borrowed from
    // and passes it down to individual fields containing the borrow.
    // This method does not attempt to handle any dependencies between lifetimes, the caller
    // should handle this when constructing edge arrays.
    _fromFFI(ptr) {
        const firstDeref = String.fromCharCode((new Uint32Array(wasm.memory.buffer, ptr, 1))[0]);
        this.#first = firstDeref;
        const secondDeref = String.fromCharCode((new Uint32Array(wasm.memory.buffer, ptr + 4, 1))[0]);
        this.#second = secondDeref;

        return this;
    }
    // This is an out struct. You need to call other methods to be able to get this struct.
    constructor(ptr) {
        this._fromFFI(ptr);
    }
    

}