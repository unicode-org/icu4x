// generated by diplomat-tool
import type { pointer, codepoint } from "./diplomat-runtime.d.ts";



/**
 * See the [Rust documentation for `LineBreak`](https://docs.rs/icu/2.0.0/icu/properties/props/struct.LineBreak.html) for more information.
 */
export class LineBreak {

    /** @internal */
    static fromValue(value: LineBreak | string): LineBreak;

    get value(): string;

    /** @internal */
    get ffiValue(): number;

    static Unknown : LineBreak;
    static Ambiguous : LineBreak;
    static Alphabetic : LineBreak;
    static BreakBoth : LineBreak;
    static BreakAfter : LineBreak;
    static BreakBefore : LineBreak;
    static MandatoryBreak : LineBreak;
    static ContingentBreak : LineBreak;
    static ClosePunctuation : LineBreak;
    static CombiningMark : LineBreak;
    static CarriageReturn : LineBreak;
    static Exclamation : LineBreak;
    static Glue : LineBreak;
    static Hyphen : LineBreak;
    static Ideographic : LineBreak;
    static Inseparable : LineBreak;
    static InfixNumeric : LineBreak;
    static LineFeed : LineBreak;
    static Nonstarter : LineBreak;
    static Numeric : LineBreak;
    static OpenPunctuation : LineBreak;
    static PostfixNumeric : LineBreak;
    static PrefixNumeric : LineBreak;
    static Quotation : LineBreak;
    static ComplexContext : LineBreak;
    static Surrogate : LineBreak;
    static Space : LineBreak;
    static BreakSymbols : LineBreak;
    static ZwSpace : LineBreak;
    static NextLine : LineBreak;
    static WordJoiner : LineBreak;
    static H2 : LineBreak;
    static H3 : LineBreak;
    static Jl : LineBreak;
    static Jt : LineBreak;
    static Jv : LineBreak;
    static CloseParenthesis : LineBreak;
    static ConditionalJapaneseStarter : LineBreak;
    static HebrewLetter : LineBreak;
    static RegionalIndicator : LineBreak;
    static EBase : LineBreak;
    static EModifier : LineBreak;
    static Zwj : LineBreak;
    static Aksara : LineBreak;
    static AksaraPrebase : LineBreak;
    static AksaraStart : LineBreak;
    static ViramaFinal : LineBreak;
    static Virama : LineBreak;


    /**
     * See the [Rust documentation for `for_char`](https://docs.rs/icu/2.0.0/icu/properties/props/trait.EnumeratedProperty.html#tymethod.for_char) for more information.
     */
    static forChar(ch: codepoint): LineBreak;

    /**
     * Get the "long" name of this property value (returns empty if property value is unknown)
     *
     * See the [Rust documentation for `get`](https://docs.rs/icu/2.0.0/icu/properties/struct.PropertyNamesLongBorrowed.html#method.get) for more information.
     */
    longName(): string | null;

    /**
     * Get the "short" name of this property value (returns empty if property value is unknown)
     *
     * See the [Rust documentation for `get`](https://docs.rs/icu/2.0.0/icu/properties/struct.PropertyNamesShortBorrowed.html#method.get) for more information.
     */
    shortName(): string | null;

    /**
     * Convert to an integer value usable with ICU4C and CodePointMapData
     *
     * See the [Rust documentation for `to_icu4c_value`](https://docs.rs/icu/2.0.0/icu/properties/props/struct.LineBreak.html#method.to_icu4c_value) for more information.
     */
    toIntegerValue(): number;

    /**
     * Convert from an integer value from ICU4C or CodePointMapData
     *
     * See the [Rust documentation for `from_icu4c_value`](https://docs.rs/icu/2.0.0/icu/properties/props/struct.LineBreak.html#method.from_icu4c_value) for more information.
     */
    static fromIntegerValue(other: number): LineBreak | null;

    constructor(value: LineBreak | string );
}