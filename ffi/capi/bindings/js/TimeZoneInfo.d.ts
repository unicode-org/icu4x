// generated by diplomat-tool
import type { IsoDateTime } from "./IsoDateTime"
import type { TimeZoneIdMapper } from "./TimeZoneIdMapper"
import type { TimeZoneInvalidOffsetError } from "./TimeZoneInvalidOffsetError"
import type { pointer, codepoint } from "./diplomat-runtime.d.ts";


/** See the [Rust documentation for `TimeZoneInfo`](https://docs.rs/icu/latest/icu/timezone/struct.TimeZoneInfo.html) for more information.
*/
export class TimeZoneInfo {
    

    get ffiValue(): pointer;

    static unknown(): TimeZoneInfo;

    static utc(): TimeZoneInfo;

    static fromParts(bcp47Id: string, offsetSeconds: number, dst: boolean): TimeZoneInfo;

    trySetOffsetSeconds(offsetSeconds: number): void;

    setOffsetEighthsOfHour(offsetEighthsOfHour: number): void;

    trySetOffsetStr(offset: string): void;

    offsetEighthsOfHour(): number | null;

    clearOffset(): void;

    get offsetSeconds(): number | null;

    get isOffsetNonNegative(): boolean | null;

    get isOffsetZero(): boolean | null;

    get offsetHoursPart(): number | null;

    get offsetMinutesPart(): number | null;

    get offsetSecondsPart(): number | null;

    setTimeZoneId(id: string): void;

    setIanaTimeZoneId(mapper: TimeZoneIdMapper, id: string): void;

    get timeZoneId(): string;

    clearZoneVariant(): void;

    setStandardTime(): void;

    setDaylightTime(): void;

    get isStandardTime(): boolean | null;

    get isDaylightTime(): boolean | null;

    set localTime(datetime: IsoDateTime);

    clearLocalTime(): void;

    get getLocalTime(): IsoDateTime | null;
}