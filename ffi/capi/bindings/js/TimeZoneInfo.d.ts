// generated by diplomat-tool
import type { IanaParser } from "./IanaParser"
import type { IsoDate } from "./IsoDate"
import type { IsoDateTime } from "./IsoDateTime"
import type { Time } from "./Time"
import type { TimeZoneInvalidOffsetError } from "./TimeZoneInvalidOffsetError"
import type { pointer, codepoint } from "./diplomat-runtime.d.ts";


/** See the [Rust documentation for `TimeZoneInfo`](https://docs.rs/icu/latest/icu/time/struct.TimeZoneInfo.html) for more information.
*/


export class TimeZoneInfo {
    
    get ffiValue(): pointer;

    static unknown(): TimeZoneInfo;

    static utc(): TimeZoneInfo;

    trySetOffsetSeconds(offsetSeconds: number): void;

    setOffsetEighthsOfHour(offsetEighthsOfHour: number): void;

    trySetOffsetStr(offset: string): void;

    offsetEighthsOfHour(): number | null;

    clearOffset(): void;

    get offsetSeconds(): number | null;

    get isOffsetNonNegative(): boolean | null;

    get isOffsetZero(): boolean | null;

    get offsetHoursPart(): number | null;

    get offsetMinutesPart(): number | null;

    get offsetSecondsPart(): number | null;

    setTimeZoneId(id: string): void;

    setIanaTimeZoneId(mapper: IanaParser, id: string): void;

    get timeZoneId(): string;

    clearZoneVariant(): void;

    setStandardTime(): void;

    setDaylightTime(): void;

    get isStandardTime(): boolean | null;

    get isDaylightTime(): boolean | null;

    setLocalTime(date: IsoDate, time: Time): void;

    clearLocalTime(): void;

    get getLocalTime(): IsoDateTime | null;

    constructor(bcp47Id: string, offsetSeconds: number, dst: boolean);
}