// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** Thin wrapper around a vector that maps visual indices to source indices
*
*`map[visualIndex] = sourceIndex`
*
*Produced by `reorder_visual()` on [`Bidi`].
*/

const ReorderedIndexMap_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.icu4x_ReorderedIndexMap_destroy_mv1(ptr);
});
export class ReorderedIndexMap {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    
    constructor(ptr, selfEdge) {
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        ReorderedIndexMap_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }


    get asSlice() {
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(8, 4);
        
        // This lifetime edge depends on lifetimes 'a
        let aEdges = [this];
        const result = wasm.icu4x_ReorderedIndexMap_as_slice_mv1(diplomat_receive_buffer, this.ffiValue);
    
        try {
    
            return diplomatRuntime.DiplomatBuf.sliceFromPtr(wasm, diplomat_receive_buffer, "u32");
        } finally {
        
            wasm.diplomat_free(diplomat_receive_buffer, 8, 4);
        
        }
    }

    get length() {
        const result = wasm.icu4x_ReorderedIndexMap_len_mv1(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get isEmpty() {
        const result = wasm.icu4x_ReorderedIndexMap_is_empty_mv1(this.ffiValue);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    get(index) {
        const result = wasm.icu4x_ReorderedIndexMap_get_mv1(this.ffiValue, index);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    

}