// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const SentenceBreakIteratorUtf16_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.icu4x_SentenceBreakIteratorUtf16_destroy_mv1(ptr);
});

/**
 * See the [Rust documentation for `SentenceBreakIterator`](https://docs.rs/icu/2.0.0/icu/segmenter/iterators/struct.SentenceBreakIterator.html) for more information.
 */
export class SentenceBreakIteratorUtf16 {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    #aEdge = [];

    #internalConstructor(symbol, ptr, selfEdge, aEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("SentenceBreakIteratorUtf16 is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#aEdge = aEdge;
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            SentenceBreakIteratorUtf16_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    /**
     * Finds the next breakpoint. Returns -1 if at the end of the string or if the index is
     * out of range of a 32-bit signed integer.
     *
     * See the [Rust documentation for `next`](https://docs.rs/icu/2.0.0/icu/segmenter/iterators/struct.SentenceBreakIterator.html#method.next) for more information.
     */
    next() {

        const result = wasm.icu4x_SentenceBreakIteratorUtf16_next_mv1(this.ffiValue);

        try {
            return result;
        }

        finally {
        }
    }

    constructor(symbol, ptr, selfEdge, aEdge) {
        return this.#internalConstructor(...arguments)
    }
}