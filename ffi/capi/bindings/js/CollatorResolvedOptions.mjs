// generated by diplomat-tool
import { CollatorAlternateHandling } from "./CollatorAlternateHandling.mjs"
import { CollatorBackwardSecondLevel } from "./CollatorBackwardSecondLevel.mjs"
import { CollatorCaseFirst } from "./CollatorCaseFirst.mjs"
import { CollatorCaseLevel } from "./CollatorCaseLevel.mjs"
import { CollatorMaxVariable } from "./CollatorMaxVariable.mjs"
import { CollatorNumeric } from "./CollatorNumeric.mjs"
import { CollatorStrength } from "./CollatorStrength.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** See the [Rust documentation for `ResolvedCollatorOptions`](https://docs.rs/icu/latest/icu/collator/struct.ResolvedCollatorOptions.html) for more information.
*/
export class CollatorResolvedOptions {
    #strength;
    get strength()  {
        return this.#strength;
    }
    
    #alternateHandling;
    get alternateHandling()  {
        return this.#alternateHandling;
    }
    
    #caseFirst;
    get caseFirst()  {
        return this.#caseFirst;
    }
    
    #maxVariable;
    get maxVariable()  {
        return this.#maxVariable;
    }
    
    #caseLevel;
    get caseLevel()  {
        return this.#caseLevel;
    }
    
    #numeric;
    get numeric()  {
        return this.#numeric;
    }
    
    #backwardSecondLevel;
    get backwardSecondLevel()  {
        return this.#backwardSecondLevel;
    }
    

    // Return this struct in FFI function friendly format.
    // Returns an array that can be expanded with spread syntax (...)
    
    _intoFFI(
        slice_cleanup_callbacks,
        appendArrayMap
    ) {
        return [this.#strength.ffiValue, this.#alternateHandling.ffiValue, this.#caseFirst.ffiValue, this.#maxVariable.ffiValue, this.#caseLevel.ffiValue, this.#numeric.ffiValue, this.#backwardSecondLevel.ffiValue]
    }

    // This struct contains borrowed fields, so this takes in a list of
    // "edges" corresponding to where each lifetime's data may have been borrowed from
    // and passes it down to individual fields containing the borrow.
    // This method does not attempt to handle any dependencies between lifetimes, the caller
    // should handle this when constructing edge arrays.
    _fromFFI(ptr) {
        const strengthDeref = diplomatRuntime.enumDiscriminant(wasm, ptr);
        this.#strength = CollatorStrength[Array.from(CollatorStrength.values.keys())[strengthDeref]];
        const alternateHandlingDeref = diplomatRuntime.enumDiscriminant(wasm, ptr + 4);
        this.#alternateHandling = CollatorAlternateHandling[Array.from(CollatorAlternateHandling.values.keys())[alternateHandlingDeref]];
        const caseFirstDeref = diplomatRuntime.enumDiscriminant(wasm, ptr + 8);
        this.#caseFirst = CollatorCaseFirst[Array.from(CollatorCaseFirst.values.keys())[caseFirstDeref]];
        const maxVariableDeref = diplomatRuntime.enumDiscriminant(wasm, ptr + 12);
        this.#maxVariable = CollatorMaxVariable[Array.from(CollatorMaxVariable.values.keys())[maxVariableDeref]];
        const caseLevelDeref = diplomatRuntime.enumDiscriminant(wasm, ptr + 16);
        this.#caseLevel = CollatorCaseLevel[Array.from(CollatorCaseLevel.values.keys())[caseLevelDeref]];
        const numericDeref = diplomatRuntime.enumDiscriminant(wasm, ptr + 20);
        this.#numeric = CollatorNumeric[Array.from(CollatorNumeric.values.keys())[numericDeref]];
        const backwardSecondLevelDeref = diplomatRuntime.enumDiscriminant(wasm, ptr + 24);
        this.#backwardSecondLevel = CollatorBackwardSecondLevel[Array.from(CollatorBackwardSecondLevel.values.keys())[backwardSecondLevelDeref]];

        return this;
    }
    // This is an out struct. You need to call other methods to be able to get this struct.
    constructor(ptr) {
        this._fromFFI(ptr);
    }
    

}