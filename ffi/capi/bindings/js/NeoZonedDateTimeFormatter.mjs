// generated by diplomat-tool
import { Date } from "./Date.mjs"
import { DateTimeMismatchedCalendarError } from "./DateTimeMismatchedCalendarError.mjs"
import { IsoDate } from "./IsoDate.mjs"
import { Time } from "./Time.mjs"
import { TimeZoneInfo } from "./TimeZoneInfo.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** See the [Rust documentation for `NeoZonedDateTimeFormatter`](https://docs.rs/icu/latest/icu/datetime/type.NeoZonedDateTimeFormatter.html) for more information.
*/
const NeoZonedDateTimeFormatter_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.icu4x_NeoZonedDateTimeFormatter_destroy_mv1(ptr);
});

export class NeoZonedDateTimeFormatter {
    
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("NeoZonedDateTimeFormatter is an Opaque type. You cannot call its constructor.");
            return;
        }
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        
        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            NeoZonedDateTimeFormatter_box_destroy_registry.register(this, this.#ptr);
        }
        
        return this;
    }
    get ffiValue() {
        return this.#ptr;
    }

    formatIso(date, time, zone) {
        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);
        wasm.icu4x_NeoZonedDateTimeFormatter_format_iso_mv1(this.ffiValue, date.ffiValue, time.ffiValue, zone.ffiValue, write.buffer);
    
        try {
            return write.readString8();
        }
        
        finally {
            write.free();
        }
    }

    formatSameCalendar(date, time) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 13, 4, true);
        
        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);
        
        const result = wasm.icu4x_NeoZonedDateTimeFormatter_format_same_calendar_mv1(diplomatReceive.buffer, this.ffiValue, date.ffiValue, time.ffiValue, write.buffer);
    
        try {
            if (!diplomatReceive.resultFlag) {
                const cause = DateTimeMismatchedCalendarError._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
                throw new globalThis.Error('DateTimeMismatchedCalendarError: ' + cause.toString(), { cause });
            }
            return write.readString8();
        }
        
        finally {
            diplomatReceive.free();
        
            write.free();
        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}