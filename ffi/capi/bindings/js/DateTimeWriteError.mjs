// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** 
 * Additional information: [1](https://docs.rs/icu/latest/icu/datetime/enum.DateTimeWriteError.html)
 */


export class DateTimeWriteError {
    
    #value = undefined;

    static #values = new Map([
        ["Unknown", 0],
        ["InvalidMonthCode", 2],
        ["InvalidEra", 3],
        ["InvalidCyclicYear", 4],
        ["DecimalFormatterNotLoaded", 5],
        ["NamesNotLoaded", 6],
        ["MissingInputField", 7],
        ["UnsupportedLength", 8],
        ["UnsupportedField", 9]
    ]);

    static getAllEntries() {
        return DateTimeWriteError.#values.entries();
    }
    
    #internalConstructor(value) {
        if (arguments.length > 1 && arguments[0] === diplomatRuntime.internalConstructor) {
            // We pass in two internalConstructor arguments to create *new*
            // instances of this type, otherwise the enums are treated as singletons.
            if (arguments[1] === diplomatRuntime.internalConstructor ) {
                this.#value = arguments[2];
                return this;
            }
            return DateTimeWriteError.#objectValues[arguments[1]];
        }

        if (value instanceof DateTimeWriteError) {
            return value;
        }

        let intVal = DateTimeWriteError.#values.get(value);

        // Nullish check, checks for null or undefined
        if (intVal != null) {
            return DateTimeWriteError.#objectValues[intVal];
        }

        throw TypeError(value + " is not a DateTimeWriteError and does not correspond to any of its enumerator values.");
    }

    static fromValue(value) {
        return new DateTimeWriteError(value);
    }

    get value() {
        for (let entry of DateTimeWriteError.#values) {
            if (entry[1] == this.#value) {
                return entry[0];
            }
        }
    }

    get ffiValue() {
        return this.#value;
    }
    static #objectValues = {
        [0]: new DateTimeWriteError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 0),
        [2]: new DateTimeWriteError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 2),
        [3]: new DateTimeWriteError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 3),
        [4]: new DateTimeWriteError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 4),
        [5]: new DateTimeWriteError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 5),
        [6]: new DateTimeWriteError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 6),
        [7]: new DateTimeWriteError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 7),
        [8]: new DateTimeWriteError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 8),
        [9]: new DateTimeWriteError(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 9),
    };

    static Unknown = DateTimeWriteError.#objectValues[0];
    static InvalidMonthCode = DateTimeWriteError.#objectValues[2];
    static InvalidEra = DateTimeWriteError.#objectValues[3];
    static InvalidCyclicYear = DateTimeWriteError.#objectValues[4];
    static DecimalFormatterNotLoaded = DateTimeWriteError.#objectValues[5];
    static NamesNotLoaded = DateTimeWriteError.#objectValues[6];
    static MissingInputField = DateTimeWriteError.#objectValues[7];
    static UnsupportedLength = DateTimeWriteError.#objectValues[8];
    static UnsupportedField = DateTimeWriteError.#objectValues[9];

    constructor(value) {
        return this.#internalConstructor(...arguments)
    }
}