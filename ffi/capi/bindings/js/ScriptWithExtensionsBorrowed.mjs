// generated by diplomat-tool
import { CodePointSetData } from "./CodePointSetData.mjs"
import { ScriptExtensionsSet } from "./ScriptExtensionsSet.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** A slightly faster ScriptWithExtensions object
*
*See the [Rust documentation for `ScriptWithExtensionsBorrowed`](https://docs.rs/icu/latest/icu/properties/script/struct.ScriptWithExtensionsBorrowed.html) for more information.
*/

const ScriptWithExtensionsBorrowed_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.ICU4XScriptWithExtensionsBorrowed_destroy(ptr);
});
export class ScriptWithExtensionsBorrowed {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    #aEdge = [];
    
    
    constructor(ptr, selfEdge, aEdge) {
        
        
        this.#aEdge = aEdge;
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        ScriptWithExtensionsBorrowed_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }


    getScriptVal(codePoint) {
        const result = wasm.ICU4XScriptWithExtensionsBorrowed_get_script_val(this.ffiValue, codePoint);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    getScriptExtensionsVal(codePoint) {
        
        // This lifetime edge depends on lifetimes 'a
        let aEdges = [this];
        const result = wasm.ICU4XScriptWithExtensionsBorrowed_get_script_extensions_val(this.ffiValue, codePoint);
    
        try {
    
            return new ScriptExtensionsSet(result, [], aEdges);
        } finally {
        
        }
    }

    hasScript(codePoint, script) {
        const result = wasm.ICU4XScriptWithExtensionsBorrowed_has_script(this.ffiValue, codePoint, script);
    
        try {
    
            return result;
        } finally {
        
        }
    }

    getScriptExtensionsSet(script) {
        const result = wasm.ICU4XScriptWithExtensionsBorrowed_get_script_extensions_set(this.ffiValue, script);
    
        try {
    
            return new CodePointSetData(result, []);
        } finally {
        
        }
    }

    

}