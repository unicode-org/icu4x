// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

// Base enumerator definition
/** Legacy error
*
*Additional information: [1](https://docs.rs/icu/latest/icu/datetime/enum.DateTimeError.html), [2](https://docs.rs/icu/latest/icu/provider/struct.DataError.html), [3](https://docs.rs/icu/latest/icu/provider/enum.DataErrorKind.html)
*/
export class Error {
    #value = undefined;

    static values = new Map([
        ["UnknownError", 0],
        ["DataMissingDataMarkerError", 256],
        ["DataMissingLocaleError", 258],
        ["DataNeedsLocaleError", 260],
        ["DataExtraneousLocaleError", 261],
        ["DataFilteredResourceError", 262],
        ["DataMismatchedTypeError", 263],
        ["DataCustomError", 266],
        ["DataIoError", 267],
        ["DataUnavailableBufferFormatError", 268],
        ["PropertyUnexpectedPropertyNameError", 1026],
        ["DateTimePatternError", 2048],
        ["DateTimeMissingInputFieldError", 2049],
        ["DateTimeSkeletonError", 2050],
        ["DateTimeUnsupportedFieldError", 2051],
        ["DateTimeUnsupportedOptionsError", 2052],
        ["DateTimeMissingWeekdaySymbolError", 2053],
        ["DateTimeMissingMonthSymbolError", 2054],
        ["DateTimeFixedDecimalError", 2055],
        ["DateTimeMismatchedCalendarError", 2056]
    ]);
    constructor(value) {
        if (value instanceof Error) {
            this.#value = value.value;
            return;
        }

        if (Error.values.has(value)) {
            this.#value = value;
            return;
        }

        throw TypeError(value + " is not a Error and does not correspond to any of its enumerator values.");
    }

    get value() {
        return this.#value;
    }

    get ffiValue() {
        return Error.values.get(this.#value);
    }

    static UnknownError = new Error("UnknownError");

    static DataMissingDataMarkerError = new Error("DataMissingDataMarkerError");

    static DataMissingLocaleError = new Error("DataMissingLocaleError");

    static DataNeedsLocaleError = new Error("DataNeedsLocaleError");

    static DataExtraneousLocaleError = new Error("DataExtraneousLocaleError");

    static DataFilteredResourceError = new Error("DataFilteredResourceError");

    static DataMismatchedTypeError = new Error("DataMismatchedTypeError");

    static DataCustomError = new Error("DataCustomError");

    static DataIoError = new Error("DataIoError");

    static DataUnavailableBufferFormatError = new Error("DataUnavailableBufferFormatError");

    static PropertyUnexpectedPropertyNameError = new Error("PropertyUnexpectedPropertyNameError");

    static DateTimePatternError = new Error("DateTimePatternError");

    static DateTimeMissingInputFieldError = new Error("DateTimeMissingInputFieldError");

    static DateTimeSkeletonError = new Error("DateTimeSkeletonError");

    static DateTimeUnsupportedFieldError = new Error("DateTimeUnsupportedFieldError");

    static DateTimeUnsupportedOptionsError = new Error("DateTimeUnsupportedOptionsError");

    static DateTimeMissingWeekdaySymbolError = new Error("DateTimeMissingWeekdaySymbolError");

    static DateTimeMissingMonthSymbolError = new Error("DateTimeMissingMonthSymbolError");

    static DateTimeFixedDecimalError = new Error("DateTimeFixedDecimalError");

    static DateTimeMismatchedCalendarError = new Error("DateTimeMismatchedCalendarError");


    

}