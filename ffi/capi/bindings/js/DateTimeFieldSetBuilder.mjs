// generated by diplomat-tool
import { DateFields } from "./DateFields.mjs"
import { DateTimeAlignment } from "./DateTimeAlignment.mjs"
import { DateTimeLength } from "./DateTimeLength.mjs"
import { TimePrecision } from "./TimePrecision.mjs"
import { YearStyle } from "./YearStyle.mjs"
import { ZoneStyle } from "./ZoneStyle.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** 
 * See the [Rust documentation for `FieldSetBuilder`](https://docs.rs/icu_datetime/latest/icu_datetime/fieldsets/builder/struct.FieldSetBuilder.html) for more information.
 */


export class DateTimeFieldSetBuilder {
    
    #length;
    
    get length()  {
        return this.#length;
    } 
    set length(value) {
        this.#length = value;
    }
    
    #dateFields;
    
    get dateFields()  {
        return this.#dateFields;
    } 
    set dateFields(value) {
        this.#dateFields = value;
    }
    
    #timePrecision;
    
    get timePrecision()  {
        return this.#timePrecision;
    } 
    set timePrecision(value) {
        this.#timePrecision = value;
    }
    
    #zoneStyle;
    
    get zoneStyle()  {
        return this.#zoneStyle;
    } 
    set zoneStyle(value) {
        this.#zoneStyle = value;
    }
    
    #alignment;
    
    get alignment()  {
        return this.#alignment;
    } 
    set alignment(value) {
        this.#alignment = value;
    }
    
    #yearStyle;
    
    get yearStyle()  {
        return this.#yearStyle;
    } 
    set yearStyle(value) {
        this.#yearStyle = value;
    }
    
    /** Create `DateTimeFieldSetBuilder` from an object that contains all of `DateTimeFieldSetBuilder`s fields.
    * Optional fields do not need to be included in the provided object.
    */
    static fromFields(structObj) {
        return new DateTimeFieldSetBuilder(structObj);
    }

    #internalConstructor(structObj) {
        if (typeof structObj !== "object") {
            throw new Error("DateTimeFieldSetBuilder's constructor takes an object of DateTimeFieldSetBuilder's fields.");
        }

        if ("length" in structObj) {
            this.#length = structObj.length;
        } else {
            this.#length = null;
        }

        if ("dateFields" in structObj) {
            this.#dateFields = structObj.dateFields;
        } else {
            this.#dateFields = null;
        }

        if ("timePrecision" in structObj) {
            this.#timePrecision = structObj.timePrecision;
        } else {
            this.#timePrecision = null;
        }

        if ("zoneStyle" in structObj) {
            this.#zoneStyle = structObj.zoneStyle;
        } else {
            this.#zoneStyle = null;
        }

        if ("alignment" in structObj) {
            this.#alignment = structObj.alignment;
        } else {
            this.#alignment = null;
        }

        if ("yearStyle" in structObj) {
            this.#yearStyle = structObj.yearStyle;
        } else {
            this.#yearStyle = null;
        }

        return this;
    }

    // Return this struct in FFI function friendly format.
    // Returns an array that can be expanded with spread syntax (...)
    
    _intoFFI(
        functionCleanupArena,
        appendArrayMap
    ) {
        return [...diplomatRuntime.optionToArgsForCalling(this.#length, 4, 4, (arrayBuffer, offset, jsValue) => [diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, jsValue.ffiValue, Int32Array)]), ...diplomatRuntime.optionToArgsForCalling(this.#dateFields, 4, 4, (arrayBuffer, offset, jsValue) => [diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, jsValue.ffiValue, Int32Array)]), ...diplomatRuntime.optionToArgsForCalling(this.#timePrecision, 4, 4, (arrayBuffer, offset, jsValue) => [diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, jsValue.ffiValue, Int32Array)]), ...diplomatRuntime.optionToArgsForCalling(this.#zoneStyle, 4, 4, (arrayBuffer, offset, jsValue) => [diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, jsValue.ffiValue, Int32Array)]), ...diplomatRuntime.optionToArgsForCalling(this.#alignment, 4, 4, (arrayBuffer, offset, jsValue) => [diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, jsValue.ffiValue, Int32Array)]), ...diplomatRuntime.optionToArgsForCalling(this.#yearStyle, 4, 4, (arrayBuffer, offset, jsValue) => [diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, jsValue.ffiValue, Int32Array)])]
    }

    static _fromSuppliedValue(internalConstructor, obj) {
        if (internalConstructor !== diplomatRuntime.internalConstructor) {
            throw new Error("_fromSuppliedValue cannot be called externally.");
        }

        if (obj instanceof DateTimeFieldSetBuilder) {
            return obj;
        }

        return DateTimeFieldSetBuilder.fromFields(obj);
    }

    _writeToArrayBuffer(
        arrayBuffer,
        offset,
        functionCleanupArena,
        appendArrayMap
    ) {
        diplomatRuntime.writeOptionToArrayBuffer(arrayBuffer, offset + 0, this.#length, 4, 4, (arrayBuffer, offset, jsValue) => diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, jsValue.ffiValue, Int32Array));
        diplomatRuntime.writeOptionToArrayBuffer(arrayBuffer, offset + 8, this.#dateFields, 4, 4, (arrayBuffer, offset, jsValue) => diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, jsValue.ffiValue, Int32Array));
        diplomatRuntime.writeOptionToArrayBuffer(arrayBuffer, offset + 16, this.#timePrecision, 4, 4, (arrayBuffer, offset, jsValue) => diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, jsValue.ffiValue, Int32Array));
        diplomatRuntime.writeOptionToArrayBuffer(arrayBuffer, offset + 24, this.#zoneStyle, 4, 4, (arrayBuffer, offset, jsValue) => diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, jsValue.ffiValue, Int32Array));
        diplomatRuntime.writeOptionToArrayBuffer(arrayBuffer, offset + 32, this.#alignment, 4, 4, (arrayBuffer, offset, jsValue) => diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, jsValue.ffiValue, Int32Array));
        diplomatRuntime.writeOptionToArrayBuffer(arrayBuffer, offset + 40, this.#yearStyle, 4, 4, (arrayBuffer, offset, jsValue) => diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, jsValue.ffiValue, Int32Array));
    }

    // This struct contains borrowed fields, so this takes in a list of
    // "edges" corresponding to where each lifetime's data may have been borrowed from
    // and passes it down to individual fields containing the borrow.
    // This method does not attempt to handle any dependencies between lifetimes, the caller
    // should handle this when constructing edge arrays.
    static _fromFFI(internalConstructor, ptr) {
        if (internalConstructor !== diplomatRuntime.internalConstructor) {
            throw new Error("DateTimeFieldSetBuilder._fromFFI is not meant to be called externally. Please use the default constructor.");
        }
        let structObj = {};
        const lengthDeref = ptr;
        structObj.length = diplomatRuntime.readOption(wasm, lengthDeref, 4, (wasm, offset) => { const deref = diplomatRuntime.enumDiscriminant(wasm, offset); return new DateTimeLength(diplomatRuntime.internalConstructor, deref) });
        const dateFieldsDeref = ptr + 8;
        structObj.dateFields = diplomatRuntime.readOption(wasm, dateFieldsDeref, 4, (wasm, offset) => { const deref = diplomatRuntime.enumDiscriminant(wasm, offset); return new DateFields(diplomatRuntime.internalConstructor, deref) });
        const timePrecisionDeref = ptr + 16;
        structObj.timePrecision = diplomatRuntime.readOption(wasm, timePrecisionDeref, 4, (wasm, offset) => { const deref = diplomatRuntime.enumDiscriminant(wasm, offset); return new TimePrecision(diplomatRuntime.internalConstructor, deref) });
        const zoneStyleDeref = ptr + 24;
        structObj.zoneStyle = diplomatRuntime.readOption(wasm, zoneStyleDeref, 4, (wasm, offset) => { const deref = diplomatRuntime.enumDiscriminant(wasm, offset); return new ZoneStyle(diplomatRuntime.internalConstructor, deref) });
        const alignmentDeref = ptr + 32;
        structObj.alignment = diplomatRuntime.readOption(wasm, alignmentDeref, 4, (wasm, offset) => { const deref = diplomatRuntime.enumDiscriminant(wasm, offset); return new DateTimeAlignment(diplomatRuntime.internalConstructor, deref) });
        const yearStyleDeref = ptr + 40;
        structObj.yearStyle = diplomatRuntime.readOption(wasm, yearStyleDeref, 4, (wasm, offset) => { const deref = diplomatRuntime.enumDiscriminant(wasm, offset); return new YearStyle(diplomatRuntime.internalConstructor, deref) });

        return new DateTimeFieldSetBuilder(structObj);
    }

    constructor(structObj) {
        return this.#internalConstructor(...arguments)
    }
}