// generated by diplomat-tool
import { DataError } from "./DataError.mjs"
import { DataProvider } from "./DataProvider.mjs"
import { LocaleFallbackConfig } from "./LocaleFallbackConfig.mjs"
import { LocaleFallbackerWithConfig } from "./LocaleFallbackerWithConfig.mjs"
import { LocaleParseError } from "./LocaleParseError.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** An object that runs the ICU4X locale fallback algorithm.
*
*See the [Rust documentation for `LocaleFallbacker`](https://docs.rs/icu/latest/icu/locale/fallback/struct.LocaleFallbacker.html) for more information.
*/

const LocaleFallbacker_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.ICU4XLocaleFallbacker_destroy(ptr);
});
export class LocaleFallbacker {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];
    
    
    constructor(ptr, selfEdge) {
        
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;
        // Unconditionally register to destroy when this object is ready to garbage collect.
        LocaleFallbacker_box_destroy_registry.register(this, this.#ptr);
    }

    get ffiValue() {
        return this.#ptr;
    }


    static create(provider) {
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(5, 4);
        const result = wasm.ICU4XLocaleFallbacker_create(diplomat_receive_buffer, provider.ffiValue);
    
        try {
    
            if (!diplomatRuntime.resultFlag(wasm, diplomat_receive_buffer, 4)) {
                const cause = DataError[Array.from(DataError.values.keys())[diplomatRuntime.enumDiscriminant(wasm, diplomat_receive_buffer)]];
                throw new Error('DataError: ' + cause.value, { cause });
            }
            return new LocaleFallbacker(diplomatRuntime.ptrRead(wasm, diplomat_receive_buffer), []);
        } finally {
        
            wasm.diplomat_free(diplomat_receive_buffer, 5, 4);
        
        }
    }

    static createWithoutData() {
        const result = wasm.ICU4XLocaleFallbacker_create_without_data();
    
        try {
    
            return new LocaleFallbacker(result, []);
        } finally {
        
        }
    }

    forConfig(config) {
        
        let slice_cleanup_callbacks = [];
        
        const diplomat_receive_buffer = wasm.diplomat_alloc(5, 4);
        
        // This lifetime edge depends on lifetimes 'a
        let aEdges = [this];
        const result = wasm.ICU4XLocaleFallbacker_for_config(diplomat_receive_buffer, this.ffiValue, ...config._intoFFI(slice_cleanup_callbacks, {}));
    
        try {
    
            if (!diplomatRuntime.resultFlag(wasm, diplomat_receive_buffer, 4)) {
                const cause = LocaleParseError[Array.from(LocaleParseError.values.keys())[diplomatRuntime.enumDiscriminant(wasm, diplomat_receive_buffer)]];
                throw new Error('LocaleParseError: ' + cause.value, { cause });
            }
            return new LocaleFallbackerWithConfig(diplomatRuntime.ptrRead(wasm, diplomat_receive_buffer), [], aEdges);
        } finally {
        
            for (let cleanup of slice_cleanup_callbacks) {
                cleanup();
            }
        
            wasm.diplomat_free(diplomat_receive_buffer, 5, 4);
        
        }
    }

    

}