// generated by diplomat-tool
import { LineBreakStrictness } from "./LineBreakStrictness.mjs"
import { LineBreakWordOption } from "./LineBreakWordOption.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** See the [Rust documentation for `LineBreakOptions`](https://docs.rs/icu/latest/icu/segmenter/struct.LineBreakOptions.html) for more information.
*/
export class LineBreakOptions {
    #strictness;
    get strictness()  {
        return this.#strictness;
    }
    set strictness(value) {
        this.#strictness = value;
    }
    #wordOption;
    get wordOption()  {
        return this.#wordOption;
    }
    set wordOption(value) {
        this.#wordOption = value;
    }
    #jaZh;
    get jaZh()  {
        return this.#jaZh;
    }
    set jaZh(value) {
        this.#jaZh = value;
    }

    // Return this struct in FFI function friendly format.
    // Returns an array that can be expanded with spread syntax (...)
    
    _intoFFI(
        slice_cleanup_callbacks,
        appendArrayMap
    ) {
        return [this.#strictness.ffiValue, this.#wordOption.ffiValue, this.#jaZh]
    }

    // This struct contains borrowed fields, so this takes in a list of
    // "edges" corresponding to where each lifetime's data may have been borrowed from
    // and passes it down to individual fields containing the borrow.
    // This method does not attempt to handle any dependencies between lifetimes, the caller
    // should handle this when constructing edge arrays.
    _fromFFI(ptr) {
        const strictnessDeref = diplomatRuntime.enumDiscriminant(wasm, ptr);
        this.#strictness = LineBreakStrictness[Array.from(LineBreakStrictness.values.keys())[strictnessDeref]];
        const wordOptionDeref = diplomatRuntime.enumDiscriminant(wasm, ptr + 4);
        this.#wordOption = LineBreakWordOption[Array.from(LineBreakWordOption.values.keys())[wordOptionDeref]];
        const jaZhDeref = (new Uint8Array(wasm.memory.buffer, ptr + 8, 1))[0] == 1;
        this.#jaZh = jaZhDeref;

        return this;
    }
    

}