// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** 
 * See the [Rust documentation for `IndicConjunctBreak`](https://docs.rs/icu/latest/icu/properties/props/struct.IndicConjunctBreak.html) for more information.
 */


export class IndicConjunctBreak {
    
    #value = undefined;

    static #values = new Map([
        ["None", 0],
        ["Consonant", 1],
        ["Extend", 2],
        ["Linker", 3]
    ]);

    static getAllEntries() {
        return IndicConjunctBreak.#values.entries();
    }
    
    #internalConstructor(value) {
        if (arguments.length > 1 && arguments[0] === diplomatRuntime.internalConstructor) {
            // We pass in two internalConstructor arguments to create *new*
            // instances of this type, otherwise the enums are treated as singletons.
            if (arguments[1] === diplomatRuntime.internalConstructor ) {
                this.#value = arguments[2];
                return this;
            }
            return IndicConjunctBreak.#objectValues[arguments[1]];
        }

        if (value instanceof IndicConjunctBreak) {
            return value;
        }

        let intVal = IndicConjunctBreak.#values.get(value);

        // Nullish check, checks for null or undefined
        if (intVal != null) {
            return IndicConjunctBreak.#objectValues[intVal];
        }

        throw TypeError(value + " is not a IndicConjunctBreak and does not correspond to any of its enumerator values.");
    }

    static fromValue(value) {
        return new IndicConjunctBreak(value);
    }

    get value() {
        return [...IndicConjunctBreak.#values.keys()][this.#value];
    }

    get ffiValue() {
        return this.#value;
    }
    static #objectValues = [
        new IndicConjunctBreak(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 0),
        new IndicConjunctBreak(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 1),
        new IndicConjunctBreak(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 2),
        new IndicConjunctBreak(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 3),
    ];

    static None = IndicConjunctBreak.#objectValues[0];
    static Consonant = IndicConjunctBreak.#objectValues[1];
    static Extend = IndicConjunctBreak.#objectValues[2];
    static Linker = IndicConjunctBreak.#objectValues[3];

    /** 
     * See the [Rust documentation for `for_char`](https://docs.rs/icu/latest/icu/properties/props/trait.EnumeratedProperty.html#tymethod.for_char) for more information.
     */
    static forChar(ch) {
        const result = wasm.icu4x_IndicConjunctBreak_for_char_mv1(ch);
    
        try {
            return new IndicConjunctBreak(diplomatRuntime.internalConstructor, result);
        }
        
        finally {}
    }

    /** 
     * Convert to an integer value usable with ICU4C and CodePointMapData
     *
     * See the [Rust documentation for `to_icu4c_value`](https://docs.rs/icu/latest/icu/properties/props/struct.IndicConjunctBreak.html#method.to_icu4c_value) for more information.
     */
    toIntegerValue() {
        const result = wasm.icu4x_IndicConjunctBreak_to_integer_value_mv1(this.ffiValue);
    
        try {
            return result;
        }
        
        finally {}
    }

    /** 
     * Convert from an integer value from ICU4C or CodePointMapData
     *
     * See the [Rust documentation for `from_icu4c_value`](https://docs.rs/icu/latest/icu/properties/props/struct.IndicConjunctBreak.html#method.from_icu4c_value) for more information.
     */
    static fromIntegerValue(other) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);
        
        const result = wasm.icu4x_IndicConjunctBreak_from_integer_value_mv1(diplomatReceive.buffer, other);
    
        try {
            if (!diplomatReceive.resultFlag) {
                return null;
            }
            return new IndicConjunctBreak(diplomatRuntime.internalConstructor, diplomatRuntime.enumDiscriminant(wasm, diplomatReceive.buffer));
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    constructor(value) {
        return this.#internalConstructor(...arguments)
    }
}