// generated by diplomat-tool
import { GeneralCategory } from "./GeneralCategory.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";


/** A mask that is capable of representing groups of `General_Category` values.
*
*See the [Rust documentation for `GeneralCategoryGroup`](https://docs.rs/icu/latest/icu/properties/props/struct.GeneralCategoryGroup.html) for more information.
*/
export class GeneralCategoryGroup {

    #mask;
    get mask()  {
        return this.#mask;
    }
    set mask(value) {
        this.#mask = value;
    }
    constructor(structObj) {
        if (typeof structObj !== "object") {
            throw new Error("GeneralCategoryGroup's constructor takes an object of GeneralCategoryGroup's fields.");
        }

        if ("mask" in structObj) {
            this.#mask = structObj.mask;
        } else {
            throw new Error("Missing required field mask.");
        }

    }

    // Return this struct in FFI function friendly format.
    // Returns an array that can be expanded with spread syntax (...)
    
    _intoFFI(
        functionCleanupArena,
        appendArrayMap
    ) {
        return [this.#mask]
    }

    _writeToArrayBuffer(
        arrayBuffer,
        offset,
        functionCleanupArena,
        appendArrayMap
    ) {
        diplomatRuntime.writeToArrayBuffer(arrayBuffer, offset + 0, this.#mask, Uint32Array);
    }

    // This struct contains borrowed fields, so this takes in a list of
    // "edges" corresponding to where each lifetime's data may have been borrowed from
    // and passes it down to individual fields containing the borrow.
    // This method does not attempt to handle any dependencies between lifetimes, the caller
    // should handle this when constructing edge arrays.
    static _fromFFI(internalConstructor, ptr) {
        if (internalConstructor !== diplomatRuntime.internalConstructor) {
            throw new Error("GeneralCategoryGroup._fromFFI is not meant to be called externally. Please use the default constructor.");
        }
        var structObj = {};
        const maskDeref = (new Uint32Array(wasm.memory.buffer, ptr, 1))[0];
        structObj.mask = maskDeref;

        return new GeneralCategoryGroup(structObj, internalConstructor);
    }

    contains(val) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();
        
        const result = wasm.icu4x_GeneralCategoryGroup_contains_mv1(...this._intoFFI(), val.ffiValue);
    
        try {
            return result;
        }
        
        finally {
            functionCleanupArena.free();
        }
    }

    complement() {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();
        
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 4, 4, false);
        
        const result = wasm.icu4x_GeneralCategoryGroup_complement_mv1(diplomatReceive.buffer, ...this._intoFFI());
    
        try {
            return GeneralCategoryGroup._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
        }
        
        finally {
            functionCleanupArena.free();
        
            diplomatReceive.free();
        }
    }

    static all() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 4, 4, false);
        
        const result = wasm.icu4x_GeneralCategoryGroup_all_mv1(diplomatReceive.buffer);
    
        try {
            return GeneralCategoryGroup._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static empty() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 4, 4, false);
        
        const result = wasm.icu4x_GeneralCategoryGroup_empty_mv1(diplomatReceive.buffer);
    
        try {
            return GeneralCategoryGroup._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    union(other) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();
        
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 4, 4, false);
        
        const result = wasm.icu4x_GeneralCategoryGroup_union_mv1(diplomatReceive.buffer, ...this._intoFFI(), ...other._intoFFI(functionCleanupArena, {}));
    
        try {
            return GeneralCategoryGroup._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
        }
        
        finally {
            functionCleanupArena.free();
        
            diplomatReceive.free();
        }
    }

    intersection(other) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();
        
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 4, 4, false);
        
        const result = wasm.icu4x_GeneralCategoryGroup_intersection_mv1(diplomatReceive.buffer, ...this._intoFFI(), ...other._intoFFI(functionCleanupArena, {}));
    
        try {
            return GeneralCategoryGroup._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
        }
        
        finally {
            functionCleanupArena.free();
        
            diplomatReceive.free();
        }
    }

    static casedLetter() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 4, 4, false);
        
        const result = wasm.icu4x_GeneralCategoryGroup_cased_letter_mv1(diplomatReceive.buffer);
    
        try {
            return GeneralCategoryGroup._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static letter() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 4, 4, false);
        
        const result = wasm.icu4x_GeneralCategoryGroup_letter_mv1(diplomatReceive.buffer);
    
        try {
            return GeneralCategoryGroup._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static mark() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 4, 4, false);
        
        const result = wasm.icu4x_GeneralCategoryGroup_mark_mv1(diplomatReceive.buffer);
    
        try {
            return GeneralCategoryGroup._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static number() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 4, 4, false);
        
        const result = wasm.icu4x_GeneralCategoryGroup_number_mv1(diplomatReceive.buffer);
    
        try {
            return GeneralCategoryGroup._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static separator() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 4, 4, false);
        
        const result = wasm.icu4x_GeneralCategoryGroup_separator_mv1(diplomatReceive.buffer);
    
        try {
            return GeneralCategoryGroup._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static other() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 4, 4, false);
        
        const result = wasm.icu4x_GeneralCategoryGroup_other_mv1(diplomatReceive.buffer);
    
        try {
            return GeneralCategoryGroup._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static punctuation() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 4, 4, false);
        
        const result = wasm.icu4x_GeneralCategoryGroup_punctuation_mv1(diplomatReceive.buffer);
    
        try {
            return GeneralCategoryGroup._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
        }
        
        finally {
            diplomatReceive.free();
        }
    }

    static symbol() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 4, 4, false);
        
        const result = wasm.icu4x_GeneralCategoryGroup_symbol_mv1(diplomatReceive.buffer);
    
        try {
            return GeneralCategoryGroup._fromFFI(diplomatRuntime.internalConstructor, diplomatReceive.buffer);
        }
        
        finally {
            diplomatReceive.free();
        }
    }
}