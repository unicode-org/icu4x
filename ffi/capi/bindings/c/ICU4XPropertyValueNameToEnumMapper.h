#ifndef ICU4XPropertyValueNameToEnumMapper_H
#define ICU4XPropertyValueNameToEnumMapper_H

#include <stdio.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include "diplomat_runtime.h"

#include "ICU4XDataError.d.h"
#include "ICU4XDataProvider.d.h"

#include "ICU4XPropertyValueNameToEnumMapper.d.h"






int16_t ICU4XPropertyValueNameToEnumMapper_get_strict(const ICU4XPropertyValueNameToEnumMapper* self, const char* name_data, size_t name_len);

int16_t ICU4XPropertyValueNameToEnumMapper_get_loose(const ICU4XPropertyValueNameToEnumMapper* self, const char* name_data, size_t name_len);

typedef struct ICU4XPropertyValueNameToEnumMapper_load_general_category_result {union {ICU4XPropertyValueNameToEnumMapper* ok; ICU4XDataError err;}; bool is_ok;} ICU4XPropertyValueNameToEnumMapper_load_general_category_result;
ICU4XPropertyValueNameToEnumMapper_load_general_category_result ICU4XPropertyValueNameToEnumMapper_load_general_category(const ICU4XDataProvider* provider);

typedef struct ICU4XPropertyValueNameToEnumMapper_load_hangul_syllable_type_result {union {ICU4XPropertyValueNameToEnumMapper* ok; ICU4XDataError err;}; bool is_ok;} ICU4XPropertyValueNameToEnumMapper_load_hangul_syllable_type_result;
ICU4XPropertyValueNameToEnumMapper_load_hangul_syllable_type_result ICU4XPropertyValueNameToEnumMapper_load_hangul_syllable_type(const ICU4XDataProvider* provider);

typedef struct ICU4XPropertyValueNameToEnumMapper_load_east_asian_width_result {union {ICU4XPropertyValueNameToEnumMapper* ok; ICU4XDataError err;}; bool is_ok;} ICU4XPropertyValueNameToEnumMapper_load_east_asian_width_result;
ICU4XPropertyValueNameToEnumMapper_load_east_asian_width_result ICU4XPropertyValueNameToEnumMapper_load_east_asian_width(const ICU4XDataProvider* provider);

typedef struct ICU4XPropertyValueNameToEnumMapper_load_bidi_class_result {union {ICU4XPropertyValueNameToEnumMapper* ok; ICU4XDataError err;}; bool is_ok;} ICU4XPropertyValueNameToEnumMapper_load_bidi_class_result;
ICU4XPropertyValueNameToEnumMapper_load_bidi_class_result ICU4XPropertyValueNameToEnumMapper_load_bidi_class(const ICU4XDataProvider* provider);

typedef struct ICU4XPropertyValueNameToEnumMapper_load_indic_syllabic_category_result {union {ICU4XPropertyValueNameToEnumMapper* ok; ICU4XDataError err;}; bool is_ok;} ICU4XPropertyValueNameToEnumMapper_load_indic_syllabic_category_result;
ICU4XPropertyValueNameToEnumMapper_load_indic_syllabic_category_result ICU4XPropertyValueNameToEnumMapper_load_indic_syllabic_category(const ICU4XDataProvider* provider);

typedef struct ICU4XPropertyValueNameToEnumMapper_load_line_break_result {union {ICU4XPropertyValueNameToEnumMapper* ok; ICU4XDataError err;}; bool is_ok;} ICU4XPropertyValueNameToEnumMapper_load_line_break_result;
ICU4XPropertyValueNameToEnumMapper_load_line_break_result ICU4XPropertyValueNameToEnumMapper_load_line_break(const ICU4XDataProvider* provider);

typedef struct ICU4XPropertyValueNameToEnumMapper_load_grapheme_cluster_break_result {union {ICU4XPropertyValueNameToEnumMapper* ok; ICU4XDataError err;}; bool is_ok;} ICU4XPropertyValueNameToEnumMapper_load_grapheme_cluster_break_result;
ICU4XPropertyValueNameToEnumMapper_load_grapheme_cluster_break_result ICU4XPropertyValueNameToEnumMapper_load_grapheme_cluster_break(const ICU4XDataProvider* provider);

typedef struct ICU4XPropertyValueNameToEnumMapper_load_word_break_result {union {ICU4XPropertyValueNameToEnumMapper* ok; ICU4XDataError err;}; bool is_ok;} ICU4XPropertyValueNameToEnumMapper_load_word_break_result;
ICU4XPropertyValueNameToEnumMapper_load_word_break_result ICU4XPropertyValueNameToEnumMapper_load_word_break(const ICU4XDataProvider* provider);

typedef struct ICU4XPropertyValueNameToEnumMapper_load_sentence_break_result {union {ICU4XPropertyValueNameToEnumMapper* ok; ICU4XDataError err;}; bool is_ok;} ICU4XPropertyValueNameToEnumMapper_load_sentence_break_result;
ICU4XPropertyValueNameToEnumMapper_load_sentence_break_result ICU4XPropertyValueNameToEnumMapper_load_sentence_break(const ICU4XDataProvider* provider);

typedef struct ICU4XPropertyValueNameToEnumMapper_load_script_result {union {ICU4XPropertyValueNameToEnumMapper* ok; ICU4XDataError err;}; bool is_ok;} ICU4XPropertyValueNameToEnumMapper_load_script_result;
ICU4XPropertyValueNameToEnumMapper_load_script_result ICU4XPropertyValueNameToEnumMapper_load_script(const ICU4XDataProvider* provider);


void ICU4XPropertyValueNameToEnumMapper_destroy(ICU4XPropertyValueNameToEnumMapper* self);





#endif // ICU4XPropertyValueNameToEnumMapper_H
