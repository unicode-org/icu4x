// generated by diplomat-tool

part of 'lib.g.dart';

final class _DateTimeFieldSetBuilderFfi extends ffi.Struct {
  external _ResultInt32Void length;
  external _ResultInt32Void dateFields;
  external _ResultInt32Void timePrecision;
  external _ResultInt32Void zoneStyle;
  external _ResultInt32Void alignment;
  external _ResultInt32Void yearStyle;
}

/// See the [Rust documentation for `FieldSetBuilder`](https://docs.rs/icu/latest/icu/datetime/builder/enum.FieldSetBuilder.html) for more information.
final class DateTimeFieldSetBuilder {
  DateTimeLength? length;
  DateFields? dateFields;
  TimePrecision? timePrecision;
  ZoneStyle? zoneStyle;
  DateTimeAlignment? alignment;
  YearStyle? yearStyle;

  DateTimeFieldSetBuilder({this.length, this.dateFields, this.timePrecision, this.zoneStyle, this.alignment, this.yearStyle});

  // This struct contains borrowed fields, so this takes in a list of
  // "edges" corresponding to where each lifetime's data may have been borrowed from
  // and passes it down to individual fields containing the borrow.
  // This method does not attempt to handle any dependencies between lifetimes, the caller
  // should handle this when constructing edge arrays.
  // ignore: unused_element
  DateTimeFieldSetBuilder._fromFfi(_DateTimeFieldSetBuilderFfi ffi) :
    length = ffi.length.isOk ? DateTimeLength.values[ffi.length.union.ok] : null,
    dateFields = ffi.dateFields.isOk ? DateFields.values[ffi.dateFields.union.ok] : null,
    timePrecision = ffi.timePrecision.isOk ? TimePrecision.values[ffi.timePrecision.union.ok] : null,
    zoneStyle = ffi.zoneStyle.isOk ? ZoneStyle.values[ffi.zoneStyle.union.ok] : null,
    alignment = ffi.alignment.isOk ? DateTimeAlignment.values[ffi.alignment.union.ok] : null,
    yearStyle = ffi.yearStyle.isOk ? YearStyle.values[ffi.yearStyle.union.ok] : null;

  // ignore: unused_element
  _DateTimeFieldSetBuilderFfi _toFfi(ffi.Allocator temp) {
    final struct = ffi.Struct.create<_DateTimeFieldSetBuilderFfi>();
    DateTimeLength? length = this.length;
    struct.length = length != null ? _ResultInt32Void.ok(length.index) : _ResultInt32Void.err();
    DateFields? dateFields = this.dateFields;
    struct.dateFields = dateFields != null ? _ResultInt32Void.ok(dateFields.index) : _ResultInt32Void.err();
    TimePrecision? timePrecision = this.timePrecision;
    struct.timePrecision = timePrecision != null ? _ResultInt32Void.ok(timePrecision.index) : _ResultInt32Void.err();
    ZoneStyle? zoneStyle = this.zoneStyle;
    struct.zoneStyle = zoneStyle != null ? _ResultInt32Void.ok(zoneStyle.index) : _ResultInt32Void.err();
    DateTimeAlignment? alignment = this.alignment;
    struct.alignment = alignment != null ? _ResultInt32Void.ok(alignment.index) : _ResultInt32Void.err();
    YearStyle? yearStyle = this.yearStyle;
    struct.yearStyle = yearStyle != null ? _ResultInt32Void.ok(yearStyle.index) : _ResultInt32Void.err();
    return struct;
  }

  @override
  bool operator ==(Object other) =>
      other is DateTimeFieldSetBuilder &&
      other.length == length &&
      other.dateFields == dateFields &&
      other.timePrecision == timePrecision &&
      other.zoneStyle == zoneStyle &&
      other.alignment == alignment &&
      other.yearStyle == yearStyle;

  @override
  int get hashCode => Object.hashAll([
        length,
        dateFields,
        timePrecision,
        zoneStyle,
        alignment,
        yearStyle,
      ]);
}
