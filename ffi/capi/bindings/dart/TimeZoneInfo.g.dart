// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

/// See the [Rust documentation for `TimeZoneInfo`](https://docs.rs/icu/2.0.0/icu/time/struct.TimeZoneInfo.html) for more information.
final class TimeZoneInfo implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  TimeZoneInfo._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_icu4x_TimeZoneInfo_destroy_mv1));

  /// Creates a time zone for UTC (Coordinated Universal Time).
  ///
  /// See the [Rust documentation for `utc`](https://docs.rs/icu/2.0.0/icu/time/struct.TimeZoneInfo.html#method.utc) for more information.
  factory TimeZoneInfo.utc() {
    final result = _icu4x_TimeZoneInfo_utc_mv1();
    return TimeZoneInfo._fromFfi(result, []);
  }

  /// Creates a time zone info from parts.
  factory TimeZoneInfo(TimeZone id, {UtcOffset? offset, TimeZoneVariant? variant}) {
    final result = _icu4x_TimeZoneInfo_from_parts_mv1(id._ffi, offset?._ffi ?? ffi.Pointer.fromAddress(0), variant != null ? _ResultInt32Void.ok(variant.index) : _ResultInt32Void.err());
    return TimeZoneInfo._fromFfi(result, []);
  }

  /// See the [Rust documentation for `id`](https://docs.rs/icu/2.0.0/icu/time/struct.TimeZoneInfo.html#method.id) for more information.
  TimeZone id() {
    final result = _icu4x_TimeZoneInfo_id_mv1(_ffi);
    return TimeZone._fromFfi(result, []);
  }

  /// Sets the datetime at which to interpret the time zone
  /// for display name lookup.
  ///
  /// Notes:
  ///
  /// - If not set, the formatting datetime is used if possible.
  /// - The constraints are the same as with `ZoneNameTimestamp` in Rust.
  /// - Set to year 1000 or 9999 for a reference far in the past or future.
  ///
  /// See the [Rust documentation for `at_date_time_iso`](https://docs.rs/icu/2.0.0/icu/time/struct.TimeZoneInfo.html#method.at_date_time_iso) for more information.
  ///
  /// Additional information: [1](https://docs.rs/icu/2.0.0/icu/time/zone/struct.ZoneNameTimestamp.html)
  TimeZoneInfo atDateTimeIso(IsoDate date, Time time) {
    final result = _icu4x_TimeZoneInfo_at_date_time_iso_mv1(_ffi, date._ffi, time._ffi);
    return TimeZoneInfo._fromFfi(result, []);
  }

  /// See the [Rust documentation for `zone_name_timestamp`](https://docs.rs/icu/2.0.0/icu/time/struct.TimeZoneInfo.html#method.zone_name_timestamp) for more information.
  IsoDateTime? zoneNameDateTime() {
    final result = _icu4x_TimeZoneInfo_zone_name_date_time_mv1(_ffi);
    if (!result.isOk) {
      return null;
    }
    return IsoDateTime._fromFfi(result.union.ok);
  }

  /// See the [Rust documentation for `with_variant`](https://docs.rs/icu/2.0.0/icu/time/struct.TimeZoneInfo.html#method.with_variant) for more information.
  TimeZoneInfo withVariant(TimeZoneVariant timeVariant) {
    final result = _icu4x_TimeZoneInfo_with_variant_mv1(_ffi, timeVariant.index);
    return TimeZoneInfo._fromFfi(result, []);
  }

  /// Infers the zone variant.
  ///
  /// Requires the offset and local time to be set.
  ///
  /// See the [Rust documentation for `infer_variant`](https://docs.rs/icu/2.0.0/icu/time/struct.TimeZoneInfo.html#method.infer_variant) for more information.
  ///
  /// Additional information: [1](https://docs.rs/icu/2.0.0/icu/time/zone/enum.TimeZoneVariant.html)
  bool inferVariant(VariantOffsetsCalculator offsetCalculator) {
    final result = _icu4x_TimeZoneInfo_infer_variant_mv1(_ffi, offsetCalculator._ffi);
    return result.isOk;
  }

  /// See the [Rust documentation for `variant`](https://docs.rs/icu/2.0.0/icu/time/struct.TimeZoneInfo.html#method.variant) for more information.
  TimeZoneVariant? variant() {
    final result = _icu4x_TimeZoneInfo_variant_mv1(_ffi);
    if (!result.isOk) {
      return null;
    }
    return TimeZoneVariant.values[result.union.ok];
  }

}

@_DiplomatFfiUse('icu4x_TimeZoneInfo_destroy_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'icu4x_TimeZoneInfo_destroy_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_TimeZoneInfo_destroy_mv1(ffi.Pointer<ffi.Void> self);

@_DiplomatFfiUse('icu4x_TimeZoneInfo_utc_mv1')
@ffi.Native<ffi.Pointer<ffi.Opaque> Function()>(isLeaf: true, symbol: 'icu4x_TimeZoneInfo_utc_mv1')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _icu4x_TimeZoneInfo_utc_mv1();

@_DiplomatFfiUse('icu4x_TimeZoneInfo_from_parts_mv1')
@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, _ResultInt32Void)>(isLeaf: true, symbol: 'icu4x_TimeZoneInfo_from_parts_mv1')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _icu4x_TimeZoneInfo_from_parts_mv1(ffi.Pointer<ffi.Opaque> id, ffi.Pointer<ffi.Opaque> offset, _ResultInt32Void variant);

@_DiplomatFfiUse('icu4x_TimeZoneInfo_id_mv1')
@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_TimeZoneInfo_id_mv1')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _icu4x_TimeZoneInfo_id_mv1(ffi.Pointer<ffi.Opaque> self);

@_DiplomatFfiUse('icu4x_TimeZoneInfo_at_date_time_iso_mv1')
@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_TimeZoneInfo_at_date_time_iso_mv1')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _icu4x_TimeZoneInfo_at_date_time_iso_mv1(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Opaque> date, ffi.Pointer<ffi.Opaque> time);

@_DiplomatFfiUse('icu4x_TimeZoneInfo_zone_name_date_time_mv1')
@ffi.Native<_ResultIsoDateTimeFfiVoid Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_TimeZoneInfo_zone_name_date_time_mv1')
// ignore: non_constant_identifier_names
external _ResultIsoDateTimeFfiVoid _icu4x_TimeZoneInfo_zone_name_date_time_mv1(ffi.Pointer<ffi.Opaque> self);

@_DiplomatFfiUse('icu4x_TimeZoneInfo_with_variant_mv1')
@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Opaque>, ffi.Int32)>(isLeaf: true, symbol: 'icu4x_TimeZoneInfo_with_variant_mv1')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _icu4x_TimeZoneInfo_with_variant_mv1(ffi.Pointer<ffi.Opaque> self, int timeVariant);

@_DiplomatFfiUse('icu4x_TimeZoneInfo_infer_variant_mv1')
@ffi.Native<_ResultVoidVoid Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_TimeZoneInfo_infer_variant_mv1')
// ignore: non_constant_identifier_names
external _ResultVoidVoid _icu4x_TimeZoneInfo_infer_variant_mv1(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Opaque> offsetCalculator);

@_DiplomatFfiUse('icu4x_TimeZoneInfo_variant_mv1')
@ffi.Native<_ResultInt32Void Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_TimeZoneInfo_variant_mv1')
// ignore: non_constant_identifier_names
external _ResultInt32Void _icu4x_TimeZoneInfo_variant_mv1(ffi.Pointer<ffi.Opaque> self);

// dart format on
