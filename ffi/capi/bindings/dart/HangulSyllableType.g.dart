// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

/// See the [Rust documentation for `HangulSyllableType`](https://docs.rs/icu/2.0.0/icu/properties/props/struct.HangulSyllableType.html) for more information.
enum HangulSyllableType {
  /// See the [Rust documentation for `NotApplicable`](https://docs.rs/icu/2.0.0/icu/properties/props/struct.HangulSyllableType.html#associatedconstant.NotApplicable) for more information.
  notApplicable,
  /// See the [Rust documentation for `LeadingJamo`](https://docs.rs/icu/2.0.0/icu/properties/props/struct.HangulSyllableType.html#associatedconstant.LeadingJamo) for more information.
  leadingJamo,
  /// See the [Rust documentation for `VowelJamo`](https://docs.rs/icu/2.0.0/icu/properties/props/struct.HangulSyllableType.html#associatedconstant.VowelJamo) for more information.
  vowelJamo,
  /// See the [Rust documentation for `TrailingJamo`](https://docs.rs/icu/2.0.0/icu/properties/props/struct.HangulSyllableType.html#associatedconstant.TrailingJamo) for more information.
  trailingJamo,
  /// See the [Rust documentation for `LeadingVowelSyllable`](https://docs.rs/icu/2.0.0/icu/properties/props/struct.HangulSyllableType.html#associatedconstant.LeadingVowelSyllable) for more information.
  leadingVowelSyllable,
  /// See the [Rust documentation for `LeadingVowelTrailingSyllable`](https://docs.rs/icu/2.0.0/icu/properties/props/struct.HangulSyllableType.html#associatedconstant.LeadingVowelTrailingSyllable) for more information.
  leadingVowelTrailingSyllable;

  /// See the [Rust documentation for `for_char`](https://docs.rs/icu/2.0.0/icu/properties/props/trait.EnumeratedProperty.html#tymethod.for_char) for more information.
  static HangulSyllableType forChar(Rune ch) {
    final result = _icu4x_HangulSyllableType_for_char_mv1(ch);
    return HangulSyllableType.values[result];
  }

  /// Convert to an integer value usable with ICU4C and CodePointMapData
  ///
  /// See the [Rust documentation for `to_icu4c_value`](https://docs.rs/icu/2.0.0/icu/properties/props/struct.HangulSyllableType.html#method.to_icu4c_value) for more information.
  int toIntegerValue() {
    final result = _icu4x_HangulSyllableType_to_integer_value_mv1(index);
    return result;
  }

  /// Convert from an integer value from ICU4C or CodePointMapData
  ///
  /// See the [Rust documentation for `from_icu4c_value`](https://docs.rs/icu/2.0.0/icu/properties/props/struct.HangulSyllableType.html#method.from_icu4c_value) for more information.
  static HangulSyllableType? fromIntegerValue(int other) {
    final result = _icu4x_HangulSyllableType_from_integer_value_mv1(other);
    if (!result.isOk) {
      return null;
    }
    return HangulSyllableType.values[result.union.ok];
  }

}

@_DiplomatFfiUse('icu4x_HangulSyllableType_for_char_mv1')
@ffi.Native<ffi.Int32 Function(ffi.Uint32)>(isLeaf: true, symbol: 'icu4x_HangulSyllableType_for_char_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_HangulSyllableType_for_char_mv1(Rune ch);

@_DiplomatFfiUse('icu4x_HangulSyllableType_to_integer_value_mv1')
@ffi.Native<ffi.Uint8 Function(ffi.Int32)>(isLeaf: true, symbol: 'icu4x_HangulSyllableType_to_integer_value_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_HangulSyllableType_to_integer_value_mv1(int self);

@_DiplomatFfiUse('icu4x_HangulSyllableType_from_integer_value_mv1')
@ffi.Native<_ResultInt32Void Function(ffi.Uint8)>(isLeaf: true, symbol: 'icu4x_HangulSyllableType_from_integer_value_mv1')
// ignore: non_constant_identifier_names
external _ResultInt32Void _icu4x_HangulSyllableType_from_integer_value_mv1(int other);

// dart format on
