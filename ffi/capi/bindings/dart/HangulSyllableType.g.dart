// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

/// See the [Rust documentation for `HangulSyllableType`](https://docs.rs/icu/latest/icu/properties/props/struct.HangulSyllableType.html) for more information.
enum HangulSyllableType {
  /// See the [Rust documentation for `NotApplicable`](https://docs.rs/icu/latest/icu/properties/props/enum.HangulSyllableType.html#variant.NotApplicable) for more information.
  notApplicable,

  /// See the [Rust documentation for `LeadingJamo`](https://docs.rs/icu/latest/icu/properties/props/enum.HangulSyllableType.html#variant.LeadingJamo) for more information.
  leadingJamo,

  /// See the [Rust documentation for `VowelJamo`](https://docs.rs/icu/latest/icu/properties/props/enum.HangulSyllableType.html#variant.VowelJamo) for more information.
  vowelJamo,

  /// See the [Rust documentation for `TrailingJamo`](https://docs.rs/icu/latest/icu/properties/props/enum.HangulSyllableType.html#variant.TrailingJamo) for more information.
  trailingJamo,

  /// See the [Rust documentation for `LeadingVowelSyllable`](https://docs.rs/icu/latest/icu/properties/props/enum.HangulSyllableType.html#variant.LeadingVowelSyllable) for more information.
  leadingVowelSyllable,

  /// See the [Rust documentation for `LeadingVowelTrailingSyllable`](https://docs.rs/icu/latest/icu/properties/props/enum.HangulSyllableType.html#variant.LeadingVowelTrailingSyllable) for more information.
  leadingVowelTrailingSyllable;

  int toInteger() {
    final result = _icu4x_HangulSyllableType_to_integer_mv1(index);
    return result;
  }

  static HangulSyllableType? fromInteger(int other) {
    final result = _icu4x_HangulSyllableType_from_integer_mv1(other);
    if (!result.isOk) {
      return null;
    }
    return HangulSyllableType.values[result.union.ok];
  }
}

@_DiplomatFfiUse('icu4x_HangulSyllableType_to_integer_mv1')
@ffi.Native<ffi.Uint8 Function(ffi.Int32)>(isLeaf: true, symbol: 'icu4x_HangulSyllableType_to_integer_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_HangulSyllableType_to_integer_mv1(int self);

@_DiplomatFfiUse('icu4x_HangulSyllableType_from_integer_mv1')
@ffi.Native<_ResultInt32Void Function(ffi.Uint8)>(isLeaf: true, symbol: 'icu4x_HangulSyllableType_from_integer_mv1')
// ignore: non_constant_identifier_names
external _ResultInt32Void _icu4x_HangulSyllableType_from_integer_mv1(int other);

// dart format on
