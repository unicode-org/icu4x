// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// A type capable of looking up a property value from a string name.
///
/// See the [Rust documentation for `PropertyValueNameToEnumMapper`](https://docs.rs/icu/latest/icu/properties/names/struct.PropertyValueNameToEnumMapper.html) for more information.
///
/// See the [Rust documentation for `PropertyValueNameToEnumMapperBorrowed`](https://docs.rs/icu/latest/icu/properties/names/struct.PropertyValueNameToEnumMapperBorrowed.html) for more information.
final class PropertyValueNameToEnumMapper implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  PropertyValueNameToEnumMapper._(this._underlying) {
    _finalizer.attach(this, _underlying.cast());
  }

  static final _finalizer = ffi.NativeFinalizer(_capi('ICU4XPropertyValueNameToEnumMapper_destroy'));

  /// Get the property value matching the given name, using strict matching
  ///
  /// Returns -1 if the name is unknown for this property
  ///
  /// See the [Rust documentation for `get_strict`](https://docs.rs/icu/latest/icu/properties/names/struct.PropertyValueNameToEnumMapperBorrowed.html#method.get_strict) for more information.
  int getStrict(String name) {
    final temp = ffi2.Arena();
    final nameView = name.utf8View;
    final result = _ICU4XPropertyValueNameToEnumMapper_get_strict(_underlying, nameView.pointer(temp), nameView.length);
    temp.releaseAll();
    return result;
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPropertyValueNameToEnumMapper_get_strict =
    _capi<ffi.NativeFunction<ffi.Int16 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size)>>('ICU4XPropertyValueNameToEnumMapper_get_strict')
      .asFunction<int Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, int)>(isLeaf: true);

  /// Get the property value matching the given name, using loose matching
  ///
  /// Returns -1 if the name is unknown for this property
  ///
  /// See the [Rust documentation for `get_loose`](https://docs.rs/icu/latest/icu/properties/names/struct.PropertyValueNameToEnumMapperBorrowed.html#method.get_loose) for more information.
  int getLoose(String name) {
    final temp = ffi2.Arena();
    final nameView = name.utf8View;
    final result = _ICU4XPropertyValueNameToEnumMapper_get_loose(_underlying, nameView.pointer(temp), nameView.length);
    temp.releaseAll();
    return result;
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPropertyValueNameToEnumMapper_get_loose =
    _capi<ffi.NativeFunction<ffi.Int16 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size)>>('ICU4XPropertyValueNameToEnumMapper_get_loose')
      .asFunction<int Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, int)>(isLeaf: true);

  /// See the [Rust documentation for `get_name_to_enum_mapper`](https://docs.rs/icu/latest/icu/properties/struct.GeneralCategory.html#method.get_name_to_enum_mapper) for more information.
  ///
  /// Throws [Error] on failure.
  factory PropertyValueNameToEnumMapper.loadGeneralCategory(DataProvider provider) {
    final result = _ICU4XPropertyValueNameToEnumMapper_load_general_category(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return PropertyValueNameToEnumMapper._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPropertyValueNameToEnumMapper_load_general_category =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XPropertyValueNameToEnumMapper_load_general_category')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// See the [Rust documentation for `name_to_enum_mapper`](https://docs.rs/icu/latest/icu/properties/struct.BidiClass.html#method.name_to_enum_mapper) for more information.
  ///
  /// Throws [Error] on failure.
  factory PropertyValueNameToEnumMapper.loadBidiClass(DataProvider provider) {
    final result = _ICU4XPropertyValueNameToEnumMapper_load_bidi_class(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return PropertyValueNameToEnumMapper._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPropertyValueNameToEnumMapper_load_bidi_class =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XPropertyValueNameToEnumMapper_load_bidi_class')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// See the [Rust documentation for `name_to_enum_mapper`](https://docs.rs/icu/latest/icu/properties/struct.EastAsianWidth.html#method.name_to_enum_mapper) for more information.
  ///
  /// Throws [Error] on failure.
  factory PropertyValueNameToEnumMapper.loadEastAsianWidth(DataProvider provider) {
    final result = _ICU4XPropertyValueNameToEnumMapper_load_east_asian_width(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return PropertyValueNameToEnumMapper._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPropertyValueNameToEnumMapper_load_east_asian_width =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XPropertyValueNameToEnumMapper_load_east_asian_width')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// See the [Rust documentation for `name_to_enum_mapper`](https://docs.rs/icu/latest/icu/properties/struct.IndicSyllabicCategory.html#method.name_to_enum_mapper) for more information.
  ///
  /// Throws [Error] on failure.
  factory PropertyValueNameToEnumMapper.loadIndicSyllabicCategory(DataProvider provider) {
    final result = _ICU4XPropertyValueNameToEnumMapper_load_indic_syllabic_category(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return PropertyValueNameToEnumMapper._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPropertyValueNameToEnumMapper_load_indic_syllabic_category =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XPropertyValueNameToEnumMapper_load_indic_syllabic_category')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// See the [Rust documentation for `name_to_enum_mapper`](https://docs.rs/icu/latest/icu/properties/struct.LineBreak.html#method.name_to_enum_mapper) for more information.
  ///
  /// Throws [Error] on failure.
  factory PropertyValueNameToEnumMapper.loadLineBreak(DataProvider provider) {
    final result = _ICU4XPropertyValueNameToEnumMapper_load_line_break(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return PropertyValueNameToEnumMapper._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPropertyValueNameToEnumMapper_load_line_break =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XPropertyValueNameToEnumMapper_load_line_break')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// See the [Rust documentation for `get_name_to_enum_mapper`](https://docs.rs/icu/latest/icu/properties/struct.GraphemeClusterBreak.html#method.get_name_to_enum_mapper) for more information.
  ///
  /// Throws [Error] on failure.
  factory PropertyValueNameToEnumMapper.loadGraphemeClusterBreak(DataProvider provider) {
    final result = _ICU4XPropertyValueNameToEnumMapper_load_grapheme_cluster_break(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return PropertyValueNameToEnumMapper._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPropertyValueNameToEnumMapper_load_grapheme_cluster_break =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XPropertyValueNameToEnumMapper_load_grapheme_cluster_break')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// See the [Rust documentation for `name_to_enum_mapper`](https://docs.rs/icu/latest/icu/properties/struct.WordBreak.html#method.name_to_enum_mapper) for more information.
  ///
  /// Throws [Error] on failure.
  factory PropertyValueNameToEnumMapper.loadWordBreak(DataProvider provider) {
    final result = _ICU4XPropertyValueNameToEnumMapper_load_word_break(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return PropertyValueNameToEnumMapper._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPropertyValueNameToEnumMapper_load_word_break =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XPropertyValueNameToEnumMapper_load_word_break')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// See the [Rust documentation for `name_to_enum_mapper`](https://docs.rs/icu/latest/icu/properties/struct.SentenceBreak.html#method.name_to_enum_mapper) for more information.
  ///
  /// Throws [Error] on failure.
  factory PropertyValueNameToEnumMapper.loadSentenceBreak(DataProvider provider) {
    final result = _ICU4XPropertyValueNameToEnumMapper_load_sentence_break(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return PropertyValueNameToEnumMapper._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPropertyValueNameToEnumMapper_load_sentence_break =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XPropertyValueNameToEnumMapper_load_sentence_break')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// See the [Rust documentation for `name_to_enum_mapper`](https://docs.rs/icu/latest/icu/properties/struct.Script.html#method.name_to_enum_mapper) for more information.
  ///
  /// Throws [Error] on failure.
  factory PropertyValueNameToEnumMapper.loadScript(DataProvider provider) {
    final result = _ICU4XPropertyValueNameToEnumMapper_load_script(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return PropertyValueNameToEnumMapper._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPropertyValueNameToEnumMapper_load_script =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XPropertyValueNameToEnumMapper_load_script')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);
}
