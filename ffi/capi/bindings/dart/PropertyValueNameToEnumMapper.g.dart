// generated by diplomat-tool

part of 'lib.g.dart';

/// A type capable of looking up a property value from a string name.
///
/// See the [Rust documentation for `PropertyParser`](https://docs.rs/icu/latest/icu/properties/struct.PropertyParser.html) for more information.
///
/// See the [Rust documentation for `PropertyParserBorrowed`](https://docs.rs/icu/latest/icu/properties/struct.PropertyParserBorrowed.html) for more information.
///
/// See the [Rust documentation for `new`](https://docs.rs/icu/latest/icu/properties/struct.PropertyParser.html#method.new) for more information.
final class PropertyValueNameToEnumMapper implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  PropertyValueNameToEnumMapper._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_icu4x_PropertyValueNameToEnumMapper_destroy_mv1));

  /// Get the property value matching the given name, using strict matching
  ///
  /// Returns -1 if the name is unknown for this property
  ///
  /// See the [Rust documentation for `get_strict`](https://docs.rs/icu/latest/icu/properties/struct.PropertyParserBorrowed.html#method.get_strict) for more information.
  int getStrict(String name) {
    final temp = _FinalizedArena();
    final result = _icu4x_PropertyValueNameToEnumMapper_get_strict_mv1(_ffi, name._utf8AllocIn(temp.arena));
    return result;
  }

  /// Get the property value matching the given name, using loose matching
  ///
  /// Returns -1 if the name is unknown for this property
  ///
  /// See the [Rust documentation for `get_loose`](https://docs.rs/icu/latest/icu/properties/struct.PropertyParserBorrowed.html#method.get_loose) for more information.
  int getLoose(String name) {
    final temp = _FinalizedArena();
    final result = _icu4x_PropertyValueNameToEnumMapper_get_loose_mv1(_ffi, name._utf8AllocIn(temp.arena));
    return result;
  }

  /// See the [Rust documentation for `GeneralCategory`](https://docs.rs/icu_properties/latest/icu_properties/props/enum.GeneralCategory.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory PropertyValueNameToEnumMapper.generalCategory(DataProvider provider) {
    final result = _icu4x_PropertyValueNameToEnumMapper_load_general_category_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return PropertyValueNameToEnumMapper._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `HangulSyllableType`](https://docs.rs/icu_properties/latest/icu_properties/props/struct.HangulSyllableType.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory PropertyValueNameToEnumMapper.hangulSyllableType(DataProvider provider) {
    final result = _icu4x_PropertyValueNameToEnumMapper_load_hangul_syllable_type_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return PropertyValueNameToEnumMapper._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `EastAsianWidth`](https://docs.rs/icu_properties/latest/icu_properties/props/struct.EastAsianWidth.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory PropertyValueNameToEnumMapper.eastAsianWidth(DataProvider provider) {
    final result = _icu4x_PropertyValueNameToEnumMapper_load_east_asian_width_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return PropertyValueNameToEnumMapper._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `BidiClass`](https://docs.rs/icu_properties/latest/icu_properties/props/struct.BidiClass.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory PropertyValueNameToEnumMapper.bidiClass(DataProvider provider) {
    final result = _icu4x_PropertyValueNameToEnumMapper_load_bidi_class_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return PropertyValueNameToEnumMapper._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `IndicSyllabicCategory`](https://docs.rs/icu_properties/latest/icu_properties/props/struct.IndicSyllabicCategory.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory PropertyValueNameToEnumMapper.indicSyllabicCategory(DataProvider provider) {
    final result = _icu4x_PropertyValueNameToEnumMapper_load_indic_syllabic_category_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return PropertyValueNameToEnumMapper._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `LineBreak`](https://docs.rs/icu_properties/latest/icu_properties/props/struct.LineBreak.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory PropertyValueNameToEnumMapper.lineBreak(DataProvider provider) {
    final result = _icu4x_PropertyValueNameToEnumMapper_load_line_break_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return PropertyValueNameToEnumMapper._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `GraphemeClusterBreak`](https://docs.rs/icu_properties/latest/icu_properties/props/struct.GraphemeClusterBreak.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory PropertyValueNameToEnumMapper.graphemeClusterBreak(DataProvider provider) {
    final result = _icu4x_PropertyValueNameToEnumMapper_load_grapheme_cluster_break_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return PropertyValueNameToEnumMapper._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `WordBreak`](https://docs.rs/icu_properties/latest/icu_properties/props/struct.WordBreak.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory PropertyValueNameToEnumMapper.wordBreak(DataProvider provider) {
    final result = _icu4x_PropertyValueNameToEnumMapper_load_word_break_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return PropertyValueNameToEnumMapper._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `SentenceBreak`](https://docs.rs/icu_properties/latest/icu_properties/props/struct.SentenceBreak.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory PropertyValueNameToEnumMapper.sentenceBreak(DataProvider provider) {
    final result = _icu4x_PropertyValueNameToEnumMapper_load_sentence_break_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return PropertyValueNameToEnumMapper._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Script`](https://docs.rs/icu_properties/latest/icu_properties/props/struct.Script.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory PropertyValueNameToEnumMapper.script(DataProvider provider) {
    final result = _icu4x_PropertyValueNameToEnumMapper_load_script_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return PropertyValueNameToEnumMapper._fromFfi(result.union.ok, []);
  }
}

@meta.ResourceIdentifier('icu4x_PropertyValueNameToEnumMapper_destroy_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'icu4x_PropertyValueNameToEnumMapper_destroy_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_PropertyValueNameToEnumMapper_destroy_mv1(ffi.Pointer<ffi.Void> self);

@meta.ResourceIdentifier('icu4x_PropertyValueNameToEnumMapper_get_strict_mv1')
@ffi.Native<ffi.Int16 Function(ffi.Pointer<ffi.Opaque>, _SliceUtf8)>(isLeaf: true, symbol: 'icu4x_PropertyValueNameToEnumMapper_get_strict_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_PropertyValueNameToEnumMapper_get_strict_mv1(ffi.Pointer<ffi.Opaque> self, _SliceUtf8 name);

@meta.ResourceIdentifier('icu4x_PropertyValueNameToEnumMapper_get_loose_mv1')
@ffi.Native<ffi.Int16 Function(ffi.Pointer<ffi.Opaque>, _SliceUtf8)>(isLeaf: true, symbol: 'icu4x_PropertyValueNameToEnumMapper_get_loose_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_PropertyValueNameToEnumMapper_get_loose_mv1(ffi.Pointer<ffi.Opaque> self, _SliceUtf8 name);

@meta.ResourceIdentifier('icu4x_PropertyValueNameToEnumMapper_load_general_category_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_PropertyValueNameToEnumMapper_load_general_category_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_PropertyValueNameToEnumMapper_load_general_category_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('icu4x_PropertyValueNameToEnumMapper_load_hangul_syllable_type_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_PropertyValueNameToEnumMapper_load_hangul_syllable_type_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_PropertyValueNameToEnumMapper_load_hangul_syllable_type_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('icu4x_PropertyValueNameToEnumMapper_load_east_asian_width_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_PropertyValueNameToEnumMapper_load_east_asian_width_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_PropertyValueNameToEnumMapper_load_east_asian_width_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('icu4x_PropertyValueNameToEnumMapper_load_bidi_class_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_PropertyValueNameToEnumMapper_load_bidi_class_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_PropertyValueNameToEnumMapper_load_bidi_class_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('icu4x_PropertyValueNameToEnumMapper_load_indic_syllabic_category_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_PropertyValueNameToEnumMapper_load_indic_syllabic_category_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_PropertyValueNameToEnumMapper_load_indic_syllabic_category_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('icu4x_PropertyValueNameToEnumMapper_load_line_break_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_PropertyValueNameToEnumMapper_load_line_break_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_PropertyValueNameToEnumMapper_load_line_break_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('icu4x_PropertyValueNameToEnumMapper_load_grapheme_cluster_break_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_PropertyValueNameToEnumMapper_load_grapheme_cluster_break_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_PropertyValueNameToEnumMapper_load_grapheme_cluster_break_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('icu4x_PropertyValueNameToEnumMapper_load_word_break_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_PropertyValueNameToEnumMapper_load_word_break_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_PropertyValueNameToEnumMapper_load_word_break_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('icu4x_PropertyValueNameToEnumMapper_load_sentence_break_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_PropertyValueNameToEnumMapper_load_sentence_break_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_PropertyValueNameToEnumMapper_load_sentence_break_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('icu4x_PropertyValueNameToEnumMapper_load_script_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_PropertyValueNameToEnumMapper_load_script_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_PropertyValueNameToEnumMapper_load_script_mv1(ffi.Pointer<ffi.Opaque> provider);
