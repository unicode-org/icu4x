// generated by diplomat-tool

part of 'lib.g.dart';

/// An ICU4X Unicode Set Property object, capable of querying whether a code point is contained in a set based on a Unicode property.
///
/// See the [Rust documentation for `properties`](https://docs.rs/icu/latest/icu/properties/index.html) for more information.
///
/// See the [Rust documentation for `UnicodeSetData`](https://docs.rs/icu/latest/icu/properties/sets/struct.UnicodeSetData.html) for more information.
///
/// See the [Rust documentation for `UnicodeSetDataBorrowed`](https://docs.rs/icu/latest/icu/properties/sets/struct.UnicodeSetDataBorrowed.html) for more information.
final class UnicodeSetData implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  UnicodeSetData._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_icu4x_UnicodeSetData_destroy_mv1));

  /// Checks whether the string is in the set.
  ///
  /// See the [Rust documentation for `contains`](https://docs.rs/icu/latest/icu/properties/sets/struct.UnicodeSetDataBorrowed.html#method.contains) for more information.
  bool contains(String s) {
    final temp = ffi2.Arena();
    final sView = s.utf8View;
    final result = _icu4x_UnicodeSetData_contains_mv1(_ffi, sView.allocIn(temp), sView.length);
    temp.releaseAll();
    return result;
  }

  /// Checks whether the code point is in the set.
  ///
  /// See the [Rust documentation for `contains_char`](https://docs.rs/icu/latest/icu/properties/sets/struct.UnicodeSetDataBorrowed.html#method.contains_char) for more information.
  bool containsChar(Rune cp) {
    final result = _icu4x_UnicodeSetData_contains_char_mv1(_ffi, cp);
    return result;
  }

  /// See the [Rust documentation for `basic_emoji`](https://docs.rs/icu/latest/icu/properties/sets/fn.basic_emoji.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory UnicodeSetData.basicEmoji(DataProvider provider) {
    final result = _icu4x_UnicodeSetData_load_basic_emoji_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return UnicodeSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `exemplars_main`](https://docs.rs/icu/latest/icu/properties/exemplar_chars/fn.exemplars_main.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory UnicodeSetData.exemplarsMain(DataProvider provider, Locale locale) {
    final result = _icu4x_UnicodeSetData_load_exemplars_main_mv1(provider._ffi, locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return UnicodeSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `exemplars_auxiliary`](https://docs.rs/icu/latest/icu/properties/exemplar_chars/fn.exemplars_auxiliary.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory UnicodeSetData.exemplarsAuxiliary(DataProvider provider, Locale locale) {
    final result = _icu4x_UnicodeSetData_load_exemplars_auxiliary_mv1(provider._ffi, locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return UnicodeSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `exemplars_punctuation`](https://docs.rs/icu/latest/icu/properties/exemplar_chars/fn.exemplars_punctuation.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory UnicodeSetData.exemplarsPunctuation(DataProvider provider, Locale locale) {
    final result = _icu4x_UnicodeSetData_load_exemplars_punctuation_mv1(provider._ffi, locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return UnicodeSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `exemplars_numbers`](https://docs.rs/icu/latest/icu/properties/exemplar_chars/fn.exemplars_numbers.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory UnicodeSetData.exemplarsNumbers(DataProvider provider, Locale locale) {
    final result = _icu4x_UnicodeSetData_load_exemplars_numbers_mv1(provider._ffi, locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return UnicodeSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `exemplars_index`](https://docs.rs/icu/latest/icu/properties/exemplar_chars/fn.exemplars_index.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory UnicodeSetData.exemplarsIndex(DataProvider provider, Locale locale) {
    final result = _icu4x_UnicodeSetData_load_exemplars_index_mv1(provider._ffi, locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return UnicodeSetData._fromFfi(result.union.ok, []);
  }
}

@meta.ResourceIdentifier('icu4x_UnicodeSetData_destroy_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'icu4x_UnicodeSetData_destroy_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_UnicodeSetData_destroy_mv1(ffi.Pointer<ffi.Void> self);

@meta.ResourceIdentifier('icu4x_UnicodeSetData_contains_mv1')
@ffi.Native<ffi.Bool Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size)>(isLeaf: true, symbol: 'icu4x_UnicodeSetData_contains_mv1')
// ignore: non_constant_identifier_names
external bool _icu4x_UnicodeSetData_contains_mv1(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Uint8> sData, int sLength);

@meta.ResourceIdentifier('icu4x_UnicodeSetData_contains_char_mv1')
@ffi.Native<ffi.Bool Function(ffi.Pointer<ffi.Opaque>, ffi.Uint32)>(isLeaf: true, symbol: 'icu4x_UnicodeSetData_contains_char_mv1')
// ignore: non_constant_identifier_names
external bool _icu4x_UnicodeSetData_contains_char_mv1(ffi.Pointer<ffi.Opaque> self, Rune cp);

@meta.ResourceIdentifier('icu4x_UnicodeSetData_load_basic_emoji_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_UnicodeSetData_load_basic_emoji_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_UnicodeSetData_load_basic_emoji_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('icu4x_UnicodeSetData_load_exemplars_main_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_UnicodeSetData_load_exemplars_main_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_UnicodeSetData_load_exemplars_main_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale);

@meta.ResourceIdentifier('icu4x_UnicodeSetData_load_exemplars_auxiliary_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_UnicodeSetData_load_exemplars_auxiliary_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_UnicodeSetData_load_exemplars_auxiliary_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale);

@meta.ResourceIdentifier('icu4x_UnicodeSetData_load_exemplars_punctuation_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_UnicodeSetData_load_exemplars_punctuation_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_UnicodeSetData_load_exemplars_punctuation_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale);

@meta.ResourceIdentifier('icu4x_UnicodeSetData_load_exemplars_numbers_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_UnicodeSetData_load_exemplars_numbers_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_UnicodeSetData_load_exemplars_numbers_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale);

@meta.ResourceIdentifier('icu4x_UnicodeSetData_load_exemplars_index_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_UnicodeSetData_load_exemplars_index_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_UnicodeSetData_load_exemplars_index_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale);
