// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

/// See the [Rust documentation for `CaseMapCloser`](https://docs.rs/icu/2.0.0/icu/casemap/struct.CaseMapCloser.html) for more information.
final class CaseMapCloser implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  CaseMapCloser._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_icu4x_CaseMapCloser_destroy_mv1));

  /// Construct a new CaseMapCloser instance using compiled data.
  ///
  /// See the [Rust documentation for `new`](https://docs.rs/icu/2.0.0/icu/casemap/struct.CaseMapCloser.html#method.new) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CaseMapCloser() {
    final result = _icu4x_CaseMapCloser_create_mv1();
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CaseMapCloser._fromFfi(result.union.ok, []);
  }

  /// Construct a new CaseMapCloser instance using a particular data source.
  ///
  /// See the [Rust documentation for `new`](https://docs.rs/icu/2.0.0/icu/casemap/struct.CaseMapCloser.html#method.new) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CaseMapCloser.withProvider(DataProvider provider) {
    final result = _icu4x_CaseMapCloser_create_with_provider_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CaseMapCloser._fromFfi(result.union.ok, []);
  }

  /// Adds all simple case mappings and the full case folding for `c` to `builder`.
  /// Also adds special case closure mappings.
  ///
  /// See the [Rust documentation for `add_case_closure_to`](https://docs.rs/icu/2.0.0/icu/casemap/struct.CaseMapCloserBorrowed.html#method.add_case_closure_to) for more information.
  void addCaseClosureTo(Rune c, CodePointSetBuilder builder) {
    _icu4x_CaseMapCloser_add_case_closure_to_mv1(_ffi, c, builder._ffi);
  }

  /// Finds all characters and strings which may casemap to `s` as their full case folding string
  /// and adds them to the set.
  ///
  /// Returns true if the string was found
  ///
  /// See the [Rust documentation for `add_string_case_closure_to`](https://docs.rs/icu/2.0.0/icu/casemap/struct.CaseMapCloserBorrowed.html#method.add_string_case_closure_to) for more information.
  bool addStringCaseClosureTo(String s, CodePointSetBuilder builder) {
    final temp = _FinalizedArena();
    final result = _icu4x_CaseMapCloser_add_string_case_closure_to_mv1(_ffi, s._utf8AllocIn(temp.arena), builder._ffi);
    return result;
  }

}

@_DiplomatFfiUse('icu4x_CaseMapCloser_destroy_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'icu4x_CaseMapCloser_destroy_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_CaseMapCloser_destroy_mv1(ffi.Pointer<ffi.Void> self);

@_DiplomatFfiUse('icu4x_CaseMapCloser_create_mv1')
@ffi.Native<_ResultOpaqueInt32 Function()>(isLeaf: true, symbol: 'icu4x_CaseMapCloser_create_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CaseMapCloser_create_mv1();

@_DiplomatFfiUse('icu4x_CaseMapCloser_create_with_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CaseMapCloser_create_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CaseMapCloser_create_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider);

@_DiplomatFfiUse('icu4x_CaseMapCloser_add_case_closure_to_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Uint32, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CaseMapCloser_add_case_closure_to_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_CaseMapCloser_add_case_closure_to_mv1(ffi.Pointer<ffi.Opaque> self, Rune c, ffi.Pointer<ffi.Opaque> builder);

@_DiplomatFfiUse('icu4x_CaseMapCloser_add_string_case_closure_to_mv1')
@ffi.Native<ffi.Bool Function(ffi.Pointer<ffi.Opaque>, _SliceUtf8, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CaseMapCloser_add_string_case_closure_to_mv1')
// ignore: non_constant_identifier_names
external bool _icu4x_CaseMapCloser_add_string_case_closure_to_mv1(ffi.Pointer<ffi.Opaque> self, _SliceUtf8 s, ffi.Pointer<ffi.Opaque> builder);

// dart format on
