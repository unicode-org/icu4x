// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// An object allowing control over the logging used
final class Logger implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  Logger._(this._underlying, bool isOwned) {
    if (isOwned) {
      _finalizer.attach(this, _underlying.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_ICU4XLogger_destroy));

  /// Initialize the logger using `simple_logger`
  ///
  /// Requires the `simple_logger` Cargo feature.
  ///
  /// Returns `false` if there was already a logger set.
  static bool initSimpleLogger() {
    final result = _ICU4XLogger_init_simple_logger();
    return result;
  }

  /// Deprecated: since ICU4X 1.4, this now happens automatically if the `log` feature is enabled.
  static bool initConsoleLogger() {
    final result = _ICU4XLogger_init_console_logger();
    return result;
  }
}

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'ICU4XLogger_destroy')
// ignore: non_constant_identifier_names
external void _ICU4XLogger_destroy(ffi.Pointer<ffi.Void> self);

@ffi.Native<ffi.Bool Function()>(isLeaf: true, symbol: 'ICU4XLogger_init_simple_logger')
// ignore: non_constant_identifier_names
external bool _ICU4XLogger_init_simple_logger();

@ffi.Native<ffi.Bool Function()>(isLeaf: true, symbol: 'ICU4XLogger_init_console_logger')
// ignore: non_constant_identifier_names
external bool _ICU4XLogger_init_console_logger();
