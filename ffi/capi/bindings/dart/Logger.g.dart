// generated by diplomat-tool

part of 'lib.g.dart';

/// An object allowing control over the logging used
final class Logger implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  Logger._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_ICU4XLogger_destroy));

  /// Initialize the logger using `simple_logger`
  ///
  /// Requires the `simple_logger` Cargo feature.
  ///
  /// Returns `false` if there was already a logger set.
  static bool initSimpleLogger() {
    final result = _ICU4XLogger_init_simple_logger();
    return result;
  }
}

@meta.ResourceIdentifier('ICU4XLogger_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'ICU4XLogger_destroy')
// ignore: non_constant_identifier_names
external void _ICU4XLogger_destroy(ffi.Pointer<ffi.Void> self);

@meta.ResourceIdentifier('ICU4XLogger_init_simple_logger')
@ffi.Native<ffi.Bool Function()>(isLeaf: true, symbol: 'ICU4XLogger_init_simple_logger')
// ignore: non_constant_identifier_names
external bool _ICU4XLogger_init_simple_logger();
