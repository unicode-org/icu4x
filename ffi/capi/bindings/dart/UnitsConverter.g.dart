// generated by diplomat-tool

part of 'lib.g.dart';

/// An ICU4X Units Converter object, capable of converting between two [`MeasureUnit`]s.
///
/// See the [Rust documentation for `UnitsConverter`](https://docs.rs/icu/latest/icu/experimental/units/converter/struct.UnitsConverter.html) for more information.
final class UnitsConverter implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  UnitsConverter._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_ICU4XUnitsConverter_destroy));

  /// Converts the input value in float from the input unit to the output unit.
  /// NOTE:
  /// The conversion using float is not as accurate as the conversion using ratios.
  double convertF64(double input) {
    final result = _ICU4XUnitsConverter_convert_f64(_ffi, input);
    return result;
  }
}

@meta.ResourceIdentifier('ICU4XUnitsConverter_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'ICU4XUnitsConverter_destroy')
// ignore: non_constant_identifier_names
external void _ICU4XUnitsConverter_destroy(ffi.Pointer<ffi.Void> self);

@meta.ResourceIdentifier('ICU4XUnitsConverter_convert_f64')
@ffi.Native<ffi.Double Function(ffi.Pointer<ffi.Opaque>, ffi.Double)>(isLeaf: true, symbol: 'ICU4XUnitsConverter_convert_f64')
// ignore: non_constant_identifier_names
external double _ICU4XUnitsConverter_convert_f64(ffi.Pointer<ffi.Opaque> self, double input);
