// generated by diplomat-tool

part of 'lib.g.dart';

/// An object capable of mapping from a BCP-47 time zone ID to an IANA ID.
///
/// See the [Rust documentation for `IanaBcp47RoundTripMapper`](https://docs.rs/icu/latest/icu/timezone/struct.IanaBcp47RoundTripMapper.html) for more information.
final class Bcp47ToIanaMapper implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  Bcp47ToIanaMapper._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_ICU4XBcp47ToIanaMapper_destroy));

  /// See the [Rust documentation for `new`](https://docs.rs/icu/latest/icu/timezone/struct.IanaBcp47RoundTripMapper.html#method.new) for more information.
  ///
  /// Throws [Error] on failure.
  factory Bcp47ToIanaMapper(DataProvider provider) {
    final result = _ICU4XBcp47ToIanaMapper_create(provider._ffi);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return Bcp47ToIanaMapper._fromFfi(result.union.ok, []);
  }

  /// Writes out the canonical IANA time zone ID corresponding to the given BCP-47 ID.
  ///
  /// See the [Rust documentation for `bcp47_to_iana`](https://docs.rs/icu/latest/icu/timezone/struct.IanaBcp47RoundTripMapperBorrowed.html#method.bcp47_to_iana) for more information.
  ///
  /// Throws [Error] on failure.
  String operator [](String value) {
    final temp = ffi2.Arena();
    final valueView = value.utf8View;
    final writeable = _Writeable();
    final result = _ICU4XBcp47ToIanaMapper_get(_ffi, valueView.allocIn(temp), valueView.length, writeable._ffi);
    temp.releaseAll();
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return writeable.finalize();
  }
}

@meta.ResourceIdentifier('ICU4XBcp47ToIanaMapper_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'ICU4XBcp47ToIanaMapper_destroy')
// ignore: non_constant_identifier_names
external void _ICU4XBcp47ToIanaMapper_destroy(ffi.Pointer<ffi.Void> self);

@meta.ResourceIdentifier('ICU4XBcp47ToIanaMapper_create')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XBcp47ToIanaMapper_create')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XBcp47ToIanaMapper_create(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('ICU4XBcp47ToIanaMapper_get')
@ffi.Native<_ResultVoidInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XBcp47ToIanaMapper_get')
// ignore: non_constant_identifier_names
external _ResultVoidInt32 _ICU4XBcp47ToIanaMapper_get(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Uint8> valueData, int valueLength, ffi.Pointer<ffi.Opaque> writeable);
