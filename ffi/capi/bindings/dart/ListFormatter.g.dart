// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

/// See the [Rust documentation for `ListFormatter`](https://docs.rs/icu/2.0.0/icu/list/struct.ListFormatter.html) for more information.
final class ListFormatter implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  ListFormatter._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_icu4x_ListFormatter_destroy_mv1));

  /// Construct a new ListFormatter instance for And patterns from compiled data.
  ///
  /// See the [Rust documentation for `try_new_and`](https://docs.rs/icu/2.0.0/icu/list/struct.ListFormatter.html#method.try_new_and) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ListFormatter.andWithLength(Locale locale, ListLength length) {
    final result = _icu4x_ListFormatter_create_and_with_length_mv1(locale._ffi, length.index);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ListFormatter._fromFfi(result.union.ok, []);
  }

  /// Construct a new ListFormatter instance for And patterns
  ///
  /// See the [Rust documentation for `try_new_and`](https://docs.rs/icu/2.0.0/icu/list/struct.ListFormatter.html#method.try_new_and) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ListFormatter.andWithLengthAndProvider(DataProvider provider, Locale locale, ListLength length) {
    final result = _icu4x_ListFormatter_create_and_with_length_and_provider_mv1(provider._ffi, locale._ffi, length.index);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ListFormatter._fromFfi(result.union.ok, []);
  }

  /// Construct a new ListFormatter instance for And patterns from compiled data.
  ///
  /// See the [Rust documentation for `try_new_or`](https://docs.rs/icu/2.0.0/icu/list/struct.ListFormatter.html#method.try_new_or) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ListFormatter.orWithLength(Locale locale, ListLength length) {
    final result = _icu4x_ListFormatter_create_or_with_length_mv1(locale._ffi, length.index);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ListFormatter._fromFfi(result.union.ok, []);
  }

  /// Construct a new ListFormatter instance for And patterns
  ///
  /// See the [Rust documentation for `try_new_or`](https://docs.rs/icu/2.0.0/icu/list/struct.ListFormatter.html#method.try_new_or) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ListFormatter.orWithLengthAndProvider(DataProvider provider, Locale locale, ListLength length) {
    final result = _icu4x_ListFormatter_create_or_with_length_and_provider_mv1(provider._ffi, locale._ffi, length.index);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ListFormatter._fromFfi(result.union.ok, []);
  }

  /// Construct a new ListFormatter instance for And patterns from compiled data.
  ///
  /// See the [Rust documentation for `try_new_unit`](https://docs.rs/icu/2.0.0/icu/list/struct.ListFormatter.html#method.try_new_unit) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ListFormatter.unitWithLength(Locale locale, ListLength length) {
    final result = _icu4x_ListFormatter_create_unit_with_length_mv1(locale._ffi, length.index);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ListFormatter._fromFfi(result.union.ok, []);
  }

  /// Construct a new ListFormatter instance for And patterns
  ///
  /// See the [Rust documentation for `try_new_unit`](https://docs.rs/icu/2.0.0/icu/list/struct.ListFormatter.html#method.try_new_unit) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ListFormatter.unitWithLengthAndProvider(DataProvider provider, Locale locale, ListLength length) {
    final result = _icu4x_ListFormatter_create_unit_with_length_and_provider_mv1(provider._ffi, locale._ffi, length.index);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ListFormatter._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `format`](https://docs.rs/icu/2.0.0/icu/list/struct.ListFormatter.html#method.format) for more information.
  String format(core.List<core.String> list) {
    final temp = _FinalizedArena();
    final write = _Write();
    _icu4x_ListFormatter_format_utf16_mv1(_ffi, list._utf16SliceAllocIn(temp.arena), write._ffi);
    return write.finalize();
  }

}

@_DiplomatFfiUse('icu4x_ListFormatter_destroy_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'icu4x_ListFormatter_destroy_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_ListFormatter_destroy_mv1(ffi.Pointer<ffi.Void> self);

@_DiplomatFfiUse('icu4x_ListFormatter_create_and_with_length_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Int32)>(isLeaf: true, symbol: 'icu4x_ListFormatter_create_and_with_length_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ListFormatter_create_and_with_length_mv1(ffi.Pointer<ffi.Opaque> locale, int length);

@_DiplomatFfiUse('icu4x_ListFormatter_create_and_with_length_and_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Int32)>(isLeaf: true, symbol: 'icu4x_ListFormatter_create_and_with_length_and_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ListFormatter_create_and_with_length_and_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale, int length);

@_DiplomatFfiUse('icu4x_ListFormatter_create_or_with_length_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Int32)>(isLeaf: true, symbol: 'icu4x_ListFormatter_create_or_with_length_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ListFormatter_create_or_with_length_mv1(ffi.Pointer<ffi.Opaque> locale, int length);

@_DiplomatFfiUse('icu4x_ListFormatter_create_or_with_length_and_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Int32)>(isLeaf: true, symbol: 'icu4x_ListFormatter_create_or_with_length_and_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ListFormatter_create_or_with_length_and_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale, int length);

@_DiplomatFfiUse('icu4x_ListFormatter_create_unit_with_length_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Int32)>(isLeaf: true, symbol: 'icu4x_ListFormatter_create_unit_with_length_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ListFormatter_create_unit_with_length_mv1(ffi.Pointer<ffi.Opaque> locale, int length);

@_DiplomatFfiUse('icu4x_ListFormatter_create_unit_with_length_and_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Int32)>(isLeaf: true, symbol: 'icu4x_ListFormatter_create_unit_with_length_and_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ListFormatter_create_unit_with_length_and_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale, int length);

@_DiplomatFfiUse('icu4x_ListFormatter_format_utf16_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, _SliceSliceUtf16, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ListFormatter_format_utf16_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_ListFormatter_format_utf16_mv1(ffi.Pointer<ffi.Opaque> self, _SliceSliceUtf16 list, ffi.Pointer<ffi.Opaque> write);

// dart format on
