// generated by diplomat-tool

part of 'lib.g.dart';

/// A mapper between IANA time zone identifiers and BCP-47 time zone identifiers.
///
/// This mapper supports two-way mapping, but it is optimized for the case of IANA to BCP-47.
/// It also supports normalizing and canonicalizing the IANA strings.
///
/// See the [Rust documentation for `IanaParser`](https://docs.rs/icu/latest/icu/time/zone/iana/struct.IanaParser.html) for more information.
final class IanaParser implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  IanaParser._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_icu4x_IanaParser_destroy_mv1));

  /// Create a new [`IanaParser`] using compiled data
  ///
  /// See the [Rust documentation for `new`](https://docs.rs/icu/latest/icu/time/zone/iana/struct.IanaParser.html#method.new) for more information.
  factory IanaParser() {
    final result = _icu4x_IanaParser_create_mv1();
    return IanaParser._fromFfi(result, []);
  }

  /// Create a new [`IanaParser`] using a particular data source
  ///
  /// See the [Rust documentation for `new`](https://docs.rs/icu/latest/icu/time/zone/iana/struct.IanaParser.html#method.new) for more information.
  ///
  /// Throws [DataError] on failure.
  factory IanaParser.withProvider(DataProvider provider) {
    final result = _icu4x_IanaParser_create_with_provider_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return IanaParser._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `iana_to_bcp47`](https://docs.rs/icu/latest/icu/time/zone/iana/struct.IanaParserBorrowed.html#method.iana_to_bcp47) for more information.
  String ianaToBcp47(String value) {
    final temp = _FinalizedArena();
    final write = _Write();
    _icu4x_IanaParser_iana_to_bcp47_mv1(_ffi, value._utf8AllocIn(temp.arena), write._ffi);
    return write.finalize();
  }

  /// See the [Rust documentation for `normalize_iana`](https://docs.rs/icu/latest/icu/time/zone/iana/struct.IanaParserBorrowed.html#method.normalize_iana) for more information.
  String? normalizeIana(String value) {
    final temp = _FinalizedArena();
    final write = _Write();
    final result = _icu4x_IanaParser_normalize_iana_mv1(_ffi, value._utf8AllocIn(temp.arena), write._ffi);
    if (!result.isOk) {
      return null;
    }
    return write.finalize();
  }

  /// See the [Rust documentation for `canonicalize_iana`](https://docs.rs/icu/latest/icu/time/zone/iana/struct.IanaParserBorrowed.html#method.canonicalize_iana) for more information.
  String? canonicalizeIana(String value) {
    final temp = _FinalizedArena();
    final write = _Write();
    final result = _icu4x_IanaParser_canonicalize_iana_mv1(_ffi, value._utf8AllocIn(temp.arena), write._ffi);
    if (!result.isOk) {
      return null;
    }
    return write.finalize();
  }

  /// See the [Rust documentation for `find_canonical_iana_from_bcp47`](https://docs.rs/icu/latest/icu/time/zone/iana/struct.IanaParserBorrowed.html#method.find_canonical_iana_from_bcp47) for more information.
  String? findCanonicalIanaFromBcp47(String value) {
    final temp = _FinalizedArena();
    final write = _Write();
    final result = _icu4x_IanaParser_find_canonical_iana_from_bcp47_mv1(_ffi, value._utf8AllocIn(temp.arena), write._ffi);
    if (!result.isOk) {
      return null;
    }
    return write.finalize();
  }
}

@meta.RecordUse()
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'icu4x_IanaParser_destroy_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_IanaParser_destroy_mv1(ffi.Pointer<ffi.Void> self);

@meta.RecordUse()
@ffi.Native<ffi.Pointer<ffi.Opaque> Function()>(isLeaf: true, symbol: 'icu4x_IanaParser_create_mv1')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _icu4x_IanaParser_create_mv1();

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_IanaParser_create_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_IanaParser_create_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, _SliceUtf8, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_IanaParser_iana_to_bcp47_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_IanaParser_iana_to_bcp47_mv1(ffi.Pointer<ffi.Opaque> self, _SliceUtf8 value, ffi.Pointer<ffi.Opaque> write);

@meta.RecordUse()
@ffi.Native<_ResultVoidVoid Function(ffi.Pointer<ffi.Opaque>, _SliceUtf8, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_IanaParser_normalize_iana_mv1')
// ignore: non_constant_identifier_names
external _ResultVoidVoid _icu4x_IanaParser_normalize_iana_mv1(ffi.Pointer<ffi.Opaque> self, _SliceUtf8 value, ffi.Pointer<ffi.Opaque> write);

@meta.RecordUse()
@ffi.Native<_ResultVoidVoid Function(ffi.Pointer<ffi.Opaque>, _SliceUtf8, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_IanaParser_canonicalize_iana_mv1')
// ignore: non_constant_identifier_names
external _ResultVoidVoid _icu4x_IanaParser_canonicalize_iana_mv1(ffi.Pointer<ffi.Opaque> self, _SliceUtf8 value, ffi.Pointer<ffi.Opaque> write);

@meta.RecordUse()
@ffi.Native<_ResultVoidVoid Function(ffi.Pointer<ffi.Opaque>, _SliceUtf8, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_IanaParser_find_canonical_iana_from_bcp47_mv1')
// ignore: non_constant_identifier_names
external _ResultVoidVoid _icu4x_IanaParser_find_canonical_iana_from_bcp47_mv1(ffi.Pointer<ffi.Opaque> self, _SliceUtf8 value, ffi.Pointer<ffi.Opaque> write);
