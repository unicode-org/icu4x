// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// See the [Rust documentation for `ComposingNormalizer`](https://docs.rs/icu/latest/icu/normalizer/struct.ComposingNormalizer.html) for more information.
final class ComposingNormalizer implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  ComposingNormalizer._(this._underlying) {
    _finalizer.attach(this, _underlying.cast());
  }

  static final _finalizer = ffi.NativeFinalizer(_capi('ICU4XComposingNormalizer_destroy'));

  /// Construct a new ICU4XComposingNormalizer instance for NFC
  ///
  /// See the [Rust documentation for `new_nfc`](https://docs.rs/icu/latest/icu/normalizer/struct.ComposingNormalizer.html#method.new_nfc) for more information.
  ///
  /// Throws [Error] on failure.
  factory ComposingNormalizer.nfc(DataProvider provider) {
    final result = _ICU4XComposingNormalizer_create_nfc(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return ComposingNormalizer._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XComposingNormalizer_create_nfc =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XComposingNormalizer_create_nfc')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// Construct a new ICU4XComposingNormalizer instance for NFKC
  ///
  /// See the [Rust documentation for `new_nfkc`](https://docs.rs/icu/latest/icu/normalizer/struct.ComposingNormalizer.html#method.new_nfkc) for more information.
  ///
  /// Throws [Error] on failure.
  factory ComposingNormalizer.nfkc(DataProvider provider) {
    final result = _ICU4XComposingNormalizer_create_nfkc(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return ComposingNormalizer._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XComposingNormalizer_create_nfkc =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XComposingNormalizer_create_nfkc')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// Normalize a (potentially ill-formed) UTF8 string
  ///
  /// Errors are mapped to REPLACEMENT CHARACTER
  ///
  /// See the [Rust documentation for `normalize_utf8`](https://docs.rs/icu/latest/icu/normalizer/struct.ComposingNormalizer.html#method.normalize_utf8) for more information.
  ///
  /// Throws [Error] on failure.
  String normalize(String s) {
    final temp = ffi2.Arena();
    final sView = s.utf8View;
    final writeable = _Writeable();
    final result = _ICU4XComposingNormalizer_normalize(_underlying, sView.pointer(temp), sView.length, writeable._underlying);
    temp.releaseAll();
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return writeable.finalize();
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XComposingNormalizer_normalize =
    _capi<ffi.NativeFunction<_ResultVoidInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Opaque>)>>('ICU4XComposingNormalizer_normalize')
      .asFunction<_ResultVoidInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// Check if a (potentially ill-formed) UTF8 string is normalized
  ///
  /// Errors are mapped to REPLACEMENT CHARACTER
  ///
  /// See the [Rust documentation for `is_normalized_utf8`](https://docs.rs/icu/latest/icu/normalizer/struct.ComposingNormalizer.html#method.is_normalized_utf8) for more information.
  bool isNormalized(String s) {
    final temp = ffi2.Arena();
    final sView = s.utf8View;
    final result = _ICU4XComposingNormalizer_is_normalized(_underlying, sView.pointer(temp), sView.length);
    temp.releaseAll();
    return result;
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XComposingNormalizer_is_normalized =
    _capi<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size)>>('ICU4XComposingNormalizer_is_normalized')
      .asFunction<bool Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, int)>(isLeaf: true);
}
