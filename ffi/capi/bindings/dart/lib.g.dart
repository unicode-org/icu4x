// generated by diplomat-tool

// ignore: unused_import
import 'dart:core' as core;
// ignore: unused_import
import 'dart:typed_data';
// ignore: unused_shown_name
import 'dart:core' show int, double, bool, String, Object, override;
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'package:ffi/ffi.dart' as ffi2 show Arena, calloc;
import 'package:meta/meta.dart' as meta;
part 'AnyCalendarKind.g.dart';
part 'Bidi.g.dart';
part 'BidiDirection.g.dart';
part 'BidiInfo.g.dart';
part 'BidiParagraph.g.dart';
part 'Calendar.g.dart';
part 'CalendarError.g.dart';
part 'CalendarParseError.g.dart';
part 'CanonicalCombiningClassMap.g.dart';
part 'CanonicalComposition.g.dart';
part 'CanonicalDecomposition.g.dart';
part 'CaseMapCloser.g.dart';
part 'CaseMapper.g.dart';
part 'CodePointMapData16.g.dart';
part 'CodePointMapData8.g.dart';
part 'CodePointRangeIterator.g.dart';
part 'CodePointRangeIteratorResult.g.dart';
part 'CodePointSetBuilder.g.dart';
part 'CodePointSetData.g.dart';
part 'Collator.g.dart';
part 'CollatorAlternateHandling.g.dart';
part 'CollatorBackwardSecondLevel.g.dart';
part 'CollatorCaseFirst.g.dart';
part 'CollatorCaseLevel.g.dart';
part 'CollatorMaxVariable.g.dart';
part 'CollatorNumeric.g.dart';
part 'CollatorOptions.g.dart';
part 'CollatorResolvedOptions.g.dart';
part 'CollatorStrength.g.dart';
part 'ComposingNormalizer.g.dart';
part 'CustomTimeZone.g.dart';
part 'DataError.g.dart';
part 'DataProvider.g.dart';
part 'Date.g.dart';
part 'DateFormatter.g.dart';
part 'DateLength.g.dart';
part 'DateTime.g.dart';
part 'DateTimeFormatter.g.dart';
part 'Decomposed.g.dart';
part 'DecomposingNormalizer.g.dart';
part 'DisplayNamesFallback.g.dart';
part 'DisplayNamesOptions.g.dart';
part 'DisplayNamesStyle.g.dart';
part 'Error.g.dart';
part 'FixedDecimal.g.dart';
part 'FixedDecimalFormatter.g.dart';
part 'FixedDecimalGroupingStrategy.g.dart';
part 'FixedDecimalLimitError.g.dart';
part 'FixedDecimalParseError.g.dart';
part 'FixedDecimalRoundingIncrement.g.dart';
part 'FixedDecimalRoundingMode.g.dart';
part 'FixedDecimalSign.g.dart';
part 'FixedDecimalSignDisplay.g.dart';
part 'GeneralCategoryNameToMaskMapper.g.dart';
part 'GraphemeClusterBreakIteratorLatin1.g.dart';
part 'GraphemeClusterBreakIteratorUtf16.g.dart';
part 'GraphemeClusterBreakIteratorUtf8.g.dart';
part 'GraphemeClusterSegmenter.g.dart';
part 'GregorianDateFormatter.g.dart';
part 'GregorianDateTimeFormatter.g.dart';
part 'GregorianZonedDateTimeFormatter.g.dart';
part 'IsoDate.g.dart';
part 'IsoDateTime.g.dart';
part 'IsoTimeZoneFormat.g.dart';
part 'IsoTimeZoneMinuteDisplay.g.dart';
part 'IsoTimeZoneOptions.g.dart';
part 'IsoTimeZoneSecondDisplay.g.dart';
part 'IsoWeekday.g.dart';
part 'LanguageDisplay.g.dart';
part 'LeadingAdjustment.g.dart';
part 'LineBreakIteratorLatin1.g.dart';
part 'LineBreakIteratorUtf16.g.dart';
part 'LineBreakIteratorUtf8.g.dart';
part 'LineBreakOptions.g.dart';
part 'LineBreakStrictness.g.dart';
part 'LineBreakWordOption.g.dart';
part 'LineSegmenter.g.dart';
part 'ListFormatter.g.dart';
part 'ListLength.g.dart';
part 'Locale.g.dart';
part 'LocaleCanonicalizer.g.dart';
part 'LocaleDirection.g.dart';
part 'LocaleDirectionality.g.dart';
part 'LocaleDisplayNamesFormatter.g.dart';
part 'LocaleExpander.g.dart';
part 'LocaleFallbackConfig.g.dart';
part 'LocaleFallbackIterator.g.dart';
part 'LocaleFallbackPriority.g.dart';
part 'LocaleFallbacker.g.dart';
part 'LocaleFallbackerWithConfig.g.dart';
part 'LocaleParseError.g.dart';
part 'Logger.g.dart';
part 'MeasureUnit.g.dart';
part 'MeasureUnitParser.g.dart';
part 'MetazoneCalculator.g.dart';
part 'PluralCategories.g.dart';
part 'PluralCategory.g.dart';
part 'PluralOperands.g.dart';
part 'PluralRules.g.dart';
part 'PropertyValueNameToEnumMapper.g.dart';
part 'RegionDisplayNames.g.dart';
part 'ReorderedIndexMap.g.dart';
part 'ScriptExtensionsSet.g.dart';
part 'ScriptWithExtensions.g.dart';
part 'ScriptWithExtensionsBorrowed.g.dart';
part 'SegmenterWordType.g.dart';
part 'SentenceBreakIteratorLatin1.g.dart';
part 'SentenceBreakIteratorUtf16.g.dart';
part 'SentenceBreakIteratorUtf8.g.dart';
part 'SentenceSegmenter.g.dart';
part 'Time.g.dart';
part 'TimeFormatter.g.dart';
part 'TimeLength.g.dart';
part 'TimeZoneFormatter.g.dart';
part 'TimeZoneIdMapper.g.dart';
part 'TimeZoneIdMapperWithFastCanonicalization.g.dart';
part 'TimeZoneInvalidIdError.g.dart';
part 'TimeZoneInvalidOffsetError.g.dart';
part 'TimeZoneUnknownError.g.dart';
part 'TitlecaseMapper.g.dart';
part 'TitlecaseOptions.g.dart';
part 'TrailingCase.g.dart';
part 'TransformResult.g.dart';
part 'UnicodeSetData.g.dart';
part 'UnitsConverter.g.dart';
part 'UnitsConverterFactory.g.dart';
part 'WeekCalculator.g.dart';
part 'WeekOf.g.dart';
part 'WeekRelativeUnit.g.dart';
part 'WeekendContainsDay.g.dart';
part 'WordBreakIteratorLatin1.g.dart';
part 'WordBreakIteratorUtf16.g.dart';
part 'WordBreakIteratorUtf8.g.dart';
part 'WordSegmenter.g.dart';
part 'ZonedDateTimeFormatter.g.dart';

/// A [Rune] is a Unicode code point, such as `a`, or `ðŸ’¡`.
/// 
/// The recommended way to obtain a [Rune] is to create it from a 
/// [String], which is conceptually a sequence of [Rune]s. For
/// example, `'a'.runes.first` is equal to the [Rune] `a`.
/// 
/// Dart does not have a character/rune literal (https://github.com/dart-lang/language/issues/886),
/// so integer literals need to be used. For example the Unicode code point 
/// U+1F4A1, `ðŸ’¡`, can be represented by `0x1F4A1`.
///
/// A [String] can be constructed from a [Rune] using (the [confusingly named](
/// https://github.com/dart-lang/sdk/issues/56304)) [String.fromCharCode]. 
typedef Rune = int;

// ignore: unused_element
final _callocFree = core.Finalizer(ffi2.calloc.free);

// ignore: unused_element
final _nopFree = core.Finalizer((nothing) => {});

// ignore: unused_element
final _rustFree = core.Finalizer((({ffi.Pointer<ffi.Void> pointer, int bytes, int align}) record) => _diplomat_free(record.pointer, record.bytes, record.align));

// ignore: unused_element
final class _RustAlloc implements ffi.Allocator {
  @override
  ffi.Pointer<T> allocate<T extends ffi.NativeType>(int byteCount, {int? alignment}) {
      return _diplomat_alloc(byteCount, alignment ?? 1).cast();
  }

  void free(ffi.Pointer<ffi.NativeType> pointer) {
    throw 'Internal error: should not deallocate in Rust memory';
  }
}

@meta.ResourceIdentifier('diplomat_alloc')
@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>(symbol: 'diplomat_alloc', isLeaf: true)
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Void> _diplomat_alloc(int len, int align);

@meta.ResourceIdentifier('diplomat_free')
@ffi.Native<ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>(symbol: 'diplomat_free', isLeaf: true)
// ignore: non_constant_identifier_names
external int _diplomat_free(ffi.Pointer<ffi.Void> ptr, int len, int align);


// ignore: unused_element
class _FinalizedArena {
  final ffi2.Arena arena;
  static final core.Finalizer<ffi2.Arena> _finalizer = core.Finalizer((arena) => arena.releaseAll());

  // ignore: unused_element
  _FinalizedArena() : arena = ffi2.Arena() {
    _finalizer.attach(this, arena);
  }

  // ignore: unused_element
  _FinalizedArena.withLifetime(core.List<core.List<Object>> lifetimeAppendArray) : arena = ffi2.Arena() {
    _finalizer.attach(this, arena);
    for (final edge in lifetimeAppendArray) {
      edge.add(this);
    }
  }
}

final class _ResultBoolVoidUnion extends ffi.Union {
  @ffi.Bool()
  external bool ok;

}

final class _ResultBoolVoid extends ffi.Struct {
  external _ResultBoolVoidUnion union;

  @ffi.Bool()
  external bool isOk;

  
  factory _ResultBoolVoid.ok(bool val) {
    final struct = ffi.Struct.create<_ResultBoolVoid>();
    struct.isOk = true;
    struct.union.ok = val;
    return struct;
  }
  factory _ResultBoolVoid.err() {
    final struct = ffi.Struct.create<_ResultBoolVoid>();
    struct.isOk = false;
    return struct;
  }
}

final class _ResultInt32VoidUnion extends ffi.Union {
  @ffi.Int32()
  external int ok;

}

final class _ResultInt32Void extends ffi.Struct {
  external _ResultInt32VoidUnion union;

  @ffi.Bool()
  external bool isOk;

  
  factory _ResultInt32Void.ok(int val) {
    final struct = ffi.Struct.create<_ResultInt32Void>();
    struct.isOk = true;
    struct.union.ok = val;
    return struct;
  }
  factory _ResultInt32Void.err() {
    final struct = ffi.Struct.create<_ResultInt32Void>();
    struct.isOk = false;
    return struct;
  }
}

final class _ResultOpaqueFixedDecimalLimitErrorFfiUnion extends ffi.Union {
  external ffi.Pointer<ffi.Opaque> ok;

}

final class _ResultOpaqueFixedDecimalLimitErrorFfi extends ffi.Struct {
  external _ResultOpaqueFixedDecimalLimitErrorFfiUnion union;

  @ffi.Bool()
  external bool isOk;

  
  factory _ResultOpaqueFixedDecimalLimitErrorFfi.ok(ffi.Pointer<ffi.Opaque> val) {
    final struct = ffi.Struct.create<_ResultOpaqueFixedDecimalLimitErrorFfi>();
    struct.isOk = true;
    struct.union.ok = val;
    return struct;
  }
  factory _ResultOpaqueFixedDecimalLimitErrorFfi.err() {
    final struct = ffi.Struct.create<_ResultOpaqueFixedDecimalLimitErrorFfi>();
    struct.isOk = false;
    return struct;
  }
}

final class _ResultOpaqueInt32Union extends ffi.Union {
  external ffi.Pointer<ffi.Opaque> ok;

  @ffi.Int32()
  external int err;
}

final class _ResultOpaqueInt32 extends ffi.Struct {
  external _ResultOpaqueInt32Union union;

  @ffi.Bool()
  external bool isOk;

  
  factory _ResultOpaqueInt32.ok(ffi.Pointer<ffi.Opaque> val) {
    final struct = ffi.Struct.create<_ResultOpaqueInt32>();
    struct.isOk = true;
    struct.union.ok = val;
    return struct;
  }
  factory _ResultOpaqueInt32.err(int val) {
    final struct = ffi.Struct.create<_ResultOpaqueInt32>();
    struct.isOk = false;
    struct.union.err = val;
    return struct;
  }
}

final class _ResultOpaqueTimeZoneUnknownErrorFfiUnion extends ffi.Union {
  external ffi.Pointer<ffi.Opaque> ok;

}

final class _ResultOpaqueTimeZoneUnknownErrorFfi extends ffi.Struct {
  external _ResultOpaqueTimeZoneUnknownErrorFfiUnion union;

  @ffi.Bool()
  external bool isOk;

  
  factory _ResultOpaqueTimeZoneUnknownErrorFfi.ok(ffi.Pointer<ffi.Opaque> val) {
    final struct = ffi.Struct.create<_ResultOpaqueTimeZoneUnknownErrorFfi>();
    struct.isOk = true;
    struct.union.ok = val;
    return struct;
  }
  factory _ResultOpaqueTimeZoneUnknownErrorFfi.err() {
    final struct = ffi.Struct.create<_ResultOpaqueTimeZoneUnknownErrorFfi>();
    struct.isOk = false;
    return struct;
  }
}

final class _ResultUint16VoidUnion extends ffi.Union {
  @ffi.Uint16()
  external int ok;

}

final class _ResultUint16Void extends ffi.Struct {
  external _ResultUint16VoidUnion union;

  @ffi.Bool()
  external bool isOk;

  
  factory _ResultUint16Void.ok(int val) {
    final struct = ffi.Struct.create<_ResultUint16Void>();
    struct.isOk = true;
    struct.union.ok = val;
    return struct;
  }
  factory _ResultUint16Void.err() {
    final struct = ffi.Struct.create<_ResultUint16Void>();
    struct.isOk = false;
    return struct;
  }
}

final class _ResultVoidInt32Union extends ffi.Union {

  @ffi.Int32()
  external int err;
}

final class _ResultVoidInt32 extends ffi.Struct {
  external _ResultVoidInt32Union union;

  @ffi.Bool()
  external bool isOk;

  
  factory _ResultVoidInt32.ok() {
    final struct = ffi.Struct.create<_ResultVoidInt32>();
    struct.isOk = true;
    return struct;
  }
  factory _ResultVoidInt32.err(int val) {
    final struct = ffi.Struct.create<_ResultVoidInt32>();
    struct.isOk = false;
    struct.union.err = val;
    return struct;
  }
}

final class _ResultVoidTimeZoneInvalidIdErrorFfi extends ffi.Struct {
  

  @ffi.Bool()
  external bool isOk;

  
  factory _ResultVoidTimeZoneInvalidIdErrorFfi.ok() {
    final struct = ffi.Struct.create<_ResultVoidTimeZoneInvalidIdErrorFfi>();
    struct.isOk = true;
    return struct;
  }
  factory _ResultVoidTimeZoneInvalidIdErrorFfi.err() {
    final struct = ffi.Struct.create<_ResultVoidTimeZoneInvalidIdErrorFfi>();
    struct.isOk = false;
    return struct;
  }
}

final class _ResultVoidTimeZoneInvalidOffsetErrorFfi extends ffi.Struct {
  

  @ffi.Bool()
  external bool isOk;

  
  factory _ResultVoidTimeZoneInvalidOffsetErrorFfi.ok() {
    final struct = ffi.Struct.create<_ResultVoidTimeZoneInvalidOffsetErrorFfi>();
    struct.isOk = true;
    return struct;
  }
  factory _ResultVoidTimeZoneInvalidOffsetErrorFfi.err() {
    final struct = ffi.Struct.create<_ResultVoidTimeZoneInvalidOffsetErrorFfi>();
    struct.isOk = false;
    return struct;
  }
}

final class _ResultVoidVoid extends ffi.Struct {
  

  @ffi.Bool()
  external bool isOk;

  
  factory _ResultVoidVoid.ok() {
    final struct = ffi.Struct.create<_ResultVoidVoid>();
    struct.isOk = true;
    return struct;
  }
  factory _ResultVoidVoid.err() {
    final struct = ffi.Struct.create<_ResultVoidVoid>();
    struct.isOk = false;
    return struct;
  }
}

final class _SliceRune extends ffi.Struct {
  external ffi.Pointer<ffi.Uint32> _data;

  @ffi.Size()
  external int _length;

  // This is expensive
  @override
  bool operator ==(Object other) {
    if (other is! _SliceRune || other._length != _length) {
      return false;
    }

    for (var i = 0; i < _length; i++) {
      if (other._data[i] != _data[i]) {
        return false;
      }
    }
    return true;
  }

  // This is cheap
  @override
  int get hashCode => _length.hashCode;

  // ignore: unused_element
  core.List<Rune> _toDart(core.List<Object> lifetimeEdges) {
    final r = _data.asTypedList(_length);
    if (lifetimeEdges.isEmpty) {
      _rustFree.attach(r, (pointer: _data.cast(), bytes: _length, align: 1));
    } else {
      _nopFree.attach(r, lifetimeEdges); // Keep lifetime edges alive
    }
    return r;
  }
}

extension on core.List<Rune> {
  // ignore: unused_element
  _SliceRune _uint32AllocIn(ffi.Allocator alloc) {
    final slice = ffi.Struct.create<_SliceRune>();
    slice._data = alloc(length)..asTypedList(length).setRange(0, length, this);
    slice._length = length;
    return slice;
  }
}

final class _SliceSliceUtf16 extends ffi.Struct {
  external ffi.Pointer<_SliceUtf16> _data;

  @ffi.Size()
  external int _length;

  // This is expensive
  @override
  bool operator ==(Object other) {
    if (other is! _SliceSliceUtf16 || other._length != _length) {
      return false;
    }

    for (var i = 0; i < _length; i++) {
      if (other._data[i] != _data[i]) {
        return false;
      }
    }
    return true;
  }

  // This is cheap
  @override
  int get hashCode => _length.hashCode;

  // ignore: unused_element
  core.List<core.String> _toDart(core.List<Object> lifetimeEdges) {
    final r = core.Iterable.generate(_length).map((i) => _data[i]._toDart(lifetimeEdges)).toList(growable: false);
    if (lifetimeEdges.isEmpty) {
      // unsupported
    } else {
      // Lifetime edges will be cleaned up
    }
    return r;
  }
}

extension on core.List<core.String> {
  // ignore: unused_element
  _SliceSliceUtf16 _utf16SliceAllocIn(ffi.Allocator alloc) {
    final slice = ffi.Struct.create<_SliceSliceUtf16>();
    slice._data = alloc(length);
    for (var i = 0; i < length; i++) {
      slice._data[i] = this[i]._utf16AllocIn(alloc);;
    }
    slice._length = length;
    return slice;
  }
}

final class _SliceUint8 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> _data;

  @ffi.Size()
  external int _length;

  // This is expensive
  @override
  bool operator ==(Object other) {
    if (other is! _SliceUint8 || other._length != _length) {
      return false;
    }

    for (var i = 0; i < _length; i++) {
      if (other._data[i] != _data[i]) {
        return false;
      }
    }
    return true;
  }

  // This is cheap
  @override
  int get hashCode => _length.hashCode;

  // ignore: unused_element
  core.List<int> _toDart(core.List<Object> lifetimeEdges) {
    final r = _data.asTypedList(_length);
    if (lifetimeEdges.isEmpty) {
      _rustFree.attach(r, (pointer: _data.cast(), bytes: _length, align: 1));
    } else {
      _nopFree.attach(r, lifetimeEdges); // Keep lifetime edges alive
    }
    return r;
  }
}

extension on core.List<int> {
  // ignore: unused_element
  _SliceUint8 _uint8AllocIn(ffi.Allocator alloc) {
    final slice = ffi.Struct.create<_SliceUint8>();
    slice._data = alloc(length);
    for (var i = 0; i < length; i++) {
      slice._data[i] = this[i].clamp(0, 255);
    }
    slice._length = length;
    return slice;
  }
}

final class _SliceUsize extends ffi.Struct {
  external ffi.Pointer<ffi.Size> _data;

  @ffi.Size()
  external int _length;

  // This is expensive
  @override
  bool operator ==(Object other) {
    if (other is! _SliceUsize || other._length != _length) {
      return false;
    }

    for (var i = 0; i < _length; i++) {
      if (other._data[i] != _data[i]) {
        return false;
      }
    }
    return true;
  }

  // This is cheap
  @override
  int get hashCode => _length.hashCode;

  // ignore: unused_element
  core.List<int> _toDart(core.List<Object> lifetimeEdges) {
    final r = core.Iterable.generate(_length).map((i) => _data[i]).toList(growable: false);
    if (lifetimeEdges.isEmpty) {
      _diplomat_free(_data.cast(), _length * ffi.sizeOf<ffi.Size>(), ffi.sizeOf<ffi.Size>());
    } else {
      // Lifetime edges will be cleaned up
    }
    return r;
  }
}

extension on core.List<int> {
  // ignore: unused_element
  _SliceUsize _usizeAllocIn(ffi.Allocator alloc) {
    final slice = ffi.Struct.create<_SliceUsize>();
    slice._data = alloc(length);
    for (var i = 0; i < length; i++) {
      slice._data[i] = this[i] < 0 ? 0 : this[i];
    }
    slice._length = length;
    return slice;
  }
}

final class _SliceUtf16 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint16> _data;

  @ffi.Size()
  external int _length;

  // This is expensive
  @override
  bool operator ==(Object other) {
    if (other is! _SliceUtf16 || other._length != _length) {
      return false;
    }

    for (var i = 0; i < _length; i++) {
      if (other._data[i] != _data[i]) {
        return false;
      }
    }
    return true;
  }

  // This is cheap
  @override
  int get hashCode => _length.hashCode;

  // ignore: unused_element
  String _toDart(core.List<Object> lifetimeEdges) {
    final r = core.String.fromCharCodes(_data.asTypedList(_length));
    if (lifetimeEdges.isEmpty) {
      _diplomat_free(_data.cast(), _length * 2, 2);
    } else {
      // Lifetime edges will be cleaned up
    }
    return r;
  }
}

extension on String {
  // ignore: unused_element
  _SliceUtf16 _utf16AllocIn(ffi.Allocator alloc) {
    final slice = ffi.Struct.create<_SliceUtf16>();
    slice._data = alloc(codeUnits.length)..asTypedList(codeUnits.length).setRange(0, codeUnits.length, codeUnits);
    slice._length = length;
    return slice;
  }
}

final class _SliceUtf8 extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> _data;

  @ffi.Size()
  external int _length;

  // This is expensive
  @override
  bool operator ==(Object other) {
    if (other is! _SliceUtf8 || other._length != _length) {
      return false;
    }

    for (var i = 0; i < _length; i++) {
      if (other._data[i] != _data[i]) {
        return false;
      }
    }
    return true;
  }

  // This is cheap
  @override
  int get hashCode => _length.hashCode;

  // ignore: unused_element
  String _toDart(core.List<Object> lifetimeEdges) {
    final r = Utf8Decoder().convert(_data.asTypedList(_length));
    if (lifetimeEdges.isEmpty) {
      _diplomat_free(_data.cast(), _length, 1);
    } else {
      // Lifetime edges will be cleaned up
    }
    return r;
  }
}

extension on String {
  // ignore: unused_element
  _SliceUtf8 _utf8AllocIn(ffi.Allocator alloc) {
    final slice = ffi.Struct.create<_SliceUtf8>();
    final encoded = Utf8Encoder().convert(this);
    slice._data = alloc(encoded.length)..asTypedList(encoded.length).setRange(0, encoded.length, encoded);
    slice._length = encoded.length;
    return slice;
  }
}

final class _Write {
  final ffi.Pointer<ffi.Opaque> _ffi;

  _Write() : _ffi = _diplomat_buffer_write_create(0);
  
  String finalize() {
    try {
      final buf = _diplomat_buffer_write_get_bytes(_ffi);
      if (buf == ffi.Pointer.fromAddress(0)) {
        throw core.OutOfMemoryError();
      }
      return Utf8Decoder().convert(buf.asTypedList(_diplomat_buffer_write_len(_ffi)));
    } finally {
      _diplomat_buffer_write_destroy(_ffi);
    }
  }
}

@meta.ResourceIdentifier('diplomat_buffer_write_create')
@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Size)>(symbol: 'diplomat_buffer_write_create', isLeaf: true)
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _diplomat_buffer_write_create(int len);

@meta.ResourceIdentifier('diplomat_buffer_write_len')
@ffi.Native<ffi.Size Function(ffi.Pointer<ffi.Opaque>)>(symbol: 'diplomat_buffer_write_len', isLeaf: true)
// ignore: non_constant_identifier_names
external int _diplomat_buffer_write_len(ffi.Pointer<ffi.Opaque> ptr);

@meta.ResourceIdentifier('diplomat_buffer_write_get_bytes')
@ffi.Native<ffi.Pointer<ffi.Uint8> Function(ffi.Pointer<ffi.Opaque>)>(symbol: 'diplomat_buffer_write_get_bytes', isLeaf: true)
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Uint8> _diplomat_buffer_write_get_bytes(ffi.Pointer<ffi.Opaque> ptr);

@meta.ResourceIdentifier('diplomat_buffer_write_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>)>(symbol: 'diplomat_buffer_write_destroy', isLeaf: true)
// ignore: non_constant_identifier_names
external void _diplomat_buffer_write_destroy(ffi.Pointer<ffi.Opaque> ptr);
