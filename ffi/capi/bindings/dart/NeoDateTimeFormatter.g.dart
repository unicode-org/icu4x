// generated by diplomat-tool

part of 'lib.g.dart';

/// See the [Rust documentation for `DateTimeFormatter`](https://docs.rs/icu/latest/icu/datetime/type.DateTimeFormatter.html) for more information.
final class NeoDateTimeFormatter implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  NeoDateTimeFormatter._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_icu4x_NeoDateTimeFormatter_destroy_mv1));

  /// See the [Rust documentation for `DT`](https://docs.rs/icu/latest/icu/datetime/fieldsets/struct.DT.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoDateTimeFormatter.dt(Locale locale, NeoDateTimeLength length, TimePrecision timePrecision, DateTimeAlignment alignment) {
    final result = _icu4x_NeoDateTimeFormatter_create_dt_mv1(locale._ffi, length.index, timePrecision.index, alignment.index);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoDateTimeFormatter._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `DT`](https://docs.rs/icu/latest/icu/datetime/fieldsets/struct.DT.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoDateTimeFormatter.mdt(Locale locale, NeoDateTimeLength length, TimePrecision timePrecision, DateTimeAlignment alignment) {
    final result = _icu4x_NeoDateTimeFormatter_create_mdt_mv1(locale._ffi, length.index, timePrecision.index, alignment.index);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoDateTimeFormatter._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `DT`](https://docs.rs/icu/latest/icu/datetime/fieldsets/struct.DT.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoDateTimeFormatter.mdt(Locale locale, NeoDateTimeLength length, TimePrecision timePrecision, DateTimeAlignment alignment, YearStyle yearStyle) {
    final result = _icu4x_NeoDateTimeFormatter_create_ymdt_mv1(locale._ffi, length.index, timePrecision.index, alignment.index, yearStyle.index);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoDateTimeFormatter._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `format`](https://docs.rs/icu/latest/icu/datetime/struct.DateTimeFormatter.html#method.format) for more information.
  String formatIso(IsoDate date, Time time) {
    final write = _Write();
    _icu4x_NeoDateTimeFormatter_format_iso_mv1(_ffi, date._ffi, time._ffi, write._ffi);
    return write.finalize();
  }
}

@meta.RecordUse()
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'icu4x_NeoDateTimeFormatter_destroy_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_NeoDateTimeFormatter_destroy_mv1(ffi.Pointer<ffi.Void> self);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Int32, ffi.Int32, ffi.Int32)>(isLeaf: true, symbol: 'icu4x_NeoDateTimeFormatter_create_dt_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoDateTimeFormatter_create_dt_mv1(ffi.Pointer<ffi.Opaque> locale, int length, int timePrecision, int alignment);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Int32, ffi.Int32, ffi.Int32)>(isLeaf: true, symbol: 'icu4x_NeoDateTimeFormatter_create_mdt_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoDateTimeFormatter_create_mdt_mv1(ffi.Pointer<ffi.Opaque> locale, int length, int timePrecision, int alignment);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Int32, ffi.Int32, ffi.Int32, ffi.Int32)>(isLeaf: true, symbol: 'icu4x_NeoDateTimeFormatter_create_ymdt_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoDateTimeFormatter_create_ymdt_mv1(ffi.Pointer<ffi.Opaque> locale, int length, int timePrecision, int alignment, int yearStyle);

@meta.RecordUse()
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoDateTimeFormatter_format_iso_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_NeoDateTimeFormatter_format_iso_mv1(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Opaque> date, ffi.Pointer<ffi.Opaque> time, ffi.Pointer<ffi.Opaque> write);
