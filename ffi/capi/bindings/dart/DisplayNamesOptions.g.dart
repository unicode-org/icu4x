// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class _DisplayNamesOptionsFfi extends ffi.Struct {
  @ffi.Int32()
  external int style;
  @ffi.Int32()
  external int fallback;
  @ffi.Int32()
  external int languageDisplay;
}

/// See the [Rust documentation for `DisplayNamesOptions`](https://docs.rs/icu/latest/icu/displaynames/options/struct.DisplayNamesOptions.html) for more information.
final class DisplayNamesOptions {
  DisplayNamesStyle style;
  DisplayNamesFallback fallback;
  LanguageDisplay languageDisplay;

  DisplayNamesOptions({required this.style, required this.fallback, required this.languageDisplay});

  // ignore: unused_element
  DisplayNamesOptions._(_DisplayNamesOptionsFfi underlying) :
    style = DisplayNamesStyle.values[underlying.style],
    fallback = DisplayNamesFallback.values[underlying.fallback],
    languageDisplay = LanguageDisplay.values[underlying.languageDisplay];

  // ignore: unused_element
  _DisplayNamesOptionsFfi _pointer(ffi.Allocator temp) {
    final pointer = temp<_DisplayNamesOptionsFfi>();
    pointer.ref.style = style.index;
    pointer.ref.fallback = fallback.index;
    pointer.ref.languageDisplay = languageDisplay.index;
    return pointer.ref;
  }

  @override
  bool operator ==(Object other) =>
      other is DisplayNamesOptions &&
      other.style == this.style &&
      other.fallback == this.fallback &&
      other.languageDisplay == this.languageDisplay;

  @override
  int get hashCode => Object.hashAll([
        this.style,
        this.fallback,
        this.languageDisplay,
      ]);
}
