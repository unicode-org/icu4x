// generated by diplomat-tool

part of 'lib.g.dart';

/// See the [Rust documentation for `SentenceBreak`](https://docs.rs/icu/latest/icu/properties/props/struct.SentenceBreak.html) for more information.
enum SentenceBreak {
  /// See the [Rust documentation for `Other`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.Other) for more information.
  other,

  /// See the [Rust documentation for `ATerm`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.ATerm) for more information.
  aTerm,

  /// See the [Rust documentation for `Close`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.Close) for more information.
  close,

  /// See the [Rust documentation for `Format`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.Format) for more information.
  format,

  /// See the [Rust documentation for `Lower`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.Lower) for more information.
  lower,

  /// See the [Rust documentation for `Numeric`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.Numeric) for more information.
  numeric,

  /// See the [Rust documentation for `OLetter`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.OLetter) for more information.
  oLetter,

  /// See the [Rust documentation for `Sep`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.Sep) for more information.
  sep,

  /// See the [Rust documentation for `Sp`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.Sp) for more information.
  sp,

  /// See the [Rust documentation for `STerm`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.STerm) for more information.
  sTerm,

  /// See the [Rust documentation for `Upper`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.Upper) for more information.
  upper,

  /// See the [Rust documentation for `CR`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.CR) for more information.
  cr,

  /// See the [Rust documentation for `Extend`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.Extend) for more information.
  extend,

  /// See the [Rust documentation for `LF`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.LF) for more information.
  lf,

  /// See the [Rust documentation for `SContinue`](https://docs.rs/icu/latest/icu/properties/props/enum.SentenceBreak.html#variant.SContinue) for more information.
  sContinue;

  int toInteger() {
    final result = _icu4x_SentenceBreak_to_integer_mv1(index);
    return result;
  }

  static SentenceBreak? fromInteger(int other) {
    final result = _icu4x_SentenceBreak_from_integer_mv1(other);
    if (!result.isOk) {
      return null;
    }
    return SentenceBreak.values[result.union.ok];
  }
}

@meta.RecordUse()
@ffi.Native<ffi.Uint8 Function(ffi.Int32)>(isLeaf: true, symbol: 'icu4x_SentenceBreak_to_integer_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_SentenceBreak_to_integer_mv1(int self);

@meta.RecordUse()
@ffi.Native<_ResultInt32Void Function(ffi.Uint8)>(isLeaf: true, symbol: 'icu4x_SentenceBreak_from_integer_mv1')
// ignore: non_constant_identifier_names
external _ResultInt32Void _icu4x_SentenceBreak_from_integer_mv1(int other);
