// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

/// See the [Rust documentation for `IndicConjunctBreak`](https://docs.rs/icu/latest/icu/properties/props/struct.IndicConjunctBreak.html) for more information.
enum IndicConjunctBreak {
  /// See the [Rust documentation for `None`](https://docs.rs/icu/latest/icu/properties/props/enum.IndicConjunctBreak.html#variant.None) for more information.
  none,

  /// See the [Rust documentation for `Consonant`](https://docs.rs/icu/latest/icu/properties/props/enum.IndicConjunctBreak.html#variant.Consonant) for more information.
  consonant,

  /// See the [Rust documentation for `Extend`](https://docs.rs/icu/latest/icu/properties/props/enum.IndicConjunctBreak.html#variant.Extend) for more information.
  extend,

  /// See the [Rust documentation for `Linker`](https://docs.rs/icu/latest/icu/properties/props/enum.IndicConjunctBreak.html#variant.Linker) for more information.
  linker;

  /// See the [Rust documentation for `for_char`](https://docs.rs/icu/latest/icu/properties/props/trait.EnumeratedProperty.html#tymethod.for_char) for more information.
  static IndicConjunctBreak forChar(Rune ch) {
    final result = _icu4x_IndicConjunctBreak_for_char_mv1(ch);
    return IndicConjunctBreak.values[result];
  }

  /// Convert to an integer value usable with ICU4C and CodePointMapData
  ///
  /// See the [Rust documentation for `to_icu4c_value`](https://docs.rs/icu/latest/icu/properties/props/struct.IndicConjunctBreak.html#method.to_icu4c_value) for more information.
  int toIntegerValue() {
    final result = _icu4x_IndicConjunctBreak_to_integer_value_mv1(index);
    return result;
  }

  /// Convert from an integer value from ICU4C or CodePointMapData
  ///
  /// See the [Rust documentation for `from_icu4c_value`](https://docs.rs/icu/latest/icu/properties/props/struct.IndicConjunctBreak.html#method.from_icu4c_value) for more information.
  static IndicConjunctBreak? fromIntegerValue(int other) {
    final result = _icu4x_IndicConjunctBreak_from_integer_value_mv1(other);
    if (!result.isOk) {
      return null;
    }
    return IndicConjunctBreak.values[result.union.ok];
  }
}

@_DiplomatFfiUse('icu4x_IndicConjunctBreak_for_char_mv1')
@ffi.Native<ffi.Int32 Function(ffi.Uint32)>(isLeaf: true, symbol: 'icu4x_IndicConjunctBreak_for_char_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_IndicConjunctBreak_for_char_mv1(Rune ch);

@_DiplomatFfiUse('icu4x_IndicConjunctBreak_to_integer_value_mv1')
@ffi.Native<ffi.Uint8 Function(ffi.Int32)>(isLeaf: true, symbol: 'icu4x_IndicConjunctBreak_to_integer_value_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_IndicConjunctBreak_to_integer_value_mv1(int self);

@_DiplomatFfiUse('icu4x_IndicConjunctBreak_from_integer_value_mv1')
@ffi.Native<_ResultInt32Void Function(ffi.Uint8)>(isLeaf: true, symbol: 'icu4x_IndicConjunctBreak_from_integer_value_mv1')
// ignore: non_constant_identifier_names
external _ResultInt32Void _icu4x_IndicConjunctBreak_from_integer_value_mv1(int other);

// dart format on
