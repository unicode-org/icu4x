// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

/// See the [Rust documentation for `TitlecaseMapper`](https://docs.rs/icu/2.0.0/icu/casemap/struct.TitlecaseMapper.html) for more information.
final class TitlecaseMapper implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  TitlecaseMapper._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_icu4x_TitlecaseMapper_destroy_mv1));

  /// Construct a new `TitlecaseMapper` instance using compiled data.
  ///
  /// See the [Rust documentation for `new`](https://docs.rs/icu/2.0.0/icu/casemap/struct.TitlecaseMapper.html#method.new) for more information.
  ///
  /// Throws [DataError] on failure.
  factory TitlecaseMapper() {
    final result = _icu4x_TitlecaseMapper_create_mv1();
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return TitlecaseMapper._fromFfi(result.union.ok, []);
  }

  /// Construct a new `TitlecaseMapper` instance using a particular data source.
  ///
  /// See the [Rust documentation for `new`](https://docs.rs/icu/2.0.0/icu/casemap/struct.TitlecaseMapper.html#method.new) for more information.
  ///
  /// Throws [DataError] on failure.
  factory TitlecaseMapper.withProvider(DataProvider provider) {
    final result = _icu4x_TitlecaseMapper_create_with_provider_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return TitlecaseMapper._fromFfi(result.union.ok, []);
  }

  /// Returns the full titlecase mapping of the given string
  ///
  /// The `v1` refers to the version of the options struct, which may change as we add more options
  ///
  /// See the [Rust documentation for `titlecase_segment`](https://docs.rs/icu/2.0.0/icu/casemap/struct.TitlecaseMapperBorrowed.html#method.titlecase_segment) for more information.
  String titlecaseSegment(String s, Locale locale, TitlecaseOptions options) {
    final temp = _FinalizedArena();
    final write = _Write();
    _icu4x_TitlecaseMapper_titlecase_segment_v1_mv1(_ffi, s._utf8AllocIn(temp.arena), locale._ffi, options._toFfi(temp.arena), write._ffi);
    return write.finalize();
  }

  /// Returns the full titlecase mapping of the given string, using compiled data (avoids having to allocate a TitlecaseMapper object)
  ///
  /// The `v1` refers to the version of the options struct, which may change as we add more options
  ///
  /// See the [Rust documentation for `titlecase_segment`](https://docs.rs/icu/2.0.0/icu/casemap/struct.TitlecaseMapperBorrowed.html#method.titlecase_segment) for more information.
  static String titlecaseSegmentWithCompiledData(String s, Locale locale, TitlecaseOptions options) {
    final temp = _FinalizedArena();
    final write = _Write();
    _icu4x_TitlecaseMapper_titlecase_segment_with_compiled_data_v1_mv1(s._utf8AllocIn(temp.arena), locale._ffi, options._toFfi(temp.arena), write._ffi);
    return write.finalize();
  }

}

@_DiplomatFfiUse('icu4x_TitlecaseMapper_destroy_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'icu4x_TitlecaseMapper_destroy_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_TitlecaseMapper_destroy_mv1(ffi.Pointer<ffi.Void> self);

@_DiplomatFfiUse('icu4x_TitlecaseMapper_create_mv1')
@ffi.Native<_ResultOpaqueInt32 Function()>(isLeaf: true, symbol: 'icu4x_TitlecaseMapper_create_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_TitlecaseMapper_create_mv1();

@_DiplomatFfiUse('icu4x_TitlecaseMapper_create_with_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_TitlecaseMapper_create_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_TitlecaseMapper_create_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider);

@_DiplomatFfiUse('icu4x_TitlecaseMapper_titlecase_segment_v1_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, _SliceUtf8, ffi.Pointer<ffi.Opaque>, _TitlecaseOptionsFfi, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_TitlecaseMapper_titlecase_segment_v1_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_TitlecaseMapper_titlecase_segment_v1_mv1(ffi.Pointer<ffi.Opaque> self, _SliceUtf8 s, ffi.Pointer<ffi.Opaque> locale, _TitlecaseOptionsFfi options, ffi.Pointer<ffi.Opaque> write);

@_DiplomatFfiUse('icu4x_TitlecaseMapper_titlecase_segment_with_compiled_data_v1_mv1')
@ffi.Native<ffi.Void Function(_SliceUtf8, ffi.Pointer<ffi.Opaque>, _TitlecaseOptionsFfi, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_TitlecaseMapper_titlecase_segment_with_compiled_data_v1_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_TitlecaseMapper_titlecase_segment_with_compiled_data_v1_mv1(_SliceUtf8 s, ffi.Pointer<ffi.Opaque> locale, _TitlecaseOptionsFfi options, ffi.Pointer<ffi.Opaque> write);

// dart format on
