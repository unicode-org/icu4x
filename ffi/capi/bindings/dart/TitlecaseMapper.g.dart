// generated by diplomat-tool

part of 'lib.g.dart';

/// See the [Rust documentation for `TitlecaseMapper`](https://docs.rs/icu/latest/icu/casemap/struct.TitlecaseMapper.html) for more information.
final class TitlecaseMapper implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  TitlecaseMapper._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_ICU4XTitlecaseMapper_destroy));

  /// Construct a new `TitlecaseMapper` instance
  ///
  /// See the [Rust documentation for `new`](https://docs.rs/icu/latest/icu/casemap/struct.TitlecaseMapper.html#method.new) for more information.
  ///
  /// Throws [DataError] on failure.
  factory TitlecaseMapper(DataProvider provider) {
    final result = _ICU4XTitlecaseMapper_create(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return TitlecaseMapper._fromFfi(result.union.ok, []);
  }

  /// Returns the full titlecase mapping of the given string
  ///
  /// The `v1` refers to the version of the options struct, which may change as we add more options
  ///
  /// See the [Rust documentation for `titlecase_segment`](https://docs.rs/icu/latest/icu/casemap/struct.TitlecaseMapper.html#method.titlecase_segment) for more information.
  String titlecaseSegment(String s, Locale locale, TitlecaseOptions options) {
    final temp = ffi2.Arena();
    final sView = s.utf8View;
    final write = _Write();
    _ICU4XTitlecaseMapper_titlecase_segment_v1(_ffi, sView.allocIn(temp), sView.length, locale._ffi, options._toFfi(temp), write._ffi);
    temp.releaseAll();
    return write.finalize();
  }
}

@meta.ResourceIdentifier('ICU4XTitlecaseMapper_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'ICU4XTitlecaseMapper_destroy')
// ignore: non_constant_identifier_names
external void _ICU4XTitlecaseMapper_destroy(ffi.Pointer<ffi.Void> self);

@meta.ResourceIdentifier('ICU4XTitlecaseMapper_create')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XTitlecaseMapper_create')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XTitlecaseMapper_create(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('ICU4XTitlecaseMapper_titlecase_segment_v1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Opaque>, _TitlecaseOptionsFfi, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XTitlecaseMapper_titlecase_segment_v1')
// ignore: non_constant_identifier_names
external void _ICU4XTitlecaseMapper_titlecase_segment_v1(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Uint8> sData, int sLength, ffi.Pointer<ffi.Opaque> locale, _TitlecaseOptionsFfi options, ffi.Pointer<ffi.Opaque> write);
