// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

/// A set of "exemplar characters" for a given locale.
///
/// See the [Rust documentation for `locale`](https://docs.rs/icu/2.0.0/icu/locale/index.html) for more information.
///
/// See the [Rust documentation for `ExemplarCharacters`](https://docs.rs/icu/2.0.0/icu/locale/exemplar_chars/struct.ExemplarCharacters.html) for more information.
///
/// See the [Rust documentation for `ExemplarCharactersBorrowed`](https://docs.rs/icu/2.0.0/icu/locale/exemplar_chars/struct.ExemplarCharactersBorrowed.html) for more information.
final class ExemplarCharacters implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  ExemplarCharacters._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_icu4x_ExemplarCharacters_destroy_mv1));

  /// Checks whether the string is in the set.
  ///
  /// See the [Rust documentation for `contains_str`](https://docs.rs/icu/2.0.0/icu/collections/codepointinvliststringlist/struct.CodePointInversionListAndStringList.html#method.contains_str) for more information.
  bool containsStr(String s) {
    final temp = _FinalizedArena();
    final result = _icu4x_ExemplarCharacters_contains_str_mv1(_ffi, s._utf8AllocIn(temp.arena));
    return result;
  }

  /// Checks whether the code point is in the set.
  ///
  /// See the [Rust documentation for `contains`](https://docs.rs/icu/2.0.0/icu/collections/codepointinvliststringlist/struct.CodePointInversionListAndStringList.html#method.contains) for more information.
  bool contains(Rune cp) {
    final result = _icu4x_ExemplarCharacters_contains_mv1(_ffi, cp);
    return result;
  }

  /// Create an [`ExemplarCharacters`] for the "main" set of exemplar characters for a given locale, using compiled data.
  ///
  /// See the [Rust documentation for `try_new_main`](https://docs.rs/icu/2.0.0/icu/locale/exemplar_chars/struct.ExemplarCharacters.html#method.try_new_main) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ExemplarCharacters.main(Locale locale) {
    final result = _icu4x_ExemplarCharacters_create_main_mv1(locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ExemplarCharacters._fromFfi(result.union.ok, []);
  }

  /// Create an [`ExemplarCharacters`] for the "main" set of exemplar characters for a given locale, using a particular data source
  ///
  /// See the [Rust documentation for `try_new_main`](https://docs.rs/icu/2.0.0/icu/locale/exemplar_chars/struct.ExemplarCharacters.html#method.try_new_main) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ExemplarCharacters.mainWithProvider(DataProvider provider, Locale locale) {
    final result = _icu4x_ExemplarCharacters_create_main_with_provider_mv1(provider._ffi, locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ExemplarCharacters._fromFfi(result.union.ok, []);
  }

  /// Create an [`ExemplarCharacters`] for the "auxiliary" set of exemplar characters for a given locale, using compiled data.
  ///
  /// See the [Rust documentation for `try_new_auxiliary`](https://docs.rs/icu/2.0.0/icu/locale/exemplar_chars/struct.ExemplarCharacters.html#method.try_new_auxiliary) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ExemplarCharacters.auxiliary(Locale locale) {
    final result = _icu4x_ExemplarCharacters_create_auxiliary_mv1(locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ExemplarCharacters._fromFfi(result.union.ok, []);
  }

  /// Create an [`ExemplarCharacters`] for the "auxiliary" set of exemplar characters for a given locale, using compiled data.
  ///
  /// See the [Rust documentation for `try_new_auxiliary`](https://docs.rs/icu/2.0.0/icu/locale/exemplar_chars/struct.ExemplarCharacters.html#method.try_new_auxiliary) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ExemplarCharacters.auxiliaryWithProvider(DataProvider provider, Locale locale) {
    final result = _icu4x_ExemplarCharacters_create_auxiliary_with_provider_mv1(provider._ffi, locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ExemplarCharacters._fromFfi(result.union.ok, []);
  }

  /// Create an [`ExemplarCharacters`] for the "punctuation" set of exemplar characters for a given locale, using compiled data.
  ///
  /// See the [Rust documentation for `try_new_punctuation`](https://docs.rs/icu/2.0.0/icu/locale/exemplar_chars/struct.ExemplarCharacters.html#method.try_new_punctuation) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ExemplarCharacters.punctuation(Locale locale) {
    final result = _icu4x_ExemplarCharacters_create_punctuation_mv1(locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ExemplarCharacters._fromFfi(result.union.ok, []);
  }

  /// Create an [`ExemplarCharacters`] for the "punctuation" set of exemplar characters for a given locale, using compiled data.
  ///
  /// See the [Rust documentation for `try_new_punctuation`](https://docs.rs/icu/2.0.0/icu/locale/exemplar_chars/struct.ExemplarCharacters.html#method.try_new_punctuation) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ExemplarCharacters.punctuationWithProvider(DataProvider provider, Locale locale) {
    final result = _icu4x_ExemplarCharacters_create_punctuation_with_provider_mv1(provider._ffi, locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ExemplarCharacters._fromFfi(result.union.ok, []);
  }

  /// Create an [`ExemplarCharacters`] for the "numbers" set of exemplar characters for a given locale, using compiled data.
  ///
  /// See the [Rust documentation for `try_new_numbers`](https://docs.rs/icu/2.0.0/icu/locale/exemplar_chars/struct.ExemplarCharacters.html#method.try_new_numbers) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ExemplarCharacters.numbers(Locale locale) {
    final result = _icu4x_ExemplarCharacters_create_numbers_mv1(locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ExemplarCharacters._fromFfi(result.union.ok, []);
  }

  /// Create an [`ExemplarCharacters`] for the "numbers" set of exemplar characters for a given locale, using compiled data.
  ///
  /// See the [Rust documentation for `try_new_numbers`](https://docs.rs/icu/2.0.0/icu/locale/exemplar_chars/struct.ExemplarCharacters.html#method.try_new_numbers) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ExemplarCharacters.numbersWithProvider(DataProvider provider, Locale locale) {
    final result = _icu4x_ExemplarCharacters_create_numbers_with_provider_mv1(provider._ffi, locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ExemplarCharacters._fromFfi(result.union.ok, []);
  }

  /// Create an [`ExemplarCharacters`] for the "index" set of exemplar characters for a given locale, using compiled data.
  ///
  /// See the [Rust documentation for `try_new_index`](https://docs.rs/icu/2.0.0/icu/locale/exemplar_chars/struct.ExemplarCharacters.html#method.try_new_index) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ExemplarCharacters.index(Locale locale) {
    final result = _icu4x_ExemplarCharacters_create_index_mv1(locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ExemplarCharacters._fromFfi(result.union.ok, []);
  }

  /// Create an [`ExemplarCharacters`] for the "index" set of exemplar characters for a given locale, using compiled data.
  ///
  /// See the [Rust documentation for `try_new_index`](https://docs.rs/icu/2.0.0/icu/locale/exemplar_chars/struct.ExemplarCharacters.html#method.try_new_index) for more information.
  ///
  /// Throws [DataError] on failure.
  factory ExemplarCharacters.indexWithProvider(DataProvider provider, Locale locale) {
    final result = _icu4x_ExemplarCharacters_create_index_with_provider_mv1(provider._ffi, locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return ExemplarCharacters._fromFfi(result.union.ok, []);
  }

}

@_DiplomatFfiUse('icu4x_ExemplarCharacters_destroy_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'icu4x_ExemplarCharacters_destroy_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_ExemplarCharacters_destroy_mv1(ffi.Pointer<ffi.Void> self);

@_DiplomatFfiUse('icu4x_ExemplarCharacters_contains_str_mv1')
@ffi.Native<ffi.Bool Function(ffi.Pointer<ffi.Opaque>, _SliceUtf8)>(isLeaf: true, symbol: 'icu4x_ExemplarCharacters_contains_str_mv1')
// ignore: non_constant_identifier_names
external bool _icu4x_ExemplarCharacters_contains_str_mv1(ffi.Pointer<ffi.Opaque> self, _SliceUtf8 s);

@_DiplomatFfiUse('icu4x_ExemplarCharacters_contains_mv1')
@ffi.Native<ffi.Bool Function(ffi.Pointer<ffi.Opaque>, ffi.Uint32)>(isLeaf: true, symbol: 'icu4x_ExemplarCharacters_contains_mv1')
// ignore: non_constant_identifier_names
external bool _icu4x_ExemplarCharacters_contains_mv1(ffi.Pointer<ffi.Opaque> self, Rune cp);

@_DiplomatFfiUse('icu4x_ExemplarCharacters_create_main_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ExemplarCharacters_create_main_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ExemplarCharacters_create_main_mv1(ffi.Pointer<ffi.Opaque> locale);

@_DiplomatFfiUse('icu4x_ExemplarCharacters_create_main_with_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ExemplarCharacters_create_main_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ExemplarCharacters_create_main_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale);

@_DiplomatFfiUse('icu4x_ExemplarCharacters_create_auxiliary_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ExemplarCharacters_create_auxiliary_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ExemplarCharacters_create_auxiliary_mv1(ffi.Pointer<ffi.Opaque> locale);

@_DiplomatFfiUse('icu4x_ExemplarCharacters_create_auxiliary_with_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ExemplarCharacters_create_auxiliary_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ExemplarCharacters_create_auxiliary_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale);

@_DiplomatFfiUse('icu4x_ExemplarCharacters_create_punctuation_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ExemplarCharacters_create_punctuation_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ExemplarCharacters_create_punctuation_mv1(ffi.Pointer<ffi.Opaque> locale);

@_DiplomatFfiUse('icu4x_ExemplarCharacters_create_punctuation_with_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ExemplarCharacters_create_punctuation_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ExemplarCharacters_create_punctuation_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale);

@_DiplomatFfiUse('icu4x_ExemplarCharacters_create_numbers_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ExemplarCharacters_create_numbers_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ExemplarCharacters_create_numbers_mv1(ffi.Pointer<ffi.Opaque> locale);

@_DiplomatFfiUse('icu4x_ExemplarCharacters_create_numbers_with_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ExemplarCharacters_create_numbers_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ExemplarCharacters_create_numbers_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale);

@_DiplomatFfiUse('icu4x_ExemplarCharacters_create_index_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ExemplarCharacters_create_index_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ExemplarCharacters_create_index_mv1(ffi.Pointer<ffi.Opaque> locale);

@_DiplomatFfiUse('icu4x_ExemplarCharacters_create_index_with_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ExemplarCharacters_create_index_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_ExemplarCharacters_create_index_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale);

// dart format on
