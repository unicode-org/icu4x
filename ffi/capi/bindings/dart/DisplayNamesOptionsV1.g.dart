// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// See the [Rust documentation for `DisplayNamesOptions`](https://docs.rs/icu/latest/icu/displaynames/options/struct.DisplayNamesOptions.html) for more information.
final class _DisplayNamesOptionsV1Ffi extends ffi.Struct {
  @ffi.Int32()
  external int style;
  @ffi.Int32()
  external int fallback;
  @ffi.Int32()
  external int languageDisplay;
}

final class DisplayNamesOptionsV1 {
  final _DisplayNamesOptionsV1Ffi _underlying;

  DisplayNamesOptionsV1._(this._underlying);

  factory DisplayNamesOptionsV1() {
    final pointer = ffi2.calloc<_DisplayNamesOptionsV1Ffi>();
    final result = DisplayNamesOptionsV1._(pointer.ref);
    _callocFree.attach(result, pointer.cast());
    return result;
  }

  DisplayNamesStyle get style => DisplayNamesStyle.values[_underlying.style];
  set style(DisplayNamesStyle style) {
    _underlying.style = style.index;
  }

  DisplayNamesFallback get fallback => DisplayNamesFallback.values[_underlying.fallback];
  set fallback(DisplayNamesFallback fallback) {
    _underlying.fallback = fallback.index;
  }

  LanguageDisplay get languageDisplay => LanguageDisplay.values[_underlying.languageDisplay];
  set languageDisplay(LanguageDisplay languageDisplay) {
    _underlying.languageDisplay = languageDisplay.index;
  }

  @override
  bool operator ==(Object other) =>
      other is DisplayNamesOptionsV1 &&
      other._underlying.style == _underlying.style &&
      other._underlying.fallback == _underlying.fallback &&
      other._underlying.languageDisplay == _underlying.languageDisplay;

  @override
  int get hashCode => Object.hashAll([
        _underlying.style,
        _underlying.fallback,
        _underlying.languageDisplay,
      ]);
}
