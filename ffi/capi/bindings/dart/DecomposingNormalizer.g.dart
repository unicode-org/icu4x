// generated by diplomat-tool

part of 'lib.g.dart';

/// See the [Rust documentation for `DecomposingNormalizer`](https://docs.rs/icu/latest/icu/normalizer/struct.DecomposingNormalizer.html) for more information.
final class DecomposingNormalizer implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  DecomposingNormalizer._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_icu4x_DecomposingNormalizer_destroy_mv1));

  /// Construct a new DecomposingNormalizer instance for NFC
  ///
  /// See the [Rust documentation for `new_nfd`](https://docs.rs/icu/latest/icu/normalizer/struct.DecomposingNormalizer.html#method.new_nfd) for more information.
  ///
  /// Throws [DataError] on failure.
  factory DecomposingNormalizer.nfd(DataProvider provider) {
    final result = _icu4x_DecomposingNormalizer_create_nfd_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return DecomposingNormalizer._fromFfi(result.union.ok, []);
  }

  /// Construct a new DecomposingNormalizer instance for NFKC
  ///
  /// See the [Rust documentation for `new_nfkd`](https://docs.rs/icu/latest/icu/normalizer/struct.DecomposingNormalizer.html#method.new_nfkd) for more information.
  ///
  /// Throws [DataError] on failure.
  factory DecomposingNormalizer.nfkd(DataProvider provider) {
    final result = _icu4x_DecomposingNormalizer_create_nfkd_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return DecomposingNormalizer._fromFfi(result.union.ok, []);
  }

  /// Normalize a string
  ///
  /// Ill-formed input is treated as if errors had been replaced with REPLACEMENT CHARACTERs according
  /// to the WHATWG Encoding Standard.
  ///
  /// See the [Rust documentation for `normalize_utf8`](https://docs.rs/icu/latest/icu/normalizer/struct.DecomposingNormalizer.html#method.normalize_utf8) for more information.
  String normalize(String s) {
    final temp = ffi2.Arena();
    final sView = s.utf8View;
    final write = _Write();
    _icu4x_DecomposingNormalizer_normalize_mv1(_ffi, sView.allocIn(temp), sView.length, write._ffi);
    temp.releaseAll();
    return write.finalize();
  }

  /// Check if a string is normalized
  ///
  /// Ill-formed input is treated as if errors had been replaced with REPLACEMENT CHARACTERs according
  /// to the WHATWG Encoding Standard.
  ///
  /// See the [Rust documentation for `is_normalized_utf8`](https://docs.rs/icu/latest/icu/normalizer/struct.DecomposingNormalizer.html#method.is_normalized_utf8) for more information.
  bool isNormalized(String s) {
    final temp = ffi2.Arena();
    final sView = s.utf8View;
    final result = _icu4x_DecomposingNormalizer_is_normalized_mv1(_ffi, sView.allocIn(temp), sView.length);
    temp.releaseAll();
    return result;
  }

  /// Check if a string is normalized
  ///
  /// Ill-formed input is treated as if errors had been replaced with REPLACEMENT CHARACTERs according
  /// to the WHATWG Encoding Standard.
  ///
  /// See the [Rust documentation for `is_normalized_utf16`](https://docs.rs/icu/latest/icu/normalizer/struct.DecomposingNormalizer.html#method.is_normalized_utf16) for more information.
  bool isNormalizedUtf16(String s) {
    final temp = ffi2.Arena();
    final sView = s.utf16View;
    final result = _icu4x_DecomposingNormalizer_is_normalized_utf16_mv1(_ffi, sView.allocIn(temp), sView.length);
    temp.releaseAll();
    return result;
  }

  /// Return the index a slice of potentially-invalid UTF-8 is normalized up to
  ///
  /// See the [Rust documentation for `is_normalized_utf8_up_to`](https://docs.rs/icu/latest/icu/normalizer/struct.DecomposingNormalizer.html#method.is_normalized_utf8_up_to) for more information.
  int isNormalizedUpTo(String s) {
    final temp = ffi2.Arena();
    final sView = s.utf8View;
    final result = _icu4x_DecomposingNormalizer_is_normalized_up_to_mv1(_ffi, sView.allocIn(temp), sView.length);
    temp.releaseAll();
    return result;
  }

  /// Return the index a slice of potentially-invalid UTF-8 is normalized up to
  ///
  /// See the [Rust documentation for `is_normalized_utf16_up_to`](https://docs.rs/icu/latest/icu/normalizer/struct.DecomposingNormalizer.html#method.is_normalized_utf16_up_to) for more information.
  int isNormalizedUtf16UpTo(String s) {
    final temp = ffi2.Arena();
    final sView = s.utf16View;
    final result = _icu4x_DecomposingNormalizer_is_normalized_utf16_up_to_mv1(_ffi, sView.allocIn(temp), sView.length);
    temp.releaseAll();
    return result;
  }
}

@meta.ResourceIdentifier('icu4x_DecomposingNormalizer_destroy_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'icu4x_DecomposingNormalizer_destroy_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_DecomposingNormalizer_destroy_mv1(ffi.Pointer<ffi.Void> self);

@meta.ResourceIdentifier('icu4x_DecomposingNormalizer_create_nfd_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_DecomposingNormalizer_create_nfd_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_DecomposingNormalizer_create_nfd_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('icu4x_DecomposingNormalizer_create_nfkd_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_DecomposingNormalizer_create_nfkd_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_DecomposingNormalizer_create_nfkd_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('icu4x_DecomposingNormalizer_normalize_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_DecomposingNormalizer_normalize_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_DecomposingNormalizer_normalize_mv1(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Uint8> sData, int sLength, ffi.Pointer<ffi.Opaque> write);

@meta.ResourceIdentifier('icu4x_DecomposingNormalizer_is_normalized_mv1')
@ffi.Native<ffi.Bool Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size)>(isLeaf: true, symbol: 'icu4x_DecomposingNormalizer_is_normalized_mv1')
// ignore: non_constant_identifier_names
external bool _icu4x_DecomposingNormalizer_is_normalized_mv1(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Uint8> sData, int sLength);

@meta.ResourceIdentifier('icu4x_DecomposingNormalizer_is_normalized_utf16_mv1')
@ffi.Native<ffi.Bool Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint16>, ffi.Size)>(isLeaf: true, symbol: 'icu4x_DecomposingNormalizer_is_normalized_utf16_mv1')
// ignore: non_constant_identifier_names
external bool _icu4x_DecomposingNormalizer_is_normalized_utf16_mv1(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Uint16> sData, int sLength);

@meta.ResourceIdentifier('icu4x_DecomposingNormalizer_is_normalized_up_to_mv1')
@ffi.Native<ffi.Size Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size)>(isLeaf: true, symbol: 'icu4x_DecomposingNormalizer_is_normalized_up_to_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_DecomposingNormalizer_is_normalized_up_to_mv1(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Uint8> sData, int sLength);

@meta.ResourceIdentifier('icu4x_DecomposingNormalizer_is_normalized_utf16_up_to_mv1')
@ffi.Native<ffi.Size Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint16>, ffi.Size)>(isLeaf: true, symbol: 'icu4x_DecomposingNormalizer_is_normalized_utf16_up_to_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_DecomposingNormalizer_is_normalized_utf16_up_to_mv1(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Uint16> sData, int sLength);
