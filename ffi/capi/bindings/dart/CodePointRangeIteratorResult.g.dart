// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class _CodePointRangeIteratorResultFfi extends ffi.Struct {
  @ffi.Uint32()
  external int start;
  @ffi.Uint32()
  external int end;
  @ffi.Bool()
  external bool done;
}

/// Result of a single iteration of [`CodePointRangeIterator`].
/// Logically can be considered to be an `Option<RangeInclusive<u32>>`,
///
/// `start` and `end` represent an inclusive range of code points [start, end],
/// and `done` will be true if the iterator has already finished. The last contentful
/// iteration will NOT produce a range done=true, in other words `start` and `end` are useful
/// values if and only if `done=false`.
final class CodePointRangeIteratorResult {
  final int start;
  final int end;
  final bool done;

  // ignore: unused_element
  CodePointRangeIteratorResult._(_CodePointRangeIteratorResultFfi underlying) :
    start = underlying.start,
    end = underlying.end,
    done = underlying.done;

  // ignore: unused_element
  _CodePointRangeIteratorResultFfi _pointer(ffi.Allocator temp) {
    final pointer = temp<_CodePointRangeIteratorResultFfi>();
    return pointer.ref;
  }

  @override
  bool operator ==(Object other) =>
      other is CodePointRangeIteratorResult &&
      other.start == this.start &&
      other.end == this.end &&
      other.done == this.done;

  @override
  int get hashCode => Object.hashAll([
        this.start,
        this.end,
        this.done,
      ]);
}
