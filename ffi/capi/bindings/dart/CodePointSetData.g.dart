// generated by diplomat-tool

part of 'lib.g.dart';

/// An ICU4X Unicode Set Property object, capable of querying whether a code point is contained in a set based on a Unicode property.
///
/// See the [Rust documentation for `properties`](https://docs.rs/icu/latest/icu/properties/index.html) for more information.
///
/// See the [Rust documentation for `CodePointSetData`](https://docs.rs/icu/latest/icu/properties/struct.CodePointSetData.html) for more information.
///
/// See the [Rust documentation for `CodePointSetDataBorrowed`](https://docs.rs/icu/latest/icu/properties/struct.CodePointSetDataBorrowed.html) for more information.
final class CodePointSetData implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  CodePointSetData._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_icu4x_CodePointSetData_destroy_mv1));

  /// Checks whether the code point is in the set.
  ///
  /// See the [Rust documentation for `contains`](https://docs.rs/icu/latest/icu/properties/struct.CodePointSetDataBorrowed.html#method.contains) for more information.
  bool contains(Rune cp) {
    final result = _icu4x_CodePointSetData_contains_mv1(_ffi, cp);
    return result;
  }

  /// Produces an iterator over ranges of code points contained in this set
  ///
  /// See the [Rust documentation for `iter_ranges`](https://docs.rs/icu/latest/icu/properties/struct.CodePointSetDataBorrowed.html#method.iter_ranges) for more information.
  CodePointRangeIterator iterRanges() {
    // This lifetime edge depends on lifetimes: 'a
    core.List<Object> aEdges = [this];
    final result = _icu4x_CodePointSetData_iter_ranges_mv1(_ffi);
    return CodePointRangeIterator._fromFfi(result, [], aEdges);
  }

  /// Produces an iterator over ranges of code points not contained in this set
  ///
  /// See the [Rust documentation for `iter_ranges_complemented`](https://docs.rs/icu/latest/icu/properties/struct.CodePointSetDataBorrowed.html#method.iter_ranges_complemented) for more information.
  CodePointRangeIterator iterRangesComplemented() {
    // This lifetime edge depends on lifetimes: 'a
    core.List<Object> aEdges = [this];
    final result = _icu4x_CodePointSetData_iter_ranges_complemented_mv1(_ffi);
    return CodePointRangeIterator._fromFfi(result, [], aEdges);
  }

  /// which is a mask with the same format as the `U_GC_XX_MASK` mask in ICU4C
  ///
  /// See the [Rust documentation for `GeneralCategoryGroup`](https://docs.rs/icu/latest/icu/properties/props/struct.GeneralCategoryGroup.html) for more information.
  ///
  /// See the [Rust documentation for `get_set_for_value_group`](https://docs.rs/icu/latest/icu/properties/struct.CodePointMapDataBorrowed.html#method.get_set_for_value_group) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.forGeneralCategoryGroup(DataProvider provider, int group) {
    final result = _icu4x_CodePointSetData_load_for_general_category_group_mv1(provider._ffi, group);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `AsciiHexDigit`](https://docs.rs/icu/latest/icu/properties/props/struct.AsciiHexDigit.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.asciiHexDigit(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_ascii_hex_digit_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Alnum`](https://docs.rs/icu/latest/icu/properties/props/struct.Alnum.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.alnum(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_alnum_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Alphabetic`](https://docs.rs/icu/latest/icu/properties/props/struct.Alphabetic.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.alphabetic(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_alphabetic_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `BidiControl`](https://docs.rs/icu/latest/icu/properties/props/struct.BidiControl.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.bidiControl(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_bidi_control_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `BidiMirrored`](https://docs.rs/icu/latest/icu/properties/props/struct.BidiMirrored.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.bidiMirrored(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_bidi_mirrored_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Blank`](https://docs.rs/icu/latest/icu/properties/props/struct.Blank.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.blank(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_blank_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Cased`](https://docs.rs/icu/latest/icu/properties/props/struct.Cased.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.cased(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_cased_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `CaseIgnorable`](https://docs.rs/icu/latest/icu/properties/props/struct.CaseIgnorable.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.caseIgnorable(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_case_ignorable_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `FullCompositionExclusion`](https://docs.rs/icu/latest/icu/properties/props/struct.FullCompositionExclusion.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.fullCompositionExclusion(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_full_composition_exclusion_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `ChangesWhenCasefolded`](https://docs.rs/icu/latest/icu/properties/props/struct.ChangesWhenCasefolded.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.changesWhenCasefolded(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_changes_when_casefolded_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `ChangesWhenCasemapped`](https://docs.rs/icu/latest/icu/properties/props/struct.ChangesWhenCasemapped.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.changesWhenCasemapped(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_changes_when_casemapped_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `ChangesWhenNfkcCasefolded`](https://docs.rs/icu/latest/icu/properties/props/struct.ChangesWhenNfkcCasefolded.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.changesWhenNfkcCasefolded(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_changes_when_nfkc_casefolded_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `ChangesWhenLowercased`](https://docs.rs/icu/latest/icu/properties/props/struct.ChangesWhenLowercased.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.changesWhenLowercased(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_changes_when_lowercased_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `ChangesWhenTitlecased`](https://docs.rs/icu/latest/icu/properties/props/struct.ChangesWhenTitlecased.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.changesWhenTitlecased(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_changes_when_titlecased_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `ChangesWhenUppercased`](https://docs.rs/icu/latest/icu/properties/props/struct.ChangesWhenUppercased.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.changesWhenUppercased(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_changes_when_uppercased_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Dash`](https://docs.rs/icu/latest/icu/properties/props/struct.Dash.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.dash(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_dash_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Deprecated`](https://docs.rs/icu/latest/icu/properties/props/struct.Deprecated.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.deprecated(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_deprecated_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `DefaultIgnorableCodePoint`](https://docs.rs/icu/latest/icu/properties/props/struct.DefaultIgnorableCodePoint.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.defaultIgnorableCodePoint(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_default_ignorable_code_point_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Diacritic`](https://docs.rs/icu/latest/icu/properties/props/struct.Diacritic.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.diacritic(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_diacritic_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `EmojiModifierBase`](https://docs.rs/icu/latest/icu/properties/props/struct.EmojiModifierBase.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.emojiModifierBase(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_emoji_modifier_base_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `EmojiComponent`](https://docs.rs/icu/latest/icu/properties/props/struct.EmojiComponent.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.emojiComponent(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_emoji_component_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `EmojiModifier`](https://docs.rs/icu/latest/icu/properties/props/struct.EmojiModifier.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.emojiModifier(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_emoji_modifier_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Emoji`](https://docs.rs/icu/latest/icu/properties/props/struct.Emoji.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.emoji(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_emoji_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `EmojiPresentation`](https://docs.rs/icu/latest/icu/properties/props/struct.EmojiPresentation.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.emojiPresentation(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_emoji_presentation_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Extender`](https://docs.rs/icu/latest/icu/properties/props/struct.Extender.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.extender(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_extender_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `ExtendedPictographic`](https://docs.rs/icu/latest/icu/properties/props/struct.ExtendedPictographic.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.extendedPictographic(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_extended_pictographic_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Graph`](https://docs.rs/icu/latest/icu/properties/props/struct.Graph.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.graph(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_graph_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `GraphemeBase`](https://docs.rs/icu/latest/icu/properties/props/struct.GraphemeBase.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.graphemeBase(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_grapheme_base_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `GraphemeExtend`](https://docs.rs/icu/latest/icu/properties/props/struct.GraphemeExtend.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.graphemeExtend(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_grapheme_extend_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `GraphemeLink`](https://docs.rs/icu/latest/icu/properties/props/struct.GraphemeLink.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.graphemeLink(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_grapheme_link_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `HexDigit`](https://docs.rs/icu/latest/icu/properties/props/struct.HexDigit.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.hexDigit(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_hex_digit_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Hyphen`](https://docs.rs/icu/latest/icu/properties/props/struct.Hyphen.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.hyphen(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_hyphen_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `IdContinue`](https://docs.rs/icu/latest/icu/properties/props/struct.IdContinue.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.idContinue(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_id_continue_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Ideographic`](https://docs.rs/icu/latest/icu/properties/props/struct.Ideographic.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.ideographic(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_ideographic_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `IdStart`](https://docs.rs/icu/latest/icu/properties/props/struct.IdStart.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.idStart(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_id_start_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `IdsBinaryOperator`](https://docs.rs/icu/latest/icu/properties/props/struct.IdsBinaryOperator.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.idsBinaryOperator(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_ids_binary_operator_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `IdsTrinaryOperator`](https://docs.rs/icu/latest/icu/properties/props/struct.IdsTrinaryOperator.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.idsTrinaryOperator(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_ids_trinary_operator_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `JoinControl`](https://docs.rs/icu/latest/icu/properties/props/struct.JoinControl.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.joinControl(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_join_control_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `LogicalOrderException`](https://docs.rs/icu/latest/icu/properties/props/struct.LogicalOrderException.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.logicalOrderException(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_logical_order_exception_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Lowercase`](https://docs.rs/icu/latest/icu/properties/props/struct.Lowercase.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.lowercase(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_lowercase_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Math`](https://docs.rs/icu/latest/icu/properties/props/struct.Math.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.math(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_math_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `NoncharacterCodePoint`](https://docs.rs/icu/latest/icu/properties/props/struct.NoncharacterCodePoint.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.noncharacterCodePoint(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_noncharacter_code_point_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `NfcInert`](https://docs.rs/icu/latest/icu/properties/props/struct.NfcInert.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.nfcInert(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_nfc_inert_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `NfdInert`](https://docs.rs/icu/latest/icu/properties/props/struct.NfdInert.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.nfdInert(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_nfd_inert_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `NfkcInert`](https://docs.rs/icu/latest/icu/properties/props/struct.NfkcInert.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.nfkcInert(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_nfkc_inert_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `NfkdInert`](https://docs.rs/icu/latest/icu/properties/props/struct.NfkdInert.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.nfkdInert(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_nfkd_inert_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `PatternSyntax`](https://docs.rs/icu/latest/icu/properties/props/struct.PatternSyntax.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.patternSyntax(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_pattern_syntax_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `PatternWhiteSpace`](https://docs.rs/icu/latest/icu/properties/props/struct.PatternWhiteSpace.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.patternWhiteSpace(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_pattern_white_space_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `PrependedConcatenationMark`](https://docs.rs/icu/latest/icu/properties/props/struct.PrependedConcatenationMark.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.prependedConcatenationMark(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_prepended_concatenation_mark_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Print`](https://docs.rs/icu/latest/icu/properties/props/struct.Print.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.print(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_print_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `QuotationMark`](https://docs.rs/icu/latest/icu/properties/props/struct.QuotationMark.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.quotationMark(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_quotation_mark_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Radical`](https://docs.rs/icu/latest/icu/properties/props/struct.Radical.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.radical(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_radical_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `RegionalIndicator`](https://docs.rs/icu/latest/icu/properties/props/struct.RegionalIndicator.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.regionalIndicator(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_regional_indicator_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `SoftDotted`](https://docs.rs/icu/latest/icu/properties/props/struct.SoftDotted.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.softDotted(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_soft_dotted_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `SegmentStarter`](https://docs.rs/icu/latest/icu/properties/props/struct.SegmentStarter.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.segmentStarter(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_segment_starter_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `CaseSensitive`](https://docs.rs/icu/latest/icu/properties/props/struct.CaseSensitive.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.caseSensitive(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_case_sensitive_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `SentenceTerminal`](https://docs.rs/icu/latest/icu/properties/props/struct.SentenceTerminal.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.sentenceTerminal(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_sentence_terminal_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `TerminalPunctuation`](https://docs.rs/icu/latest/icu/properties/props/struct.TerminalPunctuation.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.terminalPunctuation(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_terminal_punctuation_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `UnifiedIdeograph`](https://docs.rs/icu/latest/icu/properties/props/struct.UnifiedIdeograph.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.unifiedIdeograph(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_unified_ideograph_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Uppercase`](https://docs.rs/icu/latest/icu/properties/props/struct.Uppercase.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.uppercase(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_uppercase_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `VariationSelector`](https://docs.rs/icu/latest/icu/properties/props/struct.VariationSelector.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.variationSelector(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_variation_selector_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `WhiteSpace`](https://docs.rs/icu/latest/icu/properties/props/struct.WhiteSpace.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.whiteSpace(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_white_space_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `Xdigit`](https://docs.rs/icu/latest/icu/properties/props/struct.Xdigit.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.xdigit(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_xdigit_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `XidContinue`](https://docs.rs/icu/latest/icu/properties/props/struct.XidContinue.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.xidContinue(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_xid_continue_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `XidStart`](https://docs.rs/icu/latest/icu/properties/props/struct.XidStart.html) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.xidStart(DataProvider provider) {
    final result = _icu4x_CodePointSetData_load_xid_start_mv1(provider._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }

  /// Loads data for a property specified as a string as long as it is one of the
  /// [ECMA-262 binary properties][ecma] (not including Any, ASCII, and Assigned pseudoproperties).
  ///
  /// Returns `DataError::Custom` in case the string does not match any property in the list.
  ///
  /// [ecma]: https://tc39.es/ecma262/#table-binary-unicode-properties
  ///
  /// See the [Rust documentation for `new_for_ecma262`](https://docs.rs/icu/latest/icu/properties/struct.CodePointSetData.html#method.new_for_ecma262) for more information.
  ///
  /// Throws [DataError] on failure.
  factory CodePointSetData.forEcma262(DataProvider provider, String propertyName) {
    final temp = _FinalizedArena();
    final result = _icu4x_CodePointSetData_load_for_ecma262_mv1(provider._ffi, propertyName._utf8AllocIn(temp.arena));
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return CodePointSetData._fromFfi(result.union.ok, []);
  }
}

@meta.RecordUse()
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_destroy_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_CodePointSetData_destroy_mv1(ffi.Pointer<ffi.Void> self);

@meta.RecordUse()
@ffi.Native<ffi.Bool Function(ffi.Pointer<ffi.Opaque>, ffi.Uint32)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_contains_mv1')
// ignore: non_constant_identifier_names
external bool _icu4x_CodePointSetData_contains_mv1(ffi.Pointer<ffi.Opaque> self, Rune cp);

@meta.RecordUse()
@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_iter_ranges_mv1')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _icu4x_CodePointSetData_iter_ranges_mv1(ffi.Pointer<ffi.Opaque> self);

@meta.RecordUse()
@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_iter_ranges_complemented_mv1')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _icu4x_CodePointSetData_iter_ranges_complemented_mv1(ffi.Pointer<ffi.Opaque> self);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Uint32)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_for_general_category_group_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_for_general_category_group_mv1(ffi.Pointer<ffi.Opaque> provider, int group);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_ascii_hex_digit_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_ascii_hex_digit_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_alnum_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_alnum_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_alphabetic_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_alphabetic_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_bidi_control_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_bidi_control_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_bidi_mirrored_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_bidi_mirrored_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_blank_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_blank_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_cased_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_cased_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_case_ignorable_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_case_ignorable_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_full_composition_exclusion_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_full_composition_exclusion_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_changes_when_casefolded_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_changes_when_casefolded_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_changes_when_casemapped_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_changes_when_casemapped_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_changes_when_nfkc_casefolded_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_changes_when_nfkc_casefolded_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_changes_when_lowercased_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_changes_when_lowercased_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_changes_when_titlecased_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_changes_when_titlecased_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_changes_when_uppercased_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_changes_when_uppercased_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_dash_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_dash_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_deprecated_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_deprecated_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_default_ignorable_code_point_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_default_ignorable_code_point_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_diacritic_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_diacritic_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_emoji_modifier_base_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_emoji_modifier_base_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_emoji_component_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_emoji_component_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_emoji_modifier_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_emoji_modifier_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_emoji_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_emoji_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_emoji_presentation_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_emoji_presentation_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_extender_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_extender_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_extended_pictographic_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_extended_pictographic_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_graph_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_graph_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_grapheme_base_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_grapheme_base_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_grapheme_extend_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_grapheme_extend_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_grapheme_link_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_grapheme_link_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_hex_digit_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_hex_digit_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_hyphen_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_hyphen_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_id_continue_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_id_continue_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_ideographic_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_ideographic_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_id_start_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_id_start_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_ids_binary_operator_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_ids_binary_operator_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_ids_trinary_operator_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_ids_trinary_operator_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_join_control_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_join_control_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_logical_order_exception_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_logical_order_exception_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_lowercase_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_lowercase_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_math_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_math_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_noncharacter_code_point_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_noncharacter_code_point_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_nfc_inert_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_nfc_inert_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_nfd_inert_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_nfd_inert_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_nfkc_inert_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_nfkc_inert_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_nfkd_inert_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_nfkd_inert_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_pattern_syntax_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_pattern_syntax_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_pattern_white_space_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_pattern_white_space_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_prepended_concatenation_mark_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_prepended_concatenation_mark_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_print_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_print_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_quotation_mark_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_quotation_mark_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_radical_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_radical_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_regional_indicator_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_regional_indicator_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_soft_dotted_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_soft_dotted_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_segment_starter_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_segment_starter_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_case_sensitive_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_case_sensitive_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_sentence_terminal_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_sentence_terminal_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_terminal_punctuation_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_terminal_punctuation_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_unified_ideograph_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_unified_ideograph_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_uppercase_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_uppercase_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_variation_selector_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_variation_selector_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_white_space_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_white_space_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_xdigit_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_xdigit_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_xid_continue_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_xid_continue_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_xid_start_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_xid_start_mv1(ffi.Pointer<ffi.Opaque> provider);

@meta.RecordUse()
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, _SliceUtf8)>(isLeaf: true, symbol: 'icu4x_CodePointSetData_load_for_ecma262_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_CodePointSetData_load_for_ecma262_mv1(ffi.Pointer<ffi.Opaque> provider, _SliceUtf8 propertyName);
