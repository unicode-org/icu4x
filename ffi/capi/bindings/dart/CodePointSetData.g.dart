// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// An ICU4X Unicode Set Property object, capable of querying whether a code point is contained in a set based on a Unicode property.
///
/// See the [Rust documentation for `properties`](https://docs.rs/icu/latest/icu/properties/index.html) for more information.
///
/// See the [Rust documentation for `CodePointSetData`](https://docs.rs/icu/latest/icu/properties/sets/struct.CodePointSetData.html) for more information.
///
/// See the [Rust documentation for `CodePointSetDataBorrowed`](https://docs.rs/icu/latest/icu/properties/sets/struct.CodePointSetDataBorrowed.html) for more information.
final class CodePointSetData implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  CodePointSetData._(this._underlying, bool isOwned) {
    if (isOwned) {
      _finalizer.attach(this, _underlying.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_ICU4XCodePointSetData_destroy));

  /// Checks whether the code point is in the set.
  ///
  /// See the [Rust documentation for `contains`](https://docs.rs/icu/latest/icu/properties/sets/struct.CodePointSetDataBorrowed.html#method.contains) for more information.
  bool contains(Rune cp) {
    final result = _ICU4XCodePointSetData_contains(_underlying, cp);
    return result;
  }

  /// Produces an iterator over ranges of code points contained in this set
  ///
  /// See the [Rust documentation for `iter_ranges`](https://docs.rs/icu/latest/icu/properties/sets/struct.CodePointSetDataBorrowed.html#method.iter_ranges) for more information.
  CodePointRangeIterator get iterRanges {
    final result = _ICU4XCodePointSetData_iter_ranges(_underlying);
    return CodePointRangeIterator._(result, true);
  }

  /// Produces an iterator over ranges of code points not contained in this set
  ///
  /// See the [Rust documentation for `iter_ranges_complemented`](https://docs.rs/icu/latest/icu/properties/sets/struct.CodePointSetDataBorrowed.html#method.iter_ranges_complemented) for more information.
  CodePointRangeIterator get iterRangesComplemented {
    final result = _ICU4XCodePointSetData_iter_ranges_complemented(_underlying);
    return CodePointRangeIterator._(result, true);
  }

  /// which is a mask with the same format as the `U_GC_XX_MASK` mask in ICU4C
  ///
  /// See the [Rust documentation for `for_general_category_group`](https://docs.rs/icu/latest/icu/properties/sets/fn.for_general_category_group.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadForGeneralCategoryGroup(DataProvider provider, int group) {
    final result = _ICU4XCodePointSetData_load_for_general_category_group(provider._underlying, group);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `ascii_hex_digit`](https://docs.rs/icu/latest/icu/properties/sets/fn.ascii_hex_digit.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadAsciiHexDigit(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_ascii_hex_digit(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `alnum`](https://docs.rs/icu/latest/icu/properties/sets/fn.alnum.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadAlnum(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_alnum(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `alphabetic`](https://docs.rs/icu/latest/icu/properties/sets/fn.alphabetic.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadAlphabetic(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_alphabetic(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `bidi_control`](https://docs.rs/icu/latest/icu/properties/sets/fn.bidi_control.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadBidiControl(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_bidi_control(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `bidi_mirrored`](https://docs.rs/icu/latest/icu/properties/sets/fn.bidi_mirrored.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadBidiMirrored(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_bidi_mirrored(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `blank`](https://docs.rs/icu/latest/icu/properties/sets/fn.blank.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadBlank(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_blank(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `cased`](https://docs.rs/icu/latest/icu/properties/sets/fn.cased.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadCased(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_cased(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `case_ignorable`](https://docs.rs/icu/latest/icu/properties/sets/fn.case_ignorable.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadCaseIgnorable(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_case_ignorable(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `full_composition_exclusion`](https://docs.rs/icu/latest/icu/properties/sets/fn.full_composition_exclusion.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadFullCompositionExclusion(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_full_composition_exclusion(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `changes_when_casefolded`](https://docs.rs/icu/latest/icu/properties/sets/fn.changes_when_casefolded.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadChangesWhenCasefolded(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_changes_when_casefolded(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `changes_when_casemapped`](https://docs.rs/icu/latest/icu/properties/sets/fn.changes_when_casemapped.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadChangesWhenCasemapped(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_changes_when_casemapped(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `changes_when_nfkc_casefolded`](https://docs.rs/icu/latest/icu/properties/sets/fn.changes_when_nfkc_casefolded.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadChangesWhenNfkcCasefolded(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_changes_when_nfkc_casefolded(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `changes_when_lowercased`](https://docs.rs/icu/latest/icu/properties/sets/fn.changes_when_lowercased.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadChangesWhenLowercased(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_changes_when_lowercased(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `changes_when_titlecased`](https://docs.rs/icu/latest/icu/properties/sets/fn.changes_when_titlecased.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadChangesWhenTitlecased(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_changes_when_titlecased(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `changes_when_uppercased`](https://docs.rs/icu/latest/icu/properties/sets/fn.changes_when_uppercased.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadChangesWhenUppercased(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_changes_when_uppercased(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `dash`](https://docs.rs/icu/latest/icu/properties/sets/fn.dash.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadDash(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_dash(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `deprecated`](https://docs.rs/icu/latest/icu/properties/sets/fn.deprecated.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadDeprecated(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_deprecated(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `default_ignorable_code_point`](https://docs.rs/icu/latest/icu/properties/sets/fn.default_ignorable_code_point.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadDefaultIgnorableCodePoint(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_default_ignorable_code_point(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `diacritic`](https://docs.rs/icu/latest/icu/properties/sets/fn.diacritic.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadDiacritic(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_diacritic(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `emoji_modifier_base`](https://docs.rs/icu/latest/icu/properties/sets/fn.emoji_modifier_base.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadEmojiModifierBase(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_emoji_modifier_base(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `emoji_component`](https://docs.rs/icu/latest/icu/properties/sets/fn.emoji_component.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadEmojiComponent(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_emoji_component(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `emoji_modifier`](https://docs.rs/icu/latest/icu/properties/sets/fn.emoji_modifier.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadEmojiModifier(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_emoji_modifier(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `emoji`](https://docs.rs/icu/latest/icu/properties/sets/fn.emoji.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadEmoji(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_emoji(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `emoji_presentation`](https://docs.rs/icu/latest/icu/properties/sets/fn.emoji_presentation.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadEmojiPresentation(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_emoji_presentation(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `extender`](https://docs.rs/icu/latest/icu/properties/sets/fn.extender.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadExtender(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_extender(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `extended_pictographic`](https://docs.rs/icu/latest/icu/properties/sets/fn.extended_pictographic.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadExtendedPictographic(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_extended_pictographic(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `graph`](https://docs.rs/icu/latest/icu/properties/sets/fn.graph.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadGraph(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_graph(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `grapheme_base`](https://docs.rs/icu/latest/icu/properties/sets/fn.grapheme_base.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadGraphemeBase(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_grapheme_base(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `grapheme_extend`](https://docs.rs/icu/latest/icu/properties/sets/fn.grapheme_extend.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadGraphemeExtend(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_grapheme_extend(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `grapheme_link`](https://docs.rs/icu/latest/icu/properties/sets/fn.grapheme_link.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadGraphemeLink(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_grapheme_link(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `hex_digit`](https://docs.rs/icu/latest/icu/properties/sets/fn.hex_digit.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadHexDigit(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_hex_digit(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `hyphen`](https://docs.rs/icu/latest/icu/properties/sets/fn.hyphen.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadHyphen(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_hyphen(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `id_continue`](https://docs.rs/icu/latest/icu/properties/sets/fn.id_continue.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadIdContinue(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_id_continue(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `ideographic`](https://docs.rs/icu/latest/icu/properties/sets/fn.ideographic.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadIdeographic(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_ideographic(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `id_start`](https://docs.rs/icu/latest/icu/properties/sets/fn.id_start.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadIdStart(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_id_start(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `ids_binary_operator`](https://docs.rs/icu/latest/icu/properties/sets/fn.ids_binary_operator.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadIdsBinaryOperator(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_ids_binary_operator(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `ids_trinary_operator`](https://docs.rs/icu/latest/icu/properties/sets/fn.ids_trinary_operator.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadIdsTrinaryOperator(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_ids_trinary_operator(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `join_control`](https://docs.rs/icu/latest/icu/properties/sets/fn.join_control.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadJoinControl(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_join_control(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `logical_order_exception`](https://docs.rs/icu/latest/icu/properties/sets/fn.logical_order_exception.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadLogicalOrderException(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_logical_order_exception(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `lowercase`](https://docs.rs/icu/latest/icu/properties/sets/fn.lowercase.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadLowercase(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_lowercase(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `math`](https://docs.rs/icu/latest/icu/properties/sets/fn.math.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadMath(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_math(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `noncharacter_code_point`](https://docs.rs/icu/latest/icu/properties/sets/fn.noncharacter_code_point.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadNoncharacterCodePoint(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_noncharacter_code_point(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `nfc_inert`](https://docs.rs/icu/latest/icu/properties/sets/fn.nfc_inert.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadNfcInert(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_nfc_inert(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `nfd_inert`](https://docs.rs/icu/latest/icu/properties/sets/fn.nfd_inert.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadNfdInert(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_nfd_inert(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `nfkc_inert`](https://docs.rs/icu/latest/icu/properties/sets/fn.nfkc_inert.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadNfkcInert(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_nfkc_inert(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `nfkd_inert`](https://docs.rs/icu/latest/icu/properties/sets/fn.nfkd_inert.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadNfkdInert(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_nfkd_inert(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `pattern_syntax`](https://docs.rs/icu/latest/icu/properties/sets/fn.pattern_syntax.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadPatternSyntax(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_pattern_syntax(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `pattern_white_space`](https://docs.rs/icu/latest/icu/properties/sets/fn.pattern_white_space.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadPatternWhiteSpace(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_pattern_white_space(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `prepended_concatenation_mark`](https://docs.rs/icu/latest/icu/properties/sets/fn.prepended_concatenation_mark.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadPrependedConcatenationMark(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_prepended_concatenation_mark(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `print`](https://docs.rs/icu/latest/icu/properties/sets/fn.print.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadPrint(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_print(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `quotation_mark`](https://docs.rs/icu/latest/icu/properties/sets/fn.quotation_mark.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadQuotationMark(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_quotation_mark(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `radical`](https://docs.rs/icu/latest/icu/properties/sets/fn.radical.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadRadical(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_radical(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `regional_indicator`](https://docs.rs/icu/latest/icu/properties/sets/fn.regional_indicator.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadRegionalIndicator(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_regional_indicator(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `soft_dotted`](https://docs.rs/icu/latest/icu/properties/sets/fn.soft_dotted.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadSoftDotted(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_soft_dotted(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `segment_starter`](https://docs.rs/icu/latest/icu/properties/sets/fn.segment_starter.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadSegmentStarter(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_segment_starter(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `case_sensitive`](https://docs.rs/icu/latest/icu/properties/sets/fn.case_sensitive.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadCaseSensitive(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_case_sensitive(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `sentence_terminal`](https://docs.rs/icu/latest/icu/properties/sets/fn.sentence_terminal.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadSentenceTerminal(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_sentence_terminal(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `terminal_punctuation`](https://docs.rs/icu/latest/icu/properties/sets/fn.terminal_punctuation.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadTerminalPunctuation(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_terminal_punctuation(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `unified_ideograph`](https://docs.rs/icu/latest/icu/properties/sets/fn.unified_ideograph.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadUnifiedIdeograph(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_unified_ideograph(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `uppercase`](https://docs.rs/icu/latest/icu/properties/sets/fn.uppercase.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadUppercase(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_uppercase(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `variation_selector`](https://docs.rs/icu/latest/icu/properties/sets/fn.variation_selector.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadVariationSelector(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_variation_selector(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `white_space`](https://docs.rs/icu/latest/icu/properties/sets/fn.white_space.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadWhiteSpace(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_white_space(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `xdigit`](https://docs.rs/icu/latest/icu/properties/sets/fn.xdigit.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadXdigit(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_xdigit(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `xid_continue`](https://docs.rs/icu/latest/icu/properties/sets/fn.xid_continue.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadXidContinue(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_xid_continue(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// See the [Rust documentation for `xid_start`](https://docs.rs/icu/latest/icu/properties/sets/fn.xid_start.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadXidStart(DataProvider provider) {
    final result = _ICU4XCodePointSetData_load_xid_start(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }

  /// Loads data for a property specified as a string as long as it is one of the
  /// [ECMA-262 binary properties][ecma] (not including Any, ASCII, and Assigned pseudoproperties).
  ///
  /// Returns `Error::PropertyUnexpectedPropertyNameError` in case the string does not
  /// match any property in the list
  ///
  /// [ecma]: https://tc39.es/ecma262/#table-binary-unicode-properties
  ///
  /// See the [Rust documentation for `for_ecma262`](https://docs.rs/icu/latest/icu/properties/sets/fn.for_ecma262.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory CodePointSetData.loadForEcma262(DataProvider provider, String propertyName) {
    final temp = ffi2.Arena();
    final propertyNameView = propertyName.utf8View;
    final result = _ICU4XCodePointSetData_load_for_ecma262(provider._underlying, propertyNameView.pointer(temp), propertyNameView.length);
    temp.releaseAll();
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return CodePointSetData._(result.union.ok, true);
  }
}

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_destroy')
// ignore: non_constant_identifier_names
external void _ICU4XCodePointSetData_destroy(ffi.Pointer<ffi.Void> self);

@ffi.Native<ffi.Bool Function(ffi.Pointer<ffi.Opaque>, ffi.Uint32)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_contains')
// ignore: non_constant_identifier_names
external bool _ICU4XCodePointSetData_contains(ffi.Pointer<ffi.Opaque> self, Rune cp);

@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_iter_ranges')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _ICU4XCodePointSetData_iter_ranges(ffi.Pointer<ffi.Opaque> self);

@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_iter_ranges_complemented')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _ICU4XCodePointSetData_iter_ranges_complemented(ffi.Pointer<ffi.Opaque> self);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Uint32)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_for_general_category_group')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_for_general_category_group(ffi.Pointer<ffi.Opaque> provider, int group);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_ascii_hex_digit')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_ascii_hex_digit(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_alnum')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_alnum(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_alphabetic')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_alphabetic(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_bidi_control')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_bidi_control(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_bidi_mirrored')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_bidi_mirrored(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_blank')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_blank(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_cased')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_cased(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_case_ignorable')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_case_ignorable(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_full_composition_exclusion')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_full_composition_exclusion(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_changes_when_casefolded')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_changes_when_casefolded(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_changes_when_casemapped')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_changes_when_casemapped(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_changes_when_nfkc_casefolded')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_changes_when_nfkc_casefolded(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_changes_when_lowercased')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_changes_when_lowercased(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_changes_when_titlecased')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_changes_when_titlecased(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_changes_when_uppercased')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_changes_when_uppercased(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_dash')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_dash(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_deprecated')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_deprecated(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_default_ignorable_code_point')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_default_ignorable_code_point(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_diacritic')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_diacritic(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_emoji_modifier_base')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_emoji_modifier_base(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_emoji_component')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_emoji_component(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_emoji_modifier')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_emoji_modifier(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_emoji')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_emoji(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_emoji_presentation')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_emoji_presentation(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_extender')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_extender(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_extended_pictographic')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_extended_pictographic(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_graph')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_graph(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_grapheme_base')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_grapheme_base(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_grapheme_extend')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_grapheme_extend(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_grapheme_link')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_grapheme_link(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_hex_digit')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_hex_digit(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_hyphen')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_hyphen(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_id_continue')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_id_continue(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_ideographic')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_ideographic(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_id_start')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_id_start(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_ids_binary_operator')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_ids_binary_operator(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_ids_trinary_operator')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_ids_trinary_operator(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_join_control')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_join_control(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_logical_order_exception')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_logical_order_exception(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_lowercase')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_lowercase(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_math')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_math(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_noncharacter_code_point')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_noncharacter_code_point(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_nfc_inert')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_nfc_inert(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_nfd_inert')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_nfd_inert(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_nfkc_inert')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_nfkc_inert(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_nfkd_inert')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_nfkd_inert(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_pattern_syntax')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_pattern_syntax(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_pattern_white_space')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_pattern_white_space(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_prepended_concatenation_mark')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_prepended_concatenation_mark(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_print')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_print(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_quotation_mark')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_quotation_mark(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_radical')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_radical(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_regional_indicator')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_regional_indicator(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_soft_dotted')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_soft_dotted(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_segment_starter')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_segment_starter(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_case_sensitive')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_case_sensitive(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_sentence_terminal')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_sentence_terminal(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_terminal_punctuation')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_terminal_punctuation(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_unified_ideograph')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_unified_ideograph(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_uppercase')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_uppercase(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_variation_selector')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_variation_selector(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_white_space')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_white_space(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_xdigit')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_xdigit(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_xid_continue')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_xid_continue(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_xid_start')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_xid_start(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size)>(isLeaf: true, symbol: 'ICU4XCodePointSetData_load_for_ecma262')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XCodePointSetData_load_for_ecma262(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Uint8> propertyNameData, int propertyNameLength);
