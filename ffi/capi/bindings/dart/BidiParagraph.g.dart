// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// Bidi information for a single processed paragraph
final class BidiParagraph implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  BidiParagraph._(this._underlying) {
    _finalizer.attach(this, _underlying.cast());
  }

  static final _finalizer = ffi.NativeFinalizer(_capi('ICU4XBidiParagraph_destroy'));

  /// Given a paragraph index `n` within the surrounding text, this sets this
  /// object to the paragraph at that index. Returns `Error::OutOfBoundsError` when out of bounds.
  ///
  /// This is equivalent to calling `paragraph_at()` on `BidiInfo` but doesn't
  /// create a new object
  ///
  /// Throws [Error] on failure.
  void setParagraphInText(int n) {
    final result = _ICU4XBidiParagraph_set_paragraph_in_text(_underlying, n);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XBidiParagraph_set_paragraph_in_text =
    _capi<ffi.NativeFunction<_ResultVoidInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Size)>>('ICU4XBidiParagraph_set_paragraph_in_text')
      .asFunction<_ResultVoidInt32 Function(ffi.Pointer<ffi.Opaque>, int)>(isLeaf: true);

  /// The primary direction of this paragraph
  ///
  /// See the [Rust documentation for `level_at`](https://docs.rs/unicode_bidi/latest/unicode_bidi/struct.Paragraph.html#method.level_at) for more information.
  BidiDirection get direction {
    final result = _ICU4XBidiParagraph_direction(_underlying);
    return BidiDirection.values[result];
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XBidiParagraph_direction =
    _capi<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XBidiParagraph_direction')
      .asFunction<int Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// The number of bytes in this paragraph
  ///
  /// See the [Rust documentation for `len`](https://docs.rs/unicode_bidi/latest/unicode_bidi/struct.ParagraphInfo.html#method.len) for more information.
  int get size {
    final result = _ICU4XBidiParagraph_size(_underlying);
    return result;
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XBidiParagraph_size =
    _capi<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XBidiParagraph_size')
      .asFunction<int Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// The start index of this paragraph within the source text
  int get rangeStart {
    final result = _ICU4XBidiParagraph_range_start(_underlying);
    return result;
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XBidiParagraph_range_start =
    _capi<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XBidiParagraph_range_start')
      .asFunction<int Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// The end index of this paragraph within the source text
  int get rangeEnd {
    final result = _ICU4XBidiParagraph_range_end(_underlying);
    return result;
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XBidiParagraph_range_end =
    _capi<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XBidiParagraph_range_end')
      .asFunction<int Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// Reorder a line based on display order. The ranges are specified relative to the source text and must be contained
  /// within this paragraph's range.
  ///
  /// See the [Rust documentation for `level_at`](https://docs.rs/unicode_bidi/latest/unicode_bidi/struct.Paragraph.html#method.level_at) for more information.
  ///
  /// Throws [Error] on failure.
  String reorderLine(int rangeStart, int rangeEnd) {
    final writeable = _Writeable();
    final result = _ICU4XBidiParagraph_reorder_line(_underlying, rangeStart, rangeEnd, writeable._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return writeable.finalize();
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XBidiParagraph_reorder_line =
    _capi<ffi.NativeFunction<_ResultVoidInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Size, ffi.Size, ffi.Pointer<ffi.Opaque>)>>('ICU4XBidiParagraph_reorder_line')
      .asFunction<_ResultVoidInt32 Function(ffi.Pointer<ffi.Opaque>, int, int, ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// Get the BIDI level at a particular byte index in this paragraph.
  /// This integer is conceptually a `unicode_bidi::Level`,
  /// and can be further inspected using the static methods on ICU4XBidi.
  ///
  /// Returns 0 (equivalent to `Level::ltr()`) on error
  ///
  /// See the [Rust documentation for `level_at`](https://docs.rs/unicode_bidi/latest/unicode_bidi/struct.Paragraph.html#method.level_at) for more information.
  int levelAt(int pos) {
    final result = _ICU4XBidiParagraph_level_at(_underlying, pos);
    return result;
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XBidiParagraph_level_at =
    _capi<ffi.NativeFunction<ffi.Uint8 Function(ffi.Pointer<ffi.Opaque>, ffi.Size)>>('ICU4XBidiParagraph_level_at')
      .asFunction<int Function(ffi.Pointer<ffi.Opaque>, int)>(isLeaf: true);
}
