// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// FFI version of `PluralRules`.
///
/// See the [Rust documentation for `PluralRules`](https://docs.rs/icu/latest/icu/plurals/struct.PluralRules.html) for more information.
final class PluralRules implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  PluralRules._(this._underlying) {
    _finalizer.attach(this, _underlying.cast());
  }

  static final _finalizer = ffi.NativeFinalizer(_capi('ICU4XPluralRules_destroy'));

  /// Construct an [`PluralRules`] for the given locale, for cardinal numbers
  ///
  /// See the [Rust documentation for `try_new_cardinal`](https://docs.rs/icu/latest/icu/plurals/struct.PluralRules.html#method.try_new_cardinal) for more information.
  ///
  /// Throws [Error] on failure.
  factory PluralRules.cardinal(DataProvider provider, Locale locale) {
    final result = _ICU4XPluralRules_create_cardinal(provider._underlying, locale._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return PluralRules._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPluralRules_create_cardinal =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>>('ICU4XPluralRules_create_cardinal')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// Construct an [`PluralRules`] for the given locale, for ordinal numbers
  ///
  /// See the [Rust documentation for `try_new_ordinal`](https://docs.rs/icu/latest/icu/plurals/struct.PluralRules.html#method.try_new_ordinal) for more information.
  ///
  /// Throws [Error] on failure.
  factory PluralRules.ordinal(DataProvider provider, Locale locale) {
    final result = _ICU4XPluralRules_create_ordinal(provider._underlying, locale._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return PluralRules._(result.union.ok);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPluralRules_create_ordinal =
    _capi<ffi.NativeFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>>('ICU4XPluralRules_create_ordinal')
      .asFunction<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// Get the category for a given number represented as operands
  ///
  /// See the [Rust documentation for `category_for`](https://docs.rs/icu/latest/icu/plurals/struct.PluralRules.html#method.category_for) for more information.
  PluralCategory categoryFor(PluralOperands op) {
    final result = _ICU4XPluralRules_category_for(_underlying, op._underlying);
    return PluralCategory.values[result];
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPluralRules_category_for =
    _capi<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>>('ICU4XPluralRules_category_for')
      .asFunction<int Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true);

  /// Get all of the categories needed in the current locale
  ///
  /// See the [Rust documentation for `categories`](https://docs.rs/icu/latest/icu/plurals/struct.PluralRules.html#method.categories) for more information.
  PluralCategories get categories {
    final result = _ICU4XPluralRules_categories(_underlying);
    return PluralCategories._(result);
  }

  // ignore: non_constant_identifier_names
  static final _ICU4XPluralRules_categories =
    _capi<ffi.NativeFunction<_PluralCategoriesFfi Function(ffi.Pointer<ffi.Opaque>)>>('ICU4XPluralRules_categories')
      .asFunction<_PluralCategoriesFfi Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true);
}
