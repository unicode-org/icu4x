// generated by diplomat-tool

part of 'lib.g.dart';

/// See the [Rust documentation for `PluralRules`](https://docs.rs/icu/latest/icu/plurals/struct.PluralRules.html) for more information.
final class PluralRules implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  PluralRules._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_ICU4XPluralRules_destroy));

  /// Construct an [`PluralRules`] for the given locale, for cardinal numbers
  ///
  /// See the [Rust documentation for `try_new_cardinal`](https://docs.rs/icu/latest/icu/plurals/struct.PluralRules.html#method.try_new_cardinal) for more information.
  ///
  /// Throws [DataError] on failure.
  factory PluralRules.cardinal(DataProvider provider, Locale locale) {
    final result = _ICU4XPluralRules_create_cardinal(provider._ffi, locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return PluralRules._fromFfi(result.union.ok, []);
  }

  /// Construct an [`PluralRules`] for the given locale, for ordinal numbers
  ///
  /// See the [Rust documentation for `try_new_ordinal`](https://docs.rs/icu/latest/icu/plurals/struct.PluralRules.html#method.try_new_ordinal) for more information.
  ///
  /// Throws [DataError] on failure.
  factory PluralRules.ordinal(DataProvider provider, Locale locale) {
    final result = _ICU4XPluralRules_create_ordinal(provider._ffi, locale._ffi);
    if (!result.isOk) {
      throw DataError.values[result.union.err];
    }
    return PluralRules._fromFfi(result.union.ok, []);
  }

  /// Get the category for a given number represented as operands
  ///
  /// See the [Rust documentation for `category_for`](https://docs.rs/icu/latest/icu/plurals/struct.PluralRules.html#method.category_for) for more information.
  PluralCategory categoryFor(PluralOperands op) {
    final result = _ICU4XPluralRules_category_for(_ffi, op._ffi);
    return PluralCategory.values[result];
  }

  /// Get all of the categories needed in the current locale
  ///
  /// See the [Rust documentation for `categories`](https://docs.rs/icu/latest/icu/plurals/struct.PluralRules.html#method.categories) for more information.
  PluralCategories get categories {
    final result = _ICU4XPluralRules_categories(_ffi);
    return PluralCategories._fromFfi(result);
  }
}

@meta.ResourceIdentifier('ICU4XPluralRules_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'ICU4XPluralRules_destroy')
// ignore: non_constant_identifier_names
external void _ICU4XPluralRules_destroy(ffi.Pointer<ffi.Void> self);

@meta.ResourceIdentifier('ICU4XPluralRules_create_cardinal')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XPluralRules_create_cardinal')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XPluralRules_create_cardinal(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale);

@meta.ResourceIdentifier('ICU4XPluralRules_create_ordinal')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XPluralRules_create_ordinal')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XPluralRules_create_ordinal(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale);

@meta.ResourceIdentifier('ICU4XPluralRules_category_for')
@ffi.Native<ffi.Int32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XPluralRules_category_for')
// ignore: non_constant_identifier_names
external int _ICU4XPluralRules_category_for(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Opaque> op);

@meta.ResourceIdentifier('ICU4XPluralRules_categories')
@ffi.Native<_PluralCategoriesFfi Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XPluralRules_categories')
// ignore: non_constant_identifier_names
external _PluralCategoriesFfi _ICU4XPluralRules_categories(ffi.Pointer<ffi.Opaque> self);
