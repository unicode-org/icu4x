// generated by diplomat-tool

part of 'lib.g.dart';

/// See the [Rust documentation for `PluralOperands`](https://docs.rs/icu/latest/icu/plurals/struct.PluralOperands.html) for more information.
final class PluralOperands implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  PluralOperands._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_ICU4XPluralOperands_destroy));

  /// Construct for a given string representing a number
  ///
  /// See the [Rust documentation for `from_str`](https://docs.rs/icu/latest/icu/plurals/struct.PluralOperands.html#method.from_str) for more information.
  ///
  /// Throws [Error] on failure.
  factory PluralOperands.fromString(String s) {
    final temp = ffi2.Arena();
    final sView = s.utf8View;
    final result = _ICU4XPluralOperands_create_from_string(sView.allocIn(temp), sView.length);
    temp.releaseAll();
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return PluralOperands._fromFfi(result.union.ok, []);
  }

  /// Construct from a FixedDecimal
  ///
  /// Retains at most 18 digits each from the integer and fraction parts.
  factory PluralOperands.fromFixedDecimal(FixedDecimal x) {
    final result = _ICU4XPluralOperands_create_from_fixed_decimal(x._ffi);
    return PluralOperands._fromFfi(result, []);
  }
}

@meta.ResourceIdentifier('ICU4XPluralOperands_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'ICU4XPluralOperands_destroy')
// ignore: non_constant_identifier_names
external void _ICU4XPluralOperands_destroy(ffi.Pointer<ffi.Void> self);

@meta.ResourceIdentifier('ICU4XPluralOperands_create_from_string')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>(isLeaf: true, symbol: 'ICU4XPluralOperands_create_from_string')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XPluralOperands_create_from_string(ffi.Pointer<ffi.Uint8> sData, int sLength);

@meta.ResourceIdentifier('ICU4XPluralOperands_create_from_fixed_decimal')
@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XPluralOperands_create_from_fixed_decimal')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _ICU4XPluralOperands_create_from_fixed_decimal(ffi.Pointer<ffi.Opaque> x);
