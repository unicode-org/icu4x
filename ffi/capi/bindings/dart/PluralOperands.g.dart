// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// FFI version of `PluralOperands`.
///
/// See the [Rust documentation for `PluralOperands`](https://docs.rs/icu/latest/icu/plurals/struct.PluralOperands.html) for more information.
final class PluralOperands implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  PluralOperands._(this._underlying, bool isOwned) {
    if (isOwned) {
      _finalizer.attach(this, _underlying.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_ICU4XPluralOperands_destroy));

  /// Construct for a given string representing a number
  ///
  /// See the [Rust documentation for `from_str`](https://docs.rs/icu/latest/icu/plurals/struct.PluralOperands.html#method.from_str) for more information.
  ///
  /// Throws [Error] on failure.
  factory PluralOperands.fromString(String s) {
    final temp = ffi2.Arena();
    final sView = s.utf8View;
    final result = _ICU4XPluralOperands_create_from_string(sView.pointer(temp), sView.length);
    temp.releaseAll();
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return PluralOperands._(result.union.ok, true);
  }
}

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'ICU4XPluralOperands_destroy')
// ignore: non_constant_identifier_names
external void _ICU4XPluralOperands_destroy(ffi.Pointer<ffi.Void> self);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Uint8>, ffi.Size)>(isLeaf: true, symbol: 'ICU4XPluralOperands_create_from_string')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XPluralOperands_create_from_string(ffi.Pointer<ffi.Uint8> sData, int sLength);
