// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

/// An ICU4X ScriptWithExtensions map object, capable of holding a map of codepoints to scriptextensions values
///
/// See the [Rust documentation for `ScriptWithExtensions`](https://docs.rs/icu/latest/icu/properties/script/struct.ScriptWithExtensions.html) for more information.
final class ScriptWithExtensions implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _underlying;

  ScriptWithExtensions._(this._underlying, bool isOwned) {
    if (isOwned) {
      _finalizer.attach(this, _underlying.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_ICU4XScriptWithExtensions_destroy));

  /// See the [Rust documentation for `script_with_extensions`](https://docs.rs/icu/latest/icu/properties/script/fn.script_with_extensions.html) for more information.
  ///
  /// Throws [Error] on failure.
  factory ScriptWithExtensions(DataProvider provider) {
    final result = _ICU4XScriptWithExtensions_create(provider._underlying);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._underlying == result.union.err);
    }
    return ScriptWithExtensions._(result.union.ok, true);
  }

  /// Get the Script property value for a code point
  ///
  /// See the [Rust documentation for `get_script_val`](https://docs.rs/icu/latest/icu/properties/script/struct.ScriptWithExtensionsBorrowed.html#method.get_script_val) for more information.
  int getScriptVal(int codePoint) {
    final result = _ICU4XScriptWithExtensions_get_script_val(_underlying, codePoint);
    return result;
  }

  /// Check if the Script_Extensions property of the given code point covers the given script
  ///
  /// See the [Rust documentation for `has_script`](https://docs.rs/icu/latest/icu/properties/script/struct.ScriptWithExtensionsBorrowed.html#method.has_script) for more information.
  bool hasScript(int codePoint, int script) {
    final result = _ICU4XScriptWithExtensions_has_script(_underlying, codePoint, script);
    return result;
  }

  /// Borrow this object for a slightly faster variant with more operations
  ///
  /// See the [Rust documentation for `as_borrowed`](https://docs.rs/icu/latest/icu/properties/script/struct.ScriptWithExtensions.html#method.as_borrowed) for more information.
  ScriptWithExtensionsBorrowed get asBorrowed {
    final result = _ICU4XScriptWithExtensions_as_borrowed(_underlying);
    return ScriptWithExtensionsBorrowed._(result, true);
  }

  /// Get a list of ranges of code points that contain this script in their Script_Extensions values
  ///
  /// See the [Rust documentation for `get_script_extensions_ranges`](https://docs.rs/icu/latest/icu/properties/script/struct.ScriptWithExtensionsBorrowed.html#method.get_script_extensions_ranges) for more information.
  CodePointRangeIterator iterRangesForScript(int script) {
    final result = _ICU4XScriptWithExtensions_iter_ranges_for_script(_underlying, script);
    return CodePointRangeIterator._(result, true);
  }
}

@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'ICU4XScriptWithExtensions_destroy')
// ignore: non_constant_identifier_names
external void _ICU4XScriptWithExtensions_destroy(ffi.Pointer<ffi.Void> self);

@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XScriptWithExtensions_create')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XScriptWithExtensions_create(ffi.Pointer<ffi.Opaque> provider);

@ffi.Native<ffi.Uint16 Function(ffi.Pointer<ffi.Opaque>, ffi.Uint32)>(isLeaf: true, symbol: 'ICU4XScriptWithExtensions_get_script_val')
// ignore: non_constant_identifier_names
external int _ICU4XScriptWithExtensions_get_script_val(ffi.Pointer<ffi.Opaque> self, int codePoint);

@ffi.Native<ffi.Bool Function(ffi.Pointer<ffi.Opaque>, ffi.Uint32, ffi.Uint16)>(isLeaf: true, symbol: 'ICU4XScriptWithExtensions_has_script')
// ignore: non_constant_identifier_names
external bool _ICU4XScriptWithExtensions_has_script(ffi.Pointer<ffi.Opaque> self, int codePoint, int script);

@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XScriptWithExtensions_as_borrowed')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _ICU4XScriptWithExtensions_as_borrowed(ffi.Pointer<ffi.Opaque> self);

@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Opaque>, ffi.Uint16)>(isLeaf: true, symbol: 'ICU4XScriptWithExtensions_iter_ranges_for_script')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _ICU4XScriptWithExtensions_iter_ranges_for_script(ffi.Pointer<ffi.Opaque> self, int script);
