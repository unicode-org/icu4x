// generated by diplomat-tool
// dart format off

part of 'lib.g.dart';

/// See the [Rust documentation for `FixedCalendarDateTimeFormatter`](https://docs.rs/icu/latest/icu/datetime/struct.FixedCalendarDateTimeFormatter.html) for more information.
final class NeoZonedDateTimeFormatterGregorian implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  NeoZonedDateTimeFormatterGregorian._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_icu4x_NeoZonedDateTimeFormatterGregorian_destroy_mv1));

  /// See the [Rust documentation for `GenericShort`](https://docs.rs/icu/latest/icu/datetime/fieldsets/zone/struct.GenericShort.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoZonedDateTimeFormatterGregorian.genericShort(Locale locale, DateTimeFormatterGregorian formatter) {
    final result = _icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_short_mv1(locale._ffi, formatter._ffi);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoZonedDateTimeFormatterGregorian._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `GenericShort`](https://docs.rs/icu/latest/icu/datetime/fieldsets/zone/struct.GenericShort.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoZonedDateTimeFormatterGregorian.genericShortWithProvider(DataProvider provider, Locale locale, DateTimeFormatterGregorian formatter) {
    final result = _icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_short_with_provider_mv1(provider._ffi, locale._ffi, formatter._ffi);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoZonedDateTimeFormatterGregorian._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `GenericLong`](https://docs.rs/icu/latest/icu/datetime/fieldsets/zone/struct.GenericLong.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoZonedDateTimeFormatterGregorian.genericLong(Locale locale, DateTimeFormatterGregorian formatter) {
    final result = _icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_long_mv1(locale._ffi, formatter._ffi);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoZonedDateTimeFormatterGregorian._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `GenericLong`](https://docs.rs/icu/latest/icu/datetime/fieldsets/zone/struct.GenericLong.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoZonedDateTimeFormatterGregorian.genericLongWithProvider(DataProvider provider, Locale locale, DateTimeFormatterGregorian formatter) {
    final result = _icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_long_with_provider_mv1(provider._ffi, locale._ffi, formatter._ffi);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoZonedDateTimeFormatterGregorian._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `SpecificShort`](https://docs.rs/icu/latest/icu/datetime/fieldsets/zone/struct.SpecificShort.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoZonedDateTimeFormatterGregorian.specificShort(Locale locale, DateTimeFormatterGregorian formatter) {
    final result = _icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_short_mv1(locale._ffi, formatter._ffi);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoZonedDateTimeFormatterGregorian._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `SpecificShort`](https://docs.rs/icu/latest/icu/datetime/fieldsets/zone/struct.SpecificShort.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoZonedDateTimeFormatterGregorian.specificShortWithProvider(DataProvider provider, Locale locale, DateTimeFormatterGregorian formatter) {
    final result = _icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_short_with_provider_mv1(provider._ffi, locale._ffi, formatter._ffi);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoZonedDateTimeFormatterGregorian._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `SpecificLong`](https://docs.rs/icu/latest/icu/datetime/fieldsets/zone/struct.SpecificLong.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoZonedDateTimeFormatterGregorian.specificLong(Locale locale, DateTimeFormatterGregorian formatter) {
    final result = _icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_long_mv1(locale._ffi, formatter._ffi);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoZonedDateTimeFormatterGregorian._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `SpecificLong`](https://docs.rs/icu/latest/icu/datetime/fieldsets/zone/struct.SpecificLong.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoZonedDateTimeFormatterGregorian.specificLongWithProvider(DataProvider provider, Locale locale, DateTimeFormatterGregorian formatter) {
    final result = _icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_long_with_provider_mv1(provider._ffi, locale._ffi, formatter._ffi);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoZonedDateTimeFormatterGregorian._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `LocalizedOffsetShort`](https://docs.rs/icu/latest/icu/datetime/fieldsets/zone/struct.LocalizedOffsetShort.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoZonedDateTimeFormatterGregorian.localizedOffsetShort(Locale locale, DateTimeFormatterGregorian formatter) {
    final result = _icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_short_mv1(locale._ffi, formatter._ffi);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoZonedDateTimeFormatterGregorian._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `LocalizedOffsetShort`](https://docs.rs/icu/latest/icu/datetime/fieldsets/zone/struct.LocalizedOffsetShort.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoZonedDateTimeFormatterGregorian.localizedOffsetShortWithProvider(DataProvider provider, Locale locale, DateTimeFormatterGregorian formatter) {
    final result = _icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_short_with_provider_mv1(provider._ffi, locale._ffi, formatter._ffi);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoZonedDateTimeFormatterGregorian._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `LocalizedOffsetLong`](https://docs.rs/icu/latest/icu/datetime/fieldsets/zone/struct.LocalizedOffsetLong.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoZonedDateTimeFormatterGregorian.localizedOffsetLong(Locale locale, DateTimeFormatterGregorian formatter) {
    final result = _icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_long_mv1(locale._ffi, formatter._ffi);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoZonedDateTimeFormatterGregorian._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `LocalizedOffsetLong`](https://docs.rs/icu/latest/icu/datetime/fieldsets/zone/struct.LocalizedOffsetLong.html) for more information.
  ///
  /// Throws [DateTimeFormatterLoadError] on failure.
  factory NeoZonedDateTimeFormatterGregorian.localizedOffsetLongWithProvider(DataProvider provider, Locale locale, DateTimeFormatterGregorian formatter) {
    final result = _icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_long_with_provider_mv1(provider._ffi, locale._ffi, formatter._ffi);
    if (!result.isOk) {
      throw DateTimeFormatterLoadError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return NeoZonedDateTimeFormatterGregorian._fromFfi(result.union.ok, []);
  }

  /// See the [Rust documentation for `format`](https://docs.rs/icu/latest/icu/datetime/struct.FixedCalendarDateTimeFormatter.html#method.format) for more information.
  ///
  /// Throws [DateTimeWriteError] on failure.
  String formatIso(IsoDate date, Time time, TimeZoneInfo zone) {
    final write = _Write();
    final result = _icu4x_NeoZonedDateTimeFormatterGregorian_format_iso_mv1(_ffi, date._ffi, time._ffi, zone._ffi, write._ffi);
    if (!result.isOk) {
      throw DateTimeWriteError.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return write.finalize();
  }
}

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_destroy_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_destroy_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_NeoZonedDateTimeFormatterGregorian_destroy_mv1(ffi.Pointer<ffi.Void> self);

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_short_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_short_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_short_mv1(ffi.Pointer<ffi.Opaque> locale, ffi.Pointer<ffi.Opaque> formatter);

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_short_with_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_short_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_short_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale, ffi.Pointer<ffi.Opaque> formatter);

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_long_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_long_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_long_mv1(ffi.Pointer<ffi.Opaque> locale, ffi.Pointer<ffi.Opaque> formatter);

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_long_with_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_long_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoZonedDateTimeFormatterGregorian_create_generic_long_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale, ffi.Pointer<ffi.Opaque> formatter);

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_short_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_short_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_short_mv1(ffi.Pointer<ffi.Opaque> locale, ffi.Pointer<ffi.Opaque> formatter);

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_short_with_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_short_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_short_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale, ffi.Pointer<ffi.Opaque> formatter);

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_long_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_long_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_long_mv1(ffi.Pointer<ffi.Opaque> locale, ffi.Pointer<ffi.Opaque> formatter);

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_long_with_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_long_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoZonedDateTimeFormatterGregorian_create_specific_long_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale, ffi.Pointer<ffi.Opaque> formatter);

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_short_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_short_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_short_mv1(ffi.Pointer<ffi.Opaque> locale, ffi.Pointer<ffi.Opaque> formatter);

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_short_with_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_short_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_short_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale, ffi.Pointer<ffi.Opaque> formatter);

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_long_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_long_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_long_mv1(ffi.Pointer<ffi.Opaque> locale, ffi.Pointer<ffi.Opaque> formatter);

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_long_with_provider_mv1')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_long_with_provider_mv1')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _icu4x_NeoZonedDateTimeFormatterGregorian_create_localized_offset_long_with_provider_mv1(ffi.Pointer<ffi.Opaque> provider, ffi.Pointer<ffi.Opaque> locale, ffi.Pointer<ffi.Opaque> formatter);

@_DiplomatFfiUse('icu4x_NeoZonedDateTimeFormatterGregorian_format_iso_mv1')
@ffi.Native<_ResultVoidInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_NeoZonedDateTimeFormatterGregorian_format_iso_mv1')
// ignore: non_constant_identifier_names
external _ResultVoidInt32 _icu4x_NeoZonedDateTimeFormatterGregorian_format_iso_mv1(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Opaque> date, ffi.Pointer<ffi.Opaque> time, ffi.Pointer<ffi.Opaque> zone, ffi.Pointer<ffi.Opaque> write);

// dart format on
