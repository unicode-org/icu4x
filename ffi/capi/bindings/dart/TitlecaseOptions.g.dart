// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class _TitlecaseOptionsFfi extends ffi.Struct {
  @ffi.Int32()
  external int leadingAdjustment;
  @ffi.Int32()
  external int trailingCase;
}

/// See the [Rust documentation for `TitlecaseOptions`](https://docs.rs/icu/latest/icu/casemap/titlecase/struct.TitlecaseOptions.html) for more information.
final class TitlecaseOptions {
  LeadingAdjustment leadingAdjustment;
  TrailingCase trailingCase;

  // ignore: unused_element
  // Internal constructor from FFI.
  // This struct contains borrowed fields, so this takes in a list of
  // "edges" corresponding to where each lifetime's data may have been borrowed from
  // and passes it down to individual fields containing the borrow.
  // This method does not attempt to handle any dependencies between lifetimes, the caller
  // should handle this when constructing edge arrays.
  TitlecaseOptions._(_TitlecaseOptionsFfi underlying) :
    leadingAdjustment = LeadingAdjustment.values[underlying.leadingAdjustment],
    trailingCase = TrailingCase.values[underlying.trailingCase];

  // ignore: unused_element
  _TitlecaseOptionsFfi _pointer(ffi.Allocator temp) {
    final pointer = temp<_TitlecaseOptionsFfi>();
    pointer.ref.leadingAdjustment = leadingAdjustment.index;
    pointer.ref.trailingCase = trailingCase.index;
    return pointer.ref;
  }

  /// See the [Rust documentation for `default`](https://docs.rs/icu/latest/icu/casemap/titlecase/struct.TitlecaseOptions.html#method.default) for more information.
  factory TitlecaseOptions({LeadingAdjustment? leadingAdjustment, TrailingCase? trailingCase}) {
    final result = _ICU4XTitlecaseOptionsV1_default_options();
    final dart = TitlecaseOptions._(result);
    if (leadingAdjustment != null) {
      dart.leadingAdjustment = leadingAdjustment;
    }
    if (trailingCase != null) {
      dart.trailingCase = trailingCase;
    }
    return dart;
  }

  @override
  bool operator ==(Object other) =>
      other is TitlecaseOptions &&
      other.leadingAdjustment == this.leadingAdjustment &&
      other.trailingCase == this.trailingCase;

  @override
  int get hashCode => Object.hashAll([
        this.leadingAdjustment,
        this.trailingCase,
      ]);
}

@meta.ResourceIdentifier()
@ffi.Native<_TitlecaseOptionsFfi Function()>(isLeaf: true, symbol: 'ICU4XTitlecaseOptionsV1_default_options')
// ignore: non_constant_identifier_names
external _TitlecaseOptionsFfi _ICU4XTitlecaseOptionsV1_default_options();
