// generated by diplomat-tool

part of 'lib.g.dart';

/// Thin wrapper around a vector that maps visual indices to source indices
///
/// `map[visualIndex] = sourceIndex`
///
/// Produced by `reorder_visual()` on [`Bidi`].
final class ReorderedIndexMap implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  ReorderedIndexMap._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_icu4x_ReorderedIndexMap_destroy_mv1));

  /// Get this as a slice/array of indices
  core.List<int> get asSlice {
    // This lifetime edge depends on lifetimes: 'a
    core.List<Object> aEdges = [this];
    final result = _icu4x_ReorderedIndexMap_as_slice_mv1(_ffi);
    return result._toDart(aEdges);
  }

  /// The length of this map
  int get length {
    final result = _icu4x_ReorderedIndexMap_len_mv1(_ffi);
    return result;
  }

  /// Whether this map is empty
  bool get isEmpty {
    final result = _icu4x_ReorderedIndexMap_is_empty_mv1(_ffi);
    return result;
  }

  /// Get element at `index`. Returns 0 when out of bounds
  /// (note that 0 is also a valid in-bounds value, please use `len()`
  /// to avoid out-of-bounds)
  int operator [](int index) {
    final result = _icu4x_ReorderedIndexMap_get_mv1(_ffi, index);
    return result;
  }
}

@meta.ResourceIdentifier('icu4x_ReorderedIndexMap_destroy_mv1')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'icu4x_ReorderedIndexMap_destroy_mv1')
// ignore: non_constant_identifier_names
external void _icu4x_ReorderedIndexMap_destroy_mv1(ffi.Pointer<ffi.Void> self);

@meta.ResourceIdentifier('icu4x_ReorderedIndexMap_as_slice_mv1')
@ffi.Native<_SliceUsize Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ReorderedIndexMap_as_slice_mv1')
// ignore: non_constant_identifier_names
external _SliceUsize _icu4x_ReorderedIndexMap_as_slice_mv1(ffi.Pointer<ffi.Opaque> self);

@meta.ResourceIdentifier('icu4x_ReorderedIndexMap_len_mv1')
@ffi.Native<ffi.Size Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ReorderedIndexMap_len_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_ReorderedIndexMap_len_mv1(ffi.Pointer<ffi.Opaque> self);

@meta.ResourceIdentifier('icu4x_ReorderedIndexMap_is_empty_mv1')
@ffi.Native<ffi.Bool Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'icu4x_ReorderedIndexMap_is_empty_mv1')
// ignore: non_constant_identifier_names
external bool _icu4x_ReorderedIndexMap_is_empty_mv1(ffi.Pointer<ffi.Opaque> self);

@meta.ResourceIdentifier('icu4x_ReorderedIndexMap_get_mv1')
@ffi.Native<ffi.Size Function(ffi.Pointer<ffi.Opaque>, ffi.Size)>(isLeaf: true, symbol: 'icu4x_ReorderedIndexMap_get_mv1')
// ignore: non_constant_identifier_names
external int _icu4x_ReorderedIndexMap_get_mv1(ffi.Pointer<ffi.Opaque> self, int index);
