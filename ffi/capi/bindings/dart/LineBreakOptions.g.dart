// generated by diplomat-tool

// https://github.com/dart-lang/sdk/issues/53946
// ignore_for_file: non_native_function_type_argument_to_pointer

part of 'lib.g.dart';

final class _LineBreakOptionsFfi extends ffi.Struct {
  @ffi.Int32()
  external int strictness;
  @ffi.Int32()
  external int wordOption;
  @ffi.Bool()
  external bool jaZh;
}

/// See the [Rust documentation for `LineBreakOptions`](https://docs.rs/icu/latest/icu/segmenter/struct.LineBreakOptions.html) for more information.
final class LineBreakOptions {
  LineBreakStrictness strictness;
  LineBreakWordOption wordOption;
  bool jaZh;

  LineBreakOptions({required this.strictness, required this.wordOption, required this.jaZh});

  // ignore: unused_element
  LineBreakOptions._(_LineBreakOptionsFfi underlying) :
    strictness = LineBreakStrictness.values[underlying.strictness],
    wordOption = LineBreakWordOption.values[underlying.wordOption],
    jaZh = underlying.jaZh;

  // ignore: unused_element
  _LineBreakOptionsFfi _pointer(ffi.Allocator temp) {
    final pointer = temp<_LineBreakOptionsFfi>();
    pointer.ref.strictness = strictness.index;
    pointer.ref.wordOption = wordOption.index;
    pointer.ref.jaZh = jaZh;
    return pointer.ref;
  }

  @override
  bool operator ==(Object other) =>
      other is LineBreakOptions &&
      other.strictness == this.strictness &&
      other.wordOption == this.wordOption &&
      other.jaZh == this.jaZh;

  @override
  int get hashCode => Object.hashAll([
        this.strictness,
        this.wordOption,
        this.jaZh,
      ]);
}
