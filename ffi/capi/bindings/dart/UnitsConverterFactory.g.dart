// generated by diplomat-tool

part of 'lib.g.dart';

/// An ICU4X Units Converter Factory object, capable of creating converters a [`UnitsConverter`]
/// from [`MeasureUnit`]s.
/// Also, it can parse the CLDR unit identifier (e.g. `meter-per-square-second`) and get the [`MeasureUnit`].
///
/// See the [Rust documentation for `ConverterFactory`](https://docs.rs/icu/latest/icu/experimental/units/converter_factory/struct.ConverterFactory.html) for more information.
final class UnitsConverterFactory implements ffi.Finalizable {
  final ffi.Pointer<ffi.Opaque> _ffi;

  // These are "used" in the sense that they keep dependencies alive
  // ignore: unused_field
  final core.List<Object> _selfEdge;

  // This takes in a list of lifetime edges (including for &self borrows)
  // corresponding to data this may borrow from. These should be flat arrays containing
  // references to objects, and this object will hold on to them to keep them alive and
  // maintain borrow validity.
  UnitsConverterFactory._fromFfi(this._ffi, this._selfEdge) {
    if (_selfEdge.isEmpty) {
      _finalizer.attach(this, _ffi.cast());
    }
  }

  static final _finalizer = ffi.NativeFinalizer(ffi.Native.addressOf(_ICU4XUnitsConverterFactory_destroy));

  /// Construct a new [`UnitsConverterFactory`] instance.
  ///
  /// See the [Rust documentation for `new`](https://docs.rs/icu/latest/icu/experimental/units/converter_factory/struct.ConverterFactory.html#method.new) for more information.
  ///
  /// Throws [Error] on failure.
  factory UnitsConverterFactory(DataProvider provider) {
    final result = _ICU4XUnitsConverterFactory_create(provider._ffi);
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return UnitsConverterFactory._fromFfi(result.union.ok, []);
  }

  /// Creates a new [`UnitsConverter`] from the input and output `MeasureUnit`s.
  UnitsConverter? converter(MeasureUnit inputUnit, MeasureUnit outputUnit) {
    final result = _ICU4XUnitsConverterFactory_converter(_ffi, inputUnit._ffi, outputUnit._ffi);
    return result.address == 0 ? null : UnitsConverter._fromFfi(result, []);
  }

  /// Parses the CLDR unit identifier (e.g. `meter-per-square-second`) and returns the corresponding [`MeasureUnit`].
  ///
  /// Throws [Error] on failure.
  MeasureUnit parse(String unitId) {
    final temp = ffi2.Arena();
    final unitIdView = unitId.utf8View;
    final result = _ICU4XUnitsConverterFactory_parse(_ffi, unitIdView.allocIn(temp), unitIdView.length);
    temp.releaseAll();
    if (!result.isOk) {
      throw Error.values.firstWhere((v) => v._ffi == result.union.err);
    }
    return MeasureUnit._fromFfi(result.union.ok, []);
  }

  /// Converts the input value in [`f64`] from the input unit to the output unit.
  /// NOTE:
  /// The conversion using [`f64`] is not as accurate as the conversion using ratios.
  double convertF64(double input) {
    final result = _ICU4XUnitsConverterFactory_convert_f64(_ffi, input);
    return result;
  }
}

@meta.ResourceIdentifier('ICU4XUnitsConverterFactory_destroy')
@ffi.Native<ffi.Void Function(ffi.Pointer<ffi.Void>)>(isLeaf: true, symbol: 'ICU4XUnitsConverterFactory_destroy')
// ignore: non_constant_identifier_names
external void _ICU4XUnitsConverterFactory_destroy(ffi.Pointer<ffi.Void> self);

@meta.ResourceIdentifier('ICU4XUnitsConverterFactory_create')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XUnitsConverterFactory_create')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XUnitsConverterFactory_create(ffi.Pointer<ffi.Opaque> provider);

@meta.ResourceIdentifier('ICU4XUnitsConverterFactory_converter')
@ffi.Native<ffi.Pointer<ffi.Opaque> Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Opaque>)>(isLeaf: true, symbol: 'ICU4XUnitsConverterFactory_converter')
// ignore: non_constant_identifier_names
external ffi.Pointer<ffi.Opaque> _ICU4XUnitsConverterFactory_converter(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Opaque> inputUnit, ffi.Pointer<ffi.Opaque> outputUnit);

@meta.ResourceIdentifier('ICU4XUnitsConverterFactory_parse')
@ffi.Native<_ResultOpaqueInt32 Function(ffi.Pointer<ffi.Opaque>, ffi.Pointer<ffi.Uint8>, ffi.Size)>(isLeaf: true, symbol: 'ICU4XUnitsConverterFactory_parse')
// ignore: non_constant_identifier_names
external _ResultOpaqueInt32 _ICU4XUnitsConverterFactory_parse(ffi.Pointer<ffi.Opaque> self, ffi.Pointer<ffi.Uint8> unitIdData, int unitIdLength);

@meta.ResourceIdentifier('ICU4XUnitsConverterFactory_convert_f64')
@ffi.Native<ffi.Double Function(ffi.Pointer<ffi.Opaque>, ffi.Double)>(isLeaf: true, symbol: 'ICU4XUnitsConverterFactory_convert_f64')
// ignore: non_constant_identifier_names
external double _ICU4XUnitsConverterFactory_convert_f64(ffi.Pointer<ffi.Opaque> self, double input);
