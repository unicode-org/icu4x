# This file is part of ICU4X. For terms of use, please see the file
# called LICENSE at the top level of the ICU4X source tree
# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

[package]
name = "icu_capi"
description = "C interface to ICU4X"
version = "0.1.0"
authors = ["The ICU4X Project Developers"]
edition = "2018"
resolver = "2"
repository = "https://github.com/unicode-org/icu4x"
license-file = "LICENSE"
categories = ["internationalization"]
# Keep this in sync with other crates unless there are exceptions
include = [
    "src/**/*",
    "examples/**/*",
    "benches/**/*",
    "tests/**/*",
    "include/**/*",
    "Cargo.toml",
    "LICENSE",
    "README.md"
]

[package.metadata.docs.rs]
all-features = true

[package.metadata.cargo-all-features]
# Omit most optional dependency features from permutation testing
skip_optional_dependencies = true
# Bench feature gets tested separately and is only relevant for CI.
# wearos/freertos/x86tiny are not relevant in normal environments,
# smaller_static gets tested on the FFI job anyway
denylist = ["bench", "wearos", "freertos", "x86tiny", "smaller_static"]

[lib]
crate-type = ["staticlib", "rlib"]
path = "src/lib.rs"

[features]
default = ["provider_fs", "provider_static"]
wearos = ["smaller_static", "freertos"]

provider_fs = ["icu_provider_fs", "icu_provider_fs/provider_json"]
provider_static = ["icu_testdata"]
smaller_static = ["provider_static"]

# Only 1 of the following features can be set. Doing so disables std and
# replaces the global allocator and panic handler with something else.
# If multiple of these features are set, it is as if none of them are set.

# Enables size-optimized builds on x86_64
x86tiny = ["dlmalloc"]

# Enables no_std builds for freertos
freertos = ["freertos-rust", "cortex-m"]

[dependencies]
fixed_decimal = { path = "../../utils/fixed_decimal" }
icu_decimal = { path = "../../components/decimal/" }
icu_locale_canonicalizer = { path = "../../components/locale_canonicalizer" }
icu_locid = { path = "../../components/locid" }
icu_locid_macros = { path = "../../components/locid/macros" }
icu_plurals = { path = "../../components/plurals/" }
icu_provider = { path = "../../provider/core", features = ["provider_serde"] }
icu_provider_blob = { path = "../../provider/blob" }
tinystr = { version = "0.4.10", features = ["alloc"], default-features = false }
writeable = { path = "../../utils/writeable/" }

# Run `cargo make diplomat-install` to get the right diplomat binary installed
diplomat = { git = "https://github.com/rust-diplomat/diplomat", rev = "48bb3c742eb0a186948256ac1d66569573613158" }
diplomat-runtime = { git = "https://github.com/rust-diplomat/diplomat", rev = "48bb3c742eb0a186948256ac1d66569573613158" }
icu_testdata = { version = "0.3", path = "../../provider/testdata", default-features = false, features = ["static"], optional = true }

# This cfg originates in dlmalloc/lib.rs
[target.'cfg(any(target_os = "linux", target_os = "macos", target_arch = "wasm32"))'.dependencies]
dlmalloc = { version = "0.2", optional = true, features = ["global"] }

[target.'cfg(target_arch = "wasm32")'.dependencies]
log = { version = "0.4" }

[target.'cfg(not(any(target_arch = "wasm32", target_os = "none")))'.dependencies]
icu_provider_fs = { path = "../../provider/fs/", optional = true }

[target.'cfg(target_os = "none")'.dependencies]
freertos-rust = { version = "0.1.2", optional = true }
cortex-m = { version = "0.7.3", optional = true }

# Unfortunately, --crate-type cannot be set per-target
# (https://github.com/rust-lang/cargo/issues/4881)
# and emscripten has link errors when compiling icu_capi due to
# symbols like log_js being undefined. There is no way to ask Cargo
# to only build a particular crate type for an invocation
#
# As a workaround, we define an example crate that just reexports icu_capi,
# but is built as a cdylib. Due to how Cargo invocations work around examples,
# `--features` is still passed down to `icu_capi`, but the end result is an
# `icu_capi_cdylib.wasm`/`icu_capi_cdylib.so`/etc file that is for all intents
# and purposes identical to the file one would get from adding "cdylib" to
# `crate-type` above.
[[example]]
name = "icu_capi_cdylib"
path = "src/crate_type_hack.rs"
crate-type = ["cdylib"]
