#ifndef ICU4XCodePointSetData_H
#define ICU4XCodePointSetData_H
#include <stdio.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include "diplomat_runtime.h"

#ifdef __cplusplus
namespace capi {
#endif

typedef struct ICU4XCodePointSetData ICU4XCodePointSetData;
#ifdef __cplusplus
} // namespace capi
#endif
#include "ICU4XDataProvider.h"
#include "diplomat_result_box_ICU4XCodePointSetData_ICU4XError.h"
#ifdef __cplusplus
namespace capi {
extern "C" {
#endif

bool ICU4XCodePointSetData_contains(const ICU4XCodePointSetData* self, char32_t cp);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_load_for_general_category_group(const ICU4XDataProvider* provider, uint32_t group);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_ascii_hex_digit(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_alnum(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_alphabetic(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_bidi_control(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_bidi_mirrored(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_blank(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_cased(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_case_ignorable(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_full_composition_exclusion(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_changes_when_casefolded(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_changes_when_casemapped(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_changes_when_nfkc_casefolded(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_changes_when_lowercased(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_changes_when_titlecased(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_changes_when_uppercased(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_dash(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_deprecated(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_default_ignorable_code_point(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_diacritic(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_emoji_modifier_base(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_emoji_component(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_emoji_modifier(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_emoji(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_emoji_presentation(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_extender(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_extended_pictographic(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_graph(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_grapheme_base(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_grapheme_extend(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_grapheme_link(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_hex_digit(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_hyphen(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_id_continue(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_ideographic(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_id_start(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_ids_binary_operator(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_ids_trinary_operator(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_join_control(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_logical_order_exception(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_lowercase(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_math(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_noncharacter_code_point(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_nfc_inert(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_nfd_inert(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_nfkc_inert(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_nfkd_inert(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_pattern_syntax(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_pattern_white_space(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_prepended_concatenation_mark(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_print(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_quotation_mark(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_radical(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_regional_indicator(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_soft_dotted(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_segment_starter(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_case_sensitive(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_sentence_terminal(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_terminal_punctuation(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_unified_ideograph(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_uppercase(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_variation_selector(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_white_space(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_xdigit(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_xid_continue(const ICU4XDataProvider* provider);

diplomat_result_box_ICU4XCodePointSetData_ICU4XError ICU4XCodePointSetData_try_get_xid_start(const ICU4XDataProvider* provider);
void ICU4XCodePointSetData_destroy(ICU4XCodePointSetData* self);

#ifdef __cplusplus
} // extern "C"
} // namespace capi
#endif
#endif
