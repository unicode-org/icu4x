// @generated
mod decimal ; use :: icu_provider :: prelude :: * ; # [doc = r" Implement [`DataProvider<M>`] on the given struct using the data"] # [doc = r" hardcoded in this module. This allows the struct to be used with"] # [doc = r" `icu`'s `_unstable` constructors."] # [doc = r""] # [doc = r" This macro can only be called from its definition-site, i.e. right"] # [doc = r" after `include!`-ing the generated module."] # [doc = r""] # [doc = r" ```compile_fail"] # [doc = r" struct MyDataProvider;"] # [doc = r#" include!("/path/to/generated/mod.rs");"#] # [doc = r" impl_data_provider(MyDataProvider);"] # [doc = r" ```"] # [allow (unused_macros)] macro_rules ! impl_data_provider { ($ provider : path) => { impl DataProvider < :: icu_decimal :: provider :: DecimalSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_decimal :: provider :: DecimalSymbolsV1Marker > , DataError > { decimal :: symbols_v1 :: lookup (& req . locale) . map (zerofrom :: ZeroFrom :: zero_from) . map (DataPayload :: from_owned) . map (| payload | { DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (:: icu_decimal :: provider :: DecimalSymbolsV1Marker :: KEY , req)) } } } ; ($ provider : path , COMPLETE) => { impl_data_provider ! ($ provider) ; impl DataProvider < :: icu_calendar :: provider :: JapaneseErasV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_calendar :: provider :: JapaneseErasV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_calendar :: provider :: JapaneseErasV1Marker :: KEY , req)) } } impl DataProvider < :: icu_calendar :: provider :: JapaneseExtendedErasV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_calendar :: provider :: JapaneseExtendedErasV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_calendar :: provider :: JapaneseExtendedErasV1Marker :: KEY , req)) } } impl DataProvider < :: icu_calendar :: provider :: WeekDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_calendar :: provider :: WeekDataV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_calendar :: provider :: WeekDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu_collator :: provider :: CollationDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_collator :: provider :: CollationDataV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_collator :: provider :: CollationDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu_collator :: provider :: CollationDiacriticsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_collator :: provider :: CollationDiacriticsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_collator :: provider :: CollationDiacriticsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_collator :: provider :: CollationJamoV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_collator :: provider :: CollationJamoV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_collator :: provider :: CollationJamoV1Marker :: KEY , req)) } } impl DataProvider < :: icu_collator :: provider :: CollationMetadataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_collator :: provider :: CollationMetadataV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_collator :: provider :: CollationMetadataV1Marker :: KEY , req)) } } impl DataProvider < :: icu_collator :: provider :: CollationReorderingV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_collator :: provider :: CollationReorderingV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_collator :: provider :: CollationReorderingV1Marker :: KEY , req)) } } impl DataProvider < :: icu_collator :: provider :: CollationSpecialPrimariesV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_collator :: provider :: CollationSpecialPrimariesV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_collator :: provider :: CollationSpecialPrimariesV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: BuddhistDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: BuddhistDateLengthsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: BuddhistDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: BuddhistDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: BuddhistDateSymbolsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: BuddhistDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: CopticDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: CopticDateLengthsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: CopticDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: CopticDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: CopticDateSymbolsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: CopticDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: EthiopianDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: EthiopianDateLengthsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: EthiopianDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: EthiopianDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: EthiopianDateSymbolsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: EthiopianDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: GregorianDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: GregorianDateLengthsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: GregorianDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: GregorianDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: GregorianDateSymbolsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: GregorianDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: IndianDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: IndianDateLengthsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: IndianDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: IndianDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: IndianDateSymbolsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: IndianDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: JapaneseDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: JapaneseDateLengthsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: JapaneseDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: JapaneseDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: JapaneseDateSymbolsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: JapaneseDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: JapaneseExtendedDateLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: JapaneseExtendedDateLengthsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: JapaneseExtendedDateLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: JapaneseExtendedDateSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: JapaneseExtendedDateSymbolsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: JapaneseExtendedDateSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: TimeLengthsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: TimeLengthsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: TimeLengthsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: calendar :: TimeSymbolsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: calendar :: TimeSymbolsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: calendar :: TimeSymbolsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: time_zones :: ExemplarCitiesV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: time_zones :: ExemplarCitiesV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: time_zones :: ExemplarCitiesV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: time_zones :: MetazoneGenericNamesLongV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: time_zones :: MetazoneGenericNamesLongV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: time_zones :: MetazoneGenericNamesLongV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: time_zones :: MetazoneGenericNamesShortV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: time_zones :: MetazoneGenericNamesShortV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: time_zones :: MetazoneGenericNamesShortV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: time_zones :: MetazoneSpecificNamesLongV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: time_zones :: MetazoneSpecificNamesLongV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: time_zones :: MetazoneSpecificNamesLongV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: time_zones :: MetazoneSpecificNamesShortV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: time_zones :: MetazoneSpecificNamesShortV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: time_zones :: MetazoneSpecificNamesShortV1Marker :: KEY , req)) } } impl DataProvider < :: icu_datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_datetime :: provider :: time_zones :: TimeZoneFormatsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_list :: provider :: AndListV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_list :: provider :: AndListV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_list :: provider :: AndListV1Marker :: KEY , req)) } } impl DataProvider < :: icu_list :: provider :: OrListV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_list :: provider :: OrListV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_list :: provider :: OrListV1Marker :: KEY , req)) } } impl DataProvider < :: icu_list :: provider :: UnitListV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_list :: provider :: UnitListV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_list :: provider :: UnitListV1Marker :: KEY , req)) } } impl DataProvider < :: icu_locid_transform :: provider :: AliasesV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_locid_transform :: provider :: AliasesV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_locid_transform :: provider :: AliasesV1Marker :: KEY , req)) } } impl DataProvider < :: icu_locid_transform :: provider :: LikelySubtagsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_locid_transform :: provider :: LikelySubtagsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_locid_transform :: provider :: LikelySubtagsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_normalizer :: provider :: CanonicalCompositionsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_normalizer :: provider :: CanonicalCompositionsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_normalizer :: provider :: CanonicalCompositionsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_normalizer :: provider :: CanonicalDecompositionDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_normalizer :: provider :: CanonicalDecompositionDataV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_normalizer :: provider :: CanonicalDecompositionDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu_normalizer :: provider :: CanonicalDecompositionTablesV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_normalizer :: provider :: CanonicalDecompositionTablesV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_normalizer :: provider :: CanonicalDecompositionTablesV1Marker :: KEY , req)) } } impl DataProvider < :: icu_normalizer :: provider :: CompatibilityDecompositionSupplementV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_normalizer :: provider :: CompatibilityDecompositionSupplementV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_normalizer :: provider :: CompatibilityDecompositionSupplementV1Marker :: KEY , req)) } } impl DataProvider < :: icu_normalizer :: provider :: CompatibilityDecompositionTablesV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_normalizer :: provider :: CompatibilityDecompositionTablesV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_normalizer :: provider :: CompatibilityDecompositionTablesV1Marker :: KEY , req)) } } impl DataProvider < :: icu_normalizer :: provider :: NonRecursiveDecompositionSupplementV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_normalizer :: provider :: NonRecursiveDecompositionSupplementV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_normalizer :: provider :: NonRecursiveDecompositionSupplementV1Marker :: KEY , req)) } } impl DataProvider < :: icu_normalizer :: provider :: Uts46DecompositionSupplementV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_normalizer :: provider :: Uts46DecompositionSupplementV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_normalizer :: provider :: Uts46DecompositionSupplementV1Marker :: KEY , req)) } } impl DataProvider < :: icu_plurals :: provider :: CardinalV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_plurals :: provider :: CardinalV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_plurals :: provider :: CardinalV1Marker :: KEY , req)) } } impl DataProvider < :: icu_plurals :: provider :: OrdinalV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_plurals :: provider :: OrdinalV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_plurals :: provider :: OrdinalV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: AlnumV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: AlnumV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: AlnumV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: AlphabeticV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: AlphabeticV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: AlphabeticV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: AsciiHexDigitV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: AsciiHexDigitV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: AsciiHexDigitV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: BasicEmojiV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: BasicEmojiV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: BasicEmojiV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: BidiClassV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: BidiClassV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: BidiClassV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: BidiControlV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: BidiControlV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: BidiControlV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: BidiMirroredV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: BidiMirroredV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: BidiMirroredV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: BlankV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: BlankV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: BlankV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: CanonicalCombiningClassV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: CanonicalCombiningClassV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: CanonicalCombiningClassV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: CaseIgnorableV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: CaseIgnorableV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: CaseIgnorableV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: CaseSensitiveV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: CaseSensitiveV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: CaseSensitiveV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: CasedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: CasedV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: CasedV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ChangesWhenCasefoldedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ChangesWhenCasefoldedV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ChangesWhenCasefoldedV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ChangesWhenCasemappedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ChangesWhenCasemappedV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ChangesWhenCasemappedV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ChangesWhenLowercasedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ChangesWhenLowercasedV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ChangesWhenLowercasedV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ChangesWhenNfkcCasefoldedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ChangesWhenNfkcCasefoldedV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ChangesWhenNfkcCasefoldedV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ChangesWhenTitlecasedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ChangesWhenTitlecasedV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ChangesWhenTitlecasedV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ChangesWhenUppercasedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ChangesWhenUppercasedV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ChangesWhenUppercasedV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: DashV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: DashV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: DashV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: DefaultIgnorableCodePointV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: DefaultIgnorableCodePointV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: DefaultIgnorableCodePointV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: DeprecatedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: DeprecatedV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: DeprecatedV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: DiacriticV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: DiacriticV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: DiacriticV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: EastAsianWidthV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: EastAsianWidthV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: EastAsianWidthV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: EmojiComponentV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: EmojiComponentV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: EmojiComponentV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: EmojiModifierBaseV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: EmojiModifierBaseV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: EmojiModifierBaseV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: EmojiModifierV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: EmojiModifierV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: EmojiModifierV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: EmojiPresentationV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: EmojiPresentationV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: EmojiPresentationV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: EmojiV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: EmojiV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: EmojiV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ExemplarCharactersAuxiliaryV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ExemplarCharactersAuxiliaryV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ExemplarCharactersAuxiliaryV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ExemplarCharactersIndexV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ExemplarCharactersIndexV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ExemplarCharactersIndexV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ExemplarCharactersMainV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ExemplarCharactersMainV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ExemplarCharactersMainV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ExemplarCharactersNumbersV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ExemplarCharactersNumbersV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ExemplarCharactersNumbersV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ExemplarCharactersPunctuationV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ExemplarCharactersPunctuationV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ExemplarCharactersPunctuationV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ExtendedPictographicV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ExtendedPictographicV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ExtendedPictographicV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ExtenderV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ExtenderV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ExtenderV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: FullCompositionExclusionV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: FullCompositionExclusionV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: FullCompositionExclusionV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: GeneralCategoryV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: GeneralCategoryV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: GeneralCategoryV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: GraphV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: GraphV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: GraphV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: GraphemeBaseV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: GraphemeBaseV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: GraphemeBaseV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: GraphemeClusterBreakV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: GraphemeClusterBreakV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: GraphemeClusterBreakV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: GraphemeExtendV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: GraphemeExtendV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: GraphemeExtendV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: GraphemeLinkV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: GraphemeLinkV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: GraphemeLinkV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: HexDigitV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: HexDigitV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: HexDigitV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: HyphenV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: HyphenV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: HyphenV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: IdContinueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: IdContinueV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: IdContinueV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: IdStartV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: IdStartV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: IdStartV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: IdeographicV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: IdeographicV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: IdeographicV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: IdsBinaryOperatorV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: IdsBinaryOperatorV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: IdsBinaryOperatorV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: IdsTrinaryOperatorV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: IdsTrinaryOperatorV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: IdsTrinaryOperatorV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: JoinControlV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: JoinControlV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: JoinControlV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: LineBreakV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: LineBreakV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: LineBreakV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: LogicalOrderExceptionV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: LogicalOrderExceptionV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: LogicalOrderExceptionV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: LowercaseV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: LowercaseV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: LowercaseV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: MathV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: MathV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: MathV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: NfcInertV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: NfcInertV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: NfcInertV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: NfdInertV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: NfdInertV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: NfdInertV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: NfkcInertV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: NfkcInertV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: NfkcInertV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: NfkdInertV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: NfkdInertV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: NfkdInertV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: NoncharacterCodePointV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: NoncharacterCodePointV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: NoncharacterCodePointV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: PatternSyntaxV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: PatternSyntaxV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: PatternSyntaxV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: PatternWhiteSpaceV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: PatternWhiteSpaceV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: PatternWhiteSpaceV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: PrependedConcatenationMarkV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: PrependedConcatenationMarkV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: PrependedConcatenationMarkV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: PrintV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: PrintV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: PrintV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: QuotationMarkV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: QuotationMarkV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: QuotationMarkV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: RadicalV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: RadicalV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: RadicalV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: RegionalIndicatorV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: RegionalIndicatorV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: RegionalIndicatorV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ScriptV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ScriptV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ScriptV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: ScriptWithExtensionsPropertyV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: ScriptWithExtensionsPropertyV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: ScriptWithExtensionsPropertyV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: SegmentStarterV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: SegmentStarterV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: SegmentStarterV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: SentenceBreakV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: SentenceBreakV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: SentenceBreakV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: SentenceTerminalV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: SentenceTerminalV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: SentenceTerminalV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: SoftDottedV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: SoftDottedV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: SoftDottedV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: TerminalPunctuationV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: TerminalPunctuationV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: TerminalPunctuationV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: UnifiedIdeographV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: UnifiedIdeographV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: UnifiedIdeographV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: UppercaseV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: UppercaseV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: UppercaseV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: VariationSelectorV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: VariationSelectorV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: VariationSelectorV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: WhiteSpaceV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: WhiteSpaceV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: WhiteSpaceV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: WordBreakV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: WordBreakV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: WordBreakV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: XdigitV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: XdigitV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: XdigitV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: XidContinueV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: XidContinueV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: XidContinueV1Marker :: KEY , req)) } } impl DataProvider < :: icu_properties :: provider :: XidStartV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_properties :: provider :: XidStartV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_properties :: provider :: XidStartV1Marker :: KEY , req)) } } impl DataProvider < :: icu_provider :: hello_world :: HelloWorldV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_provider :: hello_world :: HelloWorldV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_provider :: hello_world :: HelloWorldV1Marker :: KEY , req)) } } impl DataProvider < :: icu_provider_adapters :: fallback :: provider :: CollationFallbackSupplementV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_provider_adapters :: fallback :: provider :: CollationFallbackSupplementV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_provider_adapters :: fallback :: provider :: CollationFallbackSupplementV1Marker :: KEY , req)) } } impl DataProvider < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackLikelySubtagsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackLikelySubtagsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_provider_adapters :: fallback :: provider :: LocaleFallbackLikelySubtagsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackParentsV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_provider_adapters :: fallback :: provider :: LocaleFallbackParentsV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_provider_adapters :: fallback :: provider :: LocaleFallbackParentsV1Marker :: KEY , req)) } } impl DataProvider < :: icu_segmenter :: provider :: GraphemeClusterBreakDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_segmenter :: provider :: GraphemeClusterBreakDataV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_segmenter :: provider :: GraphemeClusterBreakDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu_segmenter :: provider :: LineBreakDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_segmenter :: provider :: LineBreakDataV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_segmenter :: provider :: LineBreakDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu_segmenter :: provider :: LstmDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_segmenter :: provider :: LstmDataV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_segmenter :: provider :: LstmDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu_segmenter :: provider :: SentenceBreakDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_segmenter :: provider :: SentenceBreakDataV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_segmenter :: provider :: SentenceBreakDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu_segmenter :: provider :: UCharDictionaryBreakDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_segmenter :: provider :: UCharDictionaryBreakDataV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_segmenter :: provider :: UCharDictionaryBreakDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu_segmenter :: provider :: WordBreakDataV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_segmenter :: provider :: WordBreakDataV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_segmenter :: provider :: WordBreakDataV1Marker :: KEY , req)) } } impl DataProvider < :: icu_timezone :: provider :: MetazonePeriodV1Marker > for $ provider { fn load (& self , req : DataRequest ,) -> Result < DataResponse < :: icu_timezone :: provider :: MetazonePeriodV1Marker > , DataError > { Err (DataErrorKind :: MissingDataKey . with_req (:: icu_timezone :: provider :: MetazonePeriodV1Marker :: KEY , req)) } } } ; } # [doc = r" Implement [`AnyProvider`] on the given struct using the data"] # [doc = r" hardcoded in this module. This allows the struct to be used with"] # [doc = r" `icu`'s `_any` constructors."] # [doc = r""] # [doc = r" This macro can only be called from its definition-site, i.e. right"] # [doc = r" after `include!`-ing the generated module."] # [doc = r" "] # [doc = r" ```compile_fail"] # [doc = r" struct MyAnyProvider;"] # [doc = r#" include!("/path/to/generated/mod.rs");"#] # [doc = r" impl_any_provider(MyAnyProvider);"] # [doc = r" ```"] # [allow (unused_macros)] macro_rules ! impl_any_provider { ($ provider : path) => { impl AnyProvider for $ provider { fn load_any (& self , key : DataKey , req : DataRequest) -> Result < AnyResponse , DataError > { const DECIMALSYMBOLSV1MARKER : :: icu_provider :: DataKeyHash = :: icu_decimal :: provider :: DecimalSymbolsV1Marker :: KEY . hashed () ; match key . hashed () { DECIMALSYMBOLSV1MARKER => decimal :: symbols_v1 :: lookup (& req . locale) . map (AnyPayload :: from_static_ref) , _ => return Err (DataErrorKind :: MissingDataKey . with_req (key , req)) , } . map (| payload | AnyResponse { payload : Some (payload) , metadata : Default :: default () , }) . ok_or_else (|| DataErrorKind :: MissingLocale . with_req (key , req)) } } } } # [allow (dead_code)] struct BakedDataProvider ; impl_data_provider ! (BakedDataProvider) ;