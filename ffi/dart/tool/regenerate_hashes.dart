import 'dart:io';

import 'package:crypto/crypto.dart' show sha256;
import 'package:icu4x/src/hook_helpers/version.dart' show version;

Future<void> main(List<String> args) async {
  final httpClient = HttpClient();

  print('Checking hashes for $version');
  final fileHashes = <(String, String), String>{};
  final dynamicLibrary = File.fromUri(Directory.systemTemp.uri.resolve('lib'));
  await dynamicLibrary.create();
  for (final rustTarget in [
    'armv7-linux-androideabi',
    'aarch64-linux-android',
    'i686-linux-android',
    // 'riscv64-linux-android',
    'x86_64-linux-android',
    // 'aarch64-unknown-fuchsia',
    // 'x86_64-unknown-fuchsia',
    'aarch64-apple-ios',
    'x86_64-apple-ios',
    'armv7-unknown-linux-gnueabihf',
    'aarch64-unknown-linux-gnu',
    // 'i686-unknown-linux-gnu',
    // 'riscv32gc-unknown-linux-gnu',
    'riscv64gc-unknown-linux-gnu',
    'x86_64-unknown-linux-gnu',
    'aarch64-apple-darwin',
    'x86_64-apple-darwin',
    'aarch64-pc-windows-msvc',
    'i686-pc-windows-msvc',
    'x86_64-pc-windows-msvc',
  ]) {
    for (final libraryType in ['dynamic', 'static', 'static-with_data']) {
      final target = ['icu4x-2', libraryType, rustTarget].join('-');
      print('Checking hash for $target');
      final success = await _fetchLibrary(target, httpClient, dynamicLibrary);
      if (success) {
        final bytes = await dynamicLibrary.readAsBytes();
        final fileHash = sha256.convert(bytes).toString();
        fileHashes[(rustTarget, libraryType)] = fileHash;
        print('Hash is $fileHash');
      } else {
        print('Could not fetch library');
      }
    }
  }
  httpClient.close(force: true);

  await File('lib/src/hook_helpers/hashes.dart').writeAsString('''
// THIS FILE IS AUTOGENERATED BY `tool/regenerate_hashes.dart`. TO UPDATE, RUN
//
//    dart tool/regenerate_hashes.dart
//

const fileHashes = <(String, String), String>{
${fileHashes.map((key, value) => MapEntry(("'${key.$1}'", "'${key.$2}'"), "'$value'")).entries.map((e) => '  ${e.key}:\n      ${e.value},').join('\n')}
};
''');
}

Future<bool> _fetchLibrary(
  String target,
  HttpClient httpClient,
  File dynamicLibrary,
) async {
  final uri = Uri.parse(
    'https://github.com/unicode-org/icu4x/releases/download/$version/$target',
  );
  print('Fetch file from $uri');
  final request = await httpClient.getUrl(uri);
  final response = await request.close();
  if (response.statusCode != 200) {
    print('File not found at $uri');
    return false;
  }
  await response.pipe(dynamicLibrary.openWrite());
  return true;
}
