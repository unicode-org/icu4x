// This file is part of ICU4X. For terms of use, please see the file
// called LICENSE at the top level of the ICU4X source tree
// (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

// {{ crate::capi_datetime::GENERATED_BY }}

{%- let flavor = flavor %}

#[rustfmt::skip]
#[diplomat::bridge]
#[diplomat::abi_rename = "icu4x_{0}_mv1"]
#[diplomat::attr(auto, namespace = "icu4x")]
pub mod ffi {
    use alloc::boxed::Box;
    use icu_calendar::Gregorian;
    use writeable::Writeable;

    use crate::{
        date::ffi::{Date, IsoDate},
        errors::ffi::DateTimeMismatchedCalendarError,
    };

    #[cfg(feature = "buffer_provider")]
    use crate::provider::ffi::DataProvider;
    #[cfg(any(feature = "compiled_data", feature = "buffer_provider"))]
    use crate::{
        datetime_formatter::ffi::DateTimeLength,
        datetime_options::ffi::{DateTimeAlignment, YearStyle},
        errors::ffi::DateTimeFormatterLoadError,
        locale_core::ffi::Locale,
        datetime_helpers::map_or_default,
    };

    {%- for formatter_kind in flavor.formatter_kinds() %}
    {%- let ffi_type %}
    {%- if formatter_kind.is_gregorian %}
        {%- let ffi_type = format!("{}FormatterGregorian", {{ flavor.camel() }}) %}
    {%- else %}
        {%- let ffi_type = format!("{}Formatter", {{ flavor.camel() }}) %}
    {%- endif %}

    #[diplomat::opaque]
    #[diplomat::rust_link(icu::datetime::{{ formatter_kind.rust_type() }}, Typedef)]
    pub struct {{ ffi_type }}(
        pub  icu_datetime::{{ formatter_kind.rust_type() }}<
            {%- if formatter_kind.is_fixed_calendar %}
            {%- if formatter_kind.is_gregorian %}
            Gregorian,
            {%- else %}
            (),
            {%- endif %}
            {%- endif %}
            icu_datetime::fieldsets::enums::{{ flavor.field_set() }},
        >,
    );

    impl {{ ffi_type }} {
        {%- for variant in variants %}
        {%- for is_with_provider in [false, true] %}
        {%- let ctor_suffix_ffi %}
        {%- let ctor_suffix_rust %}
        {%- let cargo_feature %}
        {%- let named_constructor %}
        {%- let named_constructor_full %}
        {%- if is_with_provider %}
            {%- if variant.is_only_constructor() %}
                {%- let named_constructor = "with_provider".to_string() %}
                {%- let named_constructor_full = "create_with_provider".to_string() %}
            {%- else %}
                {%- let named_constructor = format!("{}_with_provider", variant.name_lower()) %}
                {%- let named_constructor_full = format!("create_{}_with_provider", variant.name_lower()) %}
            {%- endif %}
            {%- let ctor_suffix_ffi = "with_provider" %}
            {%- let ctor_suffix_rust = "_with_buffer_provider" %}
            {%- let cargo_feature = "buffer_provider" %}
        {%- else %}
            {%- if variant.is_only_constructor() %}
                {%- let named_constructor = "".to_string() %}
                {%- let named_constructor_full = "create".to_string() %}
            {%- else %}
                {%- let named_constructor = format!("{}", variant.name_lower()) %}
                {%- let named_constructor_full = format!("create_{}", variant.name_lower()) %}
            {%- endif %}
            {%- let ctor_suffix_ffi = "" %}
            {%- let ctor_suffix_rust = "" %}
            {%- let cargo_feature = "compiled_data" %}
        {%- endif %}
        {%- if named_constructor == "" %}
        #[diplomat::attr(supports = fallible_constructors, constructor)]
        {%- else %}
        #[diplomat::attr(all(supports = fallible_constructors, supports = named_constructors), named_constructor = "{{ named_constructor }}")]
        {%- endif %}
        #[diplomat::rust_link(icu::datetime::fieldsets::{{ variant.name_upper() }}, Struct)]
        {%- if variant.consumed_options.alignment %}
        #[diplomat::rust_link(icu::datetime::fieldsets::{{ variant.name_upper() }}::with_alignment, FnInStruct, compact)]
        {%- endif %}
        {%- if variant.consumed_options.year_style %}
        #[diplomat::rust_link(icu::datetime::fieldsets::{{ variant.name_upper() }}::with_year_style, FnInStruct, compact)]
        {%- endif %}
        #[diplomat::rust_link(icu::datetime::fieldsets::{{ variant.name_upper() }}::with_length, FnInStruct, compact)]
        #[diplomat::rust_link(icu::datetime::fieldsets::{{ variant.name_upper() }}::short, FnInStruct, hidden)]
        #[diplomat::rust_link(icu::datetime::fieldsets::{{ variant.name_upper() }}::medium, FnInStruct, hidden)]
        #[diplomat::rust_link(icu::datetime::fieldsets::{{ variant.name_upper() }}::long, FnInStruct, hidden)]
        {%- if variant.is_default_constructor() && !is_with_provider %}
        #[diplomat::demo(default_constructor)]
        {%- endif %}
        #[cfg(feature = "{{ cargo_feature }}")]
        pub fn {{ named_constructor_full }}(
            {%- if is_with_provider %}
            provider: &DataProvider,
            {%- endif %}
            locale: &Locale,
            length: Option<DateTimeLength>,
            {%- if variant.consumed_options.alignment %}
            alignment: Option<DateTimeAlignment>,
            {%- endif %}
            {%- if variant.consumed_options.year_style %}
            year_style: Option<YearStyle>,
            {%- endif %}
        ) -> Result<Box<Self>, DateTimeFormatterLoadError> {
            let prefs = (&locale.0).into();
            {%- if !variant.consumed_options.alignment && !variant.consumed_options.year_style %}
            #[allow(unused_mut)]
            {%- endif %}
            let mut options = icu_datetime::fieldsets::{{ variant.name_upper() }}::with_length(map_or_default(length));
            {%- if variant.consumed_options.alignment %}
            options.alignment = alignment.map(Into::into);
            {%- endif %}
            {%- if variant.consumed_options.year_style %}
            options.year_style = year_style.map(Into::into);
            {%- endif %}
            Ok(Box::new(Self(
                icu_datetime
                    ::{{ formatter_kind.rust_type() }}
                    ::try_new{{ ctor_suffix_rust }}(
                        {%- if is_with_provider %}
                        provider.get()?,
                        {%- endif %}
                        prefs,
                        options
                    )?
                .cast_into_fset(),
            )))
        }
        {% endfor %}
        {%- endfor %}
        #[diplomat::rust_link(icu::datetime::{{ formatter_kind.rust_type() }}::format, FnInStruct)]
        #[diplomat::rust_link(icu::datetime::FormattedDateTime, Struct, hidden)]
        #[diplomat::rust_link(icu::datetime::FormattedDateTime::to_string, FnInStruct, hidden)]
        pub fn format_iso(
            &self,
            date: &IsoDate,
            write: &mut diplomat_runtime::DiplomatWrite,
        ) {
            let value = date.0{% if formatter_kind.is_gregorian %}.to_calendar(Gregorian){% endif %};
            let _infallible = self.0.format(&value).write_to(write);
        }
        {% if !formatter_kind.is_fixed_calendar %}
        #[diplomat::rust_link(icu::datetime::{{ formatter_kind.rust_type() }}::format_same_calendar, FnInStruct)]
        #[diplomat::rust_link(icu::datetime::FormattedDateTime, Struct, hidden)]
        #[diplomat::rust_link(icu::datetime::FormattedDateTime::to_string, FnInStruct, hidden)]
        pub fn format_same_calendar(
            &self,
            date: &Date,
            write: &mut diplomat_runtime::DiplomatWrite,
        ) -> Result<(), DateTimeMismatchedCalendarError> {
            let value = date.0.wrap_calendar_in_ref();
            let _infallible = self.0.format_same_calendar(&value)?.write_to(write);
            Ok(())
        }
        {%- endif %}
    }
    {% endfor %}
}
