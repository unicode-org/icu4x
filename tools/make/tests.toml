# This file is part of ICU4X. For terms of use, please see the file
# called LICENSE at the top level of the ICU4X source tree
# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

# This is a cargo-make file included in the toplevel Makefile.toml

[tasks.check-all-features-chunked]
description = "Build all permutations of all features for the provided chunk index (3 chunks)"
category = "ICU4X Development"
install_crate = { crate_name = "cargo-all-features", binary = "cargo-check-all-features", test_arg = ["--help"] }
install_crate_args = ["--version", "^1.10"]
command = "cargo"
args = ["check-all-features", "--n-chunks", "3", "--chunk", "${@}"]

[tasks.check-all-features]
description = "Build all permutations of all features"
category = "ICU4X Development"
install_crate = { crate_name = "cargo-all-features", binary = "cargo-check-all-features", test_arg = ["--help"] }
install_crate_args = ["--version", "^1.10"]
command = "cargo"
args = ["check-all-features"]

[tasks.build-all-features]
description = "Build all permutations of all features"
category = "ICU4X Development"
install_crate = { crate_name = "cargo-all-features", binary = "cargo-build-all-features", test_arg = ["--help"] }
install_crate_args = ["--version", "^1.10"]
command = "cargo"
args = ["build-all-features"]

[tasks.test-all-features]
description = "Run all Rust tests with all features and targets"
category = "ICU4X Development"
command = "cargo"
args = ["test", "--all-features", "--all-targets", "--no-fail-fast"]

[tasks.test-all-features-windows]
description = "Run all Rust tests with all features and targets (with special changes to reduce Windows disk space)"
category = "ICU4X Development"
command = "cargo"
args = ["test", "--all-features", "--all-targets", "--no-fail-fast", "--profile", "windows-test-ci"]


[tasks.test-docs]
description = "Run all Rust doctests with all features"
category = "ICU4X Development"
command = "cargo"
args = ["test", "--all-features", "--doc", "--no-fail-fast"]

[tasks.check-tutorials-local]
description = "Build the Cargo tutorial projects based on local crates"
category = "ICU4X Development"
script_runner = "@duckscript"
script = '''
exit_on_error true

pwd = pwd
set_env CARGO_TARGET_DIR ${pwd}/target

cd docs/tutorials/testing

exec --fail-on-error cargo --config patch.toml test -p tutorials-test
exec --fail-on-error cargo --config patch.toml check -p tutorial_default
exec --fail-on-error cargo --config patch.toml check -p tutorial_buffer
exec --fail-on-error cargo --config patch.toml check -p tutorial_experimental
exec --fail-on-error cargo --config patch.toml check -p tutorial_sync
# tutorial_baked requires a datagen release build
# tutorial_custom_compiled doesn't compile without data
'''

[tasks.test-tutorials-local]
description = "Build and run the Cargo tutorial projects based on local crates"
category = "ICU4X Development"
script_runner = "@duckscript"
script = '''
exit_on_error true

project_dir = pwd
set_env CARGO_TARGET_DIR ${project_dir}/target

exec --fail-on-error cargo build -p icu_datagen

cd docs/tutorials

mkdir crates/bin
cp ${project_dir}/target/debug/icu4x-datagen crates/bin/icu4x-datagen

exec --fail-on-error cargo --config testing/patch.toml test -p tutorials-test
exec --fail-on-error cargo --config testing/patch.toml run -p tutorial_default
exec --fail-on-error cargo --config testing/patch.toml run -p tutorial_experimental
exec --fail-on-error cargo --config testing/patch.toml run -p tutorial_sync
exec --fail-on-error cargo --config testing/patch.toml run -p tutorial_baked

# Copy our own tutorial_buffer to speed up the task
exec --fail-on-error cargo --config testing/patch.toml build -p tutorial_buffer
mkdir crates/buffer/bin
cp ${project_dir}/target/debug/tutorial_buffer crates/buffer/bin/tutorial_buffer
exec --fail-on-error make -C crates/buffer buffer_data.postcard
exec --fail-on-error cargo --config testing/patch.toml run -p tutorial_buffer

exec --fail-on-error make -C crates/custom_compiled baked_data/mod.rs
set_env ICU4X_DATA_DIR ${project_dir}/docs/tutorials/crates/custom_compiled/baked_data
exec --fail-on-error cargo run --config testing/patch.toml -p tutorial_custom_compiled
'''

[tasks.test-tutorials-cratesio]
description = "Build and run the Cargo tutorial projects based on crates.io"
category = "ICU4X Development"
script_runner = "@duckscript"
script = '''
exit_on_error true

cd docs/tutorials

# Delete the lockfile to make a clean crates.io build
rm -f Cargo.lock

pwd = pwd
set_env CARGO_TARGET_DIR ${pwd}/target/cratesio



exec --fail-on-error cargo test --release -p tutorials-test
exec --fail-on-error cargo run --release -p tutorial_default
exec --fail-on-error cargo run --release -p tutorial_experimental
exec --fail-on-error cargo run --release -p tutorial_sync
exec --fail-on-error cargo run --release -p tutorial_baked

# Build the postcard file
# Use the full Makefile task
exec --fail-on-error cargo build --release -p tutorial_buffer
exec --fail-on-error make -C crates/buffer
exec --fail-on-error cargo run --release -p tutorial_buffer

# Build custom compiled data
# Use the full Makefile task
exec --fail-on-error make -C crates/custom_compiled
set_env ICU4X_DATA_DIR ${project_dir}/docs/tutorials/crates/custom_compiled/baked_data
exec --fail-on-error cargo run --release -p tutorial_custom_compiled
'''

[tasks.install-cortex-7]
description = "Install the thumbv7m target"
category = "ICU4X Development"
command = "rustup"
args = [
    "target", "add", "thumbv7m-none-eabi",
]

[tasks.check-nostd]
description = "Ensure ICU4X builds on no-std"
category = "ICU4X Development"
dependencies = ["install-cortex-7"]
command = "cargo"
args = ["check", "--package", "icu", "--target", "thumbv7m-none-eabi"]
