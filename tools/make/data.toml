# This file is part of ICU4X. For terms of use, please see the file
# called LICENSE at the top level of the ICU4X source tree
# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

# This is a cargo-make file included in the toplevel Makefile.toml

[tasks.download-repo-sources]
description = "Download fresh source testing data into the icu_datagen crate."
category = "ICU4X Data"
command = "cargo"
args = [
    "run",
    "--bin=download-repo-sources",
    "--",
    "-v",
]

[tasks.testdata]
description = "Run the testdata generation test in icu_datagen"
category = "ICU4X Data"
command = "cargo"
args = [
    "test",
    "-p=icu_datagen",
    "--no-default-features",
    "--features=provider_fs,use_wasm,rayon,icu_compactdecimal,icu_displaynames,icu_relativetime",
    "generate_json_and_verify_postcard",
    "--",
    "--nocapture"
]

[tasks.testdata-hello-world]
description = "Builds all hello-world testdata for use in provider/{adapters,blob,fs} tests"
category = "ICU4X Data"
script_runner = "@duckscript"
script = '''
exit_on_error true

exec --fail-on-error cargo build -p icu_datagen --no-default-features --features provider_fs,provider_blob,bin,networking

configs = array provider/fs/tests/data/json.json provider/fs/tests/data/bincode.json provider/fs/tests/data/postcard.json provider/blob/tests/data/config.json provider/adapters/tests/data/config.json provider/adapters/tests/data/langtest/de.json provider/adapters/tests/data/langtest/ro.json

for config in ${configs}
    exec --fail-on-error target/debug/icu4x-datagen --config "${config}"
end
'''

[tasks.testdata-check]
description = "Rebuild all testdata and ensure that the working copy is clean"
category = "ICU4X Data"
dependencies = [
    "download-repo-sources",
    "testdata",
    "testdata-hello-world",
]
script_runner = "@duckscript"
script = '''
exit_on_error true

output = exec git status --porcelain=v1 provider/datagen/tests/data provider/fs/tests/data provider/blob/tests/data provider/adapters/tests/data
output_length = length ${output.stdout}
if greater_than ${output_length} 0
    msg = array "" ""
    array_push ${msg} "Test data needs to be updated. Please run `cargo make download-repo-sources`, `cargo make testdata` and `cargo make testdata-hello-world:"
    array_push ${msg} ""
    array_push ${msg} "${output.stdout}"
    msg = array_join ${msg} "\n"
    trigger_error ${msg}
end
'''

[tasks.testdata-legacy]
description = "Build the data for the legacy icu_testdata crate"
category = "ICU4X Data"
command = "cargo"
args = [
    "run",
    "--bin=make-testdata-legacy",
]

[tasks.bakeddata]
description = "Builds full baked data"
category = "ICU4X Data"
script_runner = "@duckscript"
script = '''
exit_on_error true

if array_is_empty ${@}
    exec --fail-on-error cargo build -p icu_datagen --no-default-features --features rayon,provider_baked,bin,use_wasm,networking,icu_displaynames,icu_relativetime,icu_compactdecimal --release
    bin = set "target/release/icu4x-datagen"
    components = array components/calendar components/casemap components/collator components/datetime components/decimal components/list components/locid_transform components/normalizer components/plurals components/properties components/segmenter components/timezone experimental/compactdecimal experimental/displaynames experimental/relativetime
else
    exec --fail-on-error cargo build -p icu_datagen --no-default-features --features rayon,provider_baked,bin,use_wasm,networking,icu_displaynames,icu_relativetime,icu_compactdecimal
    bin = set "target/debug/icu4x-datagen"
    components = set ${@}
end

for component in ${components}
    exec --fail-on-error ${bin} --config "${component}/data/config.json"
end
'''

[tasks.bakeddata-check]
description = "Rebuild baked data and ensure that the working copy is clean"
category = "ICU4X Data"
dependencies = ["bakeddata"]
script_runner = "@duckscript"
script = '''
exit_on_error true

output = exec git status --porcelain=v1
output_length = length ${output.stdout}
if greater_than ${output_length} 0
    msg = array "" ""
    array_push ${msg} "Baked data needs to be updated. Please run `cargo make bakeddata`"
    array_push ${msg} ""
    array_push ${msg} "${output.stdout}"
    msg = array_join ${msg} "\n"
    trigger_error ${msg}
end
'''
