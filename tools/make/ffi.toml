# This file is part of ICU4X. For terms of use, please see the file
# called LICENSE at the top level of the ICU4X source tree
# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

# This is a cargo-make file included in the toplevel Makefile.toml

# C/C++ tasks

[tasks.test-c]
description = "Run C API tests"
category = "ICU4X Development"
command = "make"
args = ["-C", "tutorials/c", "test"]

[tasks.test-c-tiny]
description = "Run C API tests for tiny targets"
category = "ICU4X Development"
dependencies = ["install-unknown-linux-nightly"]
script_runner = "@duckscript"
script = '''
exit_on_error true
exec --fail-on-error make -C tutorials/c-tiny/fixeddecimal
exec --fail-on-error make -C tutorials/c-tiny/segmenter
'''

[tasks.test-cpp]
description = "Run CPP tests"
category = "ICU4X Development"
command = "make"
args = ["-C", "tutorials/cpp", "test"]


# JS/WASM tasks

[tasks.test-npm]
description = "Run JS tests"
category = "ICU4X Development"
dependencies = ["install-wasm-nightly"]
command = "npm"
args = ["-C", "ffi/npm", "install-ci-test"]

[tasks.test-tinywasm]
description = "Test the Tiny WASM example"
category = "ICU4X Development"
dependencies = ["install-wasm-nightly"]
command = "make"
args = ["-C", "tutorials/js-tiny", "test"]


# Dart tasks

[tasks.test-dart]
description = "Run Dart tests"
category = "ICU4X Development"
cwd = "ffi/dart"
script_runner = "@duckscript"
script = '''
exec --fail-on-error dart --enable-experiment=native-assets pub get
exec --fail-on-error dart --enable-experiment=native-assets test
'''

# no_std tasks

[tasks.check-freertos-wearos]
description = "Build ICU4X CAPI for Cortex"
category = "ICU4X FFI"
dependencies = ["install-cortex-8-nightly"]
toolchain = "${PINNED_CI_NIGHTLY}"
env = { RUSTFLAGS = "-Ctarget-cpu=cortex-m33 -Cpanic=abort -Copt-level=s" }
command = "cargo"
args = ["check", "--package", "icu_freertos",
        "--target", "thumbv8m.main-none-eabihf",
        "--no-default-features", "--features=wearos",
        "-Zbuild-std=std,panic_abort", "-Zbuild-std-features=panic_immediate_abort"]


# Diplomat gen

[tasks.diplomat-gen]
description = "Regenerate Diplomat bindings"
category = "ICU4X Development"
dependencies = [
    "diplomat-gen-c",
    "diplomat-gen-cpp",
    "diplomat-gen-js",
    "diplomat-gen-dart",
]

[tasks.verify-diplomat-gen]
description = "Verify that checked-in Diplomat bindings are up to date"
category = "ICU4X Development"
dependencies = [
    "diplomat-gen",
]
script_runner = "@duckscript"
script = '''
exit_on_error true
code = exec --get-exit-code git diff --exit-code -- ffi/capi
if ${code}
    trigger_error "Diplomat bindings need to be regenerated. Please run `cargo make diplomat-gen` and commit. (Testing against different Diplomat versions may omit install step.)"
end
'''

[tasks.diplomat-gen-c]
description = "Generate C headers for the FFI with Diplomat"
category = "ICU4X Development"
command = "cargo"
args = ["run", "-p", "diplomat-gen", "c"]

[tasks.diplomat-gen-cpp]
description = "Generate C++ headers for the FFI with Diplomat"
category = "ICU4X Development"
command = "cargo"
args = ["run", "-p", "diplomat-gen", "cpp"]

[tasks.diplomat-gen-js]
description = "Generate JS bindings for the FFI with Diplomat"
category = "ICU4X Development"
command = "cargo"
args = ["run", "-p", "diplomat-gen", "js"]

[tasks.diplomat-gen-dart]
description = "Generate Dart bindings for the FFI with Diplomat"
category = "ICU4X Development"
command = "cargo"
args = ["run", "-p", "diplomat-gen", "dart"]

# Diplomat coverage

[tasks.diplomat-coverage]
description = "Produces the list of ICU APIs that are not exported through Diplomat"
category = "ICU4X Development"
command = "cargo"
args = ["run", "-p=icu_ffi_coverage", "--", "ffi/capi/tests/missing_apis.txt"]

[tasks.verify-diplomat-coverage]
description = "Verify that checked-in Diplomat coverage is up to date"
category = "ICU4X Development"
dependencies = [
    "diplomat-coverage",
]
script_runner = "@duckscript"
script = '''
exit_on_error true
code = exec --get-exit-code git diff --exit-code -- ffi/capi/tests
if ${code}
    trigger_error "Diplomat coverage dump need to be regenerated. Please run `cargo make diplomat-coverage` and commit."
end
'''


# Install tasks

[tasks.install-nightly]
description = "Installs $PINNED_CI_NIGHTLY"
category = "ICU4X Development"
script_runner = "@duckscript"
script = '''
exec --fail-on-error rustup install ${PINNED_CI_NIGHTLY} --profile minimal
exec --fail-on-error rustup component add rust-src --toolchain ${PINNED_CI_NIGHTLY}
'''

[tasks.install-unknown-linux-nightly]
description = "Installs the unknown-linux target"
category = "ICU4X Development"
dependencies = ["install-nightly"]
toolchain = "${PINNED_CI_NIGHTLY}"
command = "rustup"
args = ["target", "add", "x86_64-unknown-linux-gnu"]

[tasks.install-emscripten-nightly]
description = "Installs the emscripten target"
category = "ICU4X Development"
dependencies = ["install-nightly"]
toolchain = "${PINNED_CI_NIGHTLY}"
command = "rustup"
args = ["target", "add", "wasm32-unknown-emscripten"]

[tasks.install-wasm-nightly]
description = "Installs the wasm target"
category = "ICU4X Development"
dependencies = ["install-nightly"]
toolchain = "${PINNED_CI_NIGHTLY}"
command = "rustup"
args = ["target", "add", "wasm32-unknown-unknown"]

[tasks.install-cortex-8-nightly]
description = "Install the thumbv8m target"
category = "ICU4X FFI"
dependencies = ["install-nightly"]
toolchain = "${PINNED_CI_NIGHTLY}"
command = "rustup"
args = ["target", "add", "thumbv8m.main-none-eabihf"]
