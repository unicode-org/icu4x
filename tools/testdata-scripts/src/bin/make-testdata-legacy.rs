// This file is part of ICU4X. For terms of use, please see the file
// called LICENSE at the top level of the ICU4X source tree
// (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

use icu_datagen::prelude::*;
use std::fs::File;
use std::io::Write;
use std::path::Path;

include!("../../../../provider/datagen/tests/locales.rs.data");

fn main() {
    #![allow(deprecated)] // want to keep old datagen code path covered

    simple_logger::SimpleLogger::new()
        .env()
        .with_level(log::LevelFilter::Info)
        .init()
        .unwrap();

    let data_root = Path::new(concat!(
        core::env!("CARGO_MANIFEST_DIR"),
        "/../../provider/testdata/data/"
    ));

    std::fs::create_dir_all(data_root).unwrap();

    let source = SourceData::default()
        .with_cldr_latest(Default::default())
        .unwrap()
        .with_icuexport_latest()
        .unwrap();

    let blob_out = Out::Blob(Box::new(
        File::create(data_root.join("testdata.postcard")).unwrap(),
    ));

    let mut options = BakedOptions::default();
    options.insert_feature_gates = true;
    options.use_separate_crates = true;
    options.overwrite = true;
    let mod_out = Out::Baked {
        mod_directory: data_root.join("baked"),
        options,
    };

    icu_datagen::datagen(
        Some(LOCALES),
        &icu_datagen::all_keys_with_experimental()
            .into_iter()
            .chain([icu_provider::hello_world::HelloWorldV1Marker::KEY])
            .collect::<Vec<_>>(),
        &source,
        vec![blob_out, mod_out],
    )
    .unwrap();

    let mut metadata = File::create(data_root.join("metadata.rs.data")).unwrap();

    metadata
        .write_all(
            "\
            // DO NOT EDIT\n\
            // This file is generated by `make-testdata` from\n\
            // * locales.rs.data,\n\
            // * `icu_datagen::SourceData::LATEST_TESTED_*`.\n\
            \n\
            "
            .as_bytes(),
        )
        .unwrap();

    let locales = databake::Bake::bake(LOCALES, &Default::default());
    let cldr_tag = SourceData::LATEST_TESTED_CLDR_TAG;
    let icu_tag = SourceData::LATEST_TESTED_ICUEXPORT_TAG;

    metadata
        .write_all(
            quote::quote! {
                pub const LOCALES: &[icu_locid::LanguageIdentifier] = &#locales;
                pub const CLDR_TAG: &str = #cldr_tag;
                pub const ICUEXPORT_TAG: &str = #icu_tag;
            }
            .to_string()
            .as_bytes(),
        )
        .unwrap();
}
