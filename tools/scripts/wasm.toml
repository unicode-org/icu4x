# This file is part of ICU4X. For terms of use, please see the file
# called LICENSE at the top level of the ICU4X source tree
# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

# This is a cargo-make file included in the toplevel Makefile.toml

[tasks.wasm-build-dev]
description = "Build WASM FFI into the target directory (dev mode)"
category = "ICU4X WASM"
install_crate = { rustup_component_name = "rust-src" }
toolchain = "nightly-2021-09-22"
command = "cargo"
args = ["wasm-build-dev", "--package", "icu_capi", "--example", "icu_capi_cdylib"]

[tasks.wasm-build-release]
description = "Build WASM FFI into the target directory (release mode)"
category = "ICU4X WASM"
install_crate = { rustup_component_name = "rust-src" }
toolchain = "nightly-2021-09-22"
# We don't care about panics in release mode because most incorrect inputs are handled by result types.
env = { "RUSTFLAGS" = "-C panic=abort -C opt-level=s" }
command = "cargo"
args = ["wasm-build-release", "--package", "icu_capi", "--example", "icu_capi_cdylib"]

[tasks.wasm-build-examples]
description = "Build WASM examples into the target directory"
category = "ICU4X WASM"
install_crate = { rustup_component_name = "rust-src" }
toolchain = "nightly-2021-09-22"
# We don't care about panics in release mode because most incorrect inputs are handled by result types.
env = { "RUSTFLAGS" = "-C panic=abort -C opt-level=s" }
command = "cargo"
# Add features here and below if a desired example is not being built
args = [
    "wasm-build-release", "--examples", "--workspace",
    "--features", "zerovec/serde",
    "--exclude", "icu_datagen"
]

[tasks.wasm-dir]
description = "Make the WASM package directory"
category = "ICU4X WASM"
command = "mkdir"
args = ["-p", "wasmpkg"]

[tasks.wasm-wasm-dev]
description = "Copy the WASM files from dev into wasmpkg"
category = "ICU4X WASM"
command = "cp"
args = ["${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/wasm32-unknown-unknown/debug/examples/icu_capi_cdylib.wasm", "wasmpkg/icu_capi.wasm"]
dependencies = ["wasm-build-dev", "wasm-dir"]

[tasks.wasm-wasm-release]
description = "Copy the WASM files from release into wasmpkg"
category = "ICU4X WASM"
command = "cp"
args = ["${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/wasm32-unknown-unknown/release/examples/icu_capi_cdylib.wasm", "wasmpkg/icu_capi.wasm"]
dependencies = ["wasm-build-release", "wasm-dir"]

[tasks.wasm-cpp-emscripten]
description = "Run the C++-emscripten test (needs emsdk)"
category = "ICU4X WASM"
script_runner = "@duckscript"
script = '''
exit_on_error true
cd ffi/diplomat/cpp/examples/fixeddecimal_wasm
exec make test
'''

[tasks.wasm-wasm-examples]
description = "Copy the WASM files from examples into wasmpkg"
category = "ICU4X WASM"
dependencies = ["wasm-build-examples", "wasm-dir"]
script_runner = "@duckscript"
script = '''
exit_on_error true

# Re-run the build command only to generate the JSON output (--message-format=json)
set_env RUSTFLAGS "-C panic=abort -C opt-level=s"
output = exec cargo +nightly-2021-09-22 wasm-build-release --message-format=json --examples --workspace --features zerovec/serde --exclude icu_datagen
if ${output.code}
    echo ${output.stderr}
    trigger_error "Build failed! See output above."
end

# Parse the JSON messages from --message-format=json line by line
trimmed_stdout = trim ${output.stdout}
json_messages = split ${trimmed_stdout} "\n"
for json_message in ${json_messages}
    json_obj = json_parse ${json_message}

    # The following two JSON keys determine whether this is an example artifact
    is_compiler_artifact = eq ${json_obj.reason} "compiler-artifact"
    is_example = eq ${json_obj.target.kind[0]} "example"
    if ${is_compiler_artifact} and ${is_example}
        # Copy the wasm file to the output directory
        filename = basename ${json_obj.executable}
        # We have the icu_capi_cdylib hack example, which is not a real "example"
        # and won't produce an executable here. We should filter it out.
        empty = is_empty ${filename}
        if not ${empty}
            out_path = concat wasmpkg/ ${filename}
            cp ${json_obj.executable} ${out_path}
        end
    end
end
'''

[tasks.wasm-wat]
description = "Create WebAssembly Text files from the WASM files"
category = "ICU4X WASM"
dependencies = ["wasm-wasm-examples"]
script_runner = "@duckscript"
script = '''
exit_on_error true

wasm2wat = which wasm2wat
assert ${wasm2wat} "Could not find 'wasm2wat' in path.\n*** Please run 'npm install -g wabt' ***"

mkdir wasmpkg/wat

handle = glob_array wasmpkg/*.wasm
for src_path in ${handle}
    path_no_extension = substring ${src_path} -5
    basename = substring ${path_no_extension} 8
    out_path = concat wasmpkg/wat/ ${basename} ".wat"

    out_exists = is_path_exists ${out_path}
    up_to_date = set false
    if ${out_exists}
        src_time = get_last_modified_time ${src_path}
        out_time = get_last_modified_time ${out_path}
        up_to_date = less_than ${src_time} ${out_time}
    end

    if not ${up_to_date}
        echo Writing ${out_path}
        output = exec ${wasm2wat} ${src_path} -o ${out_path}
        stdout = trim ${output.stdout}
        stderr = trim ${output.stderr}
        if ${stdout} or ${stderr} or ${output.code}
            echo ${stdout}\n${stderr}\nexit code: ${output.code}
            assert_fail "wasm2wat printed warnings (shown above)"
        end
    end
end
'''

[tasks.wasm-dcmp]
description = "Create WebAssembly decompiled code files from the WASM files"
category = "ICU4X WASM"
dependencies = ["wasm-wasm-examples"]
script_runner = "@duckscript"
script = '''
exit_on_error true

wasm-decompile = which wasm-decompile
assert ${wasm-decompile} "Could not find 'wasm-decompile' in path.\n*** Please run 'npm install -g wabt' ***"

mkdir wasmpkg/wasm-decompile

handle = glob_array wasmpkg/*.wasm
for src_path in ${handle}
    path_no_extension = substring ${src_path} -5
    basename = substring ${path_no_extension} 8
    out_path = concat wasmpkg/wasm-decompile/ ${basename} ".dcmp"

    out_exists = is_path_exists ${out_path}
    up_to_date = set false
    if ${out_exists}
        src_time = get_last_modified_time ${src_path}
        out_time = get_last_modified_time ${out_path}
        up_to_date = less_than ${src_time} ${out_time}
    end

    if not ${up_to_date}
        echo Writing ${out_path}
        output = exec ${wasm-decompile} ${src_path} -o ${out_path}
        stdout = trim ${output.stdout}
        stderr = trim ${output.stderr}
        if ${stdout} or ${stderr} or ${output.code}
            echo ${stdout}\n${stderr}\nexit code: ${output.code}
            assert_fail "wasm-decompile printed warnings (shown above)"
        end
    end
end
'''

[tasks.wasm-opt-release]
description = "Create optimized WASM files from the WASM files"
category = "ICU4X WASM"
dependencies = ["wasm-wasm-release"]
script_runner = "@duckscript"
script = '''
exit_on_error true

wasm-opt = which wasm-opt
assert ${wasm-opt} "Could not find 'wasm-opt' in path.\n*** Please run 'npm install -g wasm-opt' ***"

mkdir wasmpkg/wasm-opt

handle = glob_array wasmpkg/*.wasm
for src_path in ${handle}
    path_no_extension = substring ${src_path} -5
    basename = substring ${path_no_extension} 8
    out_path = concat wasmpkg/wasm-opt/ ${basename} "+opt.wasm"

    out_exists = is_path_exists ${out_path}
    up_to_date = set false
    if ${out_exists}
        src_time = get_last_modified_time ${src_path}
        out_time = get_last_modified_time ${out_path}
        up_to_date = less_than ${src_time} ${out_time}
    end

    if not ${up_to_date}
        echo Writing ${out_path}
        output = exec ${wasm-opt} -Os ${src_path} -o ${out_path}
        stdout = trim ${output.stdout}
        stderr = trim ${output.stderr}
        if ${stdout} or ${stderr} or ${output.code}
            echo ${stdout}\n${stderr}\nexit code: ${output.code}
            assert_fail "wasm-opt printed warnings (shown above)"
        end
    end
end
'''

[tasks.wasm-opt-examples]
description = "Create optimized WASM files from the WASM files"
category = "ICU4X WASM"
dependencies = ["wasm-wasm-examples"]
script_runner = "@duckscript"
script = '''
exit_on_error true

wasm-opt = which wasm-opt
assert ${wasm-opt} "Could not find 'wasm-opt' in path.\n*** Please run 'npm install -g wasm-opt' ***"

mkdir wasmpkg/wasm-opt

handle = glob_array wasmpkg/*.wasm
for src_path in ${handle}
    path_no_extension = substring ${src_path} -5
    basename = substring ${path_no_extension} 8
    out_path = concat wasmpkg/wasm-opt/ ${basename} "+opt.wasm"

    out_exists = is_path_exists ${out_path}
    up_to_date = set false
    if ${out_exists}
        src_time = get_last_modified_time ${src_path}
        out_time = get_last_modified_time ${out_path}
        up_to_date = less_than ${src_time} ${out_time}
    end

    if not ${up_to_date}
        echo Writing ${out_path}
        output = exec ${wasm-opt} -Os ${src_path} -o ${out_path}
        stdout = trim ${output.stdout}
        stderr = trim ${output.stderr}
        if ${stdout} or ${stderr} or ${output.code}
            echo ${stdout}\n${stderr}\nexit code: ${output.code}
            assert_fail "wasm-opt printed warnings (shown above)"
        end
    end
end
'''

[tasks.wasm-twiggy-dominators-release]
description = "Create Twiggy Dominator files from the WASM files"
category = "ICU4X WASM"
script_runner = "@duckscript"
script = '''
exit_on_error true

twiggy = which twiggy
assert ${twiggy} "Could not find 'twiggy' in path.\n*** Please run 'cargo install twiggy' ***"

mkdir wasmpkg/twiggy

handle = glob_array wasmpkg/*.wasm
for src_path in ${handle}
    path_no_extension = substring ${src_path} -5
    basename = substring ${path_no_extension} 8
    out_path = concat wasmpkg/twiggy/ ${basename} "+twiggy.txt"

    out_exists = is_path_exists ${out_path}
    up_to_date = set false
    if ${out_exists}
        src_time = get_last_modified_time ${src_path}
        out_time = get_last_modified_time ${out_path}
        up_to_date = less_than ${src_time} ${out_time}
    end

    if not ${up_to_date}
        echo Writing ${out_path}
        exec --fail-on-error ${twiggy} dominators ${src_path} -o ${out_path}
    end
end
'''
dependencies = ["wasm-wasm-release"]

[tasks.wasm-twiggy-dominators-examples]
description = "Create Twiggy Dominator files from the WASM files"
category = "ICU4X WASM"
script_runner = "@duckscript"
script = '''
exit_on_error true

twiggy = which twiggy
assert ${twiggy} "Could not find 'twiggy' in path.\n*** Please run 'cargo install twiggy' ***"

mkdir wasmpkg/twiggy

handle = glob_array wasmpkg/*.wasm
for src_path in ${handle}
    path_no_extension = substring ${src_path} -5
    basename = substring ${path_no_extension} 8
    out_path = concat wasmpkg/twiggy/ ${basename} "+twiggy.txt"

    out_exists = is_path_exists ${out_path}
    up_to_date = set false
    if ${out_exists}
        src_time = get_last_modified_time ${src_path}
        out_time = get_last_modified_time ${out_path}
        up_to_date = less_than ${src_time} ${out_time}
    end

    if not ${up_to_date}
        echo Writing ${out_path}
        exec --fail-on-error ${twiggy} dominators ${src_path} -o ${out_path}
    end
end
'''
dependencies = ["wasm-wasm-examples"]

[tasks.wasm-dev]
description = "All-in-one command to build dev-mode WASM FFI to wasmpkg"
category = "ICU4X WASM"
dependencies = [
    "wasm-wasm-dev",
]

[tasks.wasm-release]
description = "All-in-one command to build release-mode WASM FFI to wasmpkg"
category = "ICU4X WASM"
dependencies = [
    "wasm-wasm-release",
    "wasm-opt-release",
    "wasm-twiggy-dominators-release",
]

[tasks.wasm-examples]
description = "All-in-one command to build release-mode WASM examples to wasmpkg"
category = "ICU4X WASM"
dependencies = [
    "wasm-wasm-examples",
    "wasm-wat",
    "wasm-dcmp",
    "wasm-opt-examples",
    "wasm-twiggy-dominators-examples",
]

[tasks.wasm-test-release]
description = "Run WASM tests in release mode"
category = "ICU4X WASM"
dependencies = [
    "wasm-release",
    "diplomat-gen-js"
]
script_runner = "@duckscript"
script = '''
cd ./ffi/diplomat/wasm/test
exec --fail-on-error npm install
exec --fail-on-error npm test
'''

[tasks.diplomat-gen-js]
description = "Generate JS bindings for the FFI with Diplomat"
category = "ICU4X Development"
script_runner = "@duckscript"
script = '''
exit_on_error true
cd ffi/diplomat

# Duckscript doesn't support globs in rm, so we delete the relevant files
rm ./wasm/lib/api.mjs
rm ./wasm/lib/diplomat-runtime.mjs
rm -r ./wasm/docs/
mkdir ./wasm/docs

exec --fail-on-error diplomat-tool js ./wasm/lib/ --docs ./wasm/docs
'''

[tasks.wasm-clean]
description = "Clean up WASM build artifacts"
category = "ICU4X WASM"
command = "rm"
args = ["-rf", "wasmpkg"]
