# This file is part of ICU4X. For terms of use, please see the file
# called LICENSE at the top level of the ICU4X source tree
# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

# This is a cargo-make file included in the toplevel Makefile.toml

[tasks.test-ffi]
description = "Run FFI tests"
category = "ICU4X Development"
dependencies = [
    "verify-diplomat-gen",
    "test-capi",
    # TODO(#964): Enable this CI test.
    # "test-capi-tiny",
    "test-cpp",
    "build-wearos-ffi",
    "test-nostd",
]

[tasks.verify-diplomat-gen]
description = "Verify that checked-in Diplomat bindings are up to date"
category = "ICU4X Development"
dependencies = [
    "diplomat-gen",
]
script_runner = "@duckscript"
script = '''
exit_on_error true
exec --fail-on-error git diff --exit-code -- ffi
'''

[tasks.diplomat-gen]
description = "Regenerate Diplomat bindings"
category = "ICU4X Development"
dependencies = [
    "diplomat-gen-c",
    "diplomat-gen-cpp",
    "diplomat-gen-js",
]

[tasks.test-capi]
description = "Run C API tests"
category = "ICU4X Development"
dependencies = [ "diplomat-gen-c" ]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd ffi/capi/examples/pluralrules
exec --fail-on-error make
cd ../fixeddecimal
exec --fail-on-error make
cd ../locale
exec --fail-on-error make
'''

[tasks.test-capi-tiny]
description = "Run C API tests for tiny targets"
category = "ICU4X Development"
dependencies = [ "diplomat-gen-c" ]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd ffi/capi/examples/fixeddecimal_tiny
exec --fail-on-error make
exec ls -l
'''

[tasks.test-cpp]
description = "Run CPP tests"
category = "ICU4X Development"
dependencies = [ "diplomat-gen-cpp" ]
script_runner = "@duckscript"
script = '''
exit_on_error true
cd ffi/cpp/examples/pluralrules
exec --fail-on-error make
cd ../fixeddecimal
exec --fail-on-error make
'''

[tasks.test-cppdoc]
description = "Build the cpp tests"
category = "ICU4X Development"
script_runner = "@duckscript"
script = '''
exit_on_error true
cd ffi/cpp/docs;
exec --fail-on-error make html
'''

[tasks.diplomat-gen-c]
description = "Generate C headers for the FFI with Diplomat"
category = "ICU4X Development"
script_runner = "@duckscript"
script = '''
exit_on_error true
cd ffi/capi
# Duckscript doesn't support globs in rm, so we delete the dir
rm -r include/
mkdir include
exec --fail-on-error diplomat-tool c ./include
'''

[tasks.diplomat-gen-cpp]
description = "Generate C++ headers for the FFI with Diplomat"
category = "ICU4X Development"
script_runner = "@duckscript"
script = '''
exit_on_error true
cd ffi/capi


# Duckscript doesn't support globs in rm, so we do this instead
# (we need .gitignore and conf.py to stick around)
include = glob_array ../cpp/include/**/*.hpp
for path in ${include}
    rm ${path}
end
docs = glob_array ../cpp/docs/source/*.rst
for path in ${docs}
    rm ${path}
end
exec --fail-on-error diplomat-tool cpp ../cpp/include --docs ../cpp/docs/source
'''

[tasks.build-wearos-ffi]
description = "Build ICU4X CAPI for Cortex"
category = "ICU4X FFI"
toolchain = "nightly-2021-02-28"
env = { "RUSTFLAGS" = "-Ctarget-cpu=cortex-m33" }
command = "cargo"
args = ["build", "--package", "icu_capi",
        "--target", "thumbv8m.main-none-eabihf",
        "--no-default-features", "--features=wearos",
        "--release",
        "-Zbuild-std"]

[tasks.test-nostd]
description = "Ensure ICU4X core builds on no-std"
category = "ICU4X FFI"
toolchain = "nightly-2021-02-28"
command = "cargo"
args = ["build", "--package", "icu", "--target", "thumbv7m-none-eabi"]

[tasks.diplomat-get-rev]
description = "Get current Diplomat revision"
category = "ICU4X Development"
script_runner = "@duckscript"
script = '''
exit_on_error true
metadata = exec --fail-on-error cargo metadata
metadata = set ${metadata.stdout}
# Parse output
metadata = json_parse --collection ${metadata}
# packages = metadata.packages
packages = map_get ${metadata} packages
for pkg in ${packages}
    # find pkg.name
    name = map_get ${pkg} name
    # check if it is "diplomat"
    e = eq ${name} "diplomat"
    if ${e}
        # get pkg.source
        source = map_get ${pkg} source
        # extract the bit between `rev=` and `#`
        handle = split ${source} "rev="
        hash = array_get ${handle} 1
        release handle
        handle = split ${hash} "#"
        rev = array_get ${handle} 0
        release handle
        # print it
        echo ${rev}
    end
end
release --recursive ${metadata}
'''

[tasks.diplomat-install]
description = "Install Diplomat at current Diplomat revision"
category = "ICU4X Development"
script_runner = "@duckscript"
script = '''
exit_on_error true
rev = exec cargo make diplomat-get-rev --loglevel error
rev = trim ${rev.stdout}
echo "Installing Diplomat rev ${rev}"
exec cargo install --git https://github.com/rust-diplomat/diplomat.git --rev ${rev} diplomat-tool -f
'''