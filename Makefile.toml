# This file is part of ICU4X. For terms of use, please see the file
# called LICENSE at the top level of the ICU4X source tree
# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

[config]
default_to_workspace = false
load_cargo_aliases = true

### INDIVIDUAL TEST AND LINT TASKS ###
# Note: If a task is purely a cargo alias, define it in .cargo/config.toml

[tasks.build-all-features]
description = "Build all permutations of all features"
category = "ICU4X Development"
install_crate = { crate_name = "cargo-all-features", binary = "cargo-build-all-features", test_arg = ["--help"] }
install_crate_args = ["--version", "^1.4"]
command = "cargo"
args = ["build-all-features"]

[tasks.test-capi]
description = "Run C API tests"
category = "ICU4X Development"
script = '''
cd ffi/capi/examples/pluralrules;
make
cd ../fixeddecimal;
make
'''

[tasks.license-header-check]
description = "Ensure all the source files have license headers"
category = "ICU4X Development"
script_runner = "@duckscript"
script = '''
exit_on_error true

glob_pattern_array = array "./**/*.rs" "./**/*.yml" "./**/*.toml"

blank_line = set ""

license_hash_line_1 = set "# This file is part of ICU4X. For terms of use, please see the file"
license_hash_line_2 = set "# called LICENSE at the top level of the ICU4X source tree"
license_hash_line_3 = set "# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE )."
license_hash_array = array ${license_hash_line_1} ${license_hash_line_2} ${license_hash_line_3} ${blank_line}
license_hash_str = array_join ${license_hash_array} "\n"

license_slash_line_1 = set "// This file is part of ICU4X. For terms of use, please see the file"
license_slash_line_2 = set "// called LICENSE at the top level of the ICU4X source tree"
license_slash_line_3 = set "// (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE )."
license_slash_array = array ${license_slash_line_1} ${license_slash_line_2} ${license_slash_line_3} ${blank_line}
license_slash_str = array_join ${license_slash_array} "\n"

for pattern in ${glob_pattern_array}
    handle = glob_array ${pattern}
    for path in ${handle}
        if not starts_with ${path} "target"  # skip paths in target dir
            text = readfile ${path}
            result_hash = starts_with ${text} ${license_hash_str}
            result_slash = starts_with ${text} ${license_slash_str}
            not_result_hash = not ${result_hash}
            not_result_slash = not ${result_slash}
            if ${not_result_hash} and ${not_result_slash}
              echo "License header missing in ${path}"
              trigger_error "License header missing or misformatted in ${path}."
            end
        end
    end
    echo "License headers found in files matching ${pattern}"
end
echo "License header check complete"
'''

[tasks.generate-readmes]
description = "Automatically generate README.md for each component."
category = "ICU4X Development"
script_runner = "@duckscript"
script = '''
exit_on_error true

glob_pattern = set "./**/Cargo.toml"
template = canonicalize README.tpl

cargo_list = exec cargo --list
if not contains ${cargo_list.stdout} "readme"
    trigger_error "Please run 'cargo install cargo-readme' to support generating README.md files"
end

handle = glob_array ${glob_pattern}
for path in ${handle}
    root_dir = dirname ${path}
    if not is_empty ${root_dir}
        echo "Automatically generating ${root_dir}/README.md"
        exec --fail-on-error cargo readme -r ${root_dir} -o README.md -t ${template}
    end
end
'''

[tasks.generated-readme-check]
description = "Check that README.md was properly generated for each component."
category = "ICU4X Development"
dependencies = [
    "generate-readmes"
]
script_runner = "@duckscript"
script = '''
exit_on_error true

output = exec git status --porcelain=v1 -uno
output_length = length ${output.stdout}
if greater_than ${output_length} 0
    if contains ${output.stdout} README.md
        msg = array "" ""
        array_push ${msg} "A README.md file is out-of-sync with lib.rs"
        array_push ${msg} ""
        array_push ${msg} "If you modified a lib.rs file, please run `cargo make generate-readmes`. If you edited a"
        array_push ${msg} "README.md file directly, please also update the corresponding lib.rs."
        array_push ${msg} ""
        array_push ${msg} "The modified files were:"
        array_push ${msg} "${output.stdout}"
        msg = array_join ${msg} "\n"
        trigger_error ${msg}
    end
end
'''


### META TASKS ###

[tasks.quick]
description = "Run quick version of all lints and tests"
category = "ICU4X Development"
dependencies = [
    "test-all",
    "fmt-check",
    "clippy-all",
    "license-header-check",
    "generated-readme-check",
    "test-capi",
]

[tasks.ci]
description = "Run all lints and tests"
category = "ICU4X Development"
dependencies = [
    "quick",
    "test-docs-defaults",
    "test-docs",
    "build-all-features",
    "bincode-gen-testdata",
]

### WASM TASKS ###

[tasks.wasm-build]
description = "Build all examples as WASM into the target directory"
category = "ICU4X WASM"
install_crate = { rustup_component_name = "rust-src" }
toolchain = "nightly-2021-02-28"
command = "cargo"
args = ["wasm-build", "--examples", "--workspace", "--exclude", "icu_datagen"]

[tasks.wasm-dir]
description = "Make the WASM package directory"
category = "ICU4X WASM"
command = "mkdir"
args = ["-p", "wasmpkg"]

[tasks.wasm-wasm]
description = "Copy the WASM files from target into wasmpkg"
category = "ICU4X WASM"
command = "cp"
args = ["-a", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/wasm32-unknown-unknown/release/examples/.", "wasmpkg/"]
dependencies = ["wasm-build", "wasm-dir"]

[tasks.wasm-wat]
description = "Create WebAssembly Text files from the WASM files"
category = "ICU4X WASM"
dependencies = ["wasm-wasm"]
script_runner = "@duckscript"
script = '''
exit_on_error true

wasm2wat = which wasm2wat
assert ${wasm2wat} "Could not find 'wasm2wat' in path.\n*** Please run 'npm install -g wabt' ***"

mkdir wasmpkg/wat

handle = glob_array wasmpkg/*.wasm
for src_path in ${handle}
    path_no_extension = substring ${src_path} -5
    basename = substring ${path_no_extension} 8
    out_path = concat wasmpkg/wat/ ${basename} ".wat"

    out_exists = is_path_exists ${out_path}
    up_to_date = set false
    if ${out_exists}
        src_time = get_last_modified_time ${src_path}
        out_time = get_last_modified_time ${out_path}
        up_to_date = less_than ${src_time} ${out_time}
    end

    if not ${up_to_date}
        echo Writing ${out_path}
        output = exec ${wasm2wat} ${src_path} -o ${out_path}
        stdout = trim ${output.stdout}
        stderr = trim ${output.stderr}
        if ${stdout} or ${stderr} or ${output.code}
            echo ${stdout}\n${stderr}\nexit code: ${output.code}
            assert_fail "wasm2wat printed warnings (shown above)"
        end
    end
end
'''

[tasks.wasm-dcmp]
description = "Create WebAssembly decompiled code files from the WASM files"
category = "ICU4X WASM"
dependencies = ["wasm-wasm"]
script_runner = "@duckscript"
script = '''
exit_on_error true

wasm-decompile = which wasm-decompile
assert ${wasm-decompile} "Could not find 'wasm-decompile' in path.\n*** Please run 'npm install -g wabt' ***"

mkdir wasmpkg/wasm-decompile

handle = glob_array wasmpkg/*.wasm
for src_path in ${handle}
    path_no_extension = substring ${src_path} -5
    basename = substring ${path_no_extension} 8
    out_path = concat wasmpkg/wasm-decompile/ ${basename} ".dcmp"

    out_exists = is_path_exists ${out_path}
    up_to_date = set false
    if ${out_exists}
        src_time = get_last_modified_time ${src_path}
        out_time = get_last_modified_time ${out_path}
        up_to_date = less_than ${src_time} ${out_time}
    end

    if not ${up_to_date}
        echo Writing ${out_path}
        output = exec ${wasm-decompile} ${src_path} -o ${out_path}
        stdout = trim ${output.stdout}
        stderr = trim ${output.stderr}
        if ${stdout} or ${stderr} or ${output.code}
            echo ${stdout}\n${stderr}\nexit code: ${output.code}
            assert_fail "wasm-decompile printed warnings (shown above)"
        end
    end
end
'''

[tasks.wasm-opt]
description = "Create optimized WASM files from the WASM files"
category = "ICU4X WASM"
dependencies = ["wasm-wasm"]
script_runner = "@duckscript"
script = '''
exit_on_error true

wasm-opt = which wasm-opt
assert ${wasm-opt} "Could not find 'wasm-opt' in path.\n*** Please run 'npm install -g wasm-opt' ***"

mkdir wasmpkg/wasm-opt

handle = glob_array wasmpkg/*.wasm
for src_path in ${handle}
    path_no_extension = substring ${src_path} -5
    basename = substring ${path_no_extension} 8
    out_path = concat wasmpkg/wasm-opt/ ${basename} "+opt.wasm"

    out_exists = is_path_exists ${out_path}
    up_to_date = set false
    if ${out_exists}
        src_time = get_last_modified_time ${src_path}
        out_time = get_last_modified_time ${out_path}
        up_to_date = less_than ${src_time} ${out_time}
    end

    if not ${up_to_date}
        echo Writing ${out_path}
        output = exec ${wasm-opt} -Os ${src_path} -o ${out_path}
        stdout = trim ${output.stdout}
        stderr = trim ${output.stderr}
        if ${stdout} or ${stderr} or ${output.code}
            echo ${stdout}\n${stderr}\nexit code: ${output.code}
            assert_fail "wasm-opt printed warnings (shown above)"
        end
    end
end
'''

[tasks.wasm-twiggy-dominators]
description = "Create Twiggy Dominator files from the WASM files"
category = "ICU4X WASM"
script_runner = "@duckscript"
script = '''
exit_on_error true

twiggy = which twiggy
assert ${twiggy} "Could not find 'twiggy' in path.\n*** Please run 'cargo install twiggy' ***"

mkdir wasmpkg/twiggy

handle = glob_array wasmpkg/*.wasm
for src_path in ${handle}
    path_no_extension = substring ${src_path} -5
    basename = substring ${path_no_extension} 8
    out_path = concat wasmpkg/twiggy/ ${basename} "+twiggy.txt"

    out_exists = is_path_exists ${out_path}
    up_to_date = set false
    if ${out_exists}
        src_time = get_last_modified_time ${src_path}
        out_time = get_last_modified_time ${out_path}
        up_to_date = less_than ${src_time} ${out_time}
    end

    if not ${up_to_date}
        echo Writing ${out_path}
        exec --fail-on-error ${twiggy} dominators ${src_path} -o ${out_path}
    end
end
'''
dependencies = ["wasm-wasm"]

[tasks.wasm]
description = "All-in-one command to build examples and supplements to wasmpkg"
category = "ICU4X WASM"
dependencies = [
    "wasm-wasm",
    "wasm-wat",
    "wasm-dcmp",
    "wasm-opt",
    "wasm-twiggy-dominators",
]

[tasks.wasm-clean]
description = "Clean up WASM build artifacts"
category = "ICU4X WASM"
command = "rm"
args = ["-rf", "wasmpkg"]

### VALGRIND TASKS ###

[tasks.valgrind-build]
description = "Pre-build artifacts for use with the Valgrind task"
category = "ICU4X Valgrind"
command = "cargo"
toolchain = "nightly-2021-02-28"
args = ["build", "--examples", "--features", "icu_benchmark_macros/rust_global_allocator", "--profile", "bench", "-Z", "unstable-options"]

[tasks.valgrind]
description = "Build ICU4X example files with default features and run through Valgrind"
category = "ICU4X Valgrind"
dependencies = [
    "valgrind-build",
]
script_runner = "@duckscript"
script = '''
exit_on_error true

valgrind = which valgrind
assert ${valgrind} "Could not find 'valgrind' in path.\n***\nRead about Valgrind: https://valgrind.org/\nInstall on Ubuntu: `apt-get install valgrind`\n***"

mkdir benchmarks
mkdir benchmarks/valgrind

# Re-run the build command only to generate the JSON output (--message-format=json)
output = exec cargo +nightly-2021-02-28 build --examples --message-format=json --features icu_benchmark_macros/rust_global_allocator --profile bench -Z unstable-options
if ${output.code}
    trigger_error "Build failed! To debug, build examples with `--features icu_benchmark_macros/rust_global_allocator`"
end

# Parse the JSON messages from --message-format=json line by line
trimmed_stdout = trim ${output.stdout}
json_messages = split ${trimmed_stdout} "\n"
for json_message in ${json_messages}
    json_obj = json_parse ${json_message}

    # The following two JSON keys determine whether this is an example artifact
    is_compiler_artifact = eq ${json_obj.reason} "compiler-artifact"
    is_example = eq ${json_obj.target.kind[0]} "example"
    if ${is_compiler_artifact} and ${is_example}

        # Run the example through Valgrind and save the output in the benchmarks folder
        out_file = concat "benchmarks/valgrind/" ${json_obj.target.name} ".out"
        set_env LD_BIND_NOW "y"
        vg_output = exec ${valgrind} --tool=callgrind --zero-before=_start --callgrind-out-file=${out_file} ${json_obj.executable}
        if ${vg_output.code}
            echo ${vg_output.stdout}
            echo ${vg_output.stderr}
            trigger_error "Valgrind failed; see output above"
        else
            # Display the summary line
            grep_output = exec grep "summary" ${out_file}
            summary_line = trim ${grep_output.stdout}
            ir_count = substring ${summary_line} 9
            echo ${ir_count} "Ir:" ${json_obj.target.name}
        end
    end
end
'''

### DATA TASKS ###

[tasks.testdata-download]
description = "Download fresh CLDR JSON, overwriting the existing CLDR JSON."
category = "ICU4X Data"
command = "cargo"
args = [
    "run",
    "--bin=icu4x-testdata-download",
    "--",
    "-v",
]

[tasks.testdata-build-json]
description = "Build ICU4X JSON from the downloaded CLDR JSON, overwriting the existing ICU4X JSON."
category = "ICU4X Data"
command = "cargo"
args = [
    "run",
    "--bin=icu4x-datagen",
    "--",
    "-v",
    "--cldr-testdata",
    "--out-testdata",
    "--all-keys",
    "--test-locales",
    "--syntax=json",
    "--pretty",
    "--overwrite",
]

[tasks.testdata]
description = "Download fresh data and then build ICU4X JSON from it"
category = "ICU4X Data"
dependencies = [
    "testdata-download",
    "testdata-build-json",
]

[tasks.bincode-clean]
description = "Clean out the bincode data."
category = "ICU4X Data"
script_runner = "@duckscript"
script = '''
# Use duckscript, rather than a unix command, so that this works on Windows.
rm -r ./provider/testdata/data/bincode
'''

[tasks.bincode-gen-testdata-no-clean]
description = "Generate bincode testdata without removing the old data"
category = "ICU4X Data"
command = "cargo"
args = [
    "run",
    "--bin=icu4x-datagen",
    "--",
    "-v",
    "--cldr-testdata",
    "--out-testdata",
    "--all-keys",
    "--test-locales",
    "--syntax=bincode",
]

[tasks.bincode-gen-testdata]
description = "Generate bincode for the testdata"
category = "ICU4X Data"
run_task = [
    # Running "bincode-clean" first ensures that this command won't fail because the data
    # already exists at that location.
    { name = ["bincode-clean", "bincode-gen-testdata-no-clean"] },
]
