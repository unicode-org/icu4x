# This file is part of ICU4X. For terms of use, please see the file
# called LICENSE at the top level of the ICU4X source tree
# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).
[config]
default_to_workspace = false
load_cargo_aliases = true

### INDIVIDUAL TEST AND LINT TASKS ###
# Note: If a task is purely a cargo alias, define it in .cargo/config.toml

[tasks.test-all-features]
description = "Test all permutations of all features"
category = "ICU4X Development"
install_crate = { crate_name = "cargo-all-features", binary = "cargo-build-all-features", test_arg = ["--help"] }
install_crate_args = ["--version", "^1.4"]
command = "cargo"
# Note: we need test-all-features (rather than build-all-features) for docs
args = ["test-all-features"]

[tasks.license-header-check]
description = "Ensure all the source files have license headers"
category = "ICU4X Development"
script_runner = "@duckscript"
script = '''
exit_on_error true

glob_pattern_array = array "./**/*.rs" "./**/*.yml" "./**/*.toml"

for pattern in ${glob_pattern_array}
    handle = glob_array ${pattern}
    for path in ${handle}
        if not starts_with ${path} "target"  # skip paths in target dir
            text = readfile ${path}
            result_hash = starts_with ${text} "# This file is part of ICU4X. For terms of use, please see the file"
            result_slash = starts_with ${text} "// This file is part of ICU4X. For terms of use, please see the file"
            not_result_hash = not ${result_hash}
            not_result_slash = not ${result_slash}
            if ${not_result_hash} and ${not_result_slash}
              echo "License header missing in ${path}"
              trigger_error "License header missing in ${path}"
            end
        end
    end
    echo "License headers found in files matching ${pattern}"
end
echo "License header check complete"
'''

### META TASKS ###

[tasks.quick]
description = "Run quick version of all lints and tests"
category = "ICU4X Development"
dependencies = [
    "test-all",
    "fmt-check",
    "clippy-all",
    "license-header-check",
]

[tasks.ci]
description = "Run all lints and tests"
category = "ICU4X Development"
dependencies = [
    "quick",
    "test-docs",
    "test-all-features",
    "bincode-gen-testdata",
]

### WASM TASKS ###

[tasks.wasm-build]
description = "Build all examples as WASM into the target directory"
category = "ICU4X WASM"
install_crate = { rustup_component_name = "rust-src" }
toolchain = "nightly"
command = "cargo"
args = ["wasm-build", "--examples"]

[tasks.wasm-dir]
description = "Make the WASM package directory"
category = "ICU4X WASM"
command = "mkdir"
args = ["-p", "wasmpkg"]

[tasks.wasm-wasm]
description = "Copy the WASM files from target into wasmpkg"
category = "ICU4X WASM"
command = "cp"
args = ["-a", "${CARGO_MAKE_WORKSPACE_WORKING_DIRECTORY}/target/wasm32-unknown-unknown/release/examples/.", "wasmpkg/"]
dependencies = ["wasm-build", "wasm-dir"]

[tasks.wasm-wat]
description = "Create WebAssembly Text files from the WASM files"
category = "ICU4X WASM"
command = "find"
args = ["wasmpkg/", "-name", "*.wasm", "-exec", "wasm2wat", "{}", "-o", "{}.wat", ";"]
dependencies = ["wasm-wasm"]
install_script = ["which wasm2wat || npm install -g wabt"]

[tasks.wasm-opt]
description = "Create optimized WASM files from the WASM files"
category = "ICU4X WASM"
command = "find"
args = ["wasmpkg/", "-name", "*.wasm", "-exec", "wasm-opt", "{}", "-o", "{}.opt", ";"]
dependencies = ["wasm-wasm"]
install_script = ["which wasm-opt || npm install -g wasm-opt"]

[tasks.wasm-twiggy-dominators]
description = "Create Twiggy Dominator files from the WASM files"
category = "ICU4X WASM"
command = "find"
args = ["wasmpkg/", "-name", "*.wasm", "-exec", "twiggy", "dominators", "{}", "-o", "{}.txt", ";"]
dependencies = ["wasm-wasm"]
install_crate = "twiggy"

[tasks.wasm]
description = "All-in-one command to build examples and supplements to wasmpkg"
category = "ICU4X WASM"
dependencies = [
    "wasm-wasm",
    "wasm-wat",
    "wasm-opt",
    "wasm-twiggy-dominators",
]

[tasks.wasm-clean]
description = "Clean up WASM build artifacts"
category = "ICU4X WASM"
command = "rm"
args = ["-rf", "wasmpkg"]

[tasks.bincode-clean]
description = "Clean out the bincode data."
category = "ICU4X Bincode"
script_runner = "@duckscript"
script = '''
# Use duckscript, rather than a unix command, so that this works on Windows.
rm -r ./resources/testdata/data/bincode
'''

[tasks.bincode-gen-testdata-no-clean]
description = "Generate bincode testdata without removing the old data"
category = "ICU4X Bincode"
cwd = "components/provider_fs"
command = "cargo"
args = [
    "run",
    "--features", "export-bin",
    "--features", "bincode",
    "--features", "serialize_none",
    "--",
    "--cldr-core", "../../resources/testdata/data/cldr/cldr-core",
    "--cldr-dates", "../../resources/testdata/data/cldr/cldr-dates-full",
    "--out", "../../resources/testdata/data/bincode",
    "--all-keys",
    "-s", "bincode",
]

[tasks.bincode-gen-testdata]
description = "Generate bincode for the testdata"
category = "ICU4X Bincode"
run_task = [
    # Running "bincode-clean" first ensures that this command won't fail because the data
    # already exists at that location.
    { name = ["bincode-clean", "bincode-gen-testdata-no-clean"] },
]
