# This file is part of ICU4X. For terms of use, please see the file
# called LICENSE at the top level of the ICU4X source tree
# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

name: Build and Test

# TODO(#234) re-include cache steps, also using Rust version in cache key

on:
  push:
    branches: [ main ]
  pull_request:
    branches: '*'

jobs:

  # Build job - basic smoke test
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Load the default Rust toolchain via the rust-toolchain file.
      run: rustup show
    - name: Check
      uses: actions-rs/cargo@v1.0.1
      with:
        command: check
        args: --all-targets --all-features

  # Test job - runs all "cargo make" testing commands
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Load the default Rust toolchain via the rust-toolchain file.
      run: rustup show
    - name: Build
      uses: actions-rs/cargo@v1.0.1
      with:
        command: build
        args: --all-targets --all-features
    - name: Test All Targets
      uses: actions-rs/cargo@v1.0.1
      with:
        command: test-all
    - name: Test Docs
      uses: actions-rs/cargo@v1.0.1
      with:
        command: test-docs


  # Feature coverage job - builds all permutations of features
  features:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
    - uses: actions/checkout@v2
    - name: Load the default Rust toolchain via the rust-toolchain file.
      run: rustup show
    - name: Install cargo-all-features
      uses: actions-rs/cargo@v1.0.1
      with:
        command: install
        args: cargo-all-features --version "^1.4"
    - name: Test Docs with Default Features
      uses: actions-rs/cargo@v1.0.1
      with:
        command: test-docs-defaults
    - name: Build All Feature Permutations
      uses: actions-rs/cargo@v1.0.1
      with:
        command: build-all-features


  # Lint job - runs all "cargo make" linting commands
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Load the default Rust toolchain via the rust-toolchain file.
      run: rustup show

    - name: Install rustfmt
      run: rustup component add rustfmt

    - name: Install cargo-make
      uses: actions-rs/install@v0.1.2
      with:
        crate: cargo-make
        version: latest

    - name: Install cargo-readme
      uses: actions-rs/install@v0.1.2
      with:
        crate: cargo-readme
        version: latest

    # TODO(#234) re-include cache steps, also using Rust version in cache key

    - name: Check Format
      uses: actions-rs/cargo@v1.0.1
      with:
        command: fmt-check

    - name: Check License Headers
      uses: actions-rs/cargo@v1.0.1
      with:
        command: license-check

    - name: Check Generated README.md
      uses: actions-rs/cargo@v1.0.1
      with:
        command: readme-check

  # Bincode job - Test that the bincode data provider can be generated correctly.
  bincode:
    runs-on: ubuntu-latest
    # Wait for the initial build to finish. Note that this step does not currently re-use any
    # artifacts from the build step. It's only waiting on the build to minimize resource use
    # in case the build fails.
    needs: [build]
    steps:
    - uses: actions/checkout@v2

    - name: Load the default Rust toolchain via the rust-toolchain file.
      run: rustup show

    - name: Install cargo-make
      uses: actions-rs/install@v0.1.2
      with:
        crate: cargo-make
        version: latest

    # TODO(#234) re-include cache steps, also using Rust version in cache key

    - name: Build the bincode
      uses: actions-rs/cargo@v1.0.1
      with:
        command: bincode-gen-testdata

  # Clippy job (cargo-clippy) - completes and puts warnings inline in PR
  clippy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Load the default Rust toolchain via the rust-toolchain file.
      run: rustup show

    # Clippy job > Install and run clippy steps

    - name: Install clippy
      run: rustup component add clippy

    - uses: actions-rs/clippy-check@v1.0.7
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        # keep args in sync with `clippy-all` in .cargo/config.toml
        args: --all-targets --all-features -- -D warnings -Aclippy::unknown-clippy-lints -Aclippy::field-reassign-with-default

  # Benchmarking & dashboards job

  benchmark:
    strategy:
      # max-parallel: 1
      fail-fast: false
      # `matrix` creates a job matrix (Cartesian product of possible values for each var)
      # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstrategymatrix
      matrix:
        component:
          - components/locid
          - components/uniset
          - components/plurals
          - components/datetime
          - utils/fixed_decimal


    # If you are modifying and debugging is required, don't be afraid to get
    # messy in a personal fork, if no better way to do it.
    # Example "debugging" workflow: https://github.com/echeran/icu4x/actions/runs/296714990

    runs-on: ubuntu-latest

    needs: [build]

    steps:
      - uses: actions/checkout@v2

      - name: Load the default Rust toolchain via the rust-toolchain file.
        run: rustup show

      - name: Create output dir
        run: mkdir -p ./benchmarks/perf/${{ matrix.component }}

      # Benchmarking & dashboards job > Run benchmark.

      - name: Run benchmark
        run: |
          pushd $PWD && cd ${{ matrix.component }};
          export REL_OUTPUT_PATH="`dirs +1`/benchmarks/perf/${{ matrix.component }}";
          mkdir -p $REL_OUTPUT_PATH;
          export OUTPUT_PATH_CMD="ls -d $REL_OUTPUT_PATH";
          export OUTPUT_PATH=$(echo $OUTPUT_PATH_CMD | sh);
          cargo bench -- --output-format bencher | tee $OUTPUT_PATH/output.txt;
          popd

      # In the following step(s) regarding converting benchmark output to dashboards, the branch in `gh-pages-branch` needs to exist.
      # If it doesn't already exist, it should be created by someone with push permissions, like so:
      #   # Create a local branch
      #   $ git checkout --orphan gh-pages
      #   $ git commit --allow-empty -m "root commit"
      #   # Push it to create a remote branch
      #   $ git push origin gh-pages:gh-pages

      # Benchmarking & dashboards job > (unmerged PR only) Convert benchmark output into dashboard HTML in a commit of a branch of the local repo.

      - name: Store benchmark result & create dashboard (unmerged PR only)
        # any action that is not a merge to main implies unfinished PR
        if: github.event_name != 'push' || github.ref != 'refs/heads/main'
        uses: rhysd/github-action-benchmark@v1.8.1
        with:
          name: Rust Benchmark
          tool: 'cargo'
          output-file-path: ./benchmarks/perf/${{ matrix.component }}/output.txt
          benchmark-data-dir-path: ./benchmarks/perf/${{ matrix.component }}
          # Show alert with commit comment on detecting possible performance regression
          alert-threshold: '200%'  # If for nothing else, enabling the possibility of alerts with meaningful thresholds requires this job to be done per-component
          fail-on-alert: true
          gh-pages-branch: unmerged-pr-bench-data  # Requires one-time-only creation of this branch on remote repo.
                                                   # We could use another branch besides `gh-pages` to store this historical benchmark info.
          auto-push: false  # Do not store historical benchmark info of unfinished PRs. Commits seem to get made anyways, so make sure
                            # that the branch in `gh-pages-branch` is different from the branch used for merges to main branch.
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true

      # Benchmarking & dashboards job > (PR merge to main only) Convert benchmark output into dashboard HTML in a commit of a branch of the local repo.

      - name: Store benchmark result & create dashboard (merge to main only)
        # only merges to main (implies PR is finished and approved by this point)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'unicode-org/icu4x'
        uses: rhysd/github-action-benchmark@v1.8.1
        with:
          name: Rust Benchmark
          tool: 'cargo'
          output-file-path: ./benchmarks/perf/${{ matrix.component }}/output.txt
          benchmark-data-dir-path: ./benchmarks/perf/${{ matrix.component }}
          # Show alert with commit comment on detecting possible performance regression
          alert-threshold: '200%'  # If for nothing else, enabling the possibility of alerts with meaningful thresholds requires this job to be done per-component
          fail-on-alert: true
          gh-pages-branch: gh-pages  # Requires one-time-only creation of this branch on remote repo.
                                     # We could use another branch besides `gh-pages` to store this historical benchmark info.
          auto-push: true  # Use the branch at `gh-pages-branch` to store historical info of benchmark data.
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          alert-comment-cc-users: '@sffc,@zbraniecki,@echeran'

      # Benchmarking & dashboards job > Upload output dashboard HTML to "persist" the files across jobs within the same workflow.

      - name: Switch branch to get result of benchmark pages output (merge to main only)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'unicode-org/icu4x'
        run: git checkout gh-pages

      - name: Upload updated benchmark data (merge to main only)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'unicode-org/icu4x'
        uses: actions/upload-artifact@v2
        with:
          path: ./benchmarks/perf/**  # use wildcard pattern to preserve dir structure of uploaded files
          name: benchmark-perf

  # Run examples with dhat-rs in order to collect memory heap size metrics. These
  # metrics will then be charted over time. See tools/benchmark/memory/README.md for
  # more information.

  # dhat-rs:
  #   https://github.com/nnethercote/dhat-rs
  # Benchmarking action (forked):
  #   https://github.com/gregtatum/github-action-benchmark
  # The memory data is collected in:
  #   benchmarks/memory/{os}/output.ndjson
  # The full data report is stored in:
  #   benchmarks/memory/{os}/{example}-dhat-heap.json

  memory:
    strategy:
      fail-fast: false
      # Create a matrix of all platforms, and all components. Each job then can run
      # multiple examples in that job. The examples are defined as a space separated
      # list of the name of the examples. The examples are assumed to be in the
      # examples folder.
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        # The list of examples to run, with the form {package}/{example}.
        #
        # n.b. Don't get tripped up by the yml syntax here. This is a list with a single string
        # entry. It is using the block chomping indicator ">-", which means the multiline string
        # will be joined together into one line using a single space between each line. This
        # will place all of the examples on the same line so they can get passed to the
        # icu_benchmark_memory cli.
        examples:
          - >-
              icu_datetime/work_log
              icu_locid/syntatically_canonicalize_locales
              icu_locid/filter_langids
              icu_plurals/unread_emails
              icu_plurals/elevator_floors
              icu_uniset/unicode_bmp_blocks_selector
              fixed_decimal/permyriad
              writeable/writeable_message
              litemap/language_names_lite_map

    runs-on: ${{ matrix.os }}

    # Only run the memory benchmark if the main build succeeded. The memory benchmark does not
    # rely on any of the build artifacts.
    needs: [build]

    steps:
      - uses: actions/checkout@v2

      # Nightly is only needed for the `--profile bench` line. Once that is stabilized,
      # then this line is no longer needed.
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-03-15
          override: true

      - name: Run the example with dhat-rs to collect memory information
        run: |
          cargo run --package icu_benchmark_memory -- --os ${{ matrix.os }} ${{ matrix.examples }} --toolchain nightly-2021-03-15

      # Benchmarking & dashboards job > (unmerged PR only) Convert benchmark output into
      # dashboard HTML in a commit of a branch of the local repo.

      - name: Store benchmark result & create dashboard (unmerged PR only)
        # any action that is not a merge to main implies unfinished PR
        if: github.event_name != 'push' || github.ref != 'refs/heads/main'
        # The gregtatum fork of rhysd/github-action-benchmark contains support for ndjson.
        # If the PR gets merged, this can be switched back to the main project.
        # https://github.com/rhysd/github-action-benchmark/pull/54
        uses: gregtatum/github-action-benchmark@d3f06f738e9612988d575db23fae5ca0008d3d12
        with:
          name: Heap – ${{ matrix.os }}
          # The ndjson tool is only supported by the gregtatum fork of github-action-benchmark.
          tool: 'ndjson'
          benchmark-data-dir-path: ./benchmarks/memory/${{ matrix.os }}
          output-file-path: ./benchmarks/memory/${{ matrix.os }}/output.ndjson
          # Show alert with commit comment on detecting possible memory regression
          alert-threshold: '200%'
          fail-on-alert: true
          # Requires one-time-only creation of this branch on remote repo. This will
          # store the generated information.
          gh-pages-branch: unmerged-pr-bench-data

          # Do not store historical benchmark info of unfinished PRs. Commits seem to get
          # made anyways, so make sure that the branch in `gh-pages-branch` is
          # different from the branch used for merges to main branch.
          auto-push: false

          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true

      # Benchmarking & dashboards job > (PR merge to main only) Convert benchmark output
      # into dashboard HTML in a commit of a branch of the local repo.

      - name: Store benchmark result & create dashboard (merge to main only)
        # only merges to main (implies PR is finished and approved by this point)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'unicode-org/icu4x'
        # The gregtatum fork of rhysd/github-action-benchmark contains support for ndjson.
        # If the PR gets merged, this can be switched back to the main project.
        # https://github.com/rhysd/github-action-benchmark/pull/54
        uses: gregtatum/github-action-benchmark@d3f06f738e9612988d575db23fae5ca0008d3d12
        with:
          name: Heap – ${{ matrix.os }}
          # The ndjson tool is only supported by the gregtatum fork of github-action-benchmark.
          tool: 'ndjson'
          benchmark-data-dir-path: ./benchmarks/memory/${{ matrix.os }}
          output-file-path: ./benchmarks/memory/${{ matrix.os }}/output.ndjson
          alert-threshold: '200%'
          fail-on-alert: true
          # The historical run information will be stored in this branch. This is the same
          # branch that is being used by the performance benchmark. The information is
          # computed by gregtatum/github-action-benchmark, and is added to a .js file in
          # the branch, e.g. benchmarks/memory/{os}/data.js
          gh-pages-branch: gh-pages
          auto-push: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          alert-comment-cc-users: '@sffc,@zbraniecki,@echeran,@gregtatum'

      # Benchmarking & dashboards job > Upload output dashboard HTML to "persist" the
      # files across jobs within the same workflow.

      - name: Switch branch to get result of benchmark pages output (merge to main only)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'unicode-org/icu4x'
        run: git checkout gh-pages

      - name: Upload updated benchmark data (merge to main only)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'unicode-org/icu4x'
        uses: actions/upload-artifact@v2
        with:
          # Use wildcard pattern to preserve dir structure of uploaded files:
          path: ./benchmarks/memory/**
          name: benchmark-memory

  # Doc-GH-Pages job

  doc_gh_pages:
    name: Copy GH pages to docs repo (merge to main only)

    runs-on: ubuntu-latest

    needs: [build, lint, bincode, benchmark, memory]

    ## Only create docs for merges/pushes to main (skip PRs).
    ## Multiple unfinished PRs should not clobber docs from approved code.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository == 'unicode-org/icu4x'

    steps:
    - uses: actions/checkout@v2

    - name: Load the default Rust toolchain via the rust-toolchain file.
      run: rustup show

    # TODO(#234) re-include cache steps, also using Rust version in cache key

    - name: Create (ensure existence of) folder suitable for copying to external repo
      run: mkdir -p copy-to-ext-repo

    - name: Create (ensure existence of) folder for benchmark data to copy
      run: mkdir -p copy-to-ext-repo/benchmarks/perf

    - name: Create (ensure existence of) folder for memory benchmark data to copy
      run: mkdir -p copy-to-ext-repo/benchmarks/memory

    # Doc-GH-Pages job > Download benchmark dashboard files from previous jobs into folder of files to copy to remote repo

    - name: Download previous content destined for GH pages
      uses: actions/download-artifact@v2
      with:
        path: ./copy-to-ext-repo/benchmarks/perf
        name: benchmark-perf

    # Doc-GH-Pages job > Download benchmark dashboard files from previous jobs into folder of files to copy to remote repo
    - name: Download previous content destined for GH pages
      uses: actions/download-artifact@v2
      with:
        path: ./copy-to-ext-repo/benchmarks/memory
        name: benchmark-memory

    # Doc-GH-Pages job > Generate `cargo doc` step

    - name: Cargo doc
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: --workspace --release --all-features --no-deps

    # Doc-GH-Pages job > Generate placeholder root index.html to redirect to `icu4x` crate

    - name: Create doc /index.html
      run: |
        mkdir -p copy-to-ext-repo
        cat > copy-to-ext-repo/index.html <<EOL
        <!doctype html>
        <html>
          <head>
            <meta charset="utf-8">
            <meta http-equiv="refresh" content="0;url=./doc/icu4x" />
            <title>ICU4X Developer Docs</title>
          </head>
          <body>
            <p><a href="./doc/icu4x">Redirect to icu4x crate doc</a></p>
          </body>
        </html>
        EOL

    # Doc-GH-Pages job > Collect API docs files in folder of files to copy to remote docs repo

    - name: Update API docs folder in cache dir
      run: rm -rf ./copy-to-ext-repo/doc; cp -v -r target/doc ./copy-to-ext-repo

    # Doc-GH-Pages job > Copy docs (+ bench dashboard HTML) to remote docs repo's GH pages branch step

    - name: Doc -> Github Pages
      uses: peaceiris/actions-gh-pages@v3.7.0
      with:
        # Setup for publishing to an external repo using `deploy_key` option:
        #
        # Step 1 - Create SSH key pair. Use your public key as a Github "Deploy Key" and your private
        # key as a Github "Secret". Where to register these keys comes next.
        # https://github.com/marketplace/actions/github-pages-action#%EF%B8%8F-create-ssh-deploy-key
        #
        # Step 2 - After creating public/private key pair, put the private key in the repo running the
        # action as a Secret and call it "ACTIONS_DEPLOY_KEY". Put the public key as a Deploy Key in the
        # target repo where the Github Pages will be copied to.
        # https://github.com/marketplace/actions/github-pages-action#%EF%B8%8F-deploy-to-external-repository
        deploy_key: ${{ secrets.ACTIONS_DEPLOY_KEY }}
        external_repository: unicode-org/icu4x-docs
        publish_branch: gh-pages
        publish_dir: copy-to-ext-repo
        commit_message: Rust API docs + benchmark dashboards -> GH Pages
