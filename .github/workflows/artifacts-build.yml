# This file is part of ICU4X. For terms of use, please see the file
# called LICENSE at the top level of the ICU4X source tree
# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

##### README #####
#
# The CI action in this file is used to build the artifacts on pushes to a repository containing
# the ICU4X service account key. All steps are skipped unless the key is present.
#
# If you are a frequent contributor, you can add the key to your fork. The key is shared with
# icu4x collaborators and can be viewed here:
#
# https://drive.google.com/file/d/17-oMqRfuHOHL9hYp64NYOh8vcJ03DQHm/view
#
# To add the key, follow these steps:
#
# 1. Go to the secrets on your fork:
#     - https://github.com/{USER}/icu4x/settings/secrets/actions
# 2. Click "New repository secret" and enter the following information:
#     - Name: ICU4X_GCP_SA_KEY
#     - Value: The contents of the file linked above
# 3. Click "Add secret"
# 4. Re-run the latest "Artifacts Build" action on your fork to make sure it works:
#     - https://github.com/{USER}/icu4x/actions/workflows/artifacts-build.yml

name: Artifacts Build

on:
  push:
    branches-ignore: ["main"]

jobs:
  credentials:
    name: "Check Credentials"
    runs-on: "ubuntu-latest"
    env:
      ICU4X_GCP_SA_KEY: "${{ secrets.ICU4X_GCP_SA_KEY }}"
    steps:
    - name: "Check for credentials"
      run: |
        if [ -z "$ICU4X_GCP_SA_KEY" ]
        then
          echo "GCP key not found. Docs previews will not be uploaded. If you are a frequent contributor, you may add the key to your fork; for instructions, see 'artifacts-build.yml'"
          exit 1;
        fi
  docs:
    name: "Docs Preview"
    needs: credentials
    runs-on: "ubuntu-latest"
    env:
      GCP_PROJECT_ID: "dev-infra-273822"
      GCP_BUCKET_ID: "icu4x-pr-artifacts"
    steps:
    - uses: actions/checkout@v2
    - name: Load the default Rust toolchain via the rust-toolchain file.
      run: rustup show
    - name: Authenticate to Google Cloud
      uses: google-github-actions/setup-gcloud@v0.2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.ICU4X_GCP_SA_KEY }}
        export_default_credentials: true
    - name: Build docs
      uses: actions-rs/cargo@v1
      with:
        command: doc
        args: --workspace --release --all-features --no-deps
    - name: Upload docs to Google Cloud Storage
      run: |
        gsutil -m cp -r target/doc gs://${{ env.GCP_BUCKET_ID }}/gha/${{ github.sha }}/docs
    - name: "⭐⭐⭐ Links to Uploaded Artifacts ⭐⭐⭐"
      run: |
        echo "::group::📖 Docs Preview"
        echo "http://${{ env.GCP_BUCKET_ID }}.storage.googleapis.com/gha/${{ github.sha }}/docs/icu/index.html"
        echo "::endgroup::"

  webpack:
    name: WASM Demo
    needs: credentials
    runs-on: "ubuntu-latest"
    env:
      GCP_PROJECT_ID: "dev-infra-273822"
      GCP_BUCKET_ID: "icu4x-pr-artifacts"
    steps:
    - uses: actions/checkout@v2

    - name: Load the default Rust toolchain via the rust-toolchain file.
      run: rustup show

    - name: Install prerequisites for wasm build
      run: |
        rustup toolchain list
        rustup toolchain install nightly-2022-04-05
        rustup component add --toolchain nightly-2022-04-05 rust-src

    - name: Authenticate to Google Cloud
      uses: google-github-actions/setup-gcloud@v0.2
      with:
        project_id: ${{ env.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.ICU4X_GCP_SA_KEY }}
        export_default_credentials: true

    - name: Get cargo-make version
      id: cargo-make-version
      run: |
        echo "::set-output name=hash::$(cargo search cargo-make | grep '^cargo-make =' | md5sum)"
      shell: bash

    - name: Attempt to load cached cargo-make
      uses: actions/cache@v2
      id: cargo-make-cache
      with:
        path: |
          ~/.cargo/bin/cargo-make
          ~/.cargo/bin/cargo-make.exe
        key: ${{ runner.os }}-make-${{ steps.cargo-make-version.outputs.hash }}

    - name: Install cargo-make
      if: steps.cargo-make-cache.outputs.cache-hit != 'true'
      uses: actions-rs/install@v0.1.2
      with:
        crate: cargo-make
        version: latest

    - name: Run Webpack
      uses: actions-rs/cargo@v1
      with:
        command: make
        args: diplomat-build-webpack-demo

    - name: Put index.html in dist for temp URL
      run: |
        cp ffi/diplomat/wasm/wasm-demo/index.html ffi/diplomat/wasm/wasm-demo/dist/index.html
        printf "const gcs=document.createElement('script');gcs.setAttribute('src','./bundle.js');document.body.appendChild(gcs);" > ffi/diplomat/wasm/wasm-demo/dist/index.js
        printf "url: https://storage.googleapis.com/icu4x-pr-artifacts/gha/%s/wasm-demo/index.html" ${{ github.sha }}

    - name: Upload Webpack bundle to Google Cloud Storage
      run: |
        # gsutil cors set ffi/diplomat/wasm/cors-config-file.json gs://${{ env.GCP_BUCKET_ID }}
        gsutil -m cp -r ffi/diplomat/wasm/wasm-demo/dist/ gs://${{ env.GCP_BUCKET_ID }}/gha/${{ github.sha }}/wasm-demo

    - name: "⭐⭐⭐ Links to Uploaded Artifacts ⭐⭐⭐"
      run: |
        echo "::group::Wasm Demo Preview"
        echo "https://storage.googleapis.com/icu4x-pr-artifacts/gha/${{ github.sha }}/wasm-demo/index.html"
        echo "::endgroup::"

    #   TODO(qnnokabayashi): This was my attempt to get it to copy the HTML to
    #     the `gh-pages` branch. As of 8/1/2022, idea is that
    #     `ffi/diplomat/wasm/wasm-demo/index.html` contains the structure for
    #     the demo. It needs to call into the Webpacked JavaScript. When testing
    #     locally, this content is in `ffi/diplomat/wasm/wasm-demo/dist/`, but
    #     when deployed, it lives in Google Cloud Storage. But we don't want to
    #     be editing this arbitrarily complex HTML file in CI. The solution was
    #     to have it call a very simple `index.js` file which modifies the HTML
    #     and tells it where to get the script from. Locally, this lives next to
    #     `index.html` at `ffi/diplomat/wasm/wasm-demo/index.js`, and contains
    #     the following:
    #       ```js
    #       const gcs = document.createElement('script');
    #       gcs.setAttribute('src', './dist/bundle.js');
    #       document.body.appendChild(gcs);
    #       ```
    #     The plan was to rewrite this file in CI to point into GCS instead of
    #     `./dist/bundle.js`, and then commit and push the original `index.html`
    #     and this new `index.js` to the `gh-pages` branch. That way, when a
    #     browser visited the Github page, `index.html` would read `index.js`,
    #     which would then point the browser to get `bundle.js` from GCS.
    #     
    #     This was my attempt to make that work, but I couldn't quite figure out
    #     how to push to `gh-pages`.
    #     
    # - name: Store index.html
    #   run: |
    #     cp ffi/diplomat/wasm/wasm-demo/index.html /tmp/wasm-demo-index.html
    # - name: Checkout gh-pages
    #   uses: actions/checkout@v2
    #   with:
    #     ref: gh-pages
    # - name: Retrieve index.html
    #   run: |
    #     rm -rf wasm-demo-app
    #     mkdir wasm-demo-app
    #     printf "const gcs=document.createElement('script');gcs.setAttribute('src','https://storage.googleapis.com/icu4x-pr-artifacts/gha/%s/wasm-demo/bundle.js');document.body.appendChild(gcs);" ${{ github.sha }} > wasm-demo-app/index.js
    #     cp /tmp/wasm-demo-index.html wasm-demo-app/index.html
    #     git diff-index --quiet HEAD || git commit -m "add wasm demo for ${{ github.sha }}"
    #     git push
