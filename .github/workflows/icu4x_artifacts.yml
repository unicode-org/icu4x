# This file is part of ICU4X. For terms of use, please see the file
# called LICENSE at the top level of the ICU4X source tree
# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

name: Generate artifacts for package:icu4x

permissions:
  contents: write

on:
  pull_request:
    branches: [ main ]
    paths:
      - ffi/dart/lib/src/hook_helpers/hashes.dart
      - .github/workflows/icu4x_artifacts.yml
  push:
    tags:
      - 'icu4x-artifacts*'
  schedule:
    - cron: '0 0 * * 0' # weekly
  workflow_dispatch:

jobs:
  dart-libs:
    name: Build Dart binaries
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        compiletype: [ dynamic, static ]
        include_data: [true, false]
        exclude:
          - compiletype: dynamic
            include_data: false
    runs-on: ${{ matrix.os }}
    env:
      DATA: ${{ matrix.include_data == true && ',compiled_data' || '' }}
      FILENAME_SUFFIX: ${{ matrix.compiletype == 'static' && matrix.include_data == true && '_data' || '' }}

    steps:
    - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
      with:
        submodules: true

    - name: Install Rust toolchains
      run: |
        rustup toolchain install stable
        rustup toolchain install nightly
    
    - name: Show the selected Rust toolchain
      run: rustup show
    
    - uses: dart-lang/setup-dart@e51d8e571e22473a2ddebf0ef8a2123f0ab2c02c
      with:
        sdk: main

    - name: Setup additional linkers
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf gcc-riscv64-linux-gnu gcc-i686-linux-gnu
        mkdir -p .cargo
        echo "[target]" >> .cargo/config.toml
        echo "aarch64-linux-android.linker=\"$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android30-clang\"" >> .cargo/config.toml
        echo "armv7-linux-androideabi.linker=\"$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi30-clang\"" >> .cargo/config.toml
        echo "i686-linux-android.linker=\"$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/i686-linux-android30-clang\"" >> .cargo/config.toml
        echo "x86_64-linux-android.linker=\"$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/x86_64-linux-android30-clang\"" >> .cargo/config.toml
        echo "riscv64-linux-android.linker=\"$ANDROID_NDK_LATEST_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/riscv64-linux-android35-clang\"" >> .cargo/config.toml
        echo "aarch64-unknown-linux-gnu.linker=\"aarch64-linux-gnu-gcc\"" >> .cargo/config.toml
        echo "armv7-unknown-linux-gnueabihf.linker=\"arm-linux-gnueabihf-gcc\"" >> .cargo/config.toml
        echo "riscv64gc-unknown-linux-gnu.linker=\"riscv64-linux-gnu-gcc\"" >> .cargo/config.toml
        
    - name: Build Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
        (cd ffi/dart && dart pub get)
        
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/android_arm_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os android --architecture arm --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/android_arm64_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os android --architecture arm64 --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/android_ia32_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os android --architecture ia32 --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/android_x64_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os android --architecture x64 --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/linux_arm_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os linux --architecture arm --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/linux_arm64_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os linux --architecture arm64 --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/linux_riscv64_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os linux --architecture riscv64 --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/linux_x64_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os linux --architecture x64 --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}

    - name: Build Linux data
      if: matrix.os == 'ubuntu-latest' && matrix.compiletype == 'static' && matrix.include_data == false
      run: |
        cargo run -p icu4x-datagen -- --locales modern --markers all --format blob --out bin/full.postcard

        cd provider/icu4x-datagen # avoid global feature resolution
        rustup target add aarch64-unknown-linux-gnu
        cargo build --release --bin icu4x-datagen --no-default-features --features blob_exporter,blob_input,rayon --target aarch64-unknown-linux-gnu
        rustup target add riscv64gc-unknown-linux-gnu
        cargo build --release --bin icu4x-datagen --no-default-features --features blob_exporter,blob_input,rayon --target riscv64gc-unknown-linux-gnu
        rustup target add x86_64-unknown-linux-gnu
        cargo build --release --bin icu4x-datagen --no-default-features --features blob_exporter,blob_input,rayon --target x86_64-unknown-linux-gnu
        cd ../..

        cp target/aarch64-unknown-linux-gnu/release/icu4x-datagen bin/linux_arm64-datagen
        cp target/riscv64gc-unknown-linux-gnu/release/icu4x-datagen bin/linux_riscv64-datagen
        cp target/x86_64-unknown-linux-gnu/release/icu4x-datagen bin/linux_x64-datagen
  
    - name: Build Mac
      if: matrix.os == 'macos-latest'
      run: |
        rustup component add rust-src --toolchain nightly-aarch64-apple-darwin
        
        (cd ffi/dart && dart pub get)

        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/ios_arm64_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os ios --architecture arm64 --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/ios_x64_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os ios --architecture x64 --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/macos_arm64_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os macos --architecture arm64 --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/macos_x64_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os macos --architecture x64 --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}

    - name: Build Mac data
      if: matrix.os == 'macos-latest' && matrix.compiletype == 'static' && matrix.include_data == false
      run: |
        cd provider/icu4x-datagen # avoid global feature resolution
        rustup target add aarch64-apple-darwin
        cargo build --release --bin icu4x-datagen --no-default-features --features blob_exporter,blob_input,rayon --target aarch64-apple-darwin
        rustup target add x86_64-apple-darwin
        cargo build --release --bin icu4x-datagen --no-default-features --features blob_exporter,blob_input,rayon --target x86_64-apple-darwin
        cd ../..

        cp target/aarch64-apple-darwin/release/icu4x-datagen bin/macos_arm64-datagen
        cp target/x86_64-apple-darwin/release/icu4x-datagen bin/macos_x64-datagen
  
    - name: Build Windows
      if: matrix.os == 'windows-latest'
      run: |
        rustup component add rust-src --toolchain nightly-x86_64-pc-windows-msvc
        
        pushd ffi/dart
        dart pub get
        popd
        
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/windows_arm64_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os windows --architecture arm64 --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/windows_ia32_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os windows --architecture ia32 --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}
        dart ffi/dart/lib/src/hook_helpers/build_libs.dart --working_directory . --file bin/windows_x64_${{ matrix.compiletype }}${{ env.FILENAME_SUFFIX }} --os windows --architecture x64 --compile_type ${{ matrix.compiletype }} --cargo_features collator,datetime,list,decimal,plurals,casemap,experimental,default${{ env.DATA }}

    - name: Build Windows data
      if: matrix.os == 'windows-latest' && matrix.compiletype == 'static' && matrix.include_data == false
      run: |
        cd provider/icu4x-datagen # avoid global feature resolution
        rustup target add aarch64-pc-windows-msvc
        cargo build --release --bin icu4x-datagen --no-default-features --features blob_exporter,blob_input,rayon --target aarch64-pc-windows-msvc
        rustup target add x86_64-pc-windows-msvc
        cargo build --release --bin icu4x-datagen --no-default-features --features blob_exporter,blob_input,rayon --target x86_64-pc-windows-msvc
        cd ../..

        cp target/aarch64-pc-windows-msvc/release/icu4x-datagen.exe bin/windows_arm64-datagen.exe
        cp target/x86_64-pc-windows-msvc/release/icu4x-datagen.exe bin/windows_x64-datagen.exe
    
    - name: Upload artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
      with:
        name: dart-${{matrix.os}}-${{ matrix.compiletype }}-${{ matrix.compiletype == 'static' && matrix.include_data == true && 'with_data' || '' }}-libs
        path: bin

  check_hashes:
    needs: dart-libs
    runs-on: ubuntu-latest
    # TODO: Uncomment this after releasing artifacts
    # if: github.event_name != 'push'
    if: false

    env:
      ICU4X_BUILD_MODE: local
      
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          submodules: true

      - name: Download binaries
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093
        with:
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R

      - uses: dart-lang/setup-dart@e51d8e571e22473a2ddebf0ef8a2123f0ab2c02c
        with:
          sdk: main

      - name: Check hashes of released artifacts
        run: |
          cd ffi/dart
          dart pub get
          dart tool/regenerate_hashes.dart
          git diff --exit-code

  release:
    needs: dart-libs
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Download binaries
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093

      - name: Display structure of downloaded files
        run: ls -R

      - name: Release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8
        with:
          files: '**'
          fail_on_unmatched_files: true
          body: "Build artifacts for `package:icu4x`, based on ICU4X at ref ${{ github.ref_name }}"
