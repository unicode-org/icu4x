// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

#![allow(
    non_camel_case_types,
    unused,
    non_snake_case,
    clippy::needless_return,
    clippy::redundant_closure_call,
    clippy::redundant_closure,
    clippy::useless_conversion,
    clippy::unit_arg,
    clippy::unused_unit,
    clippy::double_parens,
    clippy::let_and_return,
    clippy::too_many_arguments,
    clippy::match_single_binding,
    clippy::clone_on_copy,
    clippy::let_unit_value,
    clippy::deref_addrof,
    clippy::explicit_auto_deref,
    clippy::borrow_deref_ref,
    clippy::needless_borrow
)]

// Section: imports

use flutter_rust_bridge::for_generated::byteorder::{NativeEndian, ReadBytesExt, WriteBytesExt};
use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
use flutter_rust_bridge::{Handler, IntoIntoDart};

// Section: boilerplate

flutter_rust_bridge::frb_generated_boilerplate!(
    default_stream_sink_codec = SseCodec,
    default_rust_opaque = RustOpaqueMoi,
    default_rust_auto_opaque = RustAutoOpaqueMoi,
);
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_VERSION: &str = "2.11.1";
pub(crate) const FLUTTER_RUST_BRIDGE_CODEGEN_CONTENT_HASH: i32 = -1046107922;

// Section: executor

flutter_rust_bridge::frb_generated_default_handler!();

// Section: wire_funcs

fn wire__crate__api__simple__get_character_case_mapping_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_character_case_mapping",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_character = <String>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok = Result::<_, ()>::Ok(
                    crate::api::simple::get_character_case_mapping(api_character),
                )?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__simple__get_unicode_char_properties_impl(
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_sync::<flutter_rust_bridge::for_generated::SseCodec, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "get_unicode_char_properties",
            port: None,
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Sync,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            let api_search = <Option<String>>::sse_decode(&mut deserializer);
            let api_offset = <usize>::sse_decode(&mut deserializer);
            let api_limit = <usize>::sse_decode(&mut deserializer);
            deserializer.end();
            transform_result_sse::<_, ()>((move || {
                let output_ok =
                    Result::<_, ()>::Ok(crate::api::simple::get_unicode_char_properties(
                        api_search, api_offset, api_limit,
                    ))?;
                Ok(output_ok)
            })())
        },
    )
}
fn wire__crate__api__simple__init_app_impl(
    port_: flutter_rust_bridge::for_generated::MessagePort,
    ptr_: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len_: i32,
    data_len_: i32,
) {
    FLUTTER_RUST_BRIDGE_HANDLER.wrap_normal::<flutter_rust_bridge::for_generated::SseCodec, _, _>(
        flutter_rust_bridge::for_generated::TaskInfo {
            debug_name: "init_app",
            port: Some(port_),
            mode: flutter_rust_bridge::for_generated::FfiCallMode::Normal,
        },
        move || {
            let message = unsafe {
                flutter_rust_bridge::for_generated::Dart2RustMessageSse::from_wire(
                    ptr_,
                    rust_vec_len_,
                    data_len_,
                )
            };
            let mut deserializer =
                flutter_rust_bridge::for_generated::SseDeserializer::new(message);
            deserializer.end();
            move |context| {
                transform_result_sse::<_, ()>((move || {
                    let output_ok = Result::<_, ()>::Ok({
                        crate::api::simple::init_app();
                    })?;
                    Ok(output_ok)
                })())
            }
        },
    )
}

// Section: dart2rust

impl SseDecode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut inner = <Vec<u8>>::sse_decode(deserializer);
        return String::from_utf8(inner).unwrap();
    }
}

impl SseDecode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap() != 0
    }
}

impl SseDecode for crate::api::simple::CaseMappingResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_original = <String>::sse_decode(deserializer);
        let mut var_mapped = <String>::sse_decode(deserializer);
        let mut var_hasMapping = <bool>::sse_decode(deserializer);
        return crate::api::simple::CaseMappingResult {
            original: var_original,
            mapped: var_mapped,
            has_mapping: var_hasMapping,
        };
    }
}

impl SseDecode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<u8>::sse_decode(deserializer));
        }
        return ans_;
    }
}

impl SseDecode for Vec<crate::api::simple::UnicodeCharProperties> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut len_ = <i32>::sse_decode(deserializer);
        let mut ans_ = vec![];
        for idx_ in 0..len_ {
            ans_.push(<crate::api::simple::UnicodeCharProperties>::sse_decode(
                deserializer,
            ));
        }
        return ans_;
    }
}

impl SseDecode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<String>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        if (<bool>::sse_decode(deserializer)) {
            return Some(<bool>::sse_decode(deserializer));
        } else {
            return None;
        }
    }
}

impl SseDecode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u32::<NativeEndian>().unwrap()
    }
}

impl SseDecode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u8().unwrap()
    }
}

impl SseDecode for crate::api::simple::UnicodeCharProperties {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        let mut var_character = <String>::sse_decode(deserializer);
        let mut var_codePoint = <u32>::sse_decode(deserializer);
        let mut var_name = <Option<String>>::sse_decode(deserializer);
        let mut var_unicodeValue = <Option<String>>::sse_decode(deserializer);
        let mut var_generalCategory = <Option<String>>::sse_decode(deserializer);
        let mut var_block = <Option<String>>::sse_decode(deserializer);
        let mut var_plane = <Option<String>>::sse_decode(deserializer);
        let mut var_script = <Option<String>>::sse_decode(deserializer);
        let mut var_bidiClass = <Option<String>>::sse_decode(deserializer);
        let mut var_eastAsianWidth = <Option<String>>::sse_decode(deserializer);
        let mut var_lineBreak = <Option<String>>::sse_decode(deserializer);
        let mut var_wordBreak = <Option<String>>::sse_decode(deserializer);
        let mut var_sentenceBreak = <Option<String>>::sse_decode(deserializer);
        let mut var_graphemeClusterBreak = <Option<String>>::sse_decode(deserializer);
        let mut var_hangulSyllableType = <Option<String>>::sse_decode(deserializer);
        let mut var_joiningType = <Option<String>>::sse_decode(deserializer);
        let mut var_isAlphabetic = <Option<bool>>::sse_decode(deserializer);
        let mut var_isUppercase = <Option<bool>>::sse_decode(deserializer);
        let mut var_isLowercase = <Option<bool>>::sse_decode(deserializer);
        let mut var_isWhiteSpace = <Option<bool>>::sse_decode(deserializer);
        let mut var_isMath = <Option<bool>>::sse_decode(deserializer);
        let mut var_isDash = <Option<bool>>::sse_decode(deserializer);
        let mut var_isDiacritic = <Option<bool>>::sse_decode(deserializer);
        let mut var_isEmoji = <Option<bool>>::sse_decode(deserializer);
        let mut var_isEmojiPresentation = <Option<bool>>::sse_decode(deserializer);
        let mut var_isEmojiModifier = <Option<bool>>::sse_decode(deserializer);
        let mut var_isEmojiModifierBase = <Option<bool>>::sse_decode(deserializer);
        return crate::api::simple::UnicodeCharProperties {
            character: var_character,
            code_point: var_codePoint,
            name: var_name,
            unicode_value: var_unicodeValue,
            general_category: var_generalCategory,
            block: var_block,
            plane: var_plane,
            script: var_script,
            bidi_class: var_bidiClass,
            east_asian_width: var_eastAsianWidth,
            line_break: var_lineBreak,
            word_break: var_wordBreak,
            sentence_break: var_sentenceBreak,
            grapheme_cluster_break: var_graphemeClusterBreak,
            hangul_syllable_type: var_hangulSyllableType,
            joining_type: var_joiningType,
            is_alphabetic: var_isAlphabetic,
            is_uppercase: var_isUppercase,
            is_lowercase: var_isLowercase,
            is_white_space: var_isWhiteSpace,
            is_math: var_isMath,
            is_dash: var_isDash,
            is_diacritic: var_isDiacritic,
            is_emoji: var_isEmoji,
            is_emoji_presentation: var_isEmojiPresentation,
            is_emoji_modifier: var_isEmojiModifier,
            is_emoji_modifier_base: var_isEmojiModifierBase,
        };
    }
}

impl SseDecode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {}
}

impl SseDecode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_u64::<NativeEndian>().unwrap() as _
    }
}

impl SseDecode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_decode(deserializer: &mut flutter_rust_bridge::for_generated::SseDeserializer) -> Self {
        deserializer.cursor.read_i32::<NativeEndian>().unwrap()
    }
}

fn pde_ffi_dispatcher_primary_impl(
    func_id: i32,
    port: flutter_rust_bridge::for_generated::MessagePort,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        3 => wire__crate__api__simple__init_app_impl(port, ptr, rust_vec_len, data_len),
        _ => unreachable!(),
    }
}

fn pde_ffi_dispatcher_sync_impl(
    func_id: i32,
    ptr: flutter_rust_bridge::for_generated::PlatformGeneralizedUint8ListPtr,
    rust_vec_len: i32,
    data_len: i32,
) -> flutter_rust_bridge::for_generated::WireSyncRust2DartSse {
    // Codec=Pde (Serialization + dispatch), see doc to use other codecs
    match func_id {
        1 => wire__crate__api__simple__get_character_case_mapping_impl(ptr, rust_vec_len, data_len),
        2 => {
            wire__crate__api__simple__get_unicode_char_properties_impl(ptr, rust_vec_len, data_len)
        }
        _ => unreachable!(),
    }
}

// Section: rust2dart

// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::simple::CaseMappingResult {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.original.into_into_dart().into_dart(),
            self.mapped.into_into_dart().into_dart(),
            self.has_mapping.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::simple::CaseMappingResult
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::simple::CaseMappingResult>
    for crate::api::simple::CaseMappingResult
{
    fn into_into_dart(self) -> crate::api::simple::CaseMappingResult {
        self
    }
}
// Codec=Dco (DartCObject based), see doc to use other codecs
impl flutter_rust_bridge::IntoDart for crate::api::simple::UnicodeCharProperties {
    fn into_dart(self) -> flutter_rust_bridge::for_generated::DartAbi {
        [
            self.character.into_into_dart().into_dart(),
            self.code_point.into_into_dart().into_dart(),
            self.name.into_into_dart().into_dart(),
            self.unicode_value.into_into_dart().into_dart(),
            self.general_category.into_into_dart().into_dart(),
            self.block.into_into_dart().into_dart(),
            self.plane.into_into_dart().into_dart(),
            self.script.into_into_dart().into_dart(),
            self.bidi_class.into_into_dart().into_dart(),
            self.east_asian_width.into_into_dart().into_dart(),
            self.line_break.into_into_dart().into_dart(),
            self.word_break.into_into_dart().into_dart(),
            self.sentence_break.into_into_dart().into_dart(),
            self.grapheme_cluster_break.into_into_dart().into_dart(),
            self.hangul_syllable_type.into_into_dart().into_dart(),
            self.joining_type.into_into_dart().into_dart(),
            self.is_alphabetic.into_into_dart().into_dart(),
            self.is_uppercase.into_into_dart().into_dart(),
            self.is_lowercase.into_into_dart().into_dart(),
            self.is_white_space.into_into_dart().into_dart(),
            self.is_math.into_into_dart().into_dart(),
            self.is_dash.into_into_dart().into_dart(),
            self.is_diacritic.into_into_dart().into_dart(),
            self.is_emoji.into_into_dart().into_dart(),
            self.is_emoji_presentation.into_into_dart().into_dart(),
            self.is_emoji_modifier.into_into_dart().into_dart(),
            self.is_emoji_modifier_base.into_into_dart().into_dart(),
        ]
        .into_dart()
    }
}
impl flutter_rust_bridge::for_generated::IntoDartExceptPrimitive
    for crate::api::simple::UnicodeCharProperties
{
}
impl flutter_rust_bridge::IntoIntoDart<crate::api::simple::UnicodeCharProperties>
    for crate::api::simple::UnicodeCharProperties
{
    fn into_into_dart(self) -> crate::api::simple::UnicodeCharProperties {
        self
    }
}

impl SseEncode for String {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <Vec<u8>>::sse_encode(self.into_bytes(), serializer);
    }
}

impl SseEncode for bool {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self as _).unwrap();
    }
}

impl SseEncode for crate::api::simple::CaseMappingResult {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.original, serializer);
        <String>::sse_encode(self.mapped, serializer);
        <bool>::sse_encode(self.has_mapping, serializer);
    }
}

impl SseEncode for Vec<u8> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <u8>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Vec<crate::api::simple::UnicodeCharProperties> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <i32>::sse_encode(self.len() as _, serializer);
        for item in self {
            <crate::api::simple::UnicodeCharProperties>::sse_encode(item, serializer);
        }
    }
}

impl SseEncode for Option<String> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <String>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for Option<bool> {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <bool>::sse_encode(self.is_some(), serializer);
        if let Some(value) = self {
            <bool>::sse_encode(value, serializer);
        }
    }
}

impl SseEncode for u32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u32::<NativeEndian>(self).unwrap();
    }
}

impl SseEncode for u8 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_u8(self).unwrap();
    }
}

impl SseEncode for crate::api::simple::UnicodeCharProperties {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        <String>::sse_encode(self.character, serializer);
        <u32>::sse_encode(self.code_point, serializer);
        <Option<String>>::sse_encode(self.name, serializer);
        <Option<String>>::sse_encode(self.unicode_value, serializer);
        <Option<String>>::sse_encode(self.general_category, serializer);
        <Option<String>>::sse_encode(self.block, serializer);
        <Option<String>>::sse_encode(self.plane, serializer);
        <Option<String>>::sse_encode(self.script, serializer);
        <Option<String>>::sse_encode(self.bidi_class, serializer);
        <Option<String>>::sse_encode(self.east_asian_width, serializer);
        <Option<String>>::sse_encode(self.line_break, serializer);
        <Option<String>>::sse_encode(self.word_break, serializer);
        <Option<String>>::sse_encode(self.sentence_break, serializer);
        <Option<String>>::sse_encode(self.grapheme_cluster_break, serializer);
        <Option<String>>::sse_encode(self.hangul_syllable_type, serializer);
        <Option<String>>::sse_encode(self.joining_type, serializer);
        <Option<bool>>::sse_encode(self.is_alphabetic, serializer);
        <Option<bool>>::sse_encode(self.is_uppercase, serializer);
        <Option<bool>>::sse_encode(self.is_lowercase, serializer);
        <Option<bool>>::sse_encode(self.is_white_space, serializer);
        <Option<bool>>::sse_encode(self.is_math, serializer);
        <Option<bool>>::sse_encode(self.is_dash, serializer);
        <Option<bool>>::sse_encode(self.is_diacritic, serializer);
        <Option<bool>>::sse_encode(self.is_emoji, serializer);
        <Option<bool>>::sse_encode(self.is_emoji_presentation, serializer);
        <Option<bool>>::sse_encode(self.is_emoji_modifier, serializer);
        <Option<bool>>::sse_encode(self.is_emoji_modifier_base, serializer);
    }
}

impl SseEncode for () {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {}
}

impl SseEncode for usize {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer
            .cursor
            .write_u64::<NativeEndian>(self as _)
            .unwrap();
    }
}

impl SseEncode for i32 {
    // Codec=Sse (Serialization based), see doc to use other codecs
    fn sse_encode(self, serializer: &mut flutter_rust_bridge::for_generated::SseSerializer) {
        serializer.cursor.write_i32::<NativeEndian>(self).unwrap();
    }
}

#[cfg(not(target_family = "wasm"))]
mod io {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_io!();
}
#[cfg(not(target_family = "wasm"))]
pub use io::*;

/// cbindgen:ignore
#[cfg(target_family = "wasm")]
mod web {
    // This file is automatically generated, so please do not edit it.
    // @generated by `flutter_rust_bridge`@ 2.11.1.

    // Section: imports

    use super::*;
    use flutter_rust_bridge::for_generated::byteorder::{
        NativeEndian, ReadBytesExt, WriteBytesExt,
    };
    use flutter_rust_bridge::for_generated::wasm_bindgen;
    use flutter_rust_bridge::for_generated::wasm_bindgen::prelude::*;
    use flutter_rust_bridge::for_generated::{transform_result_dco, Lifetimeable, Lockable};
    use flutter_rust_bridge::{Handler, IntoIntoDart};

    // Section: boilerplate

    flutter_rust_bridge::frb_generated_boilerplate_web!();
}
#[cfg(target_family = "wasm")]
pub use web::*;
