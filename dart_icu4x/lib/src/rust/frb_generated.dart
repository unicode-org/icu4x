// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/simple.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'frb_generated.io.dart'
    if (dart.library.js_interop) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

/// Main entrypoint of the Rust API
class RustLib extends BaseEntrypoint<RustLibApi, RustLibApiImpl, RustLibWire> {
  @internal
  static final instance = RustLib._();

  RustLib._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    RustLibApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
    bool forceSameCodegenVersion = true,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
      forceSameCodegenVersion: forceSameCodegenVersion,
    );
  }

  /// Initialize flutter_rust_bridge in mock mode.
  /// No libraries for FFI are loaded.
  static void initMock({required RustLibApi api}) {
    instance.initMockImpl(api: api);
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<RustLibApiImpl, RustLibWire> get apiImplConstructor =>
      RustLibApiImpl.new;

  @override
  WireConstructor<RustLibWire> get wireConstructor =>
      RustLibWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {
    await api.crateApiSimpleInitApp();
  }

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.11.1';

  @override
  int get rustContentHash => -1046107922;

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
        stem: 'dart_icu4x',
        ioDirectory: 'rust/target/release/',
        webPrefix: 'pkg/',
      );
}

abstract class RustLibApi extends BaseApi {
  CaseMappingResult crateApiSimpleGetCharacterCaseMapping({
    required String character,
  });

  List<UnicodeCharProperties> crateApiSimpleGetUnicodeCharProperties({
    String? search,
    required BigInt offset,
    required BigInt limit,
  });

  Future<void> crateApiSimpleInitApp();
}

class RustLibApiImpl extends RustLibApiImplPlatform implements RustLibApi {
  RustLibApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  CaseMappingResult crateApiSimpleGetCharacterCaseMapping({
    required String character,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_String(character, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 1)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_case_mapping_result,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGetCharacterCaseMappingConstMeta,
        argValues: [character],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGetCharacterCaseMappingConstMeta =>
      const TaskConstMeta(
        debugName: "get_character_case_mapping",
        argNames: ["character"],
      );

  @override
  List<UnicodeCharProperties> crateApiSimpleGetUnicodeCharProperties({
    String? search,
    required BigInt offset,
    required BigInt limit,
  }) {
    return handler.executeSync(
      SyncTask(
        callFfi: () {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          sse_encode_opt_String(search, serializer);
          sse_encode_usize(offset, serializer);
          sse_encode_usize(limit, serializer);
          return pdeCallFfi(generalizedFrbRustBinding, serializer, funcId: 2)!;
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_list_unicode_char_properties,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleGetUnicodeCharPropertiesConstMeta,
        argValues: [search, offset, limit],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleGetUnicodeCharPropertiesConstMeta =>
      const TaskConstMeta(
        debugName: "get_unicode_char_properties",
        argNames: ["search", "offset", "limit"],
      );

  @override
  Future<void> crateApiSimpleInitApp() {
    return handler.executeNormal(
      NormalTask(
        callFfi: (port_) {
          final serializer = SseSerializer(generalizedFrbRustBinding);
          pdeCallFfi(
            generalizedFrbRustBinding,
            serializer,
            funcId: 3,
            port: port_,
          );
        },
        codec: SseCodec(
          decodeSuccessData: sse_decode_unit,
          decodeErrorData: null,
        ),
        constMeta: kCrateApiSimpleInitAppConstMeta,
        argValues: [],
        apiImpl: this,
      ),
    );
  }

  TaskConstMeta get kCrateApiSimpleInitAppConstMeta =>
      const TaskConstMeta(debugName: "init_app", argNames: []);

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  bool dco_decode_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  CaseMappingResult dco_decode_case_mapping_result(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 3)
      throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return CaseMappingResult(
      original: dco_decode_String(arr[0]),
      mapped: dco_decode_String(arr[1]),
      hasMapping: dco_decode_bool(arr[2]),
    );
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<UnicodeCharProperties> dco_decode_list_unicode_char_properties(
    dynamic raw,
  ) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>)
        .map(dco_decode_unicode_char_properties)
        .toList();
  }

  @protected
  String? dco_decode_opt_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_String(raw);
  }

  @protected
  bool? dco_decode_opt_box_autoadd_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw == null ? null : dco_decode_box_autoadd_bool(raw);
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  UnicodeCharProperties dco_decode_unicode_char_properties(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 27)
      throw Exception('unexpected arr length: expect 27 but see ${arr.length}');
    return UnicodeCharProperties(
      character: dco_decode_String(arr[0]),
      codePoint: dco_decode_u_32(arr[1]),
      name: dco_decode_opt_String(arr[2]),
      unicodeValue: dco_decode_opt_String(arr[3]),
      generalCategory: dco_decode_opt_String(arr[4]),
      block: dco_decode_opt_String(arr[5]),
      plane: dco_decode_opt_String(arr[6]),
      script: dco_decode_opt_String(arr[7]),
      bidiClass: dco_decode_opt_String(arr[8]),
      eastAsianWidth: dco_decode_opt_String(arr[9]),
      lineBreak: dco_decode_opt_String(arr[10]),
      wordBreak: dco_decode_opt_String(arr[11]),
      sentenceBreak: dco_decode_opt_String(arr[12]),
      graphemeClusterBreak: dco_decode_opt_String(arr[13]),
      hangulSyllableType: dco_decode_opt_String(arr[14]),
      joiningType: dco_decode_opt_String(arr[15]),
      isAlphabetic: dco_decode_opt_box_autoadd_bool(arr[16]),
      isUppercase: dco_decode_opt_box_autoadd_bool(arr[17]),
      isLowercase: dco_decode_opt_box_autoadd_bool(arr[18]),
      isWhiteSpace: dco_decode_opt_box_autoadd_bool(arr[19]),
      isMath: dco_decode_opt_box_autoadd_bool(arr[20]),
      isDash: dco_decode_opt_box_autoadd_bool(arr[21]),
      isDiacritic: dco_decode_opt_box_autoadd_bool(arr[22]),
      isEmoji: dco_decode_opt_box_autoadd_bool(arr[23]),
      isEmojiPresentation: dco_decode_opt_box_autoadd_bool(arr[24]),
      isEmojiModifier: dco_decode_opt_box_autoadd_bool(arr[25]),
      isEmojiModifierBase: dco_decode_opt_box_autoadd_bool(arr[26]),
    );
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  BigInt dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeU64(raw);
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  bool sse_decode_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bool(deserializer));
  }

  @protected
  CaseMappingResult sse_decode_case_mapping_result(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_original = sse_decode_String(deserializer);
    var var_mapped = sse_decode_String(deserializer);
    var var_hasMapping = sse_decode_bool(deserializer);
    return CaseMappingResult(
      original: var_original,
      mapped: var_mapped,
      hasMapping: var_hasMapping,
    );
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<UnicodeCharProperties> sse_decode_list_unicode_char_properties(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <UnicodeCharProperties>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_unicode_char_properties(deserializer));
    }
    return ans_;
  }

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_String(deserializer));
    } else {
      return null;
    }
  }

  @protected
  bool? sse_decode_opt_box_autoadd_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    if (sse_decode_bool(deserializer)) {
      return (sse_decode_box_autoadd_bool(deserializer));
    } else {
      return null;
    }
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  UnicodeCharProperties sse_decode_unicode_char_properties(
    SseDeserializer deserializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_character = sse_decode_String(deserializer);
    var var_codePoint = sse_decode_u_32(deserializer);
    var var_name = sse_decode_opt_String(deserializer);
    var var_unicodeValue = sse_decode_opt_String(deserializer);
    var var_generalCategory = sse_decode_opt_String(deserializer);
    var var_block = sse_decode_opt_String(deserializer);
    var var_plane = sse_decode_opt_String(deserializer);
    var var_script = sse_decode_opt_String(deserializer);
    var var_bidiClass = sse_decode_opt_String(deserializer);
    var var_eastAsianWidth = sse_decode_opt_String(deserializer);
    var var_lineBreak = sse_decode_opt_String(deserializer);
    var var_wordBreak = sse_decode_opt_String(deserializer);
    var var_sentenceBreak = sse_decode_opt_String(deserializer);
    var var_graphemeClusterBreak = sse_decode_opt_String(deserializer);
    var var_hangulSyllableType = sse_decode_opt_String(deserializer);
    var var_joiningType = sse_decode_opt_String(deserializer);
    var var_isAlphabetic = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_isUppercase = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_isLowercase = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_isWhiteSpace = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_isMath = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_isDash = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_isDiacritic = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_isEmoji = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_isEmojiPresentation = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_isEmojiModifier = sse_decode_opt_box_autoadd_bool(deserializer);
    var var_isEmojiModifierBase = sse_decode_opt_box_autoadd_bool(deserializer);
    return UnicodeCharProperties(
      character: var_character,
      codePoint: var_codePoint,
      name: var_name,
      unicodeValue: var_unicodeValue,
      generalCategory: var_generalCategory,
      block: var_block,
      plane: var_plane,
      script: var_script,
      bidiClass: var_bidiClass,
      eastAsianWidth: var_eastAsianWidth,
      lineBreak: var_lineBreak,
      wordBreak: var_wordBreak,
      sentenceBreak: var_sentenceBreak,
      graphemeClusterBreak: var_graphemeClusterBreak,
      hangulSyllableType: var_hangulSyllableType,
      joiningType: var_joiningType,
      isAlphabetic: var_isAlphabetic,
      isUppercase: var_isUppercase,
      isLowercase: var_isLowercase,
      isWhiteSpace: var_isWhiteSpace,
      isMath: var_isMath,
      isDash: var_isDash,
      isDiacritic: var_isDiacritic,
      isEmoji: var_isEmoji,
      isEmojiPresentation: var_isEmojiPresentation,
      isEmojiModifier: var_isEmojiModifier,
      isEmojiModifierBase: var_isEmojiModifierBase,
    );
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  BigInt sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getBigUint64();
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bool(self, serializer);
  }

  @protected
  void sse_encode_case_mapping_result(
    CaseMappingResult self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.original, serializer);
    sse_encode_String(self.mapped, serializer);
    sse_encode_bool(self.hasMapping, serializer);
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
    Uint8List self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_unicode_char_properties(
    List<UnicodeCharProperties> self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_unicode_char_properties(item, serializer);
    }
  }

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_String(self, serializer);
    }
  }

  @protected
  void sse_encode_opt_box_autoadd_bool(bool? self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    sse_encode_bool(self != null, serializer);
    if (self != null) {
      sse_encode_box_autoadd_bool(self, serializer);
    }
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_unicode_char_properties(
    UnicodeCharProperties self,
    SseSerializer serializer,
  ) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.character, serializer);
    sse_encode_u_32(self.codePoint, serializer);
    sse_encode_opt_String(self.name, serializer);
    sse_encode_opt_String(self.unicodeValue, serializer);
    sse_encode_opt_String(self.generalCategory, serializer);
    sse_encode_opt_String(self.block, serializer);
    sse_encode_opt_String(self.plane, serializer);
    sse_encode_opt_String(self.script, serializer);
    sse_encode_opt_String(self.bidiClass, serializer);
    sse_encode_opt_String(self.eastAsianWidth, serializer);
    sse_encode_opt_String(self.lineBreak, serializer);
    sse_encode_opt_String(self.wordBreak, serializer);
    sse_encode_opt_String(self.sentenceBreak, serializer);
    sse_encode_opt_String(self.graphemeClusterBreak, serializer);
    sse_encode_opt_String(self.hangulSyllableType, serializer);
    sse_encode_opt_String(self.joiningType, serializer);
    sse_encode_opt_box_autoadd_bool(self.isAlphabetic, serializer);
    sse_encode_opt_box_autoadd_bool(self.isUppercase, serializer);
    sse_encode_opt_box_autoadd_bool(self.isLowercase, serializer);
    sse_encode_opt_box_autoadd_bool(self.isWhiteSpace, serializer);
    sse_encode_opt_box_autoadd_bool(self.isMath, serializer);
    sse_encode_opt_box_autoadd_bool(self.isDash, serializer);
    sse_encode_opt_box_autoadd_bool(self.isDiacritic, serializer);
    sse_encode_opt_box_autoadd_bool(self.isEmoji, serializer);
    sse_encode_opt_box_autoadd_bool(self.isEmojiPresentation, serializer);
    sse_encode_opt_box_autoadd_bool(self.isEmojiModifier, serializer);
    sse_encode_opt_box_autoadd_bool(self.isEmojiModifierBase, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(BigInt self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putBigUint64(self);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }
}
