// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.11.1.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `get_plane_name`

List<UnicodeCharProperties> getUnicodeCharProperties({
  String? search,
  required BigInt offset,
  required BigInt limit,
}) => RustLib.instance.api.crateApiSimpleGetUnicodeCharProperties(
  search: search,
  offset: offset,
  limit: limit,
);

CaseMappingResult getCharacterCaseMapping({required String character}) =>
    RustLib.instance.api.crateApiSimpleGetCharacterCaseMapping(
      character: character,
    );

class CaseMappingResult {
  final String original;
  final String mapped;
  final bool hasMapping;

  const CaseMappingResult({
    required this.original,
    required this.mapped,
    required this.hasMapping,
  });

  @override
  int get hashCode => original.hashCode ^ mapped.hashCode ^ hasMapping.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is CaseMappingResult &&
          runtimeType == other.runtimeType &&
          original == other.original &&
          mapped == other.mapped &&
          hasMapping == other.hasMapping;
}

class UnicodeCharProperties {
  final String character;
  final int codePoint;
  final String? name;
  final String? unicodeValue;
  final String? generalCategory;
  final String? block;
  final String? plane;
  final String? script;
  final String? bidiClass;
  final String? eastAsianWidth;
  final String? lineBreak;
  final String? wordBreak;
  final String? sentenceBreak;
  final String? graphemeClusterBreak;
  final String? hangulSyllableType;
  final String? joiningType;
  final bool? isAlphabetic;
  final bool? isUppercase;
  final bool? isLowercase;
  final bool? isWhiteSpace;
  final bool? isMath;
  final bool? isDash;
  final bool? isDiacritic;
  final bool? isEmoji;
  final bool? isEmojiPresentation;
  final bool? isEmojiModifier;
  final bool? isEmojiModifierBase;

  const UnicodeCharProperties({
    required this.character,
    required this.codePoint,
    this.name,
    this.unicodeValue,
    this.generalCategory,
    this.block,
    this.plane,
    this.script,
    this.bidiClass,
    this.eastAsianWidth,
    this.lineBreak,
    this.wordBreak,
    this.sentenceBreak,
    this.graphemeClusterBreak,
    this.hangulSyllableType,
    this.joiningType,
    this.isAlphabetic,
    this.isUppercase,
    this.isLowercase,
    this.isWhiteSpace,
    this.isMath,
    this.isDash,
    this.isDiacritic,
    this.isEmoji,
    this.isEmojiPresentation,
    this.isEmojiModifier,
    this.isEmojiModifierBase,
  });

  @override
  int get hashCode =>
      character.hashCode ^
      codePoint.hashCode ^
      name.hashCode ^
      unicodeValue.hashCode ^
      generalCategory.hashCode ^
      block.hashCode ^
      plane.hashCode ^
      script.hashCode ^
      bidiClass.hashCode ^
      eastAsianWidth.hashCode ^
      lineBreak.hashCode ^
      wordBreak.hashCode ^
      sentenceBreak.hashCode ^
      graphemeClusterBreak.hashCode ^
      hangulSyllableType.hashCode ^
      joiningType.hashCode ^
      isAlphabetic.hashCode ^
      isUppercase.hashCode ^
      isLowercase.hashCode ^
      isWhiteSpace.hashCode ^
      isMath.hashCode ^
      isDash.hashCode ^
      isDiacritic.hashCode ^
      isEmoji.hashCode ^
      isEmojiPresentation.hashCode ^
      isEmojiModifier.hashCode ^
      isEmojiModifierBase.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is UnicodeCharProperties &&
          runtimeType == other.runtimeType &&
          character == other.character &&
          codePoint == other.codePoint &&
          name == other.name &&
          unicodeValue == other.unicodeValue &&
          generalCategory == other.generalCategory &&
          block == other.block &&
          plane == other.plane &&
          script == other.script &&
          bidiClass == other.bidiClass &&
          eastAsianWidth == other.eastAsianWidth &&
          lineBreak == other.lineBreak &&
          wordBreak == other.wordBreak &&
          sentenceBreak == other.sentenceBreak &&
          graphemeClusterBreak == other.graphemeClusterBreak &&
          hangulSyllableType == other.hangulSyllableType &&
          joiningType == other.joiningType &&
          isAlphabetic == other.isAlphabetic &&
          isUppercase == other.isUppercase &&
          isLowercase == other.isLowercase &&
          isWhiteSpace == other.isWhiteSpace &&
          isMath == other.isMath &&
          isDash == other.isDash &&
          isDiacritic == other.isDiacritic &&
          isEmoji == other.isEmoji &&
          isEmojiPresentation == other.isEmojiPresentation &&
          isEmojiModifier == other.isEmojiModifier &&
          isEmojiModifierBase == other.isEmojiModifierBase;
}
