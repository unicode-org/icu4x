# This file is part of ICU4X. For terms of use, please see the file
# called LICENSE at the top level of the ICU4X source tree
# (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).
[package]
name = "icu_testdata"
description = "Test data for ICU4X, generated from CLDR"
version = "0.1.0"
authors = ["The ICU4X Project Developers"]
edition = "2018"
readme = "README.md"
repository = "https://github.com/unicode-org/icu4x"
license-file = "../../LICENSE"
categories = ["internationalization"]
include = [
    "src/**/*",
    "data/json/**/*",
    "examples/**/*",
    "benches/**/*",
    "Cargo.toml",
    "README.md"
]

# icu4x_testdata metadata: schema defined in ./src/metadata.rs
[package.metadata.icu4x_testdata]

# Locales to include in testdata. Keep this list somewhat short, but cover all features.
# We use 10 base languages with a small number of variants to allow for 10 languages to be
# used in microbenchmarks.
locales = [
    # Arabic:
    # - Good example for RTL
    # - Non-latin numerals in Egypt
    "ar",
    "ar-EG",

    # Bangla:
    # - Uses non-Latin numerals
    "bn",

    # Chakma:
    # - High-coverage language that uses non-BMP code points
    "ccp",

    # English:
    # - Widely understood language in software engineering
    # - Includes regional variants to test similar-data fallbacks
    "en",
    "en-US-posix",
    "en-ZA",

    # Spanish:
    #  - Most popular Romance language
    #  - South American dialect
    "es",
    "es-AR",

    # French:
    # - Often the first non-English locale to receive new data in CLDR
    "fr",

    # Japanese:
    # - Four scripts
    # - Complex date patterns
    "ja",

    # Russian:
    # - Cyrillic script
    # - Interesting plural rules
    # - Hightly inflected, many gramatical cases
    "ru",

    # Serbian:
    # - Multiple scripts
    # - Southern Europe
    # - Hightly inflected, many gramatical cases
    "sr",
    "sr-Cyrl",
    "sr-Latn",

    # Thai:
    # - Complex word breaking
    "th",

    # Turkish:
    # - Interesting case-mappings
    "tr",

    # Root data
    "und",
]

# Paths from CLDR JSON to copy into testdata. Uses gitignore-like syntax.
# The variable "$LOCALES" is replaced with the list of locales from above.
cldr_json_glob = [
    "cldr-core/supplemental/likelySubtags.json",
    "cldr-core/supplemental/numberingSystems.json",
    "cldr-core/supplemental/ordinals.json",
    "cldr-core/supplemental/plurals.json",
    "cldr-dates-full/main/$LOCALES/ca-gregorian.json",
    # Extra data for feature coverage in provider_cldr tests:
    "cldr-dates-full/main/cs/ca-gregorian.json",
    "cldr-dates-full/main/haw/ca-gregorian.json",
]

# Git tag or sha1 for the CLDR data used to generate the testdata.
gitref = "38.1.0"

[package.metadata.cargo-all-features]
# Omit most optional dependency features from permutation testing
skip_optional_dependencies = true
extra_features = [
    "log",
]

[dependencies]
icu_provider = { version = "0.1", path = "../../components/provider" }
icu_provider_fs = { version = "0.1", path = "../../components/provider_fs" }
icu_locid = { version = "0.1", path = "../../components/locid" }

# Dependencies for the "metadata" feature
serde = { version = "1.0", features = ["derive"], optional = true }
serde_json = { version = "1.0", optional = true }

# Dependencies for the binary
cargo_metadata = { version = "0.11.4", optional = true }
clap = { version = "2.33", optional = true }
icu_provider_cldr = { version = "0.1", path = "../../components/provider_cldr", optional = true, features = ["download"] }
log = { version = "0.4", optional = true }
simple_logger = { version = "1.11", optional = true }
globwalk = { version = "0.8", optional = true }
walkdir = { version = "2", optional = true }
itertools = { version = "0.10", optional = true }
writeable = { version = "0.2", path = "../../utils/writeable", optional = true }

[dev-dependencies]
icu_locid_macros = { version = "0.1", path = "../../components/locid/macros" }
icu_plurals = { version = "0.1", path = "../../components/plurals" }

[features]
metadata = ["cargo_metadata", "serde", "serde_json", "icu_locid/serde"]
icu4x-gen-testdata = [
    "cargo_metadata",
    "clap",
    "icu_provider_cldr",
    "log",
    "simple_logger",
    "icu_provider_fs/export",
    "metadata",
    "globwalk",
    "walkdir",
    "itertools",
    "writeable",
]

[[bin]]
name = "icu4x-gen-testdata"
required-features = ["icu4x-gen-testdata"]
