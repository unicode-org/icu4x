// @generated
# [doc = r" Implement [`DataProvider<M>`](icu_provider::DataProvider) on the given struct using the data"] # [doc = r" hardcoded in this file. This allows the struct to be used with"] # [doc = r" `icu`'s `_unstable` constructors."] # [doc = r""] # [doc = r" ```compile_fail"] # [doc = r" struct MyDataProvider;"] # [doc = r#" include!("/path/to/generated/macros.rs");"#] # [doc = r" impl_data_provider(MyDataProvider);"] # [doc = r" ```"] # [doc (hidden)] # [macro_export] macro_rules ! __impl_data_provider { ($ provider : path) => { impl_plurals_cardinal_v1 ! ($ provider) ; impl_plurals_ordinal_v1 ! ($ provider) ; } } # [doc (inline)] pub use __impl_data_provider as impl_data_provider ; # [doc = " Implement [`DataProvider<CardinalV1Marker>`](icu_provider::DataProvider) on the given struct using the data"] # [doc = r" hardcoded in this file. This allows the struct to be used with"] # [doc = r" `icu`'s `_unstable` constructors."] # [doc (hidden)] # [macro_export] macro_rules ! __impl_plurals_cardinal_v1 { ($ provider : path) => { # [clippy :: msrv = "1.61"] impl icu_provider :: DataProvider < icu_plurals :: provider :: CardinalV1Marker > for $ provider { fn load (& self , req : icu_provider :: DataRequest ,) -> Result < icu_provider :: DataResponse < icu_plurals :: provider :: CardinalV1Marker > , icu_provider :: DataError > { ["af" , "am" , "ar" , "as" , "az" , "be" , "bg" , "bn" , "bs" , "ca" , "cs" , "cy" , "da" , "de" , "el" , "en" , "es" , "et" , "eu" , "fa" , "fi" , "fil" , "fr" , "ga" , "gd" , "gl" , "gu" , "ha" , "he" , "hi" , "hr" , "hu" , "hy" , "id" , "ig" , "is" , "it" , "ja" , "jv" , "ka" , "kk" , "km" , "kn" , "ko" , "ky" , "lo" , "lt" , "lv" , "mk" , "ml" , "mn" , "mr" , "ms" , "my" , "ne" , "nl" , "nn" , "no" , "or" , "pa" , "pcm" , "pl" , "ps" , "pt" , "ro" , "ru" , "sd" , "si" , "sk" , "sl" , "so" , "sq" , "sr" , "sv" , "sw" , "ta" , "te" , "th" , "tk" , "tr" , "uk" , "ur" , "uz" , "vi" , "yo" , "yue" , "zh" , "zu"] . binary_search_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . ok () . map (| i | unsafe { static ID : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : None , many : None , } ; static PA : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static AF : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static ES : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC7\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\0\0\0\0\0\0\0\xC1@B\x0F\0\0\0\0\0\0\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\x05\0\0\0") } ,)) , } ; static GA : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x06\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x07\0\0\0\n\0\0\0") } ,)) , } ; static GD : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x0C\0\0\0\x0C\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\n\0\0\0\r\0\0\0\x13\0\0\0") } ,)) , many : None , } ; static HY : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static FR : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC7\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\0\0\0\0\0\0\0\xC1@B\x0F\0\0\0\0\0\0\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\x05\0\0\0") } ,)) , } ; static PT : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC7\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\0\0\0\0\0\0\0\xC1@B\x0F\0\0\0\0\0\0\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\x05\0\0\0") } ,)) , } ; static BE : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x02\0\0\0\x04\0\0\0\x80d\0\0\0\x0C\0\0\0\x0E\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC0\n\0\0\0\0\0\0\0\0\0\0\0@\n\0\0\0\x05\0\0\0\t\0\0\0@d\0\0\0\x0B\0\0\0\x0E\0\0\0") } ,)) , } ; static LT : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x13\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x02\0\0\0\t\0\0\0\x80d\0\0\0\x0B\0\0\0\x13\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\x84\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , } ; static AM : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static DE : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , two : None , few : None , many : None , } ; static CA : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC7\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\0\0\0\0\0\0\0\xC1@B\x0F\0\0\0\0\0\0\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\x05\0\0\0") } ,)) , } ; static CS : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x02\0\0\0\x04\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\x82\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , } ; static PL : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x02\0\0\0\x04\0\0\0\x81d\0\0\0\x0C\0\0\0\x0E\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x07\0\0\0\0\0\r\0\x1A\0'\x004\0A\0N\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\x01\0\0\0\x01\0\0\0\xC1\n\0\0\0\0\0\0\0\x01\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x05\0\0\0\t\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x0C\0\0\0\x0E\0\0\0") } ,)) , } ; static RO : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x04\0\0\0\0\0\r\0\x1A\0'\0\x82\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\xC0d\0\0\0\x01\0\0\0\x13\0\0\0") } ,)) , many : None , } ; static SL : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x02\0\0\0\x02\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x03\0\0\0\x04\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , many : None , } ; static DA : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static RU : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x02\0\0\0\x04\0\0\0\x81d\0\0\0\x0C\0\0\0\x0E\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x06\0\0\0\0\0\r\0\x1A\0'\x004\0A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\0\0\0\0\0\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x05\0\0\0\t\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x0B\0\0\0\x0E\0\0\0") } ,)) , } ; static SI : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\x15\0\"\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0A\0\0\0\0\0\0\0\0\0\0\0\0\xC4\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static HE : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x04\0\0\0\0\0\r\0\x1A\0'\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0A\0\0\0\0\0\0\0\0\0\0\0\0\x82\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x02\0\0\0\x02\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , few : None , many : None , } ; static MK : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0D\n\0\0\0\x01\0\0\0\x01\0\0\0\x84d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : None , few : None , many : None , } ; static BS : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0D\n\0\0\0\x01\0\0\0\x01\0\0\0\x84d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x02\0\0\0\x04\0\0\0\x81d\0\0\0\x0C\0\0\0\x0E\0\0\0D\n\0\0\0\x02\0\0\0\x04\0\0\0\x84d\0\0\0\x0C\0\0\0\x0E\0\0\0") } ,)) , many : None , } ; static IS : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC5\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0E\n\0\0\0\x01\0\0\0\x01\0\0\0\x85d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : None , few : None , many : None , } ; static FIL : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x06\0\0\0\0\0\r\0*\x007\0T\0a\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\x81\n\0\0\0\x04\0\0\0\x04\0\0\0\x06\0\0\0\x06\0\0\0\t\0\0\0\t\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\x84\n\0\0\0\x04\0\0\0\x04\0\0\0\x06\0\0\0\x06\0\0\0\t\0\0\0\t\0\0\0") } ,)) , two : None , few : None , many : None , } ; static CY : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x03\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") } ,)) , } ; static AR : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0d\0\0\0\x03\0\0\0\n\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0d\0\0\0\x0B\0\0\0c\0\0\0") } ,)) , } ; static LV : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x04\0\0\0\0\0\r\0\x1A\0'\0\xC0\n\0\0\0\0\0\0\0\0\0\0\0@d\0\0\0\x0B\0\0\0\x13\0\0\0B\0\0\0\0\x02\0\0\0\x02\0\0\0\xC4d\0\0\0\x0B\0\0\0\x13\0\0\0") } ,)) , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x07\0\0\0\0\0\r\0\x1A\0'\x004\0A\0N\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0B\0\0\0\0\x02\0\0\0\x02\0\0\0\xC4\n\0\0\0\x01\0\0\0\x01\0\0\0\x84d\0\0\0\x0B\0\0\0\x0B\0\0\0\x02\0\0\0\0\x02\0\0\0\x02\0\0\0\xC4\n\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; * [& AF , & AM , & AR , & AM , & AF , & BE , & AF , & AM , & BS , & CA , & CS , & CY , & DA , & DE , & AF , & DE , & ES , & DE , & AF , & AM , & DE , & FIL , & FR , & GA , & GD , & DE , & AM , & AF , & HE , & AM , & BS , & AF , & HY , & ID , & ID , & IS , & CA , & ID , & ID , & AF , & AF , & ID , & AM , & ID , & AF , & ID , & LT , & LV , & MK , & AF , & AF , & AF , & ID , & ID , & AF , & DE , & AF , & AF , & AF , & PA , & AM , & PL , & AF , & PT , & RO , & RU , & AF , & SI , & CS , & SL , & AF , & AF , & BS , & DE , & DE , & AF , & AF , & ID , & AF , & AF , & RU , & DE , & AF , & ID , & ID , & ID , & ID , & AM] . get_unchecked (i) }) . map (icu_provider :: prelude :: zerofrom :: ZeroFrom :: zero_from) . map (icu_provider :: DataPayload :: from_owned) . map (| payload | { icu_provider :: DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| icu_provider :: DataErrorKind :: MissingLocale . with_req (< icu_plurals :: provider :: CardinalV1Marker as icu_provider :: KeyedDataMarker > :: KEY , req)) } } } } # [doc (inline)] pub use __impl_plurals_cardinal_v1 as impl_plurals_cardinal_v1 ; # [doc = " Implement [`DataProvider<OrdinalV1Marker>`](icu_provider::DataProvider) on the given struct using the data"] # [doc = r" hardcoded in this file. This allows the struct to be used with"] # [doc = r" `icu`'s `_unstable` constructors."] # [doc (hidden)] # [macro_export] macro_rules ! __impl_plurals_ordinal_v1 { ($ provider : path) => { # [clippy :: msrv = "1.61"] impl icu_provider :: DataProvider < icu_plurals :: provider :: OrdinalV1Marker > for $ provider { fn load (& self , req : icu_provider :: DataRequest ,) -> Result < icu_provider :: DataResponse < icu_plurals :: provider :: OrdinalV1Marker > , icu_provider :: DataError > { ["af" , "am" , "ar" , "as" , "az" , "be" , "bg" , "bn" , "bs" , "ca" , "cs" , "cy" , "da" , "de" , "el" , "en" , "es" , "et" , "eu" , "fa" , "fi" , "fil" , "fr" , "ga" , "gd" , "gl" , "gu" , "he" , "hi" , "hr" , "hu" , "hy" , "id" , "is" , "it" , "ja" , "ka" , "kk" , "km" , "kn" , "ko" , "ky" , "lo" , "lt" , "lv" , "mk" , "ml" , "mn" , "mr" , "ms" , "my" , "ne" , "nl" , "no" , "or" , "pa" , "pl" , "ps" , "pt" , "ro" , "ru" , "sd" , "si" , "sk" , "sl" , "sq" , "sr" , "sv" , "sw" , "ta" , "te" , "th" , "tk" , "tr" , "uk" , "ur" , "uz" , "vi" , "yue" , "zh" , "zu"] . binary_search_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . ok () . map (| i | unsafe { static AF : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : None , many : None , } ; static IT : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x0B\0\0\0\x0B\0\0\0\x08\0\0\0\x08\0\0\0P\0\0\0P\0\0\0 \x03\0\0 \x03\0\0") } ,)) , } ; static KK : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x04\0\0\0\0\0\r\0\x1A\0'\0\xC0\n\0\0\0\x06\0\0\0\x06\0\0\0@\n\0\0\0\t\0\0\0\t\0\0\0@\n\0\0\0\0\0\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , } ; static UK : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x03\0\0\0\x03\0\0\0\x80d\0\0\0\r\0\0\0\r\0\0\0") } ,)) , many : None , } ; static BE : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\x15\0\xC0\n\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0\x80d\0\0\0\x0C\0\0\0\x0C\0\0\0\r\0\0\0\r\0\0\0") } ,)) , many : None , } ; static TK : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\x15\0\xC0\n\0\0\0\x06\0\0\0\x06\0\0\0\t\0\0\0\t\0\0\0@\0\0\0\0\n\0\0\0\n\0\0\0") } ,)) , many : None , } ; static FIL : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static SQ : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x04\0\0\0\x04\0\0\0\x80d\0\0\0\x0E\0\0\0\x0E\0\0\0") } ,)) , } ; static MR : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") } ,)) , many : None , } ; static GU : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") } ,)) , } ; static CA : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x03\0\0\0\x03\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") } ,)) , many : None , } ; static HU : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\x05\0\0\0") } ,)) , two : None , few : None , many : None , } ; static OR : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\x05\0\0\0\x07\0\0\0\t\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") } ,)) , } ; static AS : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\x05\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0\t\0\0\0\t\0\0\0\n\0\0\0\n\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") } ,)) , } ; static GD : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x0C\0\0\0\x0C\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x03\0\0\0\r\0\0\0\r\0\0\0") } ,)) , many : None , } ; static NE : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x04\0\0\0") } ,)) , two : None , few : None , many : None , } ; static KA : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0Ad\0\0\0\x02\0\0\0\x14\0\0\0(\0\0\0(\0\0\0<\0\0\0<\0\0\0P\0\0\0P\0\0\0") } ,)) , } ; static AZ : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0-\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x02\0\0\0\x02\0\0\0\x05\0\0\0\x05\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0Ad\0\0\0\x14\0\0\0\x14\0\0\x002\0\0\x002\0\0\0F\0\0\0F\0\0\0P\0\0\0P\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\x15\0\xC1\n\0\0\0\x03\0\0\0\x03\0\0\0\x04\0\0\0\x04\0\0\0A\xE8\x03\0\0d\0\0\0d\0\0\0\xC8\0\0\0\xC8\0\0\0,\x01\0\0,\x01\0\0\x90\x01\0\0\x90\x01\0\0\xF4\x01\0\0\xF4\x01\0\0X\x02\0\0X\x02\0\0\xBC\x02\0\0\xBC\x02\0\0 \x03\0\0 \x03\0\0\x84\x03\0\0\x84\x03\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0A\n\0\0\0\x06\0\0\0\x06\0\0\0Ad\0\0\0(\0\0\0(\0\0\0<\0\0\0<\0\0\0Z\0\0\0Z\0\0\0") } ,)) , } ; static EN : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x02\0\0\0\x02\0\0\0\x80d\0\0\0\x0C\0\0\0\x0C\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x03\0\0\0\x03\0\0\0\x80d\0\0\0\r\0\0\0\r\0\0\0") } ,)) , many : None , } ; static MK : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\n\0\0\0\x02\0\0\0\x02\0\0\0\x81d\0\0\0\x0C\0\0\0\x0C\0\0\0") } ,)) , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\x15\0\xC1\n\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0\x81d\0\0\0\x11\0\0\0\x11\0\0\0\x12\0\0\0\x12\0\0\0") } ,)) , } ; static SV : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\x15\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x02\0\0\0\x02\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0\x0C\0\0\0\x0C\0\0\0") } ,)) , two : None , few : None , many : None , } ; static CY : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0\t\0\0\0\t\0\0\0") } ,)) , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x03\0\0\0\x04\0\0\0\x04\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x05\0\0\0\x05\0\0\0\x06\0\0\0\x06\0\0\0") } ,)) , } ; * [& AF , & AF , & AF , & AS , & AZ , & BE , & AF , & AS , & AF , & CA , & AF , & CY , & AF , & AF , & AF , & EN , & AF , & AF , & AF , & AF , & AF , & FIL , & FIL , & FIL , & GD , & AF , & GU , & AF , & GU , & AF , & HU , & FIL , & AF , & AF , & IT , & AF , & KA , & KK , & AF , & AF , & AF , & AF , & FIL , & AF , & AF , & MK , & AF , & AF , & MR , & FIL , & AF , & NE , & AF , & AF , & OR , & AF , & AF , & AF , & AF , & FIL , & AF , & AF , & AF , & AF , & AF , & SQ , & AF , & SV , & AF , & AF , & AF , & AF , & TK , & AF , & UK , & AF , & AF , & FIL , & AF , & AF , & AF] . get_unchecked (i) }) . map (icu_provider :: prelude :: zerofrom :: ZeroFrom :: zero_from) . map (icu_provider :: DataPayload :: from_owned) . map (| payload | { icu_provider :: DataResponse { metadata : Default :: default () , payload : Some (payload) , } }) . ok_or_else (|| icu_provider :: DataErrorKind :: MissingLocale . with_req (< icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: KeyedDataMarker > :: KEY , req)) } } } } # [doc (inline)] pub use __impl_plurals_ordinal_v1 as impl_plurals_ordinal_v1 ; # [doc = r" Implement [`AnyProvider`](icu_provider::AnyProvider) on the given struct using the data"] # [doc = r" hardcoded in this module. This allows the struct to be used with"] # [doc = r" `icu`'s `_any` constructors."] # [doc = r""] # [doc = r" ```compile_fail"] # [doc = r" struct MyAnyProvider;"] # [doc = r#" include!("/path/to/generated/macros.rs");"#] # [doc = r" impl_any_provider(MyAnyProvider);"] # [doc = r" ```"] # [doc (hidden)] # [macro_export] macro_rules ! __impl_any_provider { ($ provider : path) => { # [clippy :: msrv = "1.61"] impl icu_provider :: AnyProvider for $ provider { fn load_any (& self , key : icu_provider :: DataKey , req : icu_provider :: DataRequest) -> Result < icu_provider :: AnyResponse , icu_provider :: DataError > { const PLURALS_CARDINAL_V1 : icu_provider :: DataKeyHash = < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: KeyedDataMarker > :: KEY . hashed () ; const PLURALS_ORDINAL_V1 : icu_provider :: DataKeyHash = < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: KeyedDataMarker > :: KEY . hashed () ; match key . hashed () { PLURALS_CARDINAL_V1 => ["af" , "am" , "ar" , "as" , "az" , "be" , "bg" , "bn" , "bs" , "ca" , "cs" , "cy" , "da" , "de" , "el" , "en" , "es" , "et" , "eu" , "fa" , "fi" , "fil" , "fr" , "ga" , "gd" , "gl" , "gu" , "ha" , "he" , "hi" , "hr" , "hu" , "hy" , "id" , "ig" , "is" , "it" , "ja" , "jv" , "ka" , "kk" , "km" , "kn" , "ko" , "ky" , "lo" , "lt" , "lv" , "mk" , "ml" , "mn" , "mr" , "ms" , "my" , "ne" , "nl" , "nn" , "no" , "or" , "pa" , "pcm" , "pl" , "ps" , "pt" , "ro" , "ru" , "sd" , "si" , "sk" , "sl" , "so" , "sq" , "sr" , "sv" , "sw" , "ta" , "te" , "th" , "tk" , "tr" , "uk" , "ur" , "uz" , "vi" , "yo" , "yue" , "zh" , "zu"] . binary_search_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . ok () . map (| i | unsafe { static ID : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : None , many : None , } ; static PA : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static AF : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static ES : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC7\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\0\0\0\0\0\0\0\xC1@B\x0F\0\0\0\0\0\0\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\x05\0\0\0") } ,)) , } ; static GA : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x06\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x07\0\0\0\n\0\0\0") } ,)) , } ; static GD : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x0C\0\0\0\x0C\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\n\0\0\0\r\0\0\0\x13\0\0\0") } ,)) , many : None , } ; static HY : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static FR : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC7\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\0\0\0\0\0\0\0\xC1@B\x0F\0\0\0\0\0\0\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\x05\0\0\0") } ,)) , } ; static PT : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC7\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\0\0\0\0\0\0\0\xC1@B\x0F\0\0\0\0\0\0\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\x05\0\0\0") } ,)) , } ; static BE : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x02\0\0\0\x04\0\0\0\x80d\0\0\0\x0C\0\0\0\x0E\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC0\n\0\0\0\0\0\0\0\0\0\0\0@\n\0\0\0\x05\0\0\0\t\0\0\0@d\0\0\0\x0B\0\0\0\x0E\0\0\0") } ,)) , } ; static LT : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x13\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x02\0\0\0\t\0\0\0\x80d\0\0\0\x0B\0\0\0\x13\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\x84\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , } ; static AM : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static DE : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , two : None , few : None , many : None , } ; static CA : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC7\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\0\0\0\0\0\0\0\xC1@B\x0F\0\0\0\0\0\0\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\0\0\0\x05\0\0\0") } ,)) , } ; static CS : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x02\0\0\0\x04\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\x82\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , } ; static PL : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x02\0\0\0\x04\0\0\0\x81d\0\0\0\x0C\0\0\0\x0E\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x07\0\0\0\0\0\r\0\x1A\0'\x004\0A\0N\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\x01\0\0\0\x01\0\0\0\xC1\n\0\0\0\0\0\0\0\x01\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x05\0\0\0\t\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x0C\0\0\0\x0E\0\0\0") } ,)) , } ; static RO : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x04\0\0\0\0\0\r\0\x1A\0'\0\x82\0\0\0\0\0\0\0\0\0\0\0\0@\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0\xC0d\0\0\0\x01\0\0\0\x13\0\0\0") } ,)) , many : None , } ; static SL : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x02\0\0\0\x02\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x03\0\0\0\x04\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , many : None , } ; static DA : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static RU : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x02\0\0\0\x04\0\0\0\x81d\0\0\0\x0C\0\0\0\x0E\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x06\0\0\0\0\0\r\0\x1A\0'\x004\0A\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\0\0\0\0\0\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x05\0\0\0\t\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\xC1d\0\0\0\x0B\0\0\0\x0E\0\0\0") } ,)) , } ; static SI : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\x15\0\"\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x01\0\0\0A\0\0\0\0\0\0\0\0\0\0\0\0\xC4\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static HE : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x04\0\0\0\0\0\r\0\x1A\0'\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0A\0\0\0\0\0\0\0\0\0\0\0\0\x82\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\x02\0\0\0\x02\0\0\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , few : None , many : None , } ; static MK : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0D\n\0\0\0\x01\0\0\0\x01\0\0\0\x84d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : None , few : None , many : None , } ; static BS : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0D\n\0\0\0\x01\0\0\0\x01\0\0\0\x84d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x02\0\0\0\x04\0\0\0\x81d\0\0\0\x0C\0\0\0\x0E\0\0\0D\n\0\0\0\x02\0\0\0\x04\0\0\0\x84d\0\0\0\x0C\0\0\0\x0E\0\0\0") } ,)) , many : None , } ; static IS : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x05\0\0\0\0\0\r\0\x1A\0'\x004\0\xC5\0\0\0\0\0\0\0\0\0\0\0\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0E\n\0\0\0\x01\0\0\0\x01\0\0\0\x85d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : None , few : None , many : None , } ; static FIL : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x06\0\0\0\0\0\r\0*\x007\0T\0a\0\xC2\0\0\0\0\0\0\0\0\0\0\0\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0B\0\0\0\0\0\0\0\0\0\0\0\0\x81\n\0\0\0\x04\0\0\0\x04\0\0\0\x06\0\0\0\x06\0\0\0\t\0\0\0\t\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\x84\n\0\0\0\x04\0\0\0\x04\0\0\0\x06\0\0\0\x06\0\0\0\t\0\0\0\t\0\0\0") } ,)) , two : None , few : None , many : None , } ; static CY : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x03\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") } ,)) , } ; static AR : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0d\0\0\0\x03\0\0\0\n\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0d\0\0\0\x0B\0\0\0c\0\0\0") } ,)) , } ; static LV : < icu_plurals :: provider :: CardinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x04\0\0\0\0\0\r\0\x1A\0'\0\xC0\n\0\0\0\0\0\0\0\0\0\0\0@d\0\0\0\x0B\0\0\0\x13\0\0\0B\0\0\0\0\x02\0\0\0\x02\0\0\0\xC4d\0\0\0\x0B\0\0\0\x13\0\0\0") } ,)) , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x07\0\0\0\0\0\r\0\x1A\0'\x004\0A\0N\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0B\0\0\0\0\x02\0\0\0\x02\0\0\0\xC4\n\0\0\0\x01\0\0\0\x01\0\0\0\x84d\0\0\0\x0B\0\0\0\x0B\0\0\0\x02\0\0\0\0\x02\0\0\0\x02\0\0\0\xC4\n\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; * [& AF , & AM , & AR , & AM , & AF , & BE , & AF , & AM , & BS , & CA , & CS , & CY , & DA , & DE , & AF , & DE , & ES , & DE , & AF , & AM , & DE , & FIL , & FR , & GA , & GD , & DE , & AM , & AF , & HE , & AM , & BS , & AF , & HY , & ID , & ID , & IS , & CA , & ID , & ID , & AF , & AF , & ID , & AM , & ID , & AF , & ID , & LT , & LV , & MK , & AF , & AF , & AF , & ID , & ID , & AF , & DE , & AF , & AF , & AF , & PA , & AM , & PL , & AF , & PT , & RO , & RU , & AF , & SI , & CS , & SL , & AF , & AF , & BS , & DE , & DE , & AF , & AF , & ID , & AF , & AF , & RU , & DE , & AF , & ID , & ID , & ID , & ID , & AM] . get_unchecked (i) }) . map (icu_provider :: AnyPayload :: from_static_ref) , PLURALS_ORDINAL_V1 => ["af" , "am" , "ar" , "as" , "az" , "be" , "bg" , "bn" , "bs" , "ca" , "cs" , "cy" , "da" , "de" , "el" , "en" , "es" , "et" , "eu" , "fa" , "fi" , "fil" , "fr" , "ga" , "gd" , "gl" , "gu" , "he" , "hi" , "hr" , "hu" , "hy" , "id" , "is" , "it" , "ja" , "ka" , "kk" , "km" , "kn" , "ko" , "ky" , "lo" , "lt" , "lv" , "mk" , "ml" , "mn" , "mr" , "ms" , "my" , "ne" , "nl" , "no" , "or" , "pa" , "pl" , "ps" , "pt" , "ro" , "ru" , "sd" , "si" , "sk" , "sl" , "sq" , "sr" , "sv" , "sw" , "ta" , "te" , "th" , "tk" , "tr" , "uk" , "ur" , "uz" , "vi" , "yue" , "zh" , "zu"] . binary_search_by (| k | req . locale . strict_cmp (k . as_bytes ()) . reverse ()) . ok () . map (| i | unsafe { static AF : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : None , many : None , } ; static IT : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x0B\0\0\0\x0B\0\0\0\x08\0\0\0\x08\0\0\0P\0\0\0P\0\0\0 \x03\0\0 \x03\0\0") } ,)) , } ; static KK : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x04\0\0\0\0\0\r\0\x1A\0'\0\xC0\n\0\0\0\x06\0\0\0\x06\0\0\0@\n\0\0\0\t\0\0\0\t\0\0\0@\n\0\0\0\0\0\0\0\0\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0") } ,)) , } ; static UK : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x03\0\0\0\x03\0\0\0\x80d\0\0\0\r\0\0\0\r\0\0\0") } ,)) , many : None , } ; static BE : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\x15\0\xC0\n\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0\x80d\0\0\0\x0C\0\0\0\x0C\0\0\0\r\0\0\0\r\0\0\0") } ,)) , many : None , } ; static TK : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : None , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\x15\0\xC0\n\0\0\0\x06\0\0\0\x06\0\0\0\t\0\0\0\t\0\0\0@\0\0\0\0\n\0\0\0\n\0\0\0") } ,)) , many : None , } ; static FIL : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : None , } ; static SQ : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x04\0\0\0\x04\0\0\0\x80d\0\0\0\x0E\0\0\0\x0E\0\0\0") } ,)) , } ; static MR : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") } ,)) , many : None , } ; static GU : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") } ,)) , } ; static CA : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x03\0\0\0\x03\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") } ,)) , many : None , } ; static HU : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\x05\0\0\0") } ,)) , two : None , few : None , many : None , } ; static OR : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\x05\0\0\0\x07\0\0\0\t\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") } ,)) , } ; static AS : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x05\0\0\0\x05\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0\t\0\0\0\t\0\0\0\n\0\0\0\n\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x03\0\0\0\x03\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x04\0\0\0\x04\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x06\0\0\0\x06\0\0\0") } ,)) , } ; static GD : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0\x0C\0\0\0\x0C\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x03\0\0\0\r\0\0\0\r\0\0\0") } ,)) , many : None , } ; static NE : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x04\0\0\0") } ,)) , two : None , few : None , many : None , } ; static KA : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC1\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : None , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0Ad\0\0\0\x02\0\0\0\x14\0\0\0(\0\0\0(\0\0\0<\0\0\0<\0\0\0P\0\0\0P\0\0\0") } ,)) , } ; static AZ : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0-\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x02\0\0\0\x02\0\0\0\x05\0\0\0\x05\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0Ad\0\0\0\x14\0\0\0\x14\0\0\x002\0\0\x002\0\0\0F\0\0\0F\0\0\0P\0\0\0P\0\0\0") } ,)) , two : None , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\x15\0\xC1\n\0\0\0\x03\0\0\0\x03\0\0\0\x04\0\0\0\x04\0\0\0A\xE8\x03\0\0d\0\0\0d\0\0\0\xC8\0\0\0\xC8\0\0\0,\x01\0\0,\x01\0\0\x90\x01\0\0\x90\x01\0\0\xF4\x01\0\0\xF4\x01\0\0X\x02\0\0X\x02\0\0\xBC\x02\0\0\xBC\x02\0\0 \x03\0\0 \x03\0\0\x84\x03\0\0\x84\x03\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x03\0\0\0\0\0\r\0\x1A\0\xC1\0\0\0\0\0\0\0\0\0\0\0\0A\n\0\0\0\x06\0\0\0\x06\0\0\0Ad\0\0\0(\0\0\0(\0\0\0<\0\0\0<\0\0\0Z\0\0\0Z\0\0\0") } ,)) , } ; static EN : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x02\0\0\0\x02\0\0\0\x80d\0\0\0\x0C\0\0\0\x0C\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC0\n\0\0\0\x03\0\0\0\x03\0\0\0\x80d\0\0\0\r\0\0\0\r\0\0\0") } ,)) , many : None , } ; static MK : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\n\0\0\0\x01\0\0\0\x01\0\0\0\x81d\0\0\0\x0B\0\0\0\x0B\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\r\0\xC1\n\0\0\0\x02\0\0\0\x02\0\0\0\x81d\0\0\0\x0C\0\0\0\x0C\0\0\0") } ,)) , few : None , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\x15\0\xC1\n\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0\x81d\0\0\0\x11\0\0\0\x11\0\0\0\x12\0\0\0\x12\0\0\0") } ,)) , } ; static SV : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : None , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x02\0\0\0\0\0\x15\0\xC0\n\0\0\0\x01\0\0\0\x01\0\0\0\x02\0\0\0\x02\0\0\0\x80d\0\0\0\x0B\0\0\0\x0B\0\0\0\x0C\0\0\0\x0C\0\0\0") } ,)) , two : None , few : None , many : None , } ; static CY : < icu_plurals :: provider :: OrdinalV1Marker as icu_provider :: DataMarker > :: Yokeable = icu_plurals :: provider :: PluralRulesV1 { zero : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\0\0\0\0\0\0\0\0\x07\0\0\0\x07\0\0\0\x08\0\0\0\x08\0\0\0\t\0\0\0\t\0\0\0") } ,)) , one : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x01\0\0\0\x01\0\0\0") } ,)) , two : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x02\0\0\0\x02\0\0\0") } ,)) , few : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x03\0\0\0\x03\0\0\0\x04\0\0\0\x04\0\0\0") } ,)) , many : Some (icu_plurals :: rules :: runtime :: ast :: Rule (unsafe { zerovec :: VarZeroVec :: from_bytes_unchecked (b"\x01\0\0\0\0\0\xC0\0\0\0\0\x05\0\0\0\x05\0\0\0\x06\0\0\0\x06\0\0\0") } ,)) , } ; * [& AF , & AF , & AF , & AS , & AZ , & BE , & AF , & AS , & AF , & CA , & AF , & CY , & AF , & AF , & AF , & EN , & AF , & AF , & AF , & AF , & AF , & FIL , & FIL , & FIL , & GD , & AF , & GU , & AF , & GU , & AF , & HU , & FIL , & AF , & AF , & IT , & AF , & KA , & KK , & AF , & AF , & AF , & AF , & FIL , & AF , & AF , & MK , & AF , & AF , & MR , & FIL , & AF , & NE , & AF , & AF , & OR , & AF , & AF , & AF , & AF , & FIL , & AF , & AF , & AF , & AF , & AF , & SQ , & AF , & SV , & AF , & AF , & AF , & AF , & TK , & AF , & UK , & AF , & AF , & FIL , & AF , & AF , & AF] . get_unchecked (i) }) . map (icu_provider :: AnyPayload :: from_static_ref) , _ => return Err (icu_provider :: DataErrorKind :: MissingDataKey . with_req (key , req)) , } . map (| payload | icu_provider :: AnyResponse { payload : Some (payload) , metadata : Default :: default () , }) . ok_or_else (|| icu_provider :: DataErrorKind :: MissingLocale . with_req (key , req)) } } } } # [doc (inline)] pub use __impl_any_provider as impl_any_provider ;