// This file is part of ICU4X. For terms of use, please see the file
// called LICENSE at the top level of the ICU4X source tree
// (online at: https://github.com/unicode-org/icu4x/blob/main/LICENSE ).

use icu_collections::codepointinvlist::CodePointInversionList;
use icu_experimental::transliterate::provider::Baked;
use icu_experimental::transliterate::TransliteratorBuilder;
use icu_properties::{props::BidiClass, CodePointMapData};

fn main() {
    assert_eq!(
        TransliteratorBuilder::from_rules(Baked::TRANSLITERATOR_RULES_V1_UND_UND_HIRA_T_UND_KANA)
            .load_nfc()
            .load_nfkc()
            .build()
            .unwrap()
            .transliterate("„Ç¶„Ç£„Ç≠„Éö„Éá„Ç£„Ç¢".into()),
        "„ÅÜ„ÅÉ„Åç„Å∫„Åß„ÅÉ„ÅÇ"
    );

    assert_eq!(
        TransliteratorBuilder::from_rules(Baked::TRANSLITERATOR_RULES_V1_UND_UND_KANA_T_UND_HIRA)
            .load_nfc()
            .load_nfkc()
            .build()
            .unwrap()
            .transliterate("„ÅÜ„ÅÉ„Åç„Å∫„Åß„ÅÉ„ÅÇ".into()),
        "„Ç¶„Ç£„Ç≠„Éö„Éá„Ç£„Ç¢"
    );

    // ::Lower;
    //
    // ::NFD;
    // ::[:Nonspacing Mark:] Remove;
    // ::NFC;
    //
    // ::Latin-ASCII;
    let t = TransliteratorBuilder::default()
        .lower(CodePointInversionList::all())
        .nfd(CodePointInversionList::all())
        .remove({
            use icu_properties::{props::BidiClass, CodePointMapData};
            CodePointMapData::<BidiClass>::new()
                .get_set_for_value(BidiClass::NonspacingMark)
                .to_code_point_inversion_list()
                .into_owned()
        })
        .nfc(CodePointInversionList::all())
        .call(
            Baked::TRANSLITERATOR_RULES_V1_UND_UND_T_UND_LATN_D0_ASCII,
            CodePointInversionList::all(),
        )
        .build()
        .unwrap();

    assert_eq!(t.transliterate("T√§st üòí Œ©".into()), "tast üòí œâ");

    // [√∂ {o \u0308} √ñ {O \u0308}] ‚Üí oe;
    // [√§ {a \u0308} √Ñ {A \u0308}] ‚Üí ae;
    // [√º {u \u0308} √ú {U \u0308}] ‚Üí ue;
    //
    // :: Autocomplete;
    let t = TransliteratorBuilder::default()
        .replace(&["√∂", "o\u{0308}", "√ñ", "O\u{0308}"], "oe")
        .replace(&["√§", "a\u{0308}", "√Ñ", "A\u{0308}"], "ae")
        .replace(&["√º", "u\u{0308}", "√ñ", "U\u{0308}"], "ue")
        .lower(CodePointInversionList::all())
        .nfd(CodePointInversionList::all())
        .remove(
            CodePointMapData::<BidiClass>::new()
                .get_set_for_value(BidiClass::NonspacingMark)
                .to_code_point_inversion_list()
                .into_owned(),
        )
        .nfc(CodePointInversionList::all())
        .call(
            Baked::TRANSLITERATOR_RULES_V1_UND_UND_T_UND_LATN_D0_ASCII,
            CodePointInversionList::all(),
        )
        .build()
        .unwrap();

    assert_eq!(t.transliterate("T√§st üòí Œ©".into()), "taest üòí œâ");
}
